
ControlFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e84  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2b0  0800a2b0  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2b0  0800a2b0  0001a2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b8  0800a2b8  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b8  0800a2b8  0001a2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2bc  0800a2bc  0001a2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800a2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000358c  2000009c  0800a35c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003628  0800a35c  00023628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c631  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003854  00000000  00000000  0003c6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b0  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f8  00000000  00000000  00041708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022066  00000000  00000000  00042d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014895  00000000  00000000  00064d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc641  00000000  00000000  000795fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155c3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006608  00000000  00000000  00155cb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000009c 	.word	0x2000009c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a044 	.word	0x0800a044

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a0 	.word	0x200000a0
 8000214:	0800a044 	.word	0x0800a044

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <scale_all_sensors>:
static float present_velocity_dps = 0.0f;
static float last_present_position_deg = 0.0f;
static float last_setpoint_velocity_dps = 0.0f;

void scale_all_sensors()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
	// scale motor current sense (unit:mA) and estimated average motor current with sign (using PWM ratio and setpoint PWM sign)
	float const a = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_A_L],regs[REG_CAL_CURRENT_SENSE_A_H]));
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <scale_all_sensors+0x130>)
 8000d5c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	4a48      	ldr	r2, [pc, #288]	; (8000e84 <scale_all_sensors+0x130>)
 8000d64:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	edc7 7a03 	vstr	s15, [r7, #12]
	present_motor_current_ma = (motor_current_input_adc-motor_current_input_adc_offset)/a*1000.0f*pwm_sign*pwm_ratio;
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <scale_all_sensors+0x134>)
 8000d78:	ed93 7a00 	vldr	s14, [r3]
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <scale_all_sensors+0x138>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d86:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000e90 <scale_all_sensors+0x13c>
 8000d92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <scale_all_sensors+0x140>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <scale_all_sensors+0x144>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <scale_all_sensors+0x148>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]

	// scale position (unit:degrees)
	float const min_position_adc = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_ADC_L],regs[REG_MIN_POSITION_ADC_H]));
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <scale_all_sensors+0x130>)
 8000db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <scale_all_sensors+0x130>)
 8000dba:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc8:	edc7 7a02 	vstr	s15, [r7, #8]
	float const max_position_adc = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_ADC_L],regs[REG_MAX_POSITION_ADC_H]));
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <scale_all_sensors+0x130>)
 8000dce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <scale_all_sensors+0x130>)
 8000dd6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de4:	edc7 7a01 	vstr	s15, [r7, #4]
	float const max_rotation_deg = (float)(regs[REG_MAX_ROTATION_DEG]);
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <scale_all_sensors+0x130>)
 8000dea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df6:	edc7 7a00 	vstr	s15, [r7]
	present_position_deg = fmap(position_input_adc,min_position_adc,max_position_adc,0.0f,max_rotation_deg);
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <scale_all_sensors+0x14c>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ed97 2a00 	vldr	s4, [r7]
 8000e04:	eddf 1a27 	vldr	s3, [pc, #156]	; 8000ea4 <scale_all_sensors+0x150>
 8000e08:	ed97 1a01 	vldr	s2, [r7, #4]
 8000e0c:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	f002 f9c3 	bl	800319e <fmap>
 8000e18:	eef0 7a40 	vmov.f32	s15, s0
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <scale_all_sensors+0x154>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
	// potentiometer leads maybe inverted, user can reverse polarity of potentiometer (EEPROM parameter)
	if(regs[REG_INV_ROTATION_SENSOR] > 0)
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <scale_all_sensors+0x130>)
 8000e24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <scale_all_sensors+0xec>
		present_position_deg =  max_rotation_deg-present_position_deg;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <scale_all_sensors+0x154>)
 8000e2e:	edd3 7a00 	vldr	s15, [r3]
 8000e32:	ed97 7a00 	vldr	s14, [r7]
 8000e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <scale_all_sensors+0x154>)
 8000e3c:	edc3 7a00 	vstr	s15, [r3]

	// scale voltage (unit:0.1V)
	present_voltage_0v1 = voltage_input_adc/4096.0f*3.3f*24.2f/2.2f*10.0f*VOLTAGE_CALIBRATION;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <scale_all_sensors+0x158>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000eb0 <scale_all_sensors+0x15c>
 8000e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e4e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000eb4 <scale_all_sensors+0x160>
 8000e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e56:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000eb8 <scale_all_sensors+0x164>
 8000e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e5e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000ebc <scale_all_sensors+0x168>
 8000e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e6e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ec0 <scale_all_sensors+0x16c>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <scale_all_sensors+0x170>)
 8000e78:	edc3 7a00 	vstr	s15, [r3]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000158 	.word	0x20000158
 8000e88:	200000b8 	.word	0x200000b8
 8000e8c:	200000c4 	.word	0x200000c4
 8000e90:	447a0000 	.word	0x447a0000
 8000e94:	200000c8 	.word	0x200000c8
 8000e98:	200000cc 	.word	0x200000cc
 8000e9c:	200000d0 	.word	0x200000d0
 8000ea0:	200000bc 	.word	0x200000bc
 8000ea4:	00000000 	.word	0x00000000
 8000ea8:	200000d4 	.word	0x200000d4
 8000eac:	200000c0 	.word	0x200000c0
 8000eb0:	45800000 	.word	0x45800000
 8000eb4:	40533333 	.word	0x40533333
 8000eb8:	41c1999a 	.word	0x41c1999a
 8000ebc:	400ccccd 	.word	0x400ccccd
 8000ec0:	3f8a3d71 	.word	0x3f8a3d71
 8000ec4:	200000d8 	.word	0x200000d8

08000ec8 <APP_Control_Reset>:

// called once after SW REBBOT or HW RESET, and every time entering a new control loop mode
void APP_Control_Reset()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	// reset
	entering_state = true;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <APP_Control_Reset+0x9c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <APP_Control_Reset+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	pid_reset(&pid_position);
 8000ed8:	4824      	ldr	r0, [pc, #144]	; (8000f6c <APP_Control_Reset+0xa4>)
 8000eda:	f002 f9a6 	bl	800322a <pid_reset>
	pid_reset(&pid_current);
 8000ede:	4824      	ldr	r0, [pc, #144]	; (8000f70 <APP_Control_Reset+0xa8>)
 8000ee0:	f002 f9a3 	bl	800322a <pid_reset>
	setpoint_pwm = 0.0f;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <APP_Control_Reset+0xac>)
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	setpoint_current_ma = 0.0f;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <APP_Control_Reset+0xb0>)
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
	setpoint_acceleration_dpss = 0.0f;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <APP_Control_Reset+0xb4>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
	setpoint_velocity_dps = 0.0f;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <APP_Control_Reset+0xb8>)
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	last_setpoint_velocity_dps = 0.0f;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <APP_Control_Reset+0xbc>)
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	setpoint_position_deg = present_position_deg;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <APP_Control_Reset+0xc4>)
 8000f12:	6013      	str	r3, [r2, #0]
	last_present_position_deg = present_position_deg;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <APP_Control_Reset+0xc8>)
 8000f1a:	6013      	str	r3, [r2, #0]
	// when re-entering in the control mode 'position', avoid glitch from past goal position
	regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <APP_Control_Reset+0xcc>)
 8000f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f4e:	ee17 3a90 	vmov	r3, s15
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	121b      	asrs	r3, r3, #8
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <APP_Control_Reset+0xcc>)
 8000f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	200000f0 	.word	0x200000f0
 8000f6c:	200000f4 	.word	0x200000f4
 8000f70:	20000100 	.word	0x20000100
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	200000e0 	.word	0x200000e0
 8000f7c:	200000e4 	.word	0x200000e4
 8000f80:	200000e8 	.word	0x200000e8
 8000f84:	20000114 	.word	0x20000114
 8000f88:	200000d4 	.word	0x200000d4
 8000f8c:	200000ec 	.word	0x200000ec
 8000f90:	20000110 	.word	0x20000110
 8000f94:	20000158 	.word	0x20000158

08000f98 <APP_Control_Init>:

// called once after SW REBOOT or HW RESET
void APP_Control_Init()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	// reset (EWMA) filtered sensor inputs
	motor_current_input_adc = 0.0f;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <APP_Control_Init+0x7c>)
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
	position_input_adc = 0.0f; // NOTE : init by zero will delay the present position estimation by 1 ms at least
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <APP_Control_Init+0x80>)
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
	voltage_input_adc = 0.0f; // NOTE : init by zero will delay the present voltage estimation by 1 ms at least
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <APP_Control_Init+0x84>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	motor_current_input_adc_offset = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_B_L],regs[REG_CAL_CURRENT_SENSE_B_H]));
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <APP_Control_Init+0x88>)
 8000fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	4a18      	ldr	r2, [pc, #96]	; (8001020 <APP_Control_Init+0x88>)
 8000fbe:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <APP_Control_Init+0x8c>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]

	// force motor in coast
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <APP_Control_Init+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <APP_Control_Init+0x90>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
	// start motor PWM generation
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <APP_Control_Init+0x90>)
 8000fe6:	f006 fcf1 	bl	80079cc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	480e      	ldr	r0, [pc, #56]	; (8001028 <APP_Control_Init+0x90>)
 8000fee:	f006 fced 	bl	80079cc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim6);
 8000ff2:	480e      	ldr	r0, [pc, #56]	; (800102c <APP_Control_Init+0x94>)
 8000ff4:	f006 fc26 	bl	8007844 <HAL_TIM_Base_Start>
	// start ADC
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);

	// 2ms delay for filtered sensor inputs to stabilize
	HAL_Delay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f003 fb9b 	bl	8004734 <HAL_Delay>
	scale_all_sensors();
 8000ffe:	f7ff fea9 	bl	8000d54 <scale_all_sensors>
	HAL_Delay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f003 fb96 	bl	8004734 <HAL_Delay>
	scale_all_sensors();
 8001008:	f7ff fea4 	bl	8000d54 <scale_all_sensors>

	// reset all state control loop variables
	APP_Control_Reset();
 800100c:	f7ff ff5c 	bl	8000ec8 <APP_Control_Reset>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000b8 	.word	0x200000b8
 8001018:	200000bc 	.word	0x200000bc
 800101c:	200000c0 	.word	0x200000c0
 8001020:	20000158 	.word	0x20000158
 8001024:	200000c4 	.word	0x200000c4
 8001028:	2000023c 	.word	0x2000023c
 800102c:	20002c68 	.word	0x20002c68

08001030 <APP_Control_Process>:

// called from main loop
void APP_Control_Process()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0be      	sub	sp, #248	; 0xf8
 8001034:	af00      	add	r7, sp, #0
	// apply 1ms period
	uint16_t current_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 8001036:	4bb6      	ldr	r3, [pc, #728]	; (8001310 <APP_Control_Process+0x2e0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	if(current_time_us<period_us)
 8001040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001044:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001048:	4293      	cmp	r3, r2
 800104a:	f0c1 8140 	bcc.w	80022ce <APP_Control_Process+0x129e>
		return;
	__HAL_TIM_SET_COUNTER(&htim6,(current_time_us-period_us));
 800104e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001056:	1a9a      	subs	r2, r3, r2
 8001058:	4bad      	ldr	r3, [pc, #692]	; (8001310 <APP_Control_Process+0x2e0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

	// acquire motor current, position and voltage (see ADC DMA completed conversion callback)

	// scale sensor at process rate
	scale_all_sensors();
 800105e:	f7ff fe79 	bl	8000d54 <scale_all_sensors>

	// compute velocity from position (derivative), and filter velocity (EWMA)
	float present_speed_dps_unfiltered = (present_position_deg - last_present_position_deg)*LOOP_FREQUENCY_HZ;
 8001062:	4bac      	ldr	r3, [pc, #688]	; (8001314 <APP_Control_Process+0x2e4>)
 8001064:	ed93 7a00 	vldr	s14, [r3]
 8001068:	4bab      	ldr	r3, [pc, #684]	; (8001318 <APP_Control_Process+0x2e8>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001072:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800131c <APP_Control_Process+0x2ec>
 8001076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107a:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
	last_present_position_deg =  present_position_deg;
 800107e:	4ba5      	ldr	r3, [pc, #660]	; (8001314 <APP_Control_Process+0x2e4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4aa5      	ldr	r2, [pc, #660]	; (8001318 <APP_Control_Process+0x2e8>)
 8001084:	6013      	str	r3, [r2, #0]
	present_velocity_dps = ALPHA_VELOCITY * present_speed_dps_unfiltered + (1.0f-ALPHA_VELOCITY)*present_velocity_dps;
 8001086:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800108a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001320 <APP_Control_Process+0x2f0>
 800108e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001092:	4ba4      	ldr	r3, [pc, #656]	; (8001324 <APP_Control_Process+0x2f4>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001328 <APP_Control_Process+0x2f8>
 800109c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	4b9f      	ldr	r3, [pc, #636]	; (8001324 <APP_Control_Process+0x2f4>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]

	// torque enable logic
	bool torque_enable = (regs[REG_TORQUE_ENABLE]!=0) && (regs[REG_HARDWARE_ERROR_STATUS]==0);
 80010aa:	4ba0      	ldr	r3, [pc, #640]	; (800132c <APP_Control_Process+0x2fc>)
 80010ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <APP_Control_Process+0x92>
 80010b4:	4b9d      	ldr	r3, [pc, #628]	; (800132c <APP_Control_Process+0x2fc>)
 80010b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <APP_Control_Process+0x92>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <APP_Control_Process+0x94>
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80010c8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	if(torque_enable)
 80010d4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 875a 	beq.w	8001f92 <APP_Control_Process+0xf62>
	{
		// modes & transitions
		// compute setpoint_pwm
		switch(current_control_mode)
 80010de:	4b94      	ldr	r3, [pc, #592]	; (8001330 <APP_Control_Process+0x300>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	f200 86b9 	bhi.w	8001e5a <APP_Control_Process+0xe2a>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <APP_Control_Process+0xc0>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001105 	.word	0x08001105
 80010f4:	08001355 	.word	0x08001355
 80010f8:	0800168d 	.word	0x0800168d
 80010fc:	08001b91 	.word	0x08001b91
 8001100:	08001d4f 	.word	0x08001d4f
		{
		// Simple PID from position to pwm
		// Mg92 Kp = 400 Ki = 20 Kd = 400
		case REG_CONTROL_MODE_POSITION:
			if(entering_state)
 8001104:	4b8b      	ldr	r3, [pc, #556]	; (8001334 <APP_Control_Process+0x304>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d042      	beq.n	8001192 <APP_Control_Process+0x162>
			{
				entering_state = false;
 800110c:	4b89      	ldr	r3, [pc, #548]	; (8001334 <APP_Control_Process+0x304>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001112:	4b80      	ldr	r3, [pc, #512]	; (8001314 <APP_Control_Process+0x2e4>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800111c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 3a90 	vmov	r3, s15
 8001128:	b21b      	sxth	r3, r3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b7f      	ldr	r3, [pc, #508]	; (800132c <APP_Control_Process+0x2fc>)
 800112e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <APP_Control_Process+0x2e4>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001144:	ee17 3a90 	vmov	r3, s15
 8001148:	b21b      	sxth	r3, r3
 800114a:	121b      	asrs	r3, r3, #8
 800114c:	b21b      	sxth	r3, r3
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <APP_Control_Process+0x2fc>)
 8001152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001156:	4b75      	ldr	r3, [pc, #468]	; (800132c <APP_Control_Process+0x2fc>)
 8001158:	7e9a      	ldrb	r2, [r3, #26]
 800115a:	4b74      	ldr	r3, [pc, #464]	; (800132c <APP_Control_Process+0x2fc>)
 800115c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8001160:	4b72      	ldr	r3, [pc, #456]	; (800132c <APP_Control_Process+0x2fc>)
 8001162:	7eda      	ldrb	r2, [r3, #27]
 8001164:	4b71      	ldr	r3, [pc, #452]	; (800132c <APP_Control_Process+0x2fc>)
 8001166:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <APP_Control_Process+0x2fc>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001172:	4b6e      	ldr	r3, [pc, #440]	; (800132c <APP_Control_Process+0x2fc>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 800117a:	4b6c      	ldr	r3, [pc, #432]	; (800132c <APP_Control_Process+0x2fc>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001182:	4b6a      	ldr	r3, [pc, #424]	; (800132c <APP_Control_Process+0x2fc>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 800118a:	4b62      	ldr	r3, [pc, #392]	; (8001314 <APP_Control_Process+0x2e4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6a      	ldr	r2, [pc, #424]	; (8001338 <APP_Control_Process+0x308>)
 8001190:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 8001192:	4b66      	ldr	r3, [pc, #408]	; (800132c <APP_Control_Process+0x2fc>)
 8001194:	7c5b      	ldrb	r3, [r3, #17]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	4a64      	ldr	r2, [pc, #400]	; (800132c <APP_Control_Process+0x2fc>)
 800119a:	7c12      	ldrb	r2, [r2, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 80011aa:	4b60      	ldr	r3, [pc, #384]	; (800132c <APP_Control_Process+0x2fc>)
 80011ac:	7cdb      	ldrb	r3, [r3, #19]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	4a5e      	ldr	r2, [pc, #376]	; (800132c <APP_Control_Process+0x2fc>)
 80011b2:	7c92      	ldrb	r2, [r2, #18]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 80011c2:	4b5a      	ldr	r3, [pc, #360]	; (800132c <APP_Control_Process+0x2fc>)
 80011c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	4a58      	ldr	r2, [pc, #352]	; (800132c <APP_Control_Process+0x2fc>)
 80011cc:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80011d0:	4313      	orrs	r3, r2
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800133c <APP_Control_Process+0x30c>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 80011e6:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 80011ea:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 80011ee:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80011f2:	f001 ffab 	bl	800314c <fconstrain>
 80011f6:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <APP_Control_Process+0x308>)
 80011fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fe:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <APP_Control_Process+0x308>)
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <APP_Control_Process+0x2e4>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001210:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				// compute pwm setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <APP_Control_Process+0x2fc>)
 8001216:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4a43      	ldr	r2, [pc, #268]	; (800132c <APP_Control_Process+0x2fc>)
 800121e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001222:	4313      	orrs	r3, r2
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001340 <APP_Control_Process+0x310>
 8001230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001234:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <APP_Control_Process+0x2fc>)
 800123a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	4a3a      	ldr	r2, [pc, #232]	; (800132c <APP_Control_Process+0x2fc>)
 8001242:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001246:	4313      	orrs	r3, r2
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	eddf 6a32 	vldr	s13, [pc, #200]	; 800131c <APP_Control_Process+0x2ec>
 8001254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001258:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <APP_Control_Process+0x2fc>)
 800125e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	4a31      	ldr	r2, [pc, #196]	; (800132c <APP_Control_Process+0x2fc>)
 8001266:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800126a:	4313      	orrs	r3, r2
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001274:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <APP_Control_Process+0x2fc>)
 8001282:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4a28      	ldr	r2, [pc, #160]	; (800132c <APP_Control_Process+0x2fc>)
 800128a:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 800128e:	4313      	orrs	r3, r2
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	edc7 7a08 	vstr	s15, [r7, #32]
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp(
 800129c:	eddf 2a20 	vldr	s5, [pc, #128]	; 8001320 <APP_Control_Process+0x2f0>
 80012a0:	ed97 2a08 	vldr	s4, [r7, #32]
 80012a4:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 80012a8:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 80012ac:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80012b0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80012b4:	4823      	ldr	r0, [pc, #140]	; (8001344 <APP_Control_Process+0x314>)
 80012b6:	f002 f87c 	bl	80033b2 <pid_process_antiwindup_clamp>
 80012ba:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 80012be:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001320 <APP_Control_Process+0x2f0>
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										pwm_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <APP_Control_Process+0x318>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001328 <APP_Control_Process+0x2f8>
 80012d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <APP_Control_Process+0x318>)
 80012da:	edc3 7a00 	vstr	s15, [r3]
			}
			// unused setpoints zero
			setpoint_velocity_dps = 0.0f;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <APP_Control_Process+0x31c>)
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <APP_Control_Process+0x320>)
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <APP_Control_Process+0x2fc>)
 80012f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 85a7 	beq.w	8001e48 <APP_Control_Process+0xe18>
			{
				APP_Control_Reset();
 80012fa:	f7ff fde5 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <APP_Control_Process+0x2fc>)
 8001300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001304:	461a      	mov	r2, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <APP_Control_Process+0x300>)
 8001308:	601a      	str	r2, [r3, #0]
			}
			break;
 800130a:	f000 bd9d 	b.w	8001e48 <APP_Control_Process+0xe18>
 800130e:	bf00      	nop
 8001310:	20002c68 	.word	0x20002c68
 8001314:	200000d4 	.word	0x200000d4
 8001318:	20000110 	.word	0x20000110
 800131c:	447a0000 	.word	0x447a0000
 8001320:	3df5c28f 	.word	0x3df5c28f
 8001324:	2000010c 	.word	0x2000010c
 8001328:	3f6147ae 	.word	0x3f6147ae
 800132c:	20000158 	.word	0x20000158
 8001330:	20000004 	.word	0x20000004
 8001334:	20000000 	.word	0x20000000
 8001338:	200000ec 	.word	0x200000ec
 800133c:	3dcccccd 	.word	0x3dcccccd
 8001340:	42c80000 	.word	0x42c80000
 8001344:	200000f4 	.word	0x200000f4
 8001348:	200000dc 	.word	0x200000dc
 800134c:	200000e8 	.word	0x200000e8
 8001350:	200000e0 	.word	0x200000e0


		case REG_CONTROL_MODE_POSITION_TORQUE:
			if(entering_state)
 8001354:	4bbb      	ldr	r3, [pc, #748]	; (8001644 <APP_Control_Process+0x614>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d044      	beq.n	80013e6 <APP_Control_Process+0x3b6>
			{
				entering_state = false;
 800135c:	4bb9      	ldr	r3, [pc, #740]	; (8001644 <APP_Control_Process+0x614>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001362:	4bb9      	ldr	r3, [pc, #740]	; (8001648 <APP_Control_Process+0x618>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800136c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001374:	ee17 3a90 	vmov	r3, s15
 8001378:	b21b      	sxth	r3, r3
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4bb3      	ldr	r3, [pc, #716]	; (800164c <APP_Control_Process+0x61c>)
 800137e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001382:	4bb1      	ldr	r3, [pc, #708]	; (8001648 <APP_Control_Process+0x618>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800138c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001394:	ee17 3a90 	vmov	r3, s15
 8001398:	b21b      	sxth	r3, r3
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	b21b      	sxth	r3, r3
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4baa      	ldr	r3, [pc, #680]	; (800164c <APP_Control_Process+0x61c>)
 80013a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 80013a6:	4ba9      	ldr	r3, [pc, #676]	; (800164c <APP_Control_Process+0x61c>)
 80013a8:	7e1a      	ldrb	r2, [r3, #24]
 80013aa:	4ba8      	ldr	r3, [pc, #672]	; (800164c <APP_Control_Process+0x61c>)
 80013ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 80013b0:	4ba6      	ldr	r3, [pc, #664]	; (800164c <APP_Control_Process+0x61c>)
 80013b2:	7e5a      	ldrb	r2, [r3, #25]
 80013b4:	4ba5      	ldr	r3, [pc, #660]	; (800164c <APP_Control_Process+0x61c>)
 80013b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 80013ba:	4ba4      	ldr	r3, [pc, #656]	; (800164c <APP_Control_Process+0x61c>)
 80013bc:	7e9a      	ldrb	r2, [r3, #26]
 80013be:	4ba3      	ldr	r3, [pc, #652]	; (800164c <APP_Control_Process+0x61c>)
 80013c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 80013c4:	4ba1      	ldr	r3, [pc, #644]	; (800164c <APP_Control_Process+0x61c>)
 80013c6:	7eda      	ldrb	r2, [r3, #27]
 80013c8:	4ba0      	ldr	r3, [pc, #640]	; (800164c <APP_Control_Process+0x61c>)
 80013ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0.0f;
 80013ce:	4b9f      	ldr	r3, [pc, #636]	; (800164c <APP_Control_Process+0x61c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0.0f;
 80013d6:	4b9d      	ldr	r3, [pc, #628]	; (800164c <APP_Control_Process+0x61c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 80013de:	4b9a      	ldr	r3, [pc, #616]	; (8001648 <APP_Control_Process+0x618>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a9b      	ldr	r2, [pc, #620]	; (8001650 <APP_Control_Process+0x620>)
 80013e4:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 80013e6:	4b99      	ldr	r3, [pc, #612]	; (800164c <APP_Control_Process+0x61c>)
 80013e8:	7c5b      	ldrb	r3, [r3, #17]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4a97      	ldr	r2, [pc, #604]	; (800164c <APP_Control_Process+0x61c>)
 80013ee:	7c12      	ldrb	r2, [r2, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 80013fe:	4b93      	ldr	r3, [pc, #588]	; (800164c <APP_Control_Process+0x61c>)
 8001400:	7cdb      	ldrb	r3, [r3, #19]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	4a91      	ldr	r2, [pc, #580]	; (800164c <APP_Control_Process+0x61c>)
 8001406:	7c92      	ldrb	r2, [r2, #18]
 8001408:	4313      	orrs	r3, r2
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001412:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 8001416:	4b8d      	ldr	r3, [pc, #564]	; (800164c <APP_Control_Process+0x61c>)
 8001418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	4a8b      	ldr	r2, [pc, #556]	; (800164c <APP_Control_Process+0x61c>)
 8001420:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8001424:	4313      	orrs	r3, r2
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001654 <APP_Control_Process+0x624>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 800143a:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 800143e:	edd7 0a1c 	vldr	s1, [r7, #112]	; 0x70
 8001442:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8001446:	f001 fe81 	bl	800314c <fconstrain>
 800144a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 800144e:	4a80      	ldr	r2, [pc, #512]	; (8001650 <APP_Control_Process+0x620>)
 8001450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001452:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8001454:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <APP_Control_Process+0x620>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <APP_Control_Process+0x618>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8001468:	4b78      	ldr	r3, [pc, #480]	; (800164c <APP_Control_Process+0x61c>)
 800146a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	4a76      	ldr	r2, [pc, #472]	; (800164c <APP_Control_Process+0x61c>)
 8001472:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001476:	4313      	orrs	r3, r2
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001658 <APP_Control_Process+0x628>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 800148c:	4b6f      	ldr	r3, [pc, #444]	; (800164c <APP_Control_Process+0x61c>)
 800148e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4a6d      	ldr	r2, [pc, #436]	; (800164c <APP_Control_Process+0x61c>)
 8001496:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800149a:	4313      	orrs	r3, r2
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a4:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800165c <APP_Control_Process+0x62c>
 80014a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ac:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 80014b0:	4b66      	ldr	r3, [pc, #408]	; (800164c <APP_Control_Process+0x61c>)
 80014b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4a64      	ldr	r2, [pc, #400]	; (800164c <APP_Control_Process+0x61c>)
 80014ba:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80014be:	4313      	orrs	r3, r2
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 80014d4:	4b5d      	ldr	r3, [pc, #372]	; (800164c <APP_Control_Process+0x61c>)
 80014d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	4a5b      	ldr	r2, [pc, #364]	; (800164c <APP_Control_Process+0x61c>)
 80014de:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80014e2:	4313      	orrs	r3, r2
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ec:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp(
 80014f0:	eddf 2a5b 	vldr	s5, [pc, #364]	; 8001660 <APP_Control_Process+0x630>
 80014f4:	ed97 2a15 	vldr	s4, [r7, #84]	; 0x54
 80014f8:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 80014fc:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8001500:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 8001504:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001508:	4856      	ldr	r0, [pc, #344]	; (8001664 <APP_Control_Process+0x634>)
 800150a:	f001 ff52 	bl	80033b2 <pid_process_antiwindup_clamp>
 800150e:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8001512:	eddf 7a55 	vldr	s15, [pc, #340]	; 8001668 <APP_Control_Process+0x638>
 8001516:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										current_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 800151a:	4b54      	ldr	r3, [pc, #336]	; (800166c <APP_Control_Process+0x63c>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001670 <APP_Control_Process+0x640>
 8001524:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <APP_Control_Process+0x63c>)
 800152e:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <APP_Control_Process+0x63c>)
 8001534:	ed93 7a00 	vldr	s14, [r3]
 8001538:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <APP_Control_Process+0x644>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001542:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <APP_Control_Process+0x61c>)
 8001548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	4a3f      	ldr	r2, [pc, #252]	; (800164c <APP_Control_Process+0x61c>)
 8001550:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001554:	4313      	orrs	r3, r2
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800165c <APP_Control_Process+0x62c>
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <APP_Control_Process+0x61c>)
 800156c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	4a36      	ldr	r2, [pc, #216]	; (800164c <APP_Control_Process+0x61c>)
 8001574:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001578:	4313      	orrs	r3, r2
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001582:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001658 <APP_Control_Process+0x628>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <APP_Control_Process+0x61c>)
 8001590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	4a2d      	ldr	r2, [pc, #180]	; (800164c <APP_Control_Process+0x61c>)
 8001598:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800159c:	4313      	orrs	r3, r2
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001658 <APP_Control_Process+0x628>
 80015aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <APP_Control_Process+0x61c>)
 80015b4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <APP_Control_Process+0x61c>)
 80015bc:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 80015c0:	4313      	orrs	r3, r2
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <APP_Control_Process+0x63c>)
 80015d0:	ed93 7a00 	vldr	s14, [r3]
 80015d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	eeb0 3a67 	vmov.f32	s6, s15
 80015e0:	eddf 2a25 	vldr	s5, [pc, #148]	; 8001678 <APP_Control_Process+0x648>
 80015e4:	ed97 2a10 	vldr	s4, [r7, #64]	; 0x40
 80015e8:	eddf 1a23 	vldr	s3, [pc, #140]	; 8001678 <APP_Control_Process+0x648>
 80015ec:	ed97 1a12 	vldr	s2, [r7, #72]	; 0x48
 80015f0:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80015f4:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80015f8:	4820      	ldr	r0, [pc, #128]	; (800167c <APP_Control_Process+0x64c>)
 80015fa:	f001 fe2c 	bl	8003256 <pid_process_antiwindup_clamp_with_ff>
 80015fe:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001602:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001660 <APP_Control_Process+0x630>
 8001606:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <APP_Control_Process+0x650>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001684 <APP_Control_Process+0x654>
 8001614:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001618:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <APP_Control_Process+0x650>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION_TORQUE)
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <APP_Control_Process+0x61c>)
 8001624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001628:	2b01      	cmp	r3, #1
 800162a:	f000 840f 	beq.w	8001e4c <APP_Control_Process+0xe1c>
			{
				APP_Control_Reset();
 800162e:	f7ff fc4b 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <APP_Control_Process+0x61c>)
 8001634:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001638:	461a      	mov	r2, r3
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <APP_Control_Process+0x658>)
 800163c:	601a      	str	r2, [r3, #0]
			}
			break;
 800163e:	f000 bc05 	b.w	8001e4c <APP_Control_Process+0xe1c>
 8001642:	bf00      	nop
 8001644:	20000000 	.word	0x20000000
 8001648:	200000d4 	.word	0x200000d4
 800164c:	20000158 	.word	0x20000158
 8001650:	200000ec 	.word	0x200000ec
 8001654:	3dcccccd 	.word	0x3dcccccd
 8001658:	42c80000 	.word	0x42c80000
 800165c:	447a0000 	.word	0x447a0000
 8001660:	3df5c28f 	.word	0x3df5c28f
 8001664:	200000f4 	.word	0x200000f4
 8001668:	3f75c28f 	.word	0x3f75c28f
 800166c:	200000e0 	.word	0x200000e0
 8001670:	3d23d710 	.word	0x3d23d710
 8001674:	200000d0 	.word	0x200000d0
 8001678:	00000000 	.word	0x00000000
 800167c:	20000100 	.word	0x20000100
 8001680:	200000dc 	.word	0x200000dc
 8001684:	3f6147ae 	.word	0x3f6147ae
 8001688:	20000004 	.word	0x20000004


		case REG_CONTROL_MODE_VELOCITY_PROFIL_POSITION_TORQUE:
			if(entering_state)
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <APP_Control_Process+0x7d4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d046      	beq.n	8001722 <APP_Control_Process+0x6f2>
			{
				entering_state = false;
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <APP_Control_Process+0x7d4>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 800169a:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <APP_Control_Process+0x7d8>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ac:	ee17 3a90 	vmov	r3, s15
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <APP_Control_Process+0x7dc>)
 80016b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 80016ba:	4b53      	ldr	r3, [pc, #332]	; (8001808 <APP_Control_Process+0x7d8>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016cc:	ee17 3a90 	vmov	r3, s15
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	121b      	asrs	r3, r3, #8
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <APP_Control_Process+0x7dc>)
 80016da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 80016de:	4b4b      	ldr	r3, [pc, #300]	; (800180c <APP_Control_Process+0x7dc>)
 80016e0:	7d1a      	ldrb	r2, [r3, #20]
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <APP_Control_Process+0x7dc>)
 80016e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <APP_Control_Process+0x7dc>)
 80016ea:	7d5a      	ldrb	r2, [r3, #21]
 80016ec:	4b47      	ldr	r3, [pc, #284]	; (800180c <APP_Control_Process+0x7dc>)
 80016ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 80016f2:	4b46      	ldr	r3, [pc, #280]	; (800180c <APP_Control_Process+0x7dc>)
 80016f4:	7e1a      	ldrb	r2, [r3, #24]
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <APP_Control_Process+0x7dc>)
 80016f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <APP_Control_Process+0x7dc>)
 80016fe:	7e5a      	ldrb	r2, [r3, #25]
 8001700:	4b42      	ldr	r3, [pc, #264]	; (800180c <APP_Control_Process+0x7dc>)
 8001702:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <APP_Control_Process+0x7dc>)
 8001708:	7e9a      	ldrb	r2, [r3, #26]
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <APP_Control_Process+0x7dc>)
 800170c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <APP_Control_Process+0x7dc>)
 8001712:	7eda      	ldrb	r2, [r3, #27]
 8001714:	4b3d      	ldr	r3, [pc, #244]	; (800180c <APP_Control_Process+0x7dc>)
 8001716:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <APP_Control_Process+0x7d8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <APP_Control_Process+0x7e0>)
 8001720:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <APP_Control_Process+0x7dc>)
 8001724:	7c5b      	ldrb	r3, [r3, #17]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <APP_Control_Process+0x7dc>)
 800172a:	7c12      	ldrb	r2, [r2, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001736:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <APP_Control_Process+0x7dc>)
 800173c:	7cdb      	ldrb	r3, [r3, #19]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	4a32      	ldr	r2, [pc, #200]	; (800180c <APP_Control_Process+0x7dc>)
 8001742:	7c92      	ldrb	r2, [r2, #18]
 8001744:	4313      	orrs	r3, r2
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 8001752:	4b2e      	ldr	r3, [pc, #184]	; (800180c <APP_Control_Process+0x7dc>)
 8001754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4a2c      	ldr	r2, [pc, #176]	; (800180c <APP_Control_Process+0x7dc>)
 800175c:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8001760:	4313      	orrs	r3, r2
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001814 <APP_Control_Process+0x7e4>
 800176e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001772:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 8001776:	ed97 1a31 	vldr	s2, [r7, #196]	; 0xc4
 800177a:	edd7 0a32 	vldr	s1, [r7, #200]	; 0xc8
 800177e:	ed97 0a30 	vldr	s0, [r7, #192]	; 0xc0
 8001782:	f001 fce3 	bl	800314c <fconstrain>
 8001786:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
				// compute position setpoint from goal position
				float const max_velocity_dps = (float)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <APP_Control_Process+0x7dc>)
 800178c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <APP_Control_Process+0x7dc>)
 8001794:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 8001798:	4313      	orrs	r3, r2
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				float const max_acceleration_dpss = (float)(MAKE_SHORT(regs[REG_MAX_ACCELERATION_DPSS_L],regs[REG_MAX_ACCELERATION_DPSS_H]));
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <APP_Control_Process+0x7dc>)
 80017a8:	7ddb      	ldrb	r3, [r3, #23]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <APP_Control_Process+0x7dc>)
 80017ae:	7d92      	ldrb	r2, [r2, #22]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ba:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
				// trapezoidal profile for setpoint position
				// compute remaining distance between setpoint position to goal position
				float const remaining_distance_deg = goal_position_deg - setpoint_position_deg;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <APP_Control_Process+0x7e0>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80017c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017cc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				// compute maximun velocity to be able to stop at goal position
				float vmax = sqrtf( 2.0f * max_acceleration_dpss * fabsf(remaining_distance_deg) );
 80017d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80017d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017d8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80017dc:	eef0 7ae7 	vabs.f32	s15, s15
 80017e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	f008 fbd6 	bl	8009f98 <sqrtf>
 80017ec:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
				// restore sign
				vmax = ( remaining_distance_deg>0.0f) ? vmax : -vmax;
 80017f0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80017f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	dd0c      	ble.n	8001818 <APP_Control_Process+0x7e8>
 80017fe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001802:	e00d      	b.n	8001820 <APP_Control_Process+0x7f0>
 8001804:	20000000 	.word	0x20000000
 8001808:	200000d4 	.word	0x200000d4
 800180c:	20000158 	.word	0x20000158
 8001810:	200000ec 	.word	0x200000ec
 8001814:	3dcccccd 	.word	0x3dcccccd
 8001818:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800181c:	eef1 7a67 	vneg.f32	s15, s15
 8001820:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
				// limit maximum velocity, when far from stop
				vmax = fconstrain(vmax,-max_velocity_dps,max_velocity_dps);
 8001824:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001828:	eef1 7a67 	vneg.f32	s15, s15
 800182c:	ed97 1a2f 	vldr	s2, [r7, #188]	; 0xbc
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8001838:	f001 fc88 	bl	800314c <fconstrain>
 800183c:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
				// compute distance between maximun velocity and current velocity
				float delta_v = vmax - setpoint_velocity_dps;
 8001840:	4bbf      	ldr	r3, [pc, #764]	; (8001b40 <APP_Control_Process+0xb10>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800184a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
				// now compute new velocity according acceleration
				setpoint_velocity_dps += fconstrain(delta_v, (-max_acceleration_dpss/LOOP_FREQUENCY_HZ), (max_acceleration_dpss/LOOP_FREQUENCY_HZ));
 8001852:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001856:	eef1 7a67 	vneg.f32	s15, s15
 800185a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001b44 <APP_Control_Process+0xb14>
 800185e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001862:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001866:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001b44 <APP_Control_Process+0xb14>
 800186a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800186e:	eeb0 1a46 	vmov.f32	s2, s12
 8001872:	eef0 0a66 	vmov.f32	s1, s13
 8001876:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 800187a:	f001 fc67 	bl	800314c <fconstrain>
 800187e:	eeb0 7a40 	vmov.f32	s14, s0
 8001882:	4baf      	ldr	r3, [pc, #700]	; (8001b40 <APP_Control_Process+0xb10>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188c:	4bac      	ldr	r3, [pc, #688]	; (8001b40 <APP_Control_Process+0xb10>)
 800188e:	edc3 7a00 	vstr	s15, [r3]
				// now compute new position
				setpoint_position_deg += (setpoint_velocity_dps/LOOP_FREQUENCY_HZ);
 8001892:	4bab      	ldr	r3, [pc, #684]	; (8001b40 <APP_Control_Process+0xb10>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001b44 <APP_Control_Process+0xb14>
 800189c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018a0:	4ba9      	ldr	r3, [pc, #676]	; (8001b48 <APP_Control_Process+0xb18>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018aa:	4ba7      	ldr	r3, [pc, #668]	; (8001b48 <APP_Control_Process+0xb18>)
 80018ac:	edc3 7a00 	vstr	s15, [r3]
				// now compute acceleration
				setpoint_acceleration_dpss = (setpoint_velocity_dps - last_setpoint_velocity_dps)*LOOP_FREQUENCY_HZ;
 80018b0:	4ba3      	ldr	r3, [pc, #652]	; (8001b40 <APP_Control_Process+0xb10>)
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	4ba5      	ldr	r3, [pc, #660]	; (8001b4c <APP_Control_Process+0xb1c>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001b44 <APP_Control_Process+0xb14>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	4ba1      	ldr	r3, [pc, #644]	; (8001b50 <APP_Control_Process+0xb20>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]
				last_setpoint_velocity_dps =  setpoint_velocity_dps;
 80018ce:	4b9c      	ldr	r3, [pc, #624]	; (8001b40 <APP_Control_Process+0xb10>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a9e      	ldr	r2, [pc, #632]	; (8001b4c <APP_Control_Process+0xb1c>)
 80018d4:	6013      	str	r3, [r2, #0]
				// compute current setpoint from position setpoint using a PID position and velocity/acceleration feed forwards
				float const pid_vel_kff = (float)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H]))/1000.0f;
 80018d6:	4b9f      	ldr	r3, [pc, #636]	; (8001b54 <APP_Control_Process+0xb24>)
 80018d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	4a9d      	ldr	r2, [pc, #628]	; (8001b54 <APP_Control_Process+0xb24>)
 80018e0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80018e4:	4313      	orrs	r3, r2
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ee:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001b44 <APP_Control_Process+0xb14>
 80018f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
				float const pid_acc_kff = (float)(MAKE_SHORT(regs[REG_PID_ACCELERATION_KFF_L],regs[REG_PID_ACCELERATION_KFF_H]))/100000.0f;
 80018fa:	4b96      	ldr	r3, [pc, #600]	; (8001b54 <APP_Control_Process+0xb24>)
 80018fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4a94      	ldr	r2, [pc, #592]	; (8001b54 <APP_Control_Process+0xb24>)
 8001904:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001908:	4313      	orrs	r3, r2
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001b58 <APP_Control_Process+0xb28>
 8001916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				float const velocity_feed_forward = pid_vel_kff * setpoint_velocity_dps;
 800191e:	4b88      	ldr	r3, [pc, #544]	; (8001b40 <APP_Control_Process+0xb10>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				float const acceleration_feed_forward = pid_acc_kff * setpoint_acceleration_dpss;
 8001930:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <APP_Control_Process+0xb20>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <APP_Control_Process+0xb18>)
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	4b84      	ldr	r3, [pc, #528]	; (8001b5c <APP_Control_Process+0xb2c>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001952:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8001956:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <APP_Control_Process+0xb24>)
 8001958:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	4a7d      	ldr	r2, [pc, #500]	; (8001b54 <APP_Control_Process+0xb24>)
 8001960:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001964:	4313      	orrs	r3, r2
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196e:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001b60 <APP_Control_Process+0xb30>
 8001972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001976:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 800197a:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <APP_Control_Process+0xb24>)
 800197c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	4a74      	ldr	r2, [pc, #464]	; (8001b54 <APP_Control_Process+0xb24>)
 8001984:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001988:	4313      	orrs	r3, r2
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001992:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001b44 <APP_Control_Process+0xb14>
 8001996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <APP_Control_Process+0xb24>)
 80019a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	4a6b      	ldr	r2, [pc, #428]	; (8001b54 <APP_Control_Process+0xb24>)
 80019a8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80019ac:	4313      	orrs	r3, r2
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019be:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 80019c2:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <APP_Control_Process+0xb24>)
 80019c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	4a62      	ldr	r2, [pc, #392]	; (8001b54 <APP_Control_Process+0xb24>)
 80019cc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80019d0:	4313      	orrs	r3, r2
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 80019de:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80019e2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	eeb0 3a67 	vmov.f32	s6, s15
 80019ee:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8001b64 <APP_Control_Process+0xb34>
 80019f2:	ed97 2a22 	vldr	s4, [r7, #136]	; 0x88
 80019f6:	edd7 1a23 	vldr	s3, [r7, #140]	; 0x8c
 80019fa:	ed97 1a24 	vldr	s2, [r7, #144]	; 0x90
 80019fe:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001a02:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8001a06:	4858      	ldr	r0, [pc, #352]	; (8001b68 <APP_Control_Process+0xb38>)
 8001a08:	f001 fc25 	bl	8003256 <pid_process_antiwindup_clamp_with_ff>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8001a10:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001b6c <APP_Control_Process+0xb3c>
 8001a14:	ee27 7a27 	vmul.f32	s14, s14, s15
										current_limit,
										ALPHA_VELOCITY,
										velocity_feed_forward+acceleration_feed_forward
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8001a18:	4b55      	ldr	r3, [pc, #340]	; (8001b70 <APP_Control_Process+0xb40>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001b74 <APP_Control_Process+0xb44>
 8001a22:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8001a2a:	4b51      	ldr	r3, [pc, #324]	; (8001b70 <APP_Control_Process+0xb40>)
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <APP_Control_Process+0xb40>)
 8001a32:	ed93 7a00 	vldr	s14, [r3]
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <APP_Control_Process+0xb48>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a40:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <APP_Control_Process+0xb24>)
 8001a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4a41      	ldr	r2, [pc, #260]	; (8001b54 <APP_Control_Process+0xb24>)
 8001a4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001a52:	4313      	orrs	r3, r2
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001b44 <APP_Control_Process+0xb14>
 8001a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a64:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <APP_Control_Process+0xb24>)
 8001a6a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	4a38      	ldr	r2, [pc, #224]	; (8001b54 <APP_Control_Process+0xb24>)
 8001a72:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001a76:	4313      	orrs	r3, r2
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a80:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001b60 <APP_Control_Process+0xb30>
 8001a84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a88:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <APP_Control_Process+0xb24>)
 8001a8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <APP_Control_Process+0xb24>)
 8001a96:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001b60 <APP_Control_Process+0xb30>
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <APP_Control_Process+0xb24>)
 8001ab2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <APP_Control_Process+0xb24>)
 8001aba:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <APP_Control_Process+0xb40>)
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	eeb0 3a67 	vmov.f32	s6, s15
 8001ade:	eddf 2a27 	vldr	s5, [pc, #156]	; 8001b7c <APP_Control_Process+0xb4c>
 8001ae2:	ed97 2a1d 	vldr	s4, [r7, #116]	; 0x74
 8001ae6:	eddf 1a25 	vldr	s3, [pc, #148]	; 8001b7c <APP_Control_Process+0xb4c>
 8001aea:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 8001aee:	edd7 0a20 	vldr	s1, [r7, #128]	; 0x80
 8001af2:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8001af6:	4822      	ldr	r0, [pc, #136]	; (8001b80 <APP_Control_Process+0xb50>)
 8001af8:	f001 fbad 	bl	8003256 <pid_process_antiwindup_clamp_with_ff>
 8001afc:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001b00:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001b64 <APP_Control_Process+0xb34>
 8001b04:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <APP_Control_Process+0xb54>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001b88 <APP_Control_Process+0xb58>
 8001b12:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <APP_Control_Process+0xb54>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_VELOCITY_PROFIL_POSITION_TORQUE)
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <APP_Control_Process+0xb24>)
 8001b22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	f000 8192 	beq.w	8001e50 <APP_Control_Process+0xe20>
			{
				APP_Control_Reset();
 8001b2c:	f7ff f9cc 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <APP_Control_Process+0xb24>)
 8001b32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <APP_Control_Process+0xb5c>)
 8001b3a:	601a      	str	r2, [r3, #0]
			}
			break;
 8001b3c:	e188      	b.n	8001e50 <APP_Control_Process+0xe20>
 8001b3e:	bf00      	nop
 8001b40:	200000e8 	.word	0x200000e8
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	200000ec 	.word	0x200000ec
 8001b4c:	20000114 	.word	0x20000114
 8001b50:	200000e4 	.word	0x200000e4
 8001b54:	20000158 	.word	0x20000158
 8001b58:	47c35000 	.word	0x47c35000
 8001b5c:	200000d4 	.word	0x200000d4
 8001b60:	42c80000 	.word	0x42c80000
 8001b64:	3df5c28f 	.word	0x3df5c28f
 8001b68:	200000f4 	.word	0x200000f4
 8001b6c:	3f75c28f 	.word	0x3f75c28f
 8001b70:	200000e0 	.word	0x200000e0
 8001b74:	3d23d710 	.word	0x3d23d710
 8001b78:	200000d0 	.word	0x200000d0
 8001b7c:	00000000 	.word	0x00000000
 8001b80:	20000100 	.word	0x20000100
 8001b84:	200000dc 	.word	0x200000dc
 8001b88:	3f6147ae 	.word	0x3f6147ae
 8001b8c:	20000004 	.word	0x20000004

		case REG_CONTROL_MODE_CURRENT:
			if(entering_state)
 8001b90:	4bb5      	ldr	r3, [pc, #724]	; (8001e68 <APP_Control_Process+0xe38>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03e      	beq.n	8001c16 <APP_Control_Process+0xbe6>
			{
				entering_state = false;
 8001b98:	4bb3      	ldr	r3, [pc, #716]	; (8001e68 <APP_Control_Process+0xe38>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001b9e:	4bb3      	ldr	r3, [pc, #716]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001ba6:	4bb1      	ldr	r3, [pc, #708]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001bae:	4baf      	ldr	r3, [pc, #700]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001bb0:	7e9a      	ldrb	r2, [r3, #26]
 8001bb2:	4bae      	ldr	r3, [pc, #696]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001bb4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8001bb8:	4bac      	ldr	r3, [pc, #688]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001bba:	7eda      	ldrb	r2, [r3, #27]
 8001bbc:	4bab      	ldr	r3, [pc, #684]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001bbe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001bc2:	4bab      	ldr	r3, [pc, #684]	; (8001e70 <APP_Control_Process+0xe40>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd4:	ee17 3a90 	vmov	r3, s15
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4ba3      	ldr	r3, [pc, #652]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001be2:	4ba3      	ldr	r3, [pc, #652]	; (8001e70 <APP_Control_Process+0xe40>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf4:	ee17 3a90 	vmov	r3, s15
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	121b      	asrs	r3, r3, #8
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b9a      	ldr	r3, [pc, #616]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001c06:	4b99      	ldr	r3, [pc, #612]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001c0e:	4b97      	ldr	r3, [pc, #604]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			{
				float const goal_current = (int16_t)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8001c16:	4b95      	ldr	r3, [pc, #596]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c22:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				//float const current_limit = (float)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
				//setpoint_current_ma = fconstrain(goal_current,-current_limit,current_limit);
				setpoint_current_ma = goal_current;
 8001c38:	4a8e      	ldr	r2, [pc, #568]	; (8001e74 <APP_Control_Process+0xe44>)
 8001c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c3e:	6013      	str	r3, [r2, #0]
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001c40:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <APP_Control_Process+0xe44>)
 8001c42:	ed93 7a00 	vldr	s14, [r3]
 8001c46:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <APP_Control_Process+0xe48>)
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c50:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/100.0f;
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	4a83      	ldr	r2, [pc, #524]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c5e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001c62:	4313      	orrs	r3, r2
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6c:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001e7c <APP_Control_Process+0xe4c>
 8001c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c74:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/1000.0f;
 8001c78:	4b7c      	ldr	r3, [pc, #496]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c7a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c82:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001c86:	4313      	orrs	r3, r2
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c90:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001e80 <APP_Control_Process+0xe50>
 8001c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c98:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8001c9c:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	4a71      	ldr	r2, [pc, #452]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001ca6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001caa:	4313      	orrs	r3, r2
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb4:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001e7c <APP_Control_Process+0xe4c>
 8001cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cbc:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001cc2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4a68      	ldr	r2, [pc, #416]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001cca:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001cdc:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <APP_Control_Process+0xe44>)
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	eeb0 3a67 	vmov.f32	s6, s15
 8001cee:	eddf 2a65 	vldr	s5, [pc, #404]	; 8001e84 <APP_Control_Process+0xe54>
 8001cf2:	ed97 2a33 	vldr	s4, [r7, #204]	; 0xcc
 8001cf6:	eddf 1a63 	vldr	s3, [pc, #396]	; 8001e84 <APP_Control_Process+0xe54>
 8001cfa:	ed97 1a35 	vldr	s2, [r7, #212]	; 0xd4
 8001cfe:	edd7 0a36 	vldr	s1, [r7, #216]	; 0xd8
 8001d02:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 8001d06:	4860      	ldr	r0, [pc, #384]	; (8001e88 <APP_Control_Process+0xe58>)
 8001d08:	f001 faa5 	bl	8003256 <pid_process_antiwindup_clamp_with_ff>
 8001d0c:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001d10:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001e8c <APP_Control_Process+0xe5c>
 8001d14:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001d18:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <APP_Control_Process+0xe60>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001e94 <APP_Control_Process+0xe64>
 8001d22:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001d2a:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <APP_Control_Process+0xe60>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_CURRENT)
 8001d30:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	f000 808c 	beq.w	8001e54 <APP_Control_Process+0xe24>
			{
				APP_Control_Reset();
 8001d3c:	f7ff f8c4 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001d40:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <APP_Control_Process+0xe68>)
 8001d4a:	601a      	str	r2, [r3, #0]
			}
			break;
 8001d4c:	e082      	b.n	8001e54 <APP_Control_Process+0xe24>


		case REG_CONTROL_MODE_PWM:
			if(entering_state)
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <APP_Control_Process+0xe38>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03c      	beq.n	8001dd0 <APP_Control_Process+0xda0>
			{
				entering_state = false;
 8001d56:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <APP_Control_Process+0xe38>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = 0;
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = 0;
 8001d64:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001d6c:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <APP_Control_Process+0xe40>)
 8001d6e:	edd3 7a00 	vldr	s15, [r3]
 8001d72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001d8c:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <APP_Control_Process+0xe40>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9e:	ee17 3a90 	vmov	r3, s15
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	121b      	asrs	r3, r3, #8
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			// compute pwm setpoint from goal pwm
			{
				float const goal_pwm = (int16_t)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001dd2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001ddc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dee:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_MAX_PWM_100_L],regs[REG_MAX_PWM_100_H]));
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001df4:	7edb      	ldrb	r3, [r3, #27]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001dfa:	7e92      	ldrb	r2, [r2, #26]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				setpoint_pwm = fconstrain(goal_pwm,-pwm_limit,pwm_limit);
 8001e0a:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001e0e:	eef1 7a67 	vneg.f32	s15, s15
 8001e12:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	ed97 0a3a 	vldr	s0, [r7, #232]	; 0xe8
 8001e1e:	f001 f995 	bl	800314c <fconstrain>
 8001e22:	eef0 7a40 	vmov.f32	s15, s0
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <APP_Control_Process+0xe60>)
 8001e28:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_PWM)
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d010      	beq.n	8001e58 <APP_Control_Process+0xe28>
			{
				APP_Control_Reset();
 8001e36:	f7ff f847 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <APP_Control_Process+0xe68>)
 8001e44:	601a      	str	r2, [r3, #0]
			}
			break;
 8001e46:	e007      	b.n	8001e58 <APP_Control_Process+0xe28>
			break;
 8001e48:	bf00      	nop
 8001e4a:	e006      	b.n	8001e5a <APP_Control_Process+0xe2a>
			break;
 8001e4c:	bf00      	nop
 8001e4e:	e004      	b.n	8001e5a <APP_Control_Process+0xe2a>
			break;
 8001e50:	bf00      	nop
 8001e52:	e002      	b.n	8001e5a <APP_Control_Process+0xe2a>
			break;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <APP_Control_Process+0xe2a>
			break;
 8001e58:	bf00      	nop
		}

		// motor leads maybe inverted, user can reverse polarity of motor (EEPROM parameter)
		float const pwm_inv = regs[REG_INV_ROTATION_MOTOR] > 0 ? -1.0f : 1.0f;
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <APP_Control_Process+0xe3c>)
 8001e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01d      	beq.n	8001ea0 <APP_Control_Process+0xe70>
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <APP_Control_Process+0xe6c>)
 8001e66:	e01d      	b.n	8001ea4 <APP_Control_Process+0xe74>
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000158 	.word	0x20000158
 8001e70:	200000d4 	.word	0x200000d4
 8001e74:	200000e0 	.word	0x200000e0
 8001e78:	200000d0 	.word	0x200000d0
 8001e7c:	42c80000 	.word	0x42c80000
 8001e80:	447a0000 	.word	0x447a0000
 8001e84:	00000000 	.word	0x00000000
 8001e88:	20000100 	.word	0x20000100
 8001e8c:	3df5c28f 	.word	0x3df5c28f
 8001e90:	200000dc 	.word	0x200000dc
 8001e94:	3f6147ae 	.word	0x3f6147ae
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	bf800000 	.word	0xbf800000
 8001ea0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ea4:	61fb      	str	r3, [r7, #28]
		float pwm = pwm_inv * setpoint_pwm; // [-100 100]
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <APP_Control_Process+0xfb0>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb4:	edc7 7a06 	vstr	s15, [r7, #24]

		// apply pwm
		if(pwm>=0.0f)
 8001eb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	db32      	blt.n	8001f2c <APP_Control_Process+0xefc>
		{
			// scale PWM from [-100,+100] to CCRx
			uint16_t const CCR1 = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	3301      	adds	r3, #1
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eda:	ee17 3a90 	vmov	r3, s15
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	827b      	strh	r3, [r7, #18]
			uint16_t const CCR2 = (uint16_t)((1.0f-pwm/100.0f)*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001ee4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ee8:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001fe8 <APP_Control_Process+0xfb8>
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	3301      	adds	r3, #1
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f10:	ee17 3a90 	vmov	r3, s15
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	823b      	strh	r3, [r7, #16]
			// apply
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR1);
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	8a7a      	ldrh	r2, [r7, #18]
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCR2);
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	8a3a      	ldrh	r2, [r7, #16]
 8001f28:	639a      	str	r2, [r3, #56]	; 0x38
 8001f2a:	e04e      	b.n	8001fca <APP_Control_Process+0xf9a>

		}
		else
		{
			// scale PWM from [-100,+100] to CCRx
			uint16_t const CCR1 = (uint16_t)((1.0f+pwm/100.0f)*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001f2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f30:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001fe8 <APP_Control_Process+0xfb8>
 8001f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	3301      	adds	r3, #1
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f58:	ee17 3a90 	vmov	r3, s15
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	82fb      	strh	r3, [r7, #22]
			uint16_t const CCR2 = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	3301      	adds	r3, #1
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f76:	ee17 3a90 	vmov	r3, s15
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	82bb      	strh	r3, [r7, #20]
			// apply
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR1);
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	8afa      	ldrh	r2, [r7, #22]
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCR2);
 8001f88:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	8aba      	ldrh	r2, [r7, #20]
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f90:	e01b      	b.n	8001fca <APP_Control_Process+0xf9a>
		}
	}
	else
	{
		APP_Control_Reset();
 8001f92:	f7fe ff99 	bl	8000ec8 <APP_Control_Reset>
		// motor brake
		uint16_t const CCRx = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001faa:	ee17 3a90 	vmov	r3, s15
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCRx);
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCRx);
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <APP_Control_Process+0xfb4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// Note : This is an unipolar current sensing architecture,
	// then motor current is always positive in FORWARD and REVERSE drive phase,
	// and zero in BRAKE phases. So, the sign of the current, is build from the sign of the PWM setpoint
	pwm_sign = ( setpoint_pwm < 0.0f ) ? -1.0f : 1.0f;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <APP_Control_Process+0xfb0>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d50a      	bpl.n	8001ff0 <APP_Control_Process+0xfc0>
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <APP_Control_Process+0xfbc>)
 8001fdc:	e00a      	b.n	8001ff4 <APP_Control_Process+0xfc4>
 8001fde:	bf00      	nop
 8001fe0:	200000dc 	.word	0x200000dc
 8001fe4:	2000023c 	.word	0x2000023c
 8001fe8:	42c80000 	.word	0x42c80000
 8001fec:	bf800000 	.word	0xbf800000
 8001ff0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ff4:	4ab8      	ldr	r2, [pc, #736]	; (80022d8 <APP_Control_Process+0x12a8>)
 8001ff6:	6013      	str	r3, [r2, #0]
	pwm_ratio = fabsf(setpoint_pwm)/100.0f;
 8001ff8:	4bb8      	ldr	r3, [pc, #736]	; (80022dc <APP_Control_Process+0x12ac>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	eeb0 7ae7 	vabs.f32	s14, s15
 8002002:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80022e0 <APP_Control_Process+0x12b0>
 8002006:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800200a:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <APP_Control_Process+0x12b4>)
 800200c:	edc3 7a00 	vstr	s15, [r3]

	// live update of RAM regs
	regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(present_position_deg*10.0f));
 8002010:	4bb5      	ldr	r3, [pc, #724]	; (80022e8 <APP_Control_Process+0x12b8>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800201a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b29b      	uxth	r3, r3
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4bb0      	ldr	r3, [pc, #704]	; (80022ec <APP_Control_Process+0x12bc>)
 800202c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(present_position_deg*10.0f));
 8002030:	4bad      	ldr	r3, [pc, #692]	; (80022e8 <APP_Control_Process+0x12b8>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800203a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002042:	ee17 3a90 	vmov	r3, s15
 8002046:	b29b      	uxth	r3, r3
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	b29b      	uxth	r3, r3
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4ba7      	ldr	r3, [pc, #668]	; (80022ec <APP_Control_Process+0x12bc>)
 8002050:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)present_velocity_dps);
 8002054:	4ba6      	ldr	r3, [pc, #664]	; (80022f0 <APP_Control_Process+0x12c0>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205e:	ee17 3a90 	vmov	r3, s15
 8002062:	b21b      	sxth	r3, r3
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4ba1      	ldr	r3, [pc, #644]	; (80022ec <APP_Control_Process+0x12bc>)
 8002068:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)present_velocity_dps);
 800206c:	4ba0      	ldr	r3, [pc, #640]	; (80022f0 <APP_Control_Process+0x12c0>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	b21b      	sxth	r3, r3
 800207c:	121b      	asrs	r3, r3, #8
 800207e:	b21b      	sxth	r3, r3
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b9a      	ldr	r3, [pc, #616]	; (80022ec <APP_Control_Process+0x12bc>)
 8002084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	regs[REG_PRESENT_CURRENT_MA_L] = LOW_BYTE((int16_t)present_motor_current_ma);
 8002088:	4b9a      	ldr	r3, [pc, #616]	; (80022f4 <APP_Control_Process+0x12c4>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002092:	ee17 3a90 	vmov	r3, s15
 8002096:	b21b      	sxth	r3, r3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b94      	ldr	r3, [pc, #592]	; (80022ec <APP_Control_Process+0x12bc>)
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = HIGH_BYTE((int16_t)present_motor_current_ma);
 80020a0:	4b94      	ldr	r3, [pc, #592]	; (80022f4 <APP_Control_Process+0x12c4>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 3a90 	vmov	r3, s15
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	121b      	asrs	r3, r3, #8
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <APP_Control_Process+0x12bc>)
 80020b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	regs[REG_PRESENT_VOLTAGE] = (uint8_t)(present_voltage_0v1);
 80020bc:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <APP_Control_Process+0x12c8>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80020ca:	793b      	ldrb	r3, [r7, #4]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b87      	ldr	r3, [pc, #540]	; (80022ec <APP_Control_Process+0x12bc>)
 80020d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 80020d4:	4b85      	ldr	r3, [pc, #532]	; (80022ec <APP_Control_Process+0x12bc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	float moving_threshold = regs[REG_MOVING_THRESHOLD_DPS];
 80020dc:	4b83      	ldr	r3, [pc, #524]	; (80022ec <APP_Control_Process+0x12bc>)
 80020de:	7fdb      	ldrb	r3, [r3, #31]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e8:	edc7 7a03 	vstr	s15, [r7, #12]
	regs[REG_MOVING] = ( fabs(present_velocity_dps) > moving_threshold ) ? 1 : 0;
 80020ec:	4b80      	ldr	r3, [pc, #512]	; (80022f0 <APP_Control_Process+0x12c0>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	eef0 7ae7 	vabs.f32	s15, s15
 80020f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80020fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	bf4c      	ite	mi
 8002104:	2301      	movmi	r3, #1
 8002106:	2300      	movpl	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	4b77      	ldr	r3, [pc, #476]	; (80022ec <APP_Control_Process+0x12bc>)
 800210e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 8002112:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <APP_Control_Process+0x12cc>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	b29b      	uxth	r3, r3
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <APP_Control_Process+0x12bc>)
 800212e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 8002132:	4b72      	ldr	r3, [pc, #456]	; (80022fc <APP_Control_Process+0x12cc>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800213c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002144:	ee17 3a90 	vmov	r3, s15
 8002148:	b29b      	uxth	r3, r3
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <APP_Control_Process+0x12bc>)
 8002152:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)setpoint_velocity_dps);
 8002156:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <APP_Control_Process+0x12d0>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002160:	ee17 3a90 	vmov	r3, s15
 8002164:	b21b      	sxth	r3, r3
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b60      	ldr	r3, [pc, #384]	; (80022ec <APP_Control_Process+0x12bc>)
 800216a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)setpoint_velocity_dps);
 800216e:	4b64      	ldr	r3, [pc, #400]	; (8002300 <APP_Control_Process+0x12d0>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002178:	ee17 3a90 	vmov	r3, s15
 800217c:	b21b      	sxth	r3, r3
 800217e:	121b      	asrs	r3, r3, #8
 8002180:	b21b      	sxth	r3, r3
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <APP_Control_Process+0x12bc>)
 8002186:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)pid_position.err_integral); // DEBUG
	//regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)pid_position.err_integral); // DEBUG

	regs[REG_SETPOINT_CURRENT_MA_L] = LOW_BYTE((int16_t)setpoint_current_ma);
 800218a:	4b5e      	ldr	r3, [pc, #376]	; (8002304 <APP_Control_Process+0x12d4>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002194:	ee17 3a90 	vmov	r3, s15
 8002198:	b21b      	sxth	r3, r3
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <APP_Control_Process+0x12bc>)
 800219e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = HIGH_BYTE((int16_t)setpoint_current_ma);
 80021a2:	4b58      	ldr	r3, [pc, #352]	; (8002304 <APP_Control_Process+0x12d4>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 3a90 	vmov	r3, s15
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	121b      	asrs	r3, r3, #8
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <APP_Control_Process+0x12bc>)
 80021ba:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	regs[REG_SETPOINT_PWM_100_L] = LOW_BYTE((int16_t)setpoint_pwm);
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <APP_Control_Process+0x12ac>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c8:	ee17 3a90 	vmov	r3, s15
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <APP_Control_Process+0x12bc>)
 80021d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = HIGH_BYTE((int16_t)setpoint_pwm);
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <APP_Control_Process+0x12ac>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e0:	ee17 3a90 	vmov	r3, s15
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	121b      	asrs	r3, r3, #8
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <APP_Control_Process+0x12bc>)
 80021ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = LOW_BYTE((uint16_t)motor_current_input_adc);
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <APP_Control_Process+0x12d8>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021fc:	ee17 3a90 	vmov	r3, s15
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <APP_Control_Process+0x12bc>)
 8002206:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = HIGH_BYTE((uint16_t)motor_current_input_adc);
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <APP_Control_Process+0x12d8>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b29b      	uxth	r3, r3
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b29b      	uxth	r3, r3
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <APP_Control_Process+0x12bc>)
 8002222:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = LOW_BYTE((uint16_t)motor_current_input_adc_offset);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <APP_Control_Process+0x12dc>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002230:	ee17 3a90 	vmov	r3, s15
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <APP_Control_Process+0x12bc>)
 800223a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = HIGH_BYTE((uint16_t)motor_current_input_adc_offset);
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <APP_Control_Process+0x12dc>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002248:	ee17 3a90 	vmov	r3, s15
 800224c:	b29b      	uxth	r3, r3
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b29b      	uxth	r3, r3
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <APP_Control_Process+0x12bc>)
 8002256:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_POSITION_INPUT_ADC_L] = LOW_BYTE((uint16_t)position_input_adc);
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <APP_Control_Process+0x12e0>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002264:	ee17 3a90 	vmov	r3, s15
 8002268:	b29b      	uxth	r3, r3
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <APP_Control_Process+0x12bc>)
 800226e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = HIGH_BYTE((uint16_t)position_input_adc);
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <APP_Control_Process+0x12e0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800227c:	ee17 3a90 	vmov	r3, s15
 8002280:	b29b      	uxth	r3, r3
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b18      	ldr	r3, [pc, #96]	; (80022ec <APP_Control_Process+0x12bc>)
 800228a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	regs[REG_VOLTAGE_INPUT_ADC_L] = LOW_BYTE((uint16_t)voltage_input_adc);
 800228e:	4b21      	ldr	r3, [pc, #132]	; (8002314 <APP_Control_Process+0x12e4>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002298:	ee17 3a90 	vmov	r3, s15
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <APP_Control_Process+0x12bc>)
 80022a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = HIGH_BYTE((uint16_t)voltage_input_adc);
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <APP_Control_Process+0x12e4>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <APP_Control_Process+0x12bc>)
 80022be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// steps
	++counter;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <APP_Control_Process+0x12e8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <APP_Control_Process+0x12e8>)
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e000      	b.n	80022d0 <APP_Control_Process+0x12a0>
		return;
 80022ce:	bf00      	nop
}
 80022d0:	37f8      	adds	r7, #248	; 0xf8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200000c8 	.word	0x200000c8
 80022dc:	200000dc 	.word	0x200000dc
 80022e0:	42c80000 	.word	0x42c80000
 80022e4:	200000cc 	.word	0x200000cc
 80022e8:	200000d4 	.word	0x200000d4
 80022ec:	20000158 	.word	0x20000158
 80022f0:	2000010c 	.word	0x2000010c
 80022f4:	200000d0 	.word	0x200000d0
 80022f8:	200000d8 	.word	0x200000d8
 80022fc:	200000ec 	.word	0x200000ec
 8002300:	200000e8 	.word	0x200000e8
 8002304:	200000e0 	.word	0x200000e0
 8002308:	200000b8 	.word	0x200000b8
 800230c:	200000c4 	.word	0x200000c4
 8002310:	200000bc 	.word	0x200000bc
 8002314:	200000c0 	.word	0x200000c0
 8002318:	200000f0 	.word	0x200000f0

0800231c <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8002320:	4b5f      	ldr	r3, [pc, #380]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002322:	225c      	movs	r2, #92	; 0x5c
 8002324:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 8002326:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 800232c:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800232e:	2200      	movs	r2, #0
 8002330:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 8002332:	4b5b      	ldr	r3, [pc, #364]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002334:	2201      	movs	r2, #1
 8002336:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8002338:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800233a:	2203      	movs	r2, #3
 800233c:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 800233e:	4b58      	ldr	r3, [pc, #352]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002340:	2200      	movs	r2, #0
 8002342:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8002344:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002346:	221e      	movs	r2, #30
 8002348:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 800234a:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800234c:	2200      	movs	r2, #0
 800234e:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8002350:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002352:	2296      	movs	r2, #150	; 0x96
 8002354:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8002356:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002358:	2200      	movs	r2, #0
 800235a:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 800235c:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800235e:	2220      	movs	r2, #32
 8002360:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8002362:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002364:	2203      	movs	r2, #3
 8002366:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8002368:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002370:	221f      	movs	r2, #31
 8002372:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002376:	22fa      	movs	r2, #250	; 0xfa
 8002378:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800237c:	2200      	movs	r2, #0
 800237e:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002382:	2232      	movs	r2, #50	; 0x32
 8002384:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002388:	2200      	movs	r2, #0
 800238a:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 800238c:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800238e:	223c      	movs	r2, #60	; 0x3c
 8002390:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002394:	222d      	movs	r2, #45	; 0x2d
 8002396:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800239a:	225f      	movs	r2, #95	; 0x5f
 800239c:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 800239e:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023a0:	2205      	movs	r2, #5
 80023a2:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 80023ac:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80023bc:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023be:	2232      	movs	r2, #50	; 0x32
 80023c0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023ce:	226e      	movs	r2, #110	; 0x6e
 80023d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023d6:	220f      	movs	r2, #15
 80023d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023de:	22b4      	movs	r2, #180	; 0xb4
 80023e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023f6:	22d0      	movs	r2, #208	; 0xd0
 80023f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 80023fe:	2207      	movs	r2, #7
 8002400:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002406:	2200      	movs	r2, #0
 8002408:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800240e:	2200      	movs	r2, #0
 8002410:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002416:	2210      	movs	r2, #16
 8002418:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800241e:	220e      	movs	r2, #14
 8002420:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002426:	220a      	movs	r2, #10
 8002428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002436:	220a      	movs	r2, #10
 8002438:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002446:	22f4      	movs	r2, #244	; 0xf4
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002466:	2214      	movs	r2, #20
 8002468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800247e:	2207      	movs	r2, #7
 8002480:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002486:	22b5      	movs	r2, #181	; 0xb5
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 800248e:	2204      	movs	r2, #4
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	4802      	ldr	r0, [pc, #8]	; (80024a0 <factory_reset_eeprom_regs+0x184>)
 8002498:	f000 f8de 	bl	8002658 <eeprom_store>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000158 	.word	0x20000158

080024a4 <load_eeprom_regs>:


void load_eeprom_regs()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	4802      	ldr	r0, [pc, #8]	; (80024b4 <load_eeprom_regs+0x10>)
 80024ac:	f000 f8c2 	bl	8002634 <eeprom_restore>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000158 	.word	0x20000158

080024b8 <store_eeprom_regs>:

void store_eeprom_regs()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80024bc:	2140      	movs	r1, #64	; 0x40
 80024be:	4802      	ldr	r0, [pc, #8]	; (80024c8 <store_eeprom_regs+0x10>)
 80024c0:	f000 f8ca 	bl	8002658 <eeprom_store>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000158 	.word	0x20000158

080024cc <reset_ram_regs>:

void reset_ram_regs()
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 80024d0:	4b4e      	ldr	r3, [pc, #312]	; (800260c <reset_ram_regs+0x140>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 80024d8:	4b4c      	ldr	r3, [pc, #304]	; (800260c <reset_ram_regs+0x140>)
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = REG_CONTROL_MODE_PWM;
 80024e0:	4b4a      	ldr	r3, [pc, #296]	; (800260c <reset_ram_regs+0x140>)
 80024e2:	2204      	movs	r2, #4
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <reset_ram_regs+0x140>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 80024f0:	4b46      	ldr	r3, [pc, #280]	; (800260c <reset_ram_regs+0x140>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <reset_ram_regs+0x140>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8002500:	4b42      	ldr	r3, [pc, #264]	; (800260c <reset_ram_regs+0x140>)
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <reset_ram_regs+0x140>)
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 8002510:	4b3e      	ldr	r3, [pc, #248]	; (800260c <reset_ram_regs+0x140>)
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 8002518:	4b3c      	ldr	r3, [pc, #240]	; (800260c <reset_ram_regs+0x140>)
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <reset_ram_regs+0x140>)
 8002522:	2200      	movs	r2, #0
 8002524:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <reset_ram_regs+0x140>)
 800252a:	2200      	movs	r2, #0
 800252c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <reset_ram_regs+0x140>)
 8002532:	2200      	movs	r2, #0
 8002534:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <reset_ram_regs+0x140>)
 800253a:	2200      	movs	r2, #0
 800253c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <reset_ram_regs+0x140>)
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <reset_ram_regs+0x140>)
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <reset_ram_regs+0x140>)
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <reset_ram_regs+0x140>)
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <reset_ram_regs+0x140>)
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <reset_ram_regs+0x140>)
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <reset_ram_regs+0x140>)
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <reset_ram_regs+0x140>)
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <reset_ram_regs+0x140>)
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <reset_ram_regs+0x140>)
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <reset_ram_regs+0x140>)
 8002592:	2200      	movs	r2, #0
 8002594:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <reset_ram_regs+0x140>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <reset_ram_regs+0x140>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <reset_ram_regs+0x140>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = 0;
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <reset_ram_regs+0x140>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = 0;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <reset_ram_regs+0x140>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = 0;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <reset_ram_regs+0x140>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = 0;
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <reset_ram_regs+0x140>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	regs[REG_POSITION_INPUT_ADC_L] = 0;
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <reset_ram_regs+0x140>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = 0;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <reset_ram_regs+0x140>)
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	regs[REG_VOLTAGE_INPUT_ADC_L] = 0;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <reset_ram_regs+0x140>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = 0;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <reset_ram_regs+0x140>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <reset_ram_regs+0x140>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <reset_ram_regs+0x140>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000158 	.word	0x20000158

08002610 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <eeprom_empty+0x20>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	0801f800 	.word	0x0801f800

08002634 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <eeprom_restore+0x20>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f007 fc93 	bl	8009f70 <memcpy>
	return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	0801f800 	.word	0x0801f800

08002658 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b08d      	sub	sp, #52	; 0x34
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8002662:	f003 fcf5 	bl	8006050 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	2301      	movs	r3, #1
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	233f      	movs	r3, #63	; 0x3f
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	2301      	movs	r3, #1
 8002674:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 800267a:	f107 0210 	add.w	r2, r7, #16
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f003 fdd7 	bl	8006238 <HAL_FLASHEx_Erase>
 800268a:	4603      	mov	r3, r0
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 8002690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 8002698:	f003 fcfc 	bl	8006094 <HAL_FLASH_Lock>
			return result;
 800269c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026a0:	e03b      	b.n	800271a <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 80026a2:	a422      	add	r4, pc, #136	; (adr r4, 800272c <eeprom_store+0xd4>)
 80026a4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80026a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	e02c      	b.n	800270c <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	18d1      	adds	r1, r2, r3
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	2208      	movs	r2, #8
 80026be:	4618      	mov	r0, r3
 80026c0:	f007 fc56 	bl	8009f70 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 80026c4:	4a18      	ldr	r2, [pc, #96]	; (8002728 <eeprom_store+0xd0>)
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	18d1      	adds	r1, r2, r3
 80026ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4623      	mov	r3, r4
 80026d2:	2000      	movs	r0, #0
 80026d4:	f003 fc66 	bl	8005fa4 <HAL_FLASH_Program>
 80026d8:	4603      	mov	r3, r0
 80026da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 80026de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00f      	beq.n	8002706 <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 80026e6:	f003 fcef 	bl	80060c8 <HAL_FLASH_GetError>
 80026ea:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 80026f2:	f003 fccf 	bl	8006094 <HAL_FLASH_Lock>
					return error;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e00e      	b.n	800271a <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 80026fc:	f003 fcca 	bl	8006094 <HAL_FLASH_Lock>
				return result;
 8002700:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002704:	e009      	b.n	800271a <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	3308      	adds	r3, #8
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d3ce      	bcc.n	80026b2 <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 8002714:	f003 fcbe 	bl	8006094 <HAL_FLASH_Lock>
	return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3734      	adds	r7, #52	; 0x34
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	bf00      	nop
 8002724:	f3af 8000 	nop.w
 8002728:	0801f800 	.word	0x0801f800
 800272c:	deadbeef 	.word	0xdeadbeef
 8002730:	00000000 	.word	0x00000000

08002734 <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <stop_blinking+0x3c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2100      	movs	r1, #0
 8002742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <stop_blinking+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2100      	movs	r1, #0
 800274c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <stop_blinking+0x44>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <stop_blinking+0x48>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2100      	movs	r1, #0
 8002760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000118 	.word	0x20000118
 8002774:	20000120 	.word	0x20000120
 8002778:	20000128 	.word	0x20000128
 800277c:	2000012c 	.word	0x2000012c

08002780 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	e011      	b.n	80027b4 <HAL_Led_Init+0x34>
    {
        stop_blinking(id);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffcf 	bl	8002734 <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_Led_Init+0x44>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_Led_Init+0x48>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4619      	mov	r1, r3
 80027aa:	f004 f803 	bl	80067b4 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3301      	adds	r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	ddea      	ble.n	8002790 <HAL_Led_Init+0x10>
    }
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	0800a070 	.word	0x0800a070
 80027c8:	0800a06c 	.word	0x0800a06c

080027cc <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 80027d2:	f001 ffa3 	bl	800471c <HAL_GetTick>
 80027d6:	6038      	str	r0, [r7, #0]
    int id = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	e063      	b.n	80028aa <HAL_Led_Process+0xde>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 80027e2:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <HAL_Led_Process+0xec>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d05a      	beq.n	80028a4 <HAL_Led_Process+0xd8>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_Led_Process+0xf0>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	4930      	ldr	r1, [pc, #192]	; (80028b8 <HAL_Led_Process+0xec>)
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027fe:	4413      	add	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d34e      	bcc.n	80028a4 <HAL_Led_Process+0xd8>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 8002806:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <HAL_Led_Process+0xf4>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800280e:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <HAL_Led_Process+0xf8>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002816:	4619      	mov	r1, r3
 8002818:	f003 ffb4 	bl	8006784 <HAL_GPIO_ReadPin>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_Led_Process+0x70>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8002822:	4a27      	ldr	r2, [pc, #156]	; (80028c0 <HAL_Led_Process+0xf4>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <HAL_Led_Process+0xf8>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002832:	2201      	movs	r2, #1
 8002834:	4619      	mov	r1, r3
 8002836:	f003 ffbd 	bl	80067b4 <HAL_GPIO_WritePin>
 800283a:	e00b      	b.n	8002854 <HAL_Led_Process+0x88>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <HAL_Led_Process+0xf4>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <HAL_Led_Process+0xf8>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800284c:	2200      	movs	r2, #0
 800284e:	4619      	mov	r1, r3
 8002850:	f003 ffb0 	bl	80067b4 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_Led_Process+0xf0>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	4916      	ldr	r1, [pc, #88]	; (80028b8 <HAL_Led_Process+0xec>)
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002864:	441a      	add	r2, r3
 8002866:	4915      	ldr	r1, [pc, #84]	; (80028bc <HAL_Led_Process+0xf0>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_Led_Process+0xfc>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f083 0301 	eor.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d011      	beq.n	80028a4 <HAL_Led_Process+0xd8>
                {
                    --blinkin_counter[id];
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_Led_Process+0x100>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	1e5a      	subs	r2, r3, #1
 800288a:	4910      	ldr	r1, [pc, #64]	; (80028cc <HAL_Led_Process+0x100>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_Led_Process+0x100>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_Led_Process+0xd8>
                    {
                        stop_blinking(id);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff48 	bl	8002734 <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	dd98      	ble.n	80027e2 <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000118 	.word	0x20000118
 80028bc:	2000012c 	.word	0x2000012c
 80028c0:	0800a070 	.word	0x0800a070
 80028c4:	0800a06c 	.word	0x0800a06c
 80028c8:	20000128 	.word	0x20000128
 80028cc:	20000120 	.word	0x20000120

080028d0 <HAL_Led_Reset>:
    stop_blinking(id);
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
}

void HAL_Led_Reset(int id)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff2b 	bl	8002734 <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_Led_Reset+0x30>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_Led_Reset+0x34>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ee:	2201      	movs	r2, #1
 80028f0:	4619      	mov	r1, r3
 80028f2:	f003 ff5f 	bl	80067b4 <HAL_GPIO_WritePin>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	0800a070 	.word	0x0800a070
 8002904:	0800a06c 	.word	0x0800a06c

08002908 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 8002914:	4919      	ldr	r1, [pc, #100]	; (800297c <HAL_Led_Blink+0x74>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_Led_Blink+0x24>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_Led_Blink+0x26>
 800292c:	2300      	movs	r3, #0
 800292e:	4914      	ldr	r1, [pc, #80]	; (8002980 <HAL_Led_Blink+0x78>)
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2d9      	uxtb	r1, r3
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_Led_Blink+0x7c>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	460a      	mov	r2, r1
 800294a:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 800294c:	f001 fee6 	bl	800471c <HAL_GetTick>
 8002950:	4601      	mov	r1, r0
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_Led_Blink+0x80>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 800295a:	4a0c      	ldr	r2, [pc, #48]	; (800298c <HAL_Led_Blink+0x84>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002962:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <HAL_Led_Blink+0x88>)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	f003 ff21 	bl	80067b4 <HAL_GPIO_WritePin>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000118 	.word	0x20000118
 8002980:	20000120 	.word	0x20000120
 8002984:	20000128 	.word	0x20000128
 8002988:	2000012c 	.word	0x2000012c
 800298c:	0800a070 	.word	0x0800a070
 8002990:	0800a06c 	.word	0x0800a06c

08002994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800299a:	f001 fe5a 	bl	8004652 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800299e:	f000 f863 	bl	8002a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a2:	f000 fb51 	bl	8003048 <MX_GPIO_Init>
  MX_DMA_Init();
 80029a6:	f000 fb1d 	bl	8002fe4 <MX_DMA_Init>
  MX_ADC1_Init();
 80029aa:	f000 f8c7 	bl	8002b3c <MX_ADC1_Init>
  MX_ADC2_Init();
 80029ae:	f000 f93d 	bl	8002c2c <MX_ADC2_Init>
  MX_TIM1_Init();
 80029b2:	f000 f9a1 	bl	8002cf8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80029b6:	f000 fa0f 	bl	8002dd8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80029ba:	f000 fac7 	bl	8002f4c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80029be:	f000 fa8f 	bl	8002ee0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_Led_Init();
 80029c2:	f7ff fedd 	bl	8002780 <HAL_Led_Init>
	HAL_Led_Blink(LED0,10,150);
 80029c6:	2296      	movs	r2, #150	; 0x96
 80029c8:	210a      	movs	r1, #10
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7ff ff9c 	bl	8002908 <HAL_Led_Blink>
	HAL_Led_Blink(LED1,10,150);
 80029d0:	2296      	movs	r2, #150	; 0x96
 80029d2:	210a      	movs	r1, #10
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff ff97 	bl	8002908 <HAL_Led_Blink>
	HAL_Serial_Init_Half_Duplex(
 80029da:	2300      	movs	r3, #0
 80029dc:	9303      	str	r3, [sp, #12]
 80029de:	2310      	movs	r3, #16
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <main+0xc8>)
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2300      	movs	r3, #0
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80029f2:	491b      	ldr	r1, [pc, #108]	; (8002a60 <main+0xcc>)
 80029f4:	481b      	ldr	r0, [pc, #108]	; (8002a64 <main+0xd0>)
 80029f6:	f001 f8df 	bl	8003bb8 <HAL_Serial_Init_Half_Duplex>
		GPIO_PIN_RESET,
		UART2_RX_DIR_GPIO_Port,
		UART2_RX_DIR_Pin,
		GPIO_PIN_RESET
	);
	if(eeprom_empty())
 80029fa:	f7ff fe09 	bl	8002610 <eeprom_empty>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <main+0x74>
		factory_reset_eeprom_regs();
 8002a04:	f7ff fc8a 	bl	800231c <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8002a08:	f7ff fd4c 	bl	80024a4 <load_eeprom_regs>
	reset_ram_regs();
 8002a0c:	f7ff fd5e 	bl	80024cc <reset_ram_regs>
	APP_Control_Init();
 8002a10:	f7fe fac2 	bl	8000f98 <APP_Control_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t start_time = HAL_GetTick();
 8002a14:	f001 fe82 	bl	800471c <HAL_GetTick>
 8002a18:	6078      	str	r0, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8002a1a:	f001 fe7f 	bl	800471c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d902      	bls.n	8002a30 <main+0x9c>
	{
		//if(regs[REG_LED]==0)
		if(1)
		{
			HAL_Led_Reset(LED0);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff ff50 	bl	80028d0 <HAL_Led_Reset>
		else
		{
			HAL_Led_Set(LED0);
		}
	}
	HAL_Led_Process();
 8002a30:	f7ff fecc 	bl	80027cc <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8002a34:	e008      	b.n	8002a48 <main+0xb4>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8002a36:	480a      	ldr	r0, [pc, #40]	; (8002a60 <main+0xcc>)
 8002a38:	f001 f984 	bl	8003d44 <HAL_Serial_GetChar>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 ff4e 	bl	80038e4 <packet_handler>
	while(HAL_Serial_Available(&serial))
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <main+0xcc>)
 8002a4a:	f001 f94b 	bl	8003ce4 <HAL_Serial_Available>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <main+0xa2>
	}

	// regulation
	APP_Control_Process();
 8002a54:	f7fe faec 	bl	8001030 <APP_Control_Process>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8002a58:	e7df      	b.n	8002a1a <main+0x86>
 8002a5a:	bf00      	nop
 8002a5c:	48000400 	.word	0x48000400
 8002a60:	200003c0 	.word	0x200003c0
 8002a64:	20002d00 	.word	0x20002d00

08002a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0a4      	sub	sp, #144	; 0x90
 8002a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a72:	2238      	movs	r2, #56	; 0x38
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f007 fa85 	bl	8009f86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	2244      	movs	r2, #68	; 0x44
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f007 fa77 	bl	8009f86 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a9c:	f003 fea2 	bl	80067e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aaa:	2340      	movs	r3, #64	; 0x40
 8002aac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8002aba:	234b      	movs	r3, #75	; 0x4b
 8002abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 ff38 	bl	800694c <HAL_RCC_OscConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002ae2:	f000 fb2f 	bl	8003144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae6:	230f      	movs	r3, #15
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aea:	2303      	movs	r3, #3
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aee:	2300      	movs	r3, #0
 8002af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002af2:	2300      	movs	r3, #0
 8002af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af6:	2300      	movs	r3, #0
 8002af8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002afa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002afe:	2104      	movs	r1, #4
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 fa3b 	bl	8006f7c <HAL_RCC_ClockConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002b0c:	f000 fb1a 	bl	8003144 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8002b10:	f248 0302 	movw	r3, #32770	; 0x8002
 8002b14:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b20:	463b      	mov	r3, r7
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fc46 	bl	80073b4 <HAL_RCCEx_PeriphCLKConfig>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b2e:	f000 fb09 	bl	8003144 <Error_Handler>
  }
}
 8002b32:	bf00      	nop
 8002b34:	3790      	adds	r7, #144	; 0x90
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	2220      	movs	r2, #32
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f007 fa16 	bl	8009f86 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b5a:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002b76:	4b2b      	ldr	r3, [pc, #172]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b84:	2204      	movs	r2, #4
 8002b86:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b8e:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bc4:	4817      	ldr	r0, [pc, #92]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002bc6:	f001 ffad 	bl	8004b24 <HAL_ADC_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002bd0:	f000 fab8 	bl	8003144 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4811      	ldr	r0, [pc, #68]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002be0:	f002 fd3e 	bl	8005660 <HAL_ADCEx_MultiModeConfigChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002bea:	f000 faab 	bl	8003144 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <MX_ADC1_Init+0xec>)
 8002bf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bfa:	237f      	movs	r3, #127	; 0x7f
 8002bfc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4806      	ldr	r0, [pc, #24]	; (8002c24 <MX_ADC1_Init+0xe8>)
 8002c0c:	f002 f912 	bl	8004e34 <HAL_ADC_ConfigChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002c16:	f000 fa95 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200002f4 	.word	0x200002f4
 8002c28:	2a000400 	.word	0x2a000400

08002c2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c32:	463b      	mov	r3, r7
 8002c34:	2220      	movs	r2, #32
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f007 f9a4 	bl	8009f86 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c40:	4a2b      	ldr	r2, [pc, #172]	; (8002cf0 <MX_ADC2_Init+0xc4>)
 8002c42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c5e:	4b23      	ldr	r3, [pc, #140]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c66:	2204      	movs	r2, #4
 8002c68:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ca6:	4811      	ldr	r0, [pc, #68]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002ca8:	f001 ff3c 	bl	8004b24 <HAL_ADC_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002cb2:	f000 fa47 	bl	8003144 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_ADC2_Init+0xc8>)
 8002cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cba:	2306      	movs	r3, #6
 8002cbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002cc2:	237f      	movs	r3, #127	; 0x7f
 8002cc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002cce:	463b      	mov	r3, r7
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	; (8002cec <MX_ADC2_Init+0xc0>)
 8002cd4:	f002 f8ae 	bl	8004e34 <HAL_ADC_ConfigChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002cde:	f000 fa31 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000288 	.word	0x20000288
 8002cf0:	50000100 	.word	0x50000100
 8002cf4:	04300002 	.word	0x04300002

08002cf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09a      	sub	sp, #104	; 0x68
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d02:	2224      	movs	r2, #36	; 0x24
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f007 f93d 	bl	8009f86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2234      	movs	r2, #52	; 0x34
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f007 f931 	bl	8009f86 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d26:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <MX_TIM1_Init+0xdc>)
 8002d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d54:	2300      	movs	r3, #0
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d64:	2300      	movs	r3, #0
 8002d66:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d7c:	f004 ff6c 	bl	8007c58 <HAL_TIM_Encoder_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002d86:	f000 f9dd 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002d9e:	f005 fe2b 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002da8:	f000 f9cc 	bl	8003144 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <MX_TIM1_Init+0xd8>)
 8002dba:	f005 fe9f 	bl	8008afc <HAL_TIMEx_ConfigBreakDeadTime>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002dc4:	f000 f9be 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	3768      	adds	r7, #104	; 0x68
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20002cb4 	.word	0x20002cb4
 8002dd4:	40012c00 	.word	0x40012c00

08002dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08e      	sub	sp, #56	; 0x38
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002df8:	463b      	mov	r3, r7
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	609a      	str	r2, [r3, #8]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	615a      	str	r2, [r3, #20]
 8002e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e0c:	4a33      	ldr	r2, [pc, #204]	; (8002edc <MX_TIM4_Init+0x104>)
 8002e0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e18:	2220      	movs	r2, #32
 8002e1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3749;
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e1e:	f640 62a5 	movw	r2, #3749	; 0xea5
 8002e22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e24:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e30:	4829      	ldr	r0, [pc, #164]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e32:	f004 fcaf 	bl	8007794 <HAL_TIM_Base_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002e3c:	f000 f982 	bl	8003144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4822      	ldr	r0, [pc, #136]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e4e:	f005 f8b9 	bl	8007fc4 <HAL_TIM_ConfigClockSource>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002e58:	f000 f974 	bl	8003144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e5c:	481e      	ldr	r0, [pc, #120]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e5e:	f004 fd53 	bl	8007908 <HAL_TIM_PWM_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002e68:	f000 f96c 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4817      	ldr	r0, [pc, #92]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002e7c:	f005 fdbc 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002e86:	f000 f95d 	bl	8003144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e8a:	2360      	movs	r3, #96	; 0x60
 8002e8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002ea2:	f004 ff7f 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002eac:	f000 f94a 	bl	8003144 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002ebc:	f004 ff72 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8002ec6:	f000 f93d 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <MX_TIM4_Init+0x100>)
 8002ecc:	f001 fa3e 	bl	800434c <HAL_TIM_MspPostInit>

}
 8002ed0:	bf00      	nop
 8002ed2:	3738      	adds	r7, #56	; 0x38
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	2000023c 	.word	0x2000023c
 8002edc:	40000800 	.word	0x40000800

08002ee0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <MX_TIM6_Init+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 149;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002ef8:	2295      	movs	r2, #149	; 0x95
 8002efa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f12:	f004 fc3f 	bl	8007794 <HAL_TIM_Base_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f1c:	f000 f912 	bl	8003144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_TIM6_Init+0x64>)
 8002f2e:	f005 fd63 	bl	80089f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f38:	f000 f904 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20002c68 	.word	0x20002c68
 8002f48:	40001000 	.word	0x40001000

08002f4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f50:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <MX_USART2_UART_Init+0x94>)
 8002f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f72:	220c      	movs	r2, #12
 8002f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f94:	4811      	ldr	r0, [pc, #68]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002f96:	f005 fe51 	bl	8008c3c <HAL_UART_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002fa0:	f000 f8d0 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	480d      	ldr	r0, [pc, #52]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002fa8:	f006 fed3 	bl	8009d52 <HAL_UARTEx_SetTxFifoThreshold>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002fb2:	f000 f8c7 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4808      	ldr	r0, [pc, #32]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002fba:	f006 ff08 	bl	8009dce <HAL_UARTEx_SetRxFifoThreshold>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fc4:	f000 f8be 	bl	8003144 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_USART2_UART_Init+0x90>)
 8002fca:	f006 fe89 	bl	8009ce0 <HAL_UARTEx_DisableFifoMode>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fd4:	f000 f8b6 	bl	8003144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20002d00 	.word	0x20002d00
 8002fe0:	40004400 	.word	0x40004400

08002fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <MX_DMA_Init+0x60>)
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <MX_DMA_Init+0x60>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6493      	str	r3, [r2, #72]	; 0x48
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <MX_DMA_Init+0x60>)
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <MX_DMA_Init+0x60>)
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <MX_DMA_Init+0x60>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6493      	str	r3, [r2, #72]	; 0x48
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <MX_DMA_Init+0x60>)
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	200b      	movs	r0, #11
 8003020:	f002 fcad 	bl	800597e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003024:	200b      	movs	r0, #11
 8003026:	f002 fcc4 	bl	80059b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	200c      	movs	r0, #12
 8003030:	f002 fca5 	bl	800597e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003034:	200c      	movs	r0, #12
 8003036:	f002 fcbc 	bl	80059b2 <HAL_NVIC_EnableIRQ>

}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000

08003048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <MX_GPIO_Init+0xf4>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	4a36      	ldr	r2, [pc, #216]	; (800313c <MX_GPIO_Init+0xf4>)
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <MX_GPIO_Init+0xf4>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <MX_GPIO_Init+0xf4>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	4a30      	ldr	r2, [pc, #192]	; (800313c <MX_GPIO_Init+0xf4>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <MX_GPIO_Init+0xf4>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <MX_GPIO_Init+0xf4>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	4a2a      	ldr	r2, [pc, #168]	; (800313c <MX_GPIO_Init+0xf4>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309a:	4b28      	ldr	r3, [pc, #160]	; (800313c <MX_GPIO_Init+0xf4>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED0_Pin|UART2_TX_DIR_Pin, GPIO_PIN_RESET);
 80030a6:	2200      	movs	r2, #0
 80030a8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80030ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b0:	f003 fb80 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_RX_DIR_GPIO_Port, UART2_RX_DIR_Pin, GPIO_PIN_RESET);
 80030b4:	2200      	movs	r2, #0
 80030b6:	2110      	movs	r1, #16
 80030b8:	4821      	ldr	r0, [pc, #132]	; (8003140 <MX_GPIO_Init+0xf8>)
 80030ba:	f003 fb7b 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_FAULT_Pin */
  GPIO_InitStruct.Pin = GPIO_FAULT_Pin;
 80030be:	2302      	movs	r3, #2
 80030c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_FAULT_GPIO_Port, &GPIO_InitStruct);
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	4619      	mov	r1, r3
 80030d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d4:	f003 f9d4 	bl	8006480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 80030d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030de:	2311      	movs	r3, #17
 80030e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	4619      	mov	r1, r3
 80030f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f4:	f003 f9c4 	bl	8006480 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_TX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_TX_DIR_Pin;
 80030f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fe:	2301      	movs	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_TX_DIR_GPIO_Port, &GPIO_InitStruct);
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	4619      	mov	r1, r3
 8003110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003114:	f003 f9b4 	bl	8006480 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_RX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_RX_DIR_Pin;
 8003118:	2310      	movs	r3, #16
 800311a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311c:	2301      	movs	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_RX_DIR_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	4619      	mov	r1, r3
 800312e:	4804      	ldr	r0, [pc, #16]	; (8003140 <MX_GPIO_Init+0xf8>)
 8003130:	f003 f9a6 	bl	8006480 <HAL_GPIO_Init>

}
 8003134:	bf00      	nop
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	48000400 	.word	0x48000400

08003144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003148:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800314a:	e7fe      	b.n	800314a <Error_Handler+0x6>

0800314c <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	ed87 0a03 	vstr	s0, [r7, #12]
 8003156:	edc7 0a02 	vstr	s1, [r7, #8]
 800315a:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 800315e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003162:	edd7 7a02 	vldr	s15, [r7, #8]
 8003166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d501      	bpl.n	8003174 <fconstrain+0x28>
        return min;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	e00b      	b.n	800318c <fconstrain+0x40>
    else if(x>max)
 8003174:	ed97 7a03 	vldr	s14, [r7, #12]
 8003178:	edd7 7a01 	vldr	s15, [r7, #4]
 800317c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003184:	dd01      	ble.n	800318a <fconstrain+0x3e>
        return max;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	e000      	b.n	800318c <fconstrain+0x40>
    else
        return x;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	ee07 3a90 	vmov	s15, r3
}
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <fmap>:
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float fmap(float x, float in_min, float in_max, float out_min, float out_max)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	ed87 0a05 	vstr	s0, [r7, #20]
 80031a8:	edc7 0a04 	vstr	s1, [r7, #16]
 80031ac:	ed87 1a03 	vstr	s2, [r7, #12]
 80031b0:	edc7 1a02 	vstr	s3, [r7, #8]
 80031b4:	ed87 2a01 	vstr	s4, [r7, #4]
    if(x<=in_min)
 80031b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80031c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d802      	bhi.n	80031d0 <fmap+0x32>
        return out_min;
 80031ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ce:	e025      	b.n	800321c <fmap+0x7e>
    else if(x>=in_max)
 80031d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80031d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80031d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	db02      	blt.n	80031e8 <fmap+0x4a>
        return out_max;
 80031e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031e6:	e019      	b.n	800321c <fmap+0x7e>
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80031e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80031f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80031f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003200:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003204:	ed97 7a03 	vldr	s14, [r7, #12]
 8003208:	edd7 7a04 	vldr	s15, [r7, #16]
 800320c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800321c:	eeb0 0a67 	vmov.f32	s0, s15
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b08e      	sub	sp, #56	; 0x38
 800325a:	af00      	add	r7, sp, #0
 800325c:	61f8      	str	r0, [r7, #28]
 800325e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003262:	edc7 0a05 	vstr	s1, [r7, #20]
 8003266:	ed87 1a04 	vstr	s2, [r7, #16]
 800326a:	edc7 1a03 	vstr	s3, [r7, #12]
 800326e:	ed87 2a02 	vstr	s4, [r7, #8]
 8003272:	edc7 2a01 	vstr	s5, [r7, #4]
 8003276:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	ed97 7a06 	vldr	s14, [r7, #24]
 8003284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003288:	edd7 7a01 	vldr	s15, [r7, #4]
 800328c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003294:	edd7 7a01 	vldr	s15, [r7, #4]
 8003298:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 80032b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80032ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80032d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 80032de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80032e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	ed97 7a00 	vldr	s14, [r7]
 80032f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 80032fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003302:	eef1 7a67 	vneg.f32	s15, s15
 8003306:	ed97 1a02 	vldr	s2, [r7, #8]
 800330a:	eef0 0a67 	vmov.f32	s1, s15
 800330e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003312:	f7ff ff1b 	bl	800314c <fconstrain>
 8003316:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 800331a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800331e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003322:	eeb4 7a67 	vcmp.f32	s14, s15
 8003326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 8003334:	ed97 7a06 	vldr	s14, [r7, #24]
 8003338:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800333c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	bfac      	ite	ge
 800334a:	2301      	movge	r3, #1
 800334c:	2300      	movlt	r3, #0
 800334e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 8003352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <pid_process_antiwindup_clamp_with_ff+0x110>
 800335a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <pid_process_antiwindup_clamp_with_ff+0x110>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <pid_process_antiwindup_clamp_with_ff+0x112>
 8003366:	2300      	movs	r3, #0
 8003368:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800336c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8003378:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800337c:	f083 0301 	eor.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	ed93 7a01 	vldr	s14, [r3, #4]
 800338c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003390:	edd7 7a06 	vldr	s15, [r7, #24]
 8003394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	ee07 3a90 	vmov	s15, r3
}
 80033a8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ac:	3738      	adds	r7, #56	; 0x38
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <pid_process_antiwindup_clamp>:
		float ki,
		float kd,
		float output_limit,
		float alpha_derivative
)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b08e      	sub	sp, #56	; 0x38
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	61f8      	str	r0, [r7, #28]
 80033ba:	ed87 0a06 	vstr	s0, [r7, #24]
 80033be:	edc7 0a05 	vstr	s1, [r7, #20]
 80033c2:	ed87 1a04 	vstr	s2, [r7, #16]
 80033c6:	edc7 1a03 	vstr	s3, [r7, #12]
 80033ca:	ed87 2a02 	vstr	s4, [r7, #8]
 80033ce:	edc7 2a01 	vstr	s5, [r7, #4]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80033dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80033fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 800340e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003412:	edd7 7a06 	vldr	s15, [r7, #24]
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	edd3 7a02 	vldr	s15, [r3, #8]
 800342a:	ed97 7a03 	vldr	s14, [r7, #12]
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term;
 8003436:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800343a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800343e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003442:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 800344e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003452:	eef1 7a67 	vneg.f32	s15, s15
 8003456:	ed97 1a02 	vldr	s2, [r7, #8]
 800345a:	eef0 0a67 	vmov.f32	s1, s15
 800345e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003462:	f7ff fe73 	bl	800314c <fconstrain>
 8003466:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 800346a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800346e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003472:	eeb4 7a67 	vcmp.f32	s14, s15
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 8003484:	ed97 7a06 	vldr	s14, [r7, #24]
 8003488:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	bfac      	ite	ge
 800349a:	2301      	movge	r3, #1
 800349c:	2300      	movlt	r3, #0
 800349e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 80034a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <pid_process_antiwindup_clamp+0x104>
 80034aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <pid_process_antiwindup_clamp+0x104>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <pid_process_antiwindup_clamp+0x106>
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80034bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 80034c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <pid_process_antiwindup_clamp+0x140>
		ctx->err_integral = ctx->err_integral + ki*error;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80034dc:	edd7 6a04 	vldr	s13, [r7, #16]
 80034e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80034e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	ee07 3a90 	vmov	s15, r3
}
 80034f8:	eeb0 0a67 	vmov.f32	s0, s15
 80034fc:	3738      	adds	r7, #56	; 0x38
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	6039      	str	r1, [r7, #0]
 800350e:	80fb      	strh	r3, [r7, #6]
 8003510:	4613      	mov	r3, r2
 8003512:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8003514:	2300      	movs	r3, #0
 8003516:	81fb      	strh	r3, [r7, #14]
 8003518:	e019      	b.n	800354e <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	b29a      	uxth	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	4053      	eors	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	b21a      	sxth	r2, r3
 8003538:	89bb      	ldrh	r3, [r7, #12]
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <updateCRC+0x60>)
 800353c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003540:	b21b      	sxth	r3, r3
 8003542:	4053      	eors	r3, r2
 8003544:	b21b      	sxth	r3, r3
 8003546:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	3301      	adds	r3, #1
 800354c:	81fb      	strh	r3, [r7, #14]
 800354e:	89fa      	ldrh	r2, [r7, #14]
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	d3e1      	bcc.n	800351a <updateCRC+0x16>
  }

  return crc_accum;
 8003556:	88fb      	ldrh	r3, [r7, #6]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	0800a078 	.word	0x0800a078

08003568 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <packet_encapsulate+0x84>)
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <packet_encapsulate+0x84>)
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <packet_encapsulate+0x84>)
 800357e:	22fd      	movs	r2, #253	; 0xfd
 8003580:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <packet_encapsulate+0x84>)
 8003584:	2200      	movs	r2, #0
 8003586:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <packet_encapsulate+0x88>)
 800358a:	78da      	ldrb	r2, [r3, #3]
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <packet_encapsulate+0x84>)
 800358e:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	b29b      	uxth	r3, r3
 8003594:	3302      	adds	r3, #2
 8003596:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 8003598:	89fb      	ldrh	r3, [r7, #14]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <packet_encapsulate+0x84>)
 800359e:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <packet_encapsulate+0x84>)
 80035aa:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	3305      	adds	r3, #5
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	490d      	ldr	r1, [pc, #52]	; (80035ec <packet_encapsulate+0x84>)
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7ff ffa4 	bl	8003504 <updateCRC>
 80035bc:	4603      	mov	r3, r0
 80035be:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3307      	adds	r3, #7
 80035c4:	89ba      	ldrh	r2, [r7, #12]
 80035c6:	b2d1      	uxtb	r1, r2
 80035c8:	4a08      	ldr	r2, [pc, #32]	; (80035ec <packet_encapsulate+0x84>)
 80035ca:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 80035cc:	89bb      	ldrh	r3, [r7, #12]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3308      	adds	r3, #8
 80035d6:	b2d1      	uxtb	r1, r2
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <packet_encapsulate+0x84>)
 80035da:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3309      	adds	r3, #9
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <packet_encapsulate+0x8c>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200031d8 	.word	0x200031d8
 80035f0:	20000158 	.word	0x20000158
 80035f4:	2000013c 	.word	0x2000013c

080035f8 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08c      	sub	sp, #48	; 0x30
 80035fc:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 80035fe:	4b9b      	ldr	r3, [pc, #620]	; (800386c <instruction_handler+0x274>)
 8003600:	79db      	ldrb	r3, [r3, #7]
 8003602:	2b06      	cmp	r3, #6
 8003604:	f000 811a 	beq.w	800383c <instruction_handler+0x244>
 8003608:	2b06      	cmp	r3, #6
 800360a:	dc06      	bgt.n	800361a <instruction_handler+0x22>
 800360c:	2b02      	cmp	r3, #2
 800360e:	d02b      	beq.n	8003668 <instruction_handler+0x70>
 8003610:	2b03      	cmp	r3, #3
 8003612:	d070      	beq.n	80036f6 <instruction_handler+0xfe>
 8003614:	2b01      	cmp	r3, #1
 8003616:	d00a      	beq.n	800362e <instruction_handler+0x36>
 8003618:	e148      	b.n	80038ac <instruction_handler+0x2b4>
 800361a:	2b82      	cmp	r3, #130	; 0x82
 800361c:	f000 8157 	beq.w	80038ce <instruction_handler+0x2d6>
 8003620:	2b83      	cmp	r3, #131	; 0x83
 8003622:	f000 80b5 	beq.w	8003790 <instruction_handler+0x198>
 8003626:	2b08      	cmp	r3, #8
 8003628:	f000 812a 	beq.w	8003880 <instruction_handler+0x288>
 800362c:	e13e      	b.n	80038ac <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800362e:	4b90      	ldr	r3, [pc, #576]	; (8003870 <instruction_handler+0x278>)
 8003630:	2255      	movs	r2, #85	; 0x55
 8003632:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8003634:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <instruction_handler+0x278>)
 8003636:	2200      	movs	r2, #0
 8003638:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 800363a:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <instruction_handler+0x27c>)
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <instruction_handler+0x278>)
 8003640:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8003642:	4b8c      	ldr	r3, [pc, #560]	; (8003874 <instruction_handler+0x27c>)
 8003644:	785a      	ldrb	r2, [r3, #1]
 8003646:	4b8a      	ldr	r3, [pc, #552]	; (8003870 <instruction_handler+0x278>)
 8003648:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 800364a:	4b8a      	ldr	r3, [pc, #552]	; (8003874 <instruction_handler+0x27c>)
 800364c:	789a      	ldrb	r2, [r3, #2]
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <instruction_handler+0x278>)
 8003650:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 8003652:	2005      	movs	r0, #5
 8003654:	f7ff ff88 	bl	8003568 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003658:	4b87      	ldr	r3, [pc, #540]	; (8003878 <instruction_handler+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4984      	ldr	r1, [pc, #528]	; (8003870 <instruction_handler+0x278>)
 8003660:	4886      	ldr	r0, [pc, #536]	; (800387c <instruction_handler+0x284>)
 8003662:	f000 fbbf 	bl	8003de4 <HAL_Serial_Write>
		}
		break;
 8003666:	e133      	b.n	80038d0 <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8003668:	4b80      	ldr	r3, [pc, #512]	; (800386c <instruction_handler+0x274>)
 800366a:	7a5b      	ldrb	r3, [r3, #9]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	b21a      	sxth	r2, r3
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <instruction_handler+0x274>)
 8003672:	7a1b      	ldrb	r3, [r3, #8]
 8003674:	b21b      	sxth	r3, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	b21b      	sxth	r3, r3
 800367a:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 800367c:	4b7b      	ldr	r3, [pc, #492]	; (800386c <instruction_handler+0x274>)
 800367e:	7adb      	ldrb	r3, [r3, #11]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	4b79      	ldr	r3, [pc, #484]	; (800386c <instruction_handler+0x274>)
 8003686:	7a9b      	ldrb	r3, [r3, #10]
 8003688:	b21b      	sxth	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b21b      	sxth	r3, r3
 800368e:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	2b81      	cmp	r3, #129	; 0x81
 8003694:	d81e      	bhi.n	80036d4 <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <instruction_handler+0x278>)
 8003698:	2255      	movs	r2, #85	; 0x55
 800369a:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 800369c:	4b74      	ldr	r3, [pc, #464]	; (8003870 <instruction_handler+0x278>)
 800369e:	2200      	movs	r2, #0
 80036a0:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80036a2:	2300      	movs	r3, #0
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a6:	e00b      	b.n	80036c0 <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80036a8:	887a      	ldrh	r2, [r7, #2]
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	441a      	add	r2, r3
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	3309      	adds	r3, #9
 80036b2:	4970      	ldr	r1, [pc, #448]	; (8003874 <instruction_handler+0x27c>)
 80036b4:	5c89      	ldrb	r1, [r1, r2]
 80036b6:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <instruction_handler+0x278>)
 80036b8:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	3301      	adds	r3, #1
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c0:	883b      	ldrh	r3, [r7, #0]
 80036c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d3ef      	bcc.n	80036a8 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 80036c8:	883b      	ldrh	r3, [r7, #0]
 80036ca:	3302      	adds	r3, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff4b 	bl	8003568 <packet_encapsulate>
 80036d2:	e008      	b.n	80036e6 <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80036d4:	4b66      	ldr	r3, [pc, #408]	; (8003870 <instruction_handler+0x278>)
 80036d6:	2255      	movs	r2, #85	; 0x55
 80036d8:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <instruction_handler+0x278>)
 80036dc:	2207      	movs	r2, #7
 80036de:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80036e0:	2002      	movs	r0, #2
 80036e2:	f7ff ff41 	bl	8003568 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80036e6:	4b64      	ldr	r3, [pc, #400]	; (8003878 <instruction_handler+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4960      	ldr	r1, [pc, #384]	; (8003870 <instruction_handler+0x278>)
 80036ee:	4863      	ldr	r0, [pc, #396]	; (800387c <instruction_handler+0x284>)
 80036f0:	f000 fb78 	bl	8003de4 <HAL_Serial_Write>
		}
		break;
 80036f4:	e0ec      	b.n	80038d0 <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <instruction_handler+0x274>)
 80036f8:	7a5b      	ldrb	r3, [r3, #9]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	4b5b      	ldr	r3, [pc, #364]	; (800386c <instruction_handler+0x274>)
 8003700:	7a1b      	ldrb	r3, [r3, #8]
 8003702:	b21b      	sxth	r3, r3
 8003704:	4313      	orrs	r3, r2
 8003706:	b21b      	sxth	r3, r3
 8003708:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 800370a:	4b58      	ldr	r3, [pc, #352]	; (800386c <instruction_handler+0x274>)
 800370c:	799b      	ldrb	r3, [r3, #6]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	b21a      	sxth	r2, r3
 8003712:	4b56      	ldr	r3, [pc, #344]	; (800386c <instruction_handler+0x274>)
 8003714:	795b      	ldrb	r3, [r3, #5]
 8003716:	b21b      	sxth	r3, r3
 8003718:	4313      	orrs	r3, r2
 800371a:	b21b      	sxth	r3, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b05      	subs	r3, #5
 8003720:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	2b81      	cmp	r3, #129	; 0x81
 8003726:	d822      	bhi.n	800376e <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 8003728:	2300      	movs	r3, #0
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
 800372c:	e00c      	b.n	8003748 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	f103 020a 	add.w	r2, r3, #10
 8003734:	88f9      	ldrh	r1, [r7, #6]
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	440b      	add	r3, r1
 800373a:	494c      	ldr	r1, [pc, #304]	; (800386c <instruction_handler+0x274>)
 800373c:	5c89      	ldrb	r1, [r1, r2]
 800373e:	4a4d      	ldr	r2, [pc, #308]	; (8003874 <instruction_handler+0x27c>)
 8003740:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	3301      	adds	r3, #1
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
 8003748:	88bb      	ldrh	r3, [r7, #4]
 800374a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374c:	429a      	cmp	r2, r3
 800374e:	d3ee      	bcc.n	800372e <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	2b3f      	cmp	r3, #63	; 0x3f
 8003754:	d801      	bhi.n	800375a <instruction_handler+0x162>
				{
					store_eeprom_regs();
 8003756:	f7fe feaf 	bl	80024b8 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800375a:	4b45      	ldr	r3, [pc, #276]	; (8003870 <instruction_handler+0x278>)
 800375c:	2255      	movs	r2, #85	; 0x55
 800375e:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <instruction_handler+0x278>)
 8003762:	2200      	movs	r2, #0
 8003764:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8003766:	2002      	movs	r0, #2
 8003768:	f7ff fefe 	bl	8003568 <packet_encapsulate>
 800376c:	e008      	b.n	8003780 <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800376e:	4b40      	ldr	r3, [pc, #256]	; (8003870 <instruction_handler+0x278>)
 8003770:	2255      	movs	r2, #85	; 0x55
 8003772:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8003774:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <instruction_handler+0x278>)
 8003776:	2207      	movs	r2, #7
 8003778:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 800377a:	2002      	movs	r0, #2
 800377c:	f7ff fef4 	bl	8003568 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <instruction_handler+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	493a      	ldr	r1, [pc, #232]	; (8003870 <instruction_handler+0x278>)
 8003788:	483c      	ldr	r0, [pc, #240]	; (800387c <instruction_handler+0x284>)
 800378a:	f000 fb2b 	bl	8003de4 <HAL_Serial_Write>
		}
		break;
 800378e:	e09f      	b.n	80038d0 <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 8003790:	4b36      	ldr	r3, [pc, #216]	; (800386c <instruction_handler+0x274>)
 8003792:	799b      	ldrb	r3, [r3, #6]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	b21a      	sxth	r2, r3
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <instruction_handler+0x274>)
 800379a:	795b      	ldrb	r3, [r3, #5]
 800379c:	b21b      	sxth	r3, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	b21b      	sxth	r3, r3
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b07      	subs	r3, #7
 80037a6:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <instruction_handler+0x274>)
 80037aa:	7a5b      	ldrb	r3, [r3, #9]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <instruction_handler+0x274>)
 80037b2:	7a1b      	ldrb	r3, [r3, #8]
 80037b4:	b21b      	sxth	r3, r3
 80037b6:	4313      	orrs	r3, r2
 80037b8:	b21b      	sxth	r3, r3
 80037ba:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <instruction_handler+0x274>)
 80037be:	7adb      	ldrb	r3, [r3, #11]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <instruction_handler+0x274>)
 80037c4:	7a92      	ldrb	r2, [r2, #10]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 80037ca:	8bfa      	ldrh	r2, [r7, #30]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	3301      	adds	r3, #1
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 80037d6:	4b27      	ldr	r3, [pc, #156]	; (8003874 <instruction_handler+0x27c>)
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	e027      	b.n	8003832 <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	3301      	adds	r3, #1
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	330c      	adds	r3, #12
 80037ee:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <instruction_handler+0x274>)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d114      	bne.n	800382c <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	e00d      	b.n	8003824 <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	4413      	add	r3, r2
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	8bb9      	ldrh	r1, [r7, #28]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	440b      	add	r3, r1
 8003816:	4915      	ldr	r1, [pc, #84]	; (800386c <instruction_handler+0x274>)
 8003818:	5c89      	ldrb	r1, [r1, r2]
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <instruction_handler+0x27c>)
 800381c:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	3301      	adds	r3, #1
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	429a      	cmp	r2, r3
 800382a:	d3ed      	bcc.n	8003808 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	3301      	adds	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	429a      	cmp	r2, r3
 8003838:	d3d3      	bcc.n	80037e2 <instruction_handler+0x1ea>
				}
			}
		}
		break;
 800383a:	e049      	b.n	80038d0 <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 800383c:	f7fe fd6e 	bl	800231c <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <instruction_handler+0x278>)
 8003842:	2255      	movs	r2, #85	; 0x55
 8003844:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <instruction_handler+0x278>)
 8003848:	2200      	movs	r2, #0
 800384a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 800384c:	2002      	movs	r0, #2
 800384e:	f7ff fe8b 	bl	8003568 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <instruction_handler+0x280>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	4905      	ldr	r1, [pc, #20]	; (8003870 <instruction_handler+0x278>)
 800385a:	4808      	ldr	r0, [pc, #32]	; (800387c <instruction_handler+0x284>)
 800385c:	f000 fac2 	bl	8003de4 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8003860:	2064      	movs	r0, #100	; 0x64
 8003862:	f000 ff67 	bl	8004734 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8003866:	f002 f8b2 	bl	80059ce <HAL_NVIC_SystemReset>
		}
		break;
 800386a:	e031      	b.n	80038d0 <instruction_handler+0x2d8>
 800386c:	20002d8c 	.word	0x20002d8c
 8003870:	200031d8 	.word	0x200031d8
 8003874:	20000158 	.word	0x20000158
 8003878:	2000013c 	.word	0x2000013c
 800387c:	200003c0 	.word	0x200003c0
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003880:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <instruction_handler+0x2e0>)
 8003882:	2255      	movs	r2, #85	; 0x55
 8003884:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <instruction_handler+0x2e0>)
 8003888:	2200      	movs	r2, #0
 800388a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 800388c:	2002      	movs	r0, #2
 800388e:	f7ff fe6b 	bl	8003568 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <instruction_handler+0x2e4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	490f      	ldr	r1, [pc, #60]	; (80038d8 <instruction_handler+0x2e0>)
 800389a:	4811      	ldr	r0, [pc, #68]	; (80038e0 <instruction_handler+0x2e8>)
 800389c:	f000 faa2 	bl	8003de4 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 80038a0:	2064      	movs	r0, #100	; 0x64
 80038a2:	f000 ff47 	bl	8004734 <HAL_Delay>
			HAL_NVIC_SystemReset();
 80038a6:	f002 f892 	bl	80059ce <HAL_NVIC_SystemReset>
		}
		break;
 80038aa:	e011      	b.n	80038d0 <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <instruction_handler+0x2e0>)
 80038ae:	2255      	movs	r2, #85	; 0x55
 80038b0:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <instruction_handler+0x2e0>)
 80038b4:	2202      	movs	r2, #2
 80038b6:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 80038b8:	2002      	movs	r0, #2
 80038ba:	f7ff fe55 	bl	8003568 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <instruction_handler+0x2e4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4904      	ldr	r1, [pc, #16]	; (80038d8 <instruction_handler+0x2e0>)
 80038c6:	4806      	ldr	r0, [pc, #24]	; (80038e0 <instruction_handler+0x2e8>)
 80038c8:	f000 fa8c 	bl	8003de4 <HAL_Serial_Write>
		break;
 80038cc:	e000      	b.n	80038d0 <instruction_handler+0x2d8>
		break;
 80038ce:	bf00      	nop
		// nope
	}
}
 80038d0:	bf00      	nop
 80038d2:	3730      	adds	r7, #48	; 0x30
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200031d8 	.word	0x200031d8
 80038dc:	2000013c 	.word	0x2000013c
 80038e0:	200003c0 	.word	0x200003c0

080038e4 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 80038ee:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <packet_handler+0x21c>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b09      	cmp	r3, #9
 80038f4:	f200 8100 	bhi.w	8003af8 <packet_handler+0x214>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <packet_handler+0x1c>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003929 	.word	0x08003929
 8003904:	0800393f 	.word	0x0800393f
 8003908:	0800396f 	.word	0x0800396f
 800390c:	0800398b 	.word	0x0800398b
 8003910:	080039a7 	.word	0x080039a7
 8003914:	080039c9 	.word	0x080039c9
 8003918:	080039d7 	.word	0x080039d7
 800391c:	08003a0f 	.word	0x08003a0f
 8003920:	08003a3d 	.word	0x08003a3d
 8003924:	08003a59 	.word	0x08003a59
	{
	case HEADER1:
		if(c==0xFF)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2bff      	cmp	r3, #255	; 0xff
 800392c:	f040 80e1 	bne.w	8003af2 <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8003930:	4a74      	ldr	r2, [pc, #464]	; (8003b04 <packet_handler+0x220>)
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8003936:	4b72      	ldr	r3, [pc, #456]	; (8003b00 <packet_handler+0x21c>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800393c:	e0d9      	b.n	8003af2 <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2bff      	cmp	r3, #255	; 0xff
 8003942:	d106      	bne.n	8003952 <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8003944:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <packet_handler+0x220>)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 800394a:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <packet_handler+0x21c>)
 800394c:	2202      	movs	r2, #2
 800394e:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8003950:	e0d2      	b.n	8003af8 <packet_handler+0x214>
		else if(c==0xFD)
 8003952:	79fb      	ldrb	r3, [r7, #7]
 8003954:	2bfd      	cmp	r3, #253	; 0xfd
 8003956:	d106      	bne.n	8003966 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8003958:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <packet_handler+0x220>)
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 800395e:	4b68      	ldr	r3, [pc, #416]	; (8003b00 <packet_handler+0x21c>)
 8003960:	2203      	movs	r2, #3
 8003962:	701a      	strb	r2, [r3, #0]
		break;
 8003964:	e0c8      	b.n	8003af8 <packet_handler+0x214>
			packet_state = HEADER1;
 8003966:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <packet_handler+0x21c>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
		break;
 800396c:	e0c4      	b.n	8003af8 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	2bfd      	cmp	r3, #253	; 0xfd
 8003972:	d106      	bne.n	8003982 <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8003974:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <packet_handler+0x220>)
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <packet_handler+0x21c>)
 800397c:	2203      	movs	r2, #3
 800397e:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8003980:	e0ba      	b.n	8003af8 <packet_handler+0x214>
			packet_state = HEADER1;
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <packet_handler+0x21c>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
		break;
 8003988:	e0b6      	b.n	8003af8 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 8003990:	4a5c      	ldr	r2, [pc, #368]	; (8003b04 <packet_handler+0x220>)
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 8003996:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <packet_handler+0x21c>)
 8003998:	2204      	movs	r2, #4
 800399a:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 800399c:	e0ac      	b.n	8003af8 <packet_handler+0x214>
			packet_state = HEADER1;
 800399e:	4b58      	ldr	r3, [pc, #352]	; (8003b00 <packet_handler+0x21c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
		break;
 80039a4:	e0a8      	b.n	8003af8 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2bfc      	cmp	r3, #252	; 0xfc
 80039aa:	d902      	bls.n	80039b2 <packet_handler+0xce>
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	2bfe      	cmp	r3, #254	; 0xfe
 80039b0:	d106      	bne.n	80039c0 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 80039b2:	4a54      	ldr	r2, [pc, #336]	; (8003b04 <packet_handler+0x220>)
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 80039b8:	4b51      	ldr	r3, [pc, #324]	; (8003b00 <packet_handler+0x21c>)
 80039ba:	2205      	movs	r2, #5
 80039bc:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80039be:	e09b      	b.n	8003af8 <packet_handler+0x214>
			packet_state = HEADER1;
 80039c0:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <packet_handler+0x21c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
		break;
 80039c6:	e097      	b.n	8003af8 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 80039c8:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <packet_handler+0x220>)
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 80039ce:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <packet_handler+0x21c>)
 80039d0:	2206      	movs	r2, #6
 80039d2:	701a      	strb	r2, [r3, #0]
		break;
 80039d4:	e090      	b.n	8003af8 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 80039d6:	4a4b      	ldr	r2, [pc, #300]	; (8003b04 <packet_handler+0x220>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 80039dc:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <packet_handler+0x220>)
 80039de:	799b      	ldrb	r3, [r3, #6]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	4a48      	ldr	r2, [pc, #288]	; (8003b04 <packet_handler+0x220>)
 80039e4:	7952      	ldrb	r2, [r2, #5]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	3b02      	subs	r3, #2
 80039ea:	4a47      	ldr	r2, [pc, #284]	; (8003b08 <packet_handler+0x224>)
 80039ec:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 80039ee:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <packet_handler+0x224>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f6:	d806      	bhi.n	8003a06 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 80039f8:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <packet_handler+0x21c>)
 80039fa:	2207      	movs	r2, #7
 80039fc:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 80039fe:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <packet_handler+0x228>)
 8003a00:	2207      	movs	r2, #7
 8003a02:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8003a04:	e078      	b.n	8003af8 <packet_handler+0x214>
			packet_state = HEADER1;
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <packet_handler+0x21c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
		break;
 8003a0c:	e074      	b.n	8003af8 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003a0e:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <packet_handler+0x228>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	493c      	ldr	r1, [pc, #240]	; (8003b04 <packet_handler+0x220>)
 8003a14:	79fa      	ldrb	r2, [r7, #7]
 8003a16:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <packet_handler+0x228>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	4a3b      	ldr	r2, [pc, #236]	; (8003b0c <packet_handler+0x228>)
 8003a20:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8003a22:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <packet_handler+0x224>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	4a37      	ldr	r2, [pc, #220]	; (8003b08 <packet_handler+0x224>)
 8003a2a:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 8003a2c:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <packet_handler+0x224>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d160      	bne.n	8003af6 <packet_handler+0x212>
			packet_state = CRC1;
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <packet_handler+0x21c>)
 8003a36:	2208      	movs	r2, #8
 8003a38:	701a      	strb	r2, [r3, #0]
		break;
 8003a3a:	e05c      	b.n	8003af6 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003a3c:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <packet_handler+0x228>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4930      	ldr	r1, [pc, #192]	; (8003b04 <packet_handler+0x220>)
 8003a42:	79fa      	ldrb	r2, [r7, #7]
 8003a44:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <packet_handler+0x228>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a2f      	ldr	r2, [pc, #188]	; (8003b0c <packet_handler+0x228>)
 8003a4e:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <packet_handler+0x21c>)
 8003a52:	2209      	movs	r2, #9
 8003a54:	701a      	strb	r2, [r3, #0]
		break;
 8003a56:	e04f      	b.n	8003af8 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003a58:	4b2c      	ldr	r3, [pc, #176]	; (8003b0c <packet_handler+0x228>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4929      	ldr	r1, [pc, #164]	; (8003b04 <packet_handler+0x220>)
 8003a5e:	79fa      	ldrb	r2, [r7, #7]
 8003a60:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <packet_handler+0x228>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <packet_handler+0x220>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	b21a      	sxth	r2, r3
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <packet_handler+0x228>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	4923      	ldr	r1, [pc, #140]	; (8003b04 <packet_handler+0x220>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	b21b      	sxth	r3, r3
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <packet_handler+0x228>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	491d      	ldr	r1, [pc, #116]	; (8003b04 <packet_handler+0x220>)
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7ff fd38 	bl	8003504 <updateCRC>
 8003a94:	4603      	mov	r3, r0
 8003a96:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 8003a98:	89ba      	ldrh	r2, [r7, #12]
 8003a9a:	89fb      	ldrh	r3, [r7, #14]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d10c      	bne.n	8003aba <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 8003aa0:	4b18      	ldr	r3, [pc, #96]	; (8003b04 <packet_handler+0x220>)
 8003aa2:	791a      	ldrb	r2, [r3, #4]
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <packet_handler+0x22c>)
 8003aa6:	78db      	ldrb	r3, [r3, #3]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d003      	beq.n	8003ab4 <packet_handler+0x1d0>
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <packet_handler+0x220>)
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	2bfe      	cmp	r3, #254	; 0xfe
 8003ab2:	d11a      	bne.n	8003aea <packet_handler+0x206>
				instruction_handler();
 8003ab4:	f7ff fda0 	bl	80035f8 <instruction_handler>
 8003ab8:	e017      	b.n	8003aea <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <packet_handler+0x22c>)
 8003abc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <packet_handler+0x22c>)
 8003ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <packet_handler+0x230>)
 8003acc:	2255      	movs	r2, #85	; 0x55
 8003ace:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <packet_handler+0x230>)
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8003ad6:	2002      	movs	r0, #2
 8003ad8:	f7ff fd46 	bl	8003568 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <packet_handler+0x234>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	490c      	ldr	r1, [pc, #48]	; (8003b14 <packet_handler+0x230>)
 8003ae4:	480d      	ldr	r0, [pc, #52]	; (8003b1c <packet_handler+0x238>)
 8003ae6:	f000 f97d 	bl	8003de4 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <packet_handler+0x21c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
		break;
 8003af0:	e002      	b.n	8003af8 <packet_handler+0x214>
		break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <packet_handler+0x214>
		break;
 8003af6:	bf00      	nop
	}
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000140 	.word	0x20000140
 8003b04:	20002d8c 	.word	0x20002d8c
 8003b08:	20000138 	.word	0x20000138
 8003b0c:	20000134 	.word	0x20000134
 8003b10:	20000158 	.word	0x20000158
 8003b14:	200031d8 	.word	0x200031d8
 8003b18:	2000013c 	.word	0x2000013c
 8003b1c:	200003c0 	.word	0x200003c0

08003b20 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e032      	b.n	8003b96 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <HAL_UART_ErrorCallback+0x90>)
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d124      	bne.n	8003b8c <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_UART_ErrorCallback+0x90>)
 8003b48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <HAL_UART_ErrorCallback+0x90>)
 8003b52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b56:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8003b5a:	3210      	adds	r2, #16
 8003b5c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b60:	3310      	adds	r3, #16
 8003b62:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <HAL_UART_ErrorCallback+0x90>)
 8003b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <HAL_UART_ErrorCallback+0x90>)
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003b7e:	3310      	adds	r3, #16
 8003b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b84:	4619      	mov	r1, r3
 8003b86:	f005 f929 	bl	8008ddc <HAL_UART_Receive_DMA>
		   break;
 8003b8a:	e00b      	b.n	8003ba4 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4a06      	ldr	r2, [pc, #24]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_UART_ErrorCallback+0x8c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_UART_ErrorCallback+0x94>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1c5      	bne.n	8003b30 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	2000014c 	.word	0x2000014c
 8003bb0:	20000144 	.word	0x20000144
 8003bb4:	20000148 	.word	0x20000148

08003bb8 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8003bc6:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <HAL_Serial_Init_Half_Duplex+0x124>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	4943      	ldr	r1, [pc, #268]	; (8003cdc <HAL_Serial_Init_Half_Duplex+0x124>)
 8003bce:	600a      	str	r2, [r1, #0]
 8003bd0:	4943      	ldr	r1, [pc, #268]	; (8003ce0 <HAL_Serial_Init_Half_Duplex+0x128>)
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003be4:	3304      	adds	r3, #4
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8003c08:	3210      	adds	r2, #16
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c10:	3310      	adds	r3, #16
 8003c12:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003c1e:	3310      	adds	r3, #16
 8003c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c24:	4619      	mov	r1, r3
 8003c26:	f005 f8d9 	bl	8008ddc <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c30:	3314      	adds	r3, #20
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c48:	331c      	adds	r3, #28
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c54:	331e      	adds	r3, #30
 8003c56:	7e3a      	ldrb	r2, [r7, #24]
 8003c58:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c60:	3320      	adds	r3, #32
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	8c3a      	ldrh	r2, [r7, #32]
 8003c70:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c78:	3326      	adds	r3, #38	; 0x26
 8003c7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c7e:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c86:	3318      	adds	r3, #24
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c90:	331c      	adds	r3, #28
 8003c92:	8819      	ldrh	r1, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c9a:	331e      	adds	r3, #30
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f002 fd83 	bl	80067b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cbe:	3324      	adds	r3, #36	; 0x24
 8003cc0:	8819      	ldrh	r1, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cc8:	3326      	adds	r3, #38	; 0x26
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f002 fd71 	bl	80067b4 <HAL_GPIO_WritePin>
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000148 	.word	0x20000148
 8003ce0:	20000144 	.word	0x20000144

08003ce4 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_Serial_Available+0x14>
        return 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e01f      	b.n	8003d38 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003cfe:	3310      	adds	r3, #16
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	6852      	ldr	r2, [r2, #4]
 8003d0a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8003d0e:	4413      	add	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d18:	3310      	adds	r3, #16
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d303      	bcc.n	8003d2e <HAL_Serial_Available+0x4a>
        return head-tail;
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	e004      	b.n	8003d38 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_Serial_GetChar+0x14>
        return 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e03f      	b.n	8003dd8 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d5e:	3310      	adds	r3, #16
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	6852      	ldr	r2, [r2, #4]
 8003d6a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8003d6e:	4413      	add	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d78:	3310      	adds	r3, #16
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d027      	beq.n	8003dd6 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d8c:	3310      	adds	r3, #16
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	1c51      	adds	r1, r2, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d98:	3310      	adds	r3, #16
 8003d9a:	6019      	str	r1, [r3, #0]
 8003d9c:	7813      	ldrb	r3, [r2, #0]
 8003d9e:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003da6:	3310      	adds	r3, #16
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003db0:	3310      	adds	r3, #16
 8003db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d30b      	bcc.n	8003dd2 <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003dc0:	3310      	adds	r3, #16
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003dce:	3310      	adds	r3, #16
 8003dd0:	601a      	str	r2, [r3, #0]
        return c;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	e000      	b.n	8003dd8 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_Serial_Write+0x18>
        return 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e09a      	b.n	8003f32 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e02:	3304      	adds	r3, #4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4403      	add	r3, r0
 8003e14:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003e18:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e20:	3304      	adds	r3, #4
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	019b      	lsls	r3, r3, #6
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	6978      	ldr	r0, [r7, #20]
 8003e3c:	f006 f898 	bl	8009f70 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e46:	3304      	adds	r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e56:	3304      	adds	r3, #4
 8003e58:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e60:	330c      	adds	r3, #12
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d163      	bne.n	8003f30 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e6e:	330c      	adds	r3, #12
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d028      	beq.n	8003ed4 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e88:	3318      	adds	r3, #24
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e92:	331c      	adds	r3, #28
 8003e94:	8819      	ldrh	r1, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e9c:	331e      	adds	r3, #30
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f002 fc87 	bl	80067b4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003eac:	3320      	adds	r3, #32
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003eb6:	3324      	adds	r3, #36	; 0x24
 8003eb8:	8819      	ldrh	r1, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003ec0:	3326      	adds	r3, #38	; 0x26
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f002 fc70 	bl	80067b4 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003ede:	3308      	adds	r3, #8
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	4613      	mov	r3, r2
 8003efe:	019b      	lsls	r3, r3, #6
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003f0a:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4621      	mov	r1, r4
 8003f12:	f004 fee3 	bl	8008cdc <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 8003f30:	687b      	ldr	r3, [r7, #4]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd90      	pop	{r4, r7, pc}
	...

08003f3c <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8003f44:	4b71      	ldr	r3, [pc, #452]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	e0d0      	b.n	80040ee <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8003f4c:	4b6f      	ldr	r3, [pc, #444]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a6f      	ldr	r2, [pc, #444]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	f040 80c2 	bne.w	80040e4 <HAL_UART_TxCpltCallback+0x1a8>
 8003f60:	4b6a      	ldr	r3, [pc, #424]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f6e:	330c      	adds	r3, #12
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	f040 80b6 	bne.w	80040e4 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8003f78:	4b64      	ldr	r3, [pc, #400]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a64      	ldr	r2, [pc, #400]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f82:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f86:	3304      	adds	r3, #4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b60      	ldr	r3, [pc, #384]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4960      	ldr	r1, [pc, #384]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f94:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f98:	3308      	adds	r3, #8
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d04a      	beq.n	8004036 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a5a      	ldr	r2, [pc, #360]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8003faa:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8003fac:	4b57      	ldr	r3, [pc, #348]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a57      	ldr	r2, [pc, #348]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fb6:	4b55      	ldr	r3, [pc, #340]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a55      	ldr	r2, [pc, #340]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	019b      	lsls	r3, r3, #6
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8003fd4:	4b4d      	ldr	r3, [pc, #308]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fde:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003fec:	3308      	adds	r3, #8
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003ffe:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8004000:	b29b      	uxth	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	4621      	mov	r1, r4
 8004006:	f004 fe69 	bl	8008cdc <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 800400a:	4b40      	ldr	r3, [pc, #256]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a40      	ldr	r2, [pc, #256]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004018:	3308      	adds	r3, #8
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	493b      	ldr	r1, [pc, #236]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8004024:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004028:	f002 021f 	and.w	r2, r2, #31
 800402c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004030:	3308      	adds	r3, #8
 8004032:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 8004034:	e064      	b.n	8004100 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 8004036:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a35      	ldr	r2, [pc, #212]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 800403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004040:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004044:	330c      	adds	r3, #12
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 800404a:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a30      	ldr	r2, [pc, #192]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004058:	3314      	adds	r3, #20
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d04f      	beq.n	8004100 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800406e:	3318      	adds	r3, #24
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	4b26      	ldr	r3, [pc, #152]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004080:	331c      	adds	r3, #28
 8004082:	8819      	ldrh	r1, [r3, #0]
 8004084:	4b21      	ldr	r3, [pc, #132]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 800408a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004092:	331e      	adds	r3, #30
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf0c      	ite	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	2300      	movne	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	f002 fb87 	bl	80067b4 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 80040ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80040b4:	3320      	adds	r3, #32
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80040c6:	3324      	adds	r3, #36	; 0x24
 80040c8:	8819      	ldrh	r1, [r3, #0]
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a10      	ldr	r2, [pc, #64]	; (8004110 <HAL_UART_TxCpltCallback+0x1d4>)
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80040d8:	3326      	adds	r3, #38	; 0x26
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	f002 fb69 	bl	80067b4 <HAL_GPIO_WritePin>
           break;
 80040e2:	e00d      	b.n	8004100 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b07      	ldr	r3, [pc, #28]	; (800410c <HAL_UART_TxCpltCallback+0x1d0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <HAL_UART_TxCpltCallback+0x1d8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	f47f af27 	bne.w	8003f4c <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 80040fe:	e000      	b.n	8004102 <HAL_UART_TxCpltCallback+0x1c6>
           break;
 8004100:	bf00      	nop
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	bf00      	nop
 800410c:	20000150 	.word	0x20000150
 8004110:	20000144 	.word	0x20000144
 8004114:	20000148 	.word	0x20000148

08004118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411e:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_MspInit+0x44>)
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	4a0e      	ldr	r2, [pc, #56]	; (800415c <HAL_MspInit+0x44>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6613      	str	r3, [r2, #96]	; 0x60
 800412a:	4b0c      	ldr	r3, [pc, #48]	; (800415c <HAL_MspInit+0x44>)
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_MspInit+0x44>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_MspInit+0x44>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6593      	str	r3, [r2, #88]	; 0x58
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_MspInit+0x44>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800414e:	f002 fbed 	bl	800692c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000

08004160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08c      	sub	sp, #48	; 0x30
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004168:	f107 031c 	add.w	r3, r7, #28
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004180:	d12d      	bne.n	80041de <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004182:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_ADC_MspInit+0xec>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3301      	adds	r3, #1
 8004188:	4a30      	ldr	r2, [pc, #192]	; (800424c <HAL_ADC_MspInit+0xec>)
 800418a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800418c:	4b2f      	ldr	r3, [pc, #188]	; (800424c <HAL_ADC_MspInit+0xec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d10b      	bne.n	80041ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	4a2d      	ldr	r2, [pc, #180]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 800419a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800419e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a0:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ac:	4b28      	ldr	r3, [pc, #160]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 80041ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b0:	4a27      	ldr	r2, [pc, #156]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 80041b2:	f043 0320 	orr.w	r3, r3, #32
 80041b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c8:	2303      	movs	r3, #3
 80041ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	4619      	mov	r1, r3
 80041d6:	481f      	ldr	r0, [pc, #124]	; (8004254 <HAL_ADC_MspInit+0xf4>)
 80041d8:	f002 f952 	bl	8006480 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80041dc:	e032      	b.n	8004244 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_ADC_MspInit+0xf8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d12d      	bne.n	8004244 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <HAL_ADC_MspInit+0xec>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <HAL_ADC_MspInit+0xec>)
 80041f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_ADC_MspInit+0xec>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10b      	bne.n	8004212 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	4a14      	ldr	r2, [pc, #80]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 8004200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <HAL_ADC_MspInit+0xf0>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800422a:	2301      	movs	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800422e:	2303      	movs	r3, #3
 8004230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 031c 	add.w	r3, r7, #28
 800423a:	4619      	mov	r1, r3
 800423c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004240:	f002 f91e 	bl	8006480 <HAL_GPIO_Init>
}
 8004244:	bf00      	nop
 8004246:	3730      	adds	r7, #48	; 0x30
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000154 	.word	0x20000154
 8004250:	40021000 	.word	0x40021000
 8004254:	48001400 	.word	0x48001400
 8004258:	50000100 	.word	0x50000100

0800425c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_TIM_Encoder_MspInit+0x80>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d129      	bne.n	80042d2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004282:	4a17      	ldr	r2, [pc, #92]	; (80042e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004288:	6613      	str	r3, [r2, #96]	; 0x60
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_TIM_Encoder_MspInit+0x84>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042bc:	2300      	movs	r3, #0
 80042be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80042c0:	2306      	movs	r3, #6
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4619      	mov	r1, r3
 80042ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042ce:	f002 f8d7 	bl	8006480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80042d2:	bf00      	nop
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40021000 	.word	0x40021000

080042e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <HAL_TIM_Base_MspInit+0x5c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10c      	bne.n	8004310 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_TIM_Base_MspInit+0x60>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <HAL_TIM_Base_MspInit+0x60>)
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_TIM_Base_MspInit+0x60>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800430e:	e010      	b.n	8004332 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0c      	ldr	r2, [pc, #48]	; (8004348 <HAL_TIM_Base_MspInit+0x64>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10b      	bne.n	8004332 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_TIM_Base_MspInit+0x60>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_TIM_Base_MspInit+0x60>)
 8004320:	f043 0310 	orr.w	r3, r3, #16
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_TIM_Base_MspInit+0x60>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
}
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40000800 	.word	0x40000800
 8004344:	40021000 	.word	0x40021000
 8004348:	40001000 	.word	0x40001000

0800434c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a11      	ldr	r2, [pc, #68]	; (80043b0 <HAL_TIM_MspPostInit+0x64>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d11b      	bne.n	80043a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_TIM_MspPostInit+0x68>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_TIM_MspPostInit+0x68>)
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_TIM_MspPostInit+0x68>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004386:	23c0      	movs	r3, #192	; 0xc0
 8004388:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004396:	2302      	movs	r3, #2
 8004398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	4619      	mov	r1, r3
 80043a0:	4805      	ldr	r0, [pc, #20]	; (80043b8 <HAL_TIM_MspPostInit+0x6c>)
 80043a2:	f002 f86d 	bl	8006480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80043a6:	bf00      	nop
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40021000 	.word	0x40021000
 80043b8:	48000400 	.word	0x48000400

080043bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a53      	ldr	r2, [pc, #332]	; (8004528 <HAL_UART_MspInit+0x16c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	f040 80a0 	bne.w	8004520 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043e0:	4b52      	ldr	r3, [pc, #328]	; (800452c <HAL_UART_MspInit+0x170>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	4a51      	ldr	r2, [pc, #324]	; (800452c <HAL_UART_MspInit+0x170>)
 80043e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ea:	6593      	str	r3, [r2, #88]	; 0x58
 80043ec:	4b4f      	ldr	r3, [pc, #316]	; (800452c <HAL_UART_MspInit+0x170>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_UART_MspInit+0x170>)
 80043fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fc:	4a4b      	ldr	r2, [pc, #300]	; (800452c <HAL_UART_MspInit+0x170>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004404:	4b49      	ldr	r3, [pc, #292]	; (800452c <HAL_UART_MspInit+0x170>)
 8004406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004410:	4b46      	ldr	r3, [pc, #280]	; (800452c <HAL_UART_MspInit+0x170>)
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	4a45      	ldr	r2, [pc, #276]	; (800452c <HAL_UART_MspInit+0x170>)
 8004416:	f043 0302 	orr.w	r3, r3, #2
 800441a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_UART_MspInit+0x170>)
 800441e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004436:	2300      	movs	r3, #0
 8004438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800443a:	2307      	movs	r3, #7
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4619      	mov	r1, r3
 8004444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004448:	f002 f81a 	bl	8006480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800444c:	2308      	movs	r3, #8
 800444e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	2302      	movs	r3, #2
 8004452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800445c:	2307      	movs	r3, #7
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	4619      	mov	r1, r3
 8004466:	4832      	ldr	r0, [pc, #200]	; (8004530 <HAL_UART_MspInit+0x174>)
 8004468:	f002 f80a 	bl	8006480 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_UART_MspInit+0x178>)
 800446e:	4a32      	ldr	r2, [pc, #200]	; (8004538 <HAL_UART_MspInit+0x17c>)
 8004470:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004474:	221a      	movs	r2, #26
 8004476:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004478:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <HAL_UART_MspInit+0x178>)
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004480:	2200      	movs	r2, #0
 8004482:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_UART_MspInit+0x178>)
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004490:	4b28      	ldr	r3, [pc, #160]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004492:	2200      	movs	r2, #0
 8004494:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004496:	4b27      	ldr	r3, [pc, #156]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004498:	2220      	movs	r2, #32
 800449a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <HAL_UART_MspInit+0x178>)
 800449e:	2200      	movs	r2, #0
 80044a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044a2:	4824      	ldr	r0, [pc, #144]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044a4:	f001 faa4 	bl	80059f0 <HAL_DMA_Init>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 80044ae:	f7fe fe49 	bl	8003144 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044b6:	679a      	str	r2, [r3, #120]	; 0x78
 80044b8:	4a1e      	ldr	r2, [pc, #120]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <HAL_UART_MspInit+0x180>)
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <HAL_UART_MspInit+0x184>)
 80044c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_UART_MspInit+0x180>)
 80044c6:	221b      	movs	r2, #27
 80044c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_UART_MspInit+0x180>)
 80044cc:	2210      	movs	r2, #16
 80044ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_UART_MspInit+0x180>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_UART_MspInit+0x180>)
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <HAL_UART_MspInit+0x180>)
 80044de:	2200      	movs	r2, #0
 80044e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_UART_MspInit+0x180>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_UART_MspInit+0x180>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_UART_MspInit+0x180>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044f4:	4811      	ldr	r0, [pc, #68]	; (800453c <HAL_UART_MspInit+0x180>)
 80044f6:	f001 fa7b 	bl	80059f0 <HAL_DMA_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8004500:	f7fe fe20 	bl	8003144 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0d      	ldr	r2, [pc, #52]	; (800453c <HAL_UART_MspInit+0x180>)
 8004508:	675a      	str	r2, [r3, #116]	; 0x74
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <HAL_UART_MspInit+0x180>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2100      	movs	r1, #0
 8004514:	2026      	movs	r0, #38	; 0x26
 8004516:	f001 fa32 	bl	800597e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800451a:	2026      	movs	r0, #38	; 0x26
 800451c:	f001 fa49 	bl	80059b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004520:	bf00      	nop
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40004400 	.word	0x40004400
 800452c:	40021000 	.word	0x40021000
 8004530:	48000400 	.word	0x48000400
 8004534:	200001dc 	.word	0x200001dc
 8004538:	40020008 	.word	0x40020008
 800453c:	20000360 	.word	0x20000360
 8004540:	4002001c 	.word	0x4002001c

08004544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <NMI_Handler+0x4>

0800454a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <HardFault_Handler+0x4>

08004550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004554:	e7fe      	b.n	8004554 <MemManage_Handler+0x4>

08004556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800455a:	e7fe      	b.n	800455a <BusFault_Handler+0x4>

0800455c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004560:	e7fe      	b.n	8004560 <UsageFault_Handler+0x4>

08004562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004590:	f000 f8b2 	bl	80046f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004594:	bf00      	nop
 8004596:	bd80      	pop	{r7, pc}

08004598 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800459c:	4802      	ldr	r0, [pc, #8]	; (80045a8 <DMA1_Channel1_IRQHandler+0x10>)
 800459e:	f001 fbb1 	bl	8005d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200001dc 	.word	0x200001dc

080045ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045b0:	4802      	ldr	r0, [pc, #8]	; (80045bc <DMA1_Channel2_IRQHandler+0x10>)
 80045b2:	f001 fba7 	bl	8005d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000360 	.word	0x20000360

080045c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045c4:	4802      	ldr	r0, [pc, #8]	; (80045d0 <USART2_IRQHandler+0x10>)
 80045c6:	f004 fc91 	bl	8008eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20002d00 	.word	0x20002d00

080045d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <SystemInit+0x28>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <SystemInit+0x28>)
 80045e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <SystemInit+0x28>)
 80045ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ee:	609a      	str	r2, [r3, #8]
#endif
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004600:	480d      	ldr	r0, [pc, #52]	; (8004638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004602:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004604:	480d      	ldr	r0, [pc, #52]	; (800463c <LoopForever+0x6>)
  ldr r1, =_edata
 8004606:	490e      	ldr	r1, [pc, #56]	; (8004640 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004608:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <LoopForever+0xe>)
  movs r3, #0
 800460a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800460c:	e002      	b.n	8004614 <LoopCopyDataInit>

0800460e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800460e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004612:	3304      	adds	r3, #4

08004614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004618:	d3f9      	bcc.n	800460e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800461a:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <LoopForever+0x12>)
  ldr r4, =_ebss
 800461c:	4c0b      	ldr	r4, [pc, #44]	; (800464c <LoopForever+0x16>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004620:	e001      	b.n	8004626 <LoopFillZerobss>

08004622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004624:	3204      	adds	r2, #4

08004626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004628:	d3fb      	bcc.n	8004622 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800462a:	f7ff ffd3 	bl	80045d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800462e:	f005 fc7b 	bl	8009f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004632:	f7fe f9af 	bl	8002994 <main>

08004636 <LoopForever>:

LoopForever:
    b LoopForever
 8004636:	e7fe      	b.n	8004636 <LoopForever>
  ldr   r0, =_estack
 8004638:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800463c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004640:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004644:	0800a2c0 	.word	0x0800a2c0
  ldr r2, =_sbss
 8004648:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800464c:	20003628 	.word	0x20003628

08004650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004650:	e7fe      	b.n	8004650 <ADC1_2_IRQHandler>

08004652 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465c:	2003      	movs	r0, #3
 800465e:	f001 f983 	bl	8005968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004662:	2000      	movs	r0, #0
 8004664:	f000 f80e 	bl	8004684 <HAL_InitTick>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	71fb      	strb	r3, [r7, #7]
 8004672:	e001      	b.n	8004678 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004674:	f7ff fd50 	bl	8004118 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004678:	79fb      	ldrb	r3, [r7, #7]

}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004690:	4b16      	ldr	r3, [pc, #88]	; (80046ec <HAL_InitTick+0x68>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d022      	beq.n	80046de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_InitTick+0x6c>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_InitTick+0x68>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f992 	bl	80059d6 <HAL_SYSTICK_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10f      	bne.n	80046d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d809      	bhi.n	80046d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046be:	2200      	movs	r2, #0
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295
 80046c6:	f001 f95a 	bl	800597e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_InitTick+0x70>)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e007      	b.n	80046e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e004      	b.n	80046e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e001      	b.n	80046e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000010 	.word	0x20000010
 80046f0:	20000008 	.word	0x20000008
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_IncTick+0x1c>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <HAL_IncTick+0x20>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4413      	add	r3, r2
 8004706:	4a03      	ldr	r2, [pc, #12]	; (8004714 <HAL_IncTick+0x1c>)
 8004708:	6013      	str	r3, [r2, #0]
}
 800470a:	bf00      	nop
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	20003624 	.word	0x20003624
 8004718:	20000010 	.word	0x20000010

0800471c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return uwTick;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_GetTick+0x14>)
 8004722:	681b      	ldr	r3, [r3, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	20003624 	.word	0x20003624

08004734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800473c:	f7ff ffee 	bl	800471c <HAL_GetTick>
 8004740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d004      	beq.n	8004758 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_Delay+0x40>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004758:	bf00      	nop
 800475a:	f7ff ffdf 	bl	800471c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	429a      	cmp	r2, r3
 8004768:	d8f7      	bhi.n	800475a <HAL_Delay+0x26>
  {
  }
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010

08004778 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3360      	adds	r3, #96	; 0x60
 80047f2:	461a      	mov	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <LL_ADC_SetOffset+0x44>)
 8004802:	4013      	ands	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	03fff000 	.word	0x03fff000

08004828 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3360      	adds	r3, #96	; 0x60
 8004836:	461a      	mov	r2, r3
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3360      	adds	r3, #96	; 0x60
 8004864:	461a      	mov	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	431a      	orrs	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3360      	adds	r3, #96	; 0x60
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3360      	adds	r3, #96	; 0x60
 80048d0:	461a      	mov	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	615a      	str	r2, [r3, #20]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3330      	adds	r3, #48	; 0x30
 800492c:	461a      	mov	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	f003 030c 	and.w	r3, r3, #12
 8004938:	4413      	add	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	211f      	movs	r1, #31
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0e9b      	lsrs	r3, r3, #26
 8004954:	f003 011f 	and.w	r1, r3, #31
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	431a      	orrs	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3314      	adds	r3, #20
 8004984:	461a      	mov	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	0e5b      	lsrs	r3, r3, #25
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	4413      	add	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	0d1b      	lsrs	r3, r3, #20
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	2107      	movs	r1, #7
 80049a2:	fa01 f303 	lsl.w	r3, r1, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	401a      	ands	r2, r3
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	0d1b      	lsrs	r3, r3, #20
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	431a      	orrs	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f003 0318 	and.w	r3, r3, #24
 80049ee:	4908      	ldr	r1, [pc, #32]	; (8004a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80049f0:	40d9      	lsrs	r1, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	400b      	ands	r3, r1
 80049f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	0007ffff 	.word	0x0007ffff

08004a14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6093      	str	r3, [r2, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4c:	d101      	bne.n	8004a52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a9c:	d101      	bne.n	8004aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <LL_ADC_IsEnabled+0x18>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <LL_ADC_IsEnabled+0x1a>
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d101      	bne.n	8004aee <LL_ADC_REG_IsConversionOngoing+0x18>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d101      	bne.n	8004b14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e16b      	b.n	8004e16 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fb07 	bl	8004160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff67 	bl	8004a38 <LL_ADC_IsDeepPowerDownEnabled>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff4d 	bl	8004a14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff82 	bl	8004a88 <LL_ADC_IsInternalRegulatorEnabled>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d113      	bne.n	8004bb2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff66 	bl	8004a60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004b94:	4ba2      	ldr	r3, [pc, #648]	; (8004e20 <HAL_ADC_Init+0x2fc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	4aa2      	ldr	r2, [pc, #648]	; (8004e24 <HAL_ADC_Init+0x300>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ba4:	e002      	b.n	8004bac <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f9      	bne.n	8004ba6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff66 	bl	8004a88 <LL_ADC_IsInternalRegulatorEnabled>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ff77 	bl	8004ad6 <LL_ADC_REG_IsConversionOngoing>
 8004be8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8106 	bne.w	8004e04 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 8102 	bne.w	8004e04 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c08:	f043 0202 	orr.w	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff4b 	bl	8004ab0 <LL_ADC_IsEnabled>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d111      	bne.n	8004c44 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c24:	f7ff ff44 	bl	8004ab0 <LL_ADC_IsEnabled>
 8004c28:	4604      	mov	r4, r0
 8004c2a:	487f      	ldr	r0, [pc, #508]	; (8004e28 <HAL_ADC_Init+0x304>)
 8004c2c:	f7ff ff40 	bl	8004ab0 <LL_ADC_IsEnabled>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4323      	orrs	r3, r4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	487b      	ldr	r0, [pc, #492]	; (8004e2c <HAL_ADC_Init+0x308>)
 8004c40:	f7ff fd9a 	bl	8004778 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7f5b      	ldrb	r3, [r3, #29]
 8004c48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004c54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004c5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d106      	bne.n	8004c80 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	3b01      	subs	r3, #1
 8004c78:	045b      	lsls	r3, r3, #17
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_ADC_Init+0x30c>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff ff03 	bl	8004ad6 <LL_ADC_REG_IsConversionOngoing>
 8004cd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff10 	bl	8004afc <LL_ADC_INJ_IsConversionOngoing>
 8004cdc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d16d      	bne.n	8004dc0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d16a      	bne.n	8004dc0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d06:	f023 0302 	bic.w	r3, r3, #2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	69b9      	ldr	r1, [r7, #24]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6911      	ldr	r1, [r2, #16]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004d4a:	e013      	b.n	8004d74 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d70:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d118      	bne.n	8004db0 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d9a:	4311      	orrs	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004da0:	430a      	orrs	r2, r1
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	611a      	str	r2, [r3, #16]
 8004dae:	e007      	b.n	8004dc0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d10c      	bne.n	8004de2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f023 010f 	bic.w	r1, r3, #15
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	1e5a      	subs	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
 8004de0:	e007      	b.n	8004df2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 020f 	bic.w	r2, r2, #15
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e02:	e007      	b.n	8004e14 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	f043 0210 	orr.w	r2, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e14:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3724      	adds	r7, #36	; 0x24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd90      	pop	{r4, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000008 	.word	0x20000008
 8004e24:	053e2d63 	.word	0x053e2d63
 8004e28:	50000100 	.word	0x50000100
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	fff04007 	.word	0xfff04007

08004e34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b0b6      	sub	sp, #216	; 0xd8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x22>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e3c7      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x7b2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fe37 	bl	8004ad6 <LL_ADC_REG_IsConversionOngoing>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 83ac 	bne.w	80055c8 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6859      	ldr	r1, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f7ff fd4d 	bl	800491c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fe25 	bl	8004ad6 <LL_ADC_REG_IsConversionOngoing>
 8004e8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fe31 	bl	8004afc <LL_ADC_INJ_IsConversionOngoing>
 8004e9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 81d9 	bne.w	800525a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 81d4 	bne.w	800525a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eba:	d10f      	bne.n	8004edc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f7ff fd54 	bl	8004974 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fd0e 	bl	80048f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004eda:	e00e      	b.n	8004efa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f7ff fd43 	bl	8004974 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fcfe 	bl	80048f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d022      	beq.n	8004f62 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6919      	ldr	r1, [r3, #16]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f2c:	f7ff fc58 	bl	80047e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6919      	ldr	r1, [r3, #16]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f7ff fca4 	bl	800488a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6919      	ldr	r1, [r3, #16]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	7f1b      	ldrb	r3, [r3, #28]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x124>
 8004f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f56:	e000      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x126>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f7ff fcb0 	bl	80048c0 <LL_ADC_SetOffsetSaturation>
 8004f60:	e17b      	b.n	800525a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fc5d 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <HAL_ADC_ConfigChannel+0x15a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fc52 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8004f84:	4603      	mov	r3, r0
 8004f86:	0e9b      	lsrs	r3, r3, #26
 8004f88:	f003 021f 	and.w	r2, r3, #31
 8004f8c:	e01e      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x198>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2100      	movs	r1, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fc47 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e004      	b.n	8004fca <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d105      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x1b0>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0e9b      	lsrs	r3, r3, #26
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	e018      	b.n	8005016 <HAL_ADC_ConfigChannel+0x1e2>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ff0:	fa93 f3a3 	rbit	r3, r3
 8004ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005008:	2320      	movs	r3, #32
 800500a:	e004      	b.n	8005016 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800500c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005010:	fab3 f383 	clz	r3, r3
 8005014:	b2db      	uxtb	r3, r3
 8005016:	429a      	cmp	r2, r3
 8005018:	d106      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fc16 	bl	8004854 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fbfa 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8005034:	4603      	mov	r3, r0
 8005036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x220>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fbef 	bl	8004828 <LL_ADC_GetOffsetChannel>
 800504a:	4603      	mov	r3, r0
 800504c:	0e9b      	lsrs	r3, r3, #26
 800504e:	f003 021f 	and.w	r2, r3, #31
 8005052:	e01e      	b.n	8005092 <HAL_ADC_ConfigChannel+0x25e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fbe4 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8005060:	4603      	mov	r3, r0
 8005062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800507a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005082:	2320      	movs	r3, #32
 8005084:	e004      	b.n	8005090 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800508a:	fab3 f383 	clz	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x276>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	0e9b      	lsrs	r3, r3, #26
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	e018      	b.n	80050dc <HAL_ADC_ConfigChannel+0x2a8>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050b6:	fa93 f3a3 	rbit	r3, r3
 80050ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80050be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80050c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80050ce:	2320      	movs	r3, #32
 80050d0:	e004      	b.n	80050dc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80050d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	429a      	cmp	r2, r3
 80050de:	d106      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2101      	movs	r1, #1
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fbb3 	bl	8004854 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2102      	movs	r1, #2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff fb97 	bl	8004828 <LL_ADC_GetOffsetChannel>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <HAL_ADC_ConfigChannel+0x2e6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fb8c 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8005110:	4603      	mov	r3, r0
 8005112:	0e9b      	lsrs	r3, r3, #26
 8005114:	f003 021f 	and.w	r2, r3, #31
 8005118:	e01e      	b.n	8005158 <HAL_ADC_ConfigChannel+0x324>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2102      	movs	r1, #2
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fb81 	bl	8004828 <LL_ADC_GetOffsetChannel>
 8005126:	4603      	mov	r3, r0
 8005128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800513c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005148:	2320      	movs	r3, #32
 800514a:	e004      	b.n	8005156 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800514c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005160:	2b00      	cmp	r3, #0
 8005162:	d105      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x33c>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	0e9b      	lsrs	r3, r3, #26
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	e016      	b.n	800519e <HAL_ADC_ConfigChannel+0x36a>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005182:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005190:	2320      	movs	r3, #32
 8005192:	e004      	b.n	800519e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	429a      	cmp	r2, r3
 80051a0:	d106      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fb52 	bl	8004854 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2103      	movs	r1, #3
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff fb36 	bl	8004828 <LL_ADC_GetOffsetChannel>
 80051bc:	4603      	mov	r3, r0
 80051be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x3a8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2103      	movs	r1, #3
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fb2b 	bl	8004828 <LL_ADC_GetOffsetChannel>
 80051d2:	4603      	mov	r3, r0
 80051d4:	0e9b      	lsrs	r3, r3, #26
 80051d6:	f003 021f 	and.w	r2, r3, #31
 80051da:	e017      	b.n	800520c <HAL_ADC_ConfigChannel+0x3d8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2103      	movs	r1, #3
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fb20 	bl	8004828 <LL_ADC_GetOffsetChannel>
 80051e8:	4603      	mov	r3, r0
 80051ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80051f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80051f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80051fe:	2320      	movs	r3, #32
 8005200:	e003      	b.n	800520a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8005202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005204:	fab3 f383 	clz	r3, r3
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x3f0>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	0e9b      	lsrs	r3, r3, #26
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	e011      	b.n	8005248 <HAL_ADC_ConfigChannel+0x414>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522c:	fa93 f3a3 	rbit	r3, r3
 8005230:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005234:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800523c:	2320      	movs	r3, #32
 800523e:	e003      	b.n	8005248 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	fab3 f383 	clz	r3, r3
 8005246:	b2db      	uxtb	r3, r3
 8005248:	429a      	cmp	r2, r3
 800524a:	d106      	bne.n	800525a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2200      	movs	r2, #0
 8005252:	2103      	movs	r1, #3
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fafd 	bl	8004854 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fc26 	bl	8004ab0 <LL_ADC_IsEnabled>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 8140 	bne.w	80054ec <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	461a      	mov	r2, r3
 800527a:	f7ff fba7 	bl	80049cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4a8f      	ldr	r2, [pc, #572]	; (80054c0 <HAL_ADC_ConfigChannel+0x68c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	f040 8131 	bne.w	80054ec <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x47e>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	0e9b      	lsrs	r3, r3, #26
 80052a0:	3301      	adds	r3, #1
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	2b09      	cmp	r3, #9
 80052a8:	bf94      	ite	ls
 80052aa:	2301      	movls	r3, #1
 80052ac:	2300      	movhi	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e019      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x4b2>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ba:	fa93 f3a3 	rbit	r3, r3
 80052be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80052c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80052c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80052ca:	2320      	movs	r3, #32
 80052cc:	e003      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80052ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	2b09      	cmp	r3, #9
 80052de:	bf94      	ite	ls
 80052e0:	2301      	movls	r3, #1
 80052e2:	2300      	movhi	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d079      	beq.n	80053de <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d107      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x4d2>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	0e9b      	lsrs	r3, r3, #26
 80052fc:	3301      	adds	r3, #1
 80052fe:	069b      	lsls	r3, r3, #26
 8005300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005304:	e015      	b.n	8005332 <HAL_ADC_ConfigChannel+0x4fe>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530e:	fa93 f3a3 	rbit	r3, r3
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800531e:	2320      	movs	r3, #32
 8005320:	e003      	b.n	800532a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	b2db      	uxtb	r3, r3
 800532a:	3301      	adds	r3, #1
 800532c:	069b      	lsls	r3, r3, #26
 800532e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x51e>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	0e9b      	lsrs	r3, r3, #26
 8005344:	3301      	adds	r3, #1
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2101      	movs	r1, #1
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	e017      	b.n	8005382 <HAL_ADC_ConfigChannel+0x54e>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535a:	fa93 f3a3 	rbit	r3, r3
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800536a:	2320      	movs	r3, #32
 800536c:	e003      	b.n	8005376 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800536e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005370:	fab3 f383 	clz	r3, r3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	3301      	adds	r3, #1
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2101      	movs	r1, #1
 800537e:	fa01 f303 	lsl.w	r3, r1, r3
 8005382:	ea42 0103 	orr.w	r1, r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x574>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	0e9b      	lsrs	r3, r3, #26
 8005398:	3301      	adds	r3, #1
 800539a:	f003 021f 	and.w	r2, r3, #31
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	051b      	lsls	r3, r3, #20
 80053a6:	e018      	b.n	80053da <HAL_ADC_ConfigChannel+0x5a6>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e003      	b.n	80053cc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f003 021f 	and.w	r2, r3, #31
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053da:	430b      	orrs	r3, r1
 80053dc:	e081      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d107      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x5c6>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	0e9b      	lsrs	r3, r3, #26
 80053f0:	3301      	adds	r3, #1
 80053f2:	069b      	lsls	r3, r3, #26
 80053f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053f8:	e015      	b.n	8005426 <HAL_ADC_ConfigChannel+0x5f2>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005412:	2320      	movs	r3, #32
 8005414:	e003      	b.n	800541e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	3301      	adds	r3, #1
 8005420:	069b      	lsls	r3, r3, #26
 8005422:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x612>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	0e9b      	lsrs	r3, r3, #26
 8005438:	3301      	adds	r3, #1
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	2101      	movs	r1, #1
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	e017      	b.n	8005476 <HAL_ADC_ConfigChannel+0x642>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	fa93 f3a3 	rbit	r3, r3
 8005452:	61fb      	str	r3, [r7, #28]
  return result;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800545e:	2320      	movs	r3, #32
 8005460:	e003      	b.n	800546a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	3301      	adds	r3, #1
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	2101      	movs	r1, #1
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	ea42 0103 	orr.w	r1, r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x66e>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	0e9b      	lsrs	r3, r3, #26
 800548c:	3301      	adds	r3, #1
 800548e:	f003 021f 	and.w	r2, r3, #31
 8005492:	4613      	mov	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	3b1e      	subs	r3, #30
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054a0:	e01e      	b.n	80054e0 <HAL_ADC_ConfigChannel+0x6ac>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	613b      	str	r3, [r7, #16]
  return result;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80054ba:	2320      	movs	r3, #32
 80054bc:	e006      	b.n	80054cc <HAL_ADC_ConfigChannel+0x698>
 80054be:	bf00      	nop
 80054c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	3301      	adds	r3, #1
 80054ce:	f003 021f 	and.w	r2, r3, #31
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	3b1e      	subs	r3, #30
 80054da:	051b      	lsls	r3, r3, #20
 80054dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054e0:	430b      	orrs	r3, r1
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	4619      	mov	r1, r3
 80054e8:	f7ff fa44 	bl	8004974 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d070      	beq.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054f8:	483e      	ldr	r0, [pc, #248]	; (80055f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80054fa:	f7ff f963 	bl	80047c4 <LL_ADC_GetCommonPathInternalCh>
 80054fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a3c      	ldr	r2, [pc, #240]	; (80055f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_ADC_ConfigChannel+0x6e2>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a3a      	ldr	r2, [pc, #232]	; (80055fc <HAL_ADC_ConfigChannel+0x7c8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d126      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800551a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d120      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800552a:	d156      	bne.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800552c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005534:	4619      	mov	r1, r3
 8005536:	482f      	ldr	r0, [pc, #188]	; (80055f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005538:	f7ff f931 	bl	800479e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800553c:	4b30      	ldr	r3, [pc, #192]	; (8005600 <HAL_ADC_ConfigChannel+0x7cc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	099b      	lsrs	r3, r3, #6
 8005542:	4a30      	ldr	r2, [pc, #192]	; (8005604 <HAL_ADC_ConfigChannel+0x7d0>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	099a      	lsrs	r2, r3, #6
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005554:	e002      	b.n	800555c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3b01      	subs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f9      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005562:	e03a      	b.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a27      	ldr	r2, [pc, #156]	; (8005608 <HAL_ADC_ConfigChannel+0x7d4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d113      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x762>
 800556e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a23      	ldr	r2, [pc, #140]	; (800560c <HAL_ADC_ConfigChannel+0x7d8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d02a      	beq.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800558c:	4619      	mov	r1, r3
 800558e:	4819      	ldr	r0, [pc, #100]	; (80055f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005590:	f7ff f905 	bl	800479e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005594:	e021      	b.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <HAL_ADC_ConfigChannel+0x7dc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d11c      	bne.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d116      	bne.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <HAL_ADC_ConfigChannel+0x7d8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d011      	beq.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055be:	4619      	mov	r1, r3
 80055c0:	480c      	ldr	r0, [pc, #48]	; (80055f4 <HAL_ADC_ConfigChannel+0x7c0>)
 80055c2:	f7ff f8ec 	bl	800479e <LL_ADC_SetCommonPathInternalCh>
 80055c6:	e008      	b.n	80055da <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80055e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	37d8      	adds	r7, #216	; 0xd8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	80080000 	.word	0x80080000
 80055f4:	50000300 	.word	0x50000300
 80055f8:	c3210000 	.word	0xc3210000
 80055fc:	90c00010 	.word	0x90c00010
 8005600:	20000008 	.word	0x20000008
 8005604:	053e2d63 	.word	0x053e2d63
 8005608:	c7520000 	.word	0xc7520000
 800560c:	50000100 	.word	0x50000100
 8005610:	cb840000 	.word	0xcb840000

08005614 <LL_ADC_IsEnabled>:
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <LL_ADC_IsEnabled+0x18>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <LL_ADC_IsEnabled+0x1a>
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_ADC_REG_IsConversionOngoing>:
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d101      	bne.n	8005652 <LL_ADC_REG_IsConversionOngoing+0x18>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b0a1      	sub	sp, #132	; 0x84
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800567a:	2302      	movs	r3, #2
 800567c:	e087      	b.n	800578e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800568e:	d102      	bne.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005690:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	e001      	b.n	800569a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a4:	f043 0220 	orr.w	r2, r3, #32
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e06a      	b.n	800578e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff ffbd 	bl	800563a <LL_ADC_REG_IsConversionOngoing>
 80056c0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ffb7 	bl	800563a <LL_ADC_REG_IsConversionOngoing>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14c      	bne.n	800576c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80056d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d149      	bne.n	800576c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80056d8:	4b30      	ldr	r3, [pc, #192]	; (800579c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80056da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d028      	beq.n	8005736 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80056e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056f6:	035b      	lsls	r3, r3, #13
 80056f8:	430b      	orrs	r3, r1
 80056fa:	431a      	orrs	r2, r3
 80056fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005700:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005704:	f7ff ff86 	bl	8005614 <LL_ADC_IsEnabled>
 8005708:	4604      	mov	r4, r0
 800570a:	4823      	ldr	r0, [pc, #140]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800570c:	f7ff ff82 	bl	8005614 <LL_ADC_IsEnabled>
 8005710:	4603      	mov	r3, r0
 8005712:	4323      	orrs	r3, r4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d133      	bne.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005720:	f023 030f 	bic.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6811      	ldr	r1, [r2, #0]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	6892      	ldr	r2, [r2, #8]
 800572c:	430a      	orrs	r2, r1
 800572e:	431a      	orrs	r2, r3
 8005730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005732:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005734:	e024      	b.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800573e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005740:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005742:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005746:	f7ff ff65 	bl	8005614 <LL_ADC_IsEnabled>
 800574a:	4604      	mov	r4, r0
 800574c:	4812      	ldr	r0, [pc, #72]	; (8005798 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800574e:	f7ff ff61 	bl	8005614 <LL_ADC_IsEnabled>
 8005752:	4603      	mov	r3, r0
 8005754:	4323      	orrs	r3, r4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d112      	bne.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800575a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005762:	f023 030f 	bic.w	r3, r3, #15
 8005766:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005768:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800576a:	e009      	b.n	8005780 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800577e:	e000      	b.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005780:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800578a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800578e:	4618      	mov	r0, r3
 8005790:	3784      	adds	r7, #132	; 0x84
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	bf00      	nop
 8005798:	50000100 	.word	0x50000100
 800579c:	50000300 	.word	0x50000300

080057a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <__NVIC_SetPriorityGrouping+0x44>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057bc:	4013      	ands	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057d2:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <__NVIC_SetPriorityGrouping+0x44>)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	60d3      	str	r3, [r2, #12]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000ed00 	.word	0xe000ed00

080057e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <__NVIC_GetPriorityGrouping+0x18>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	f003 0307 	and.w	r3, r3, #7
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	e000ed00 	.word	0xe000ed00

08005804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	2b00      	cmp	r3, #0
 8005814:	db0b      	blt.n	800582e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	f003 021f 	and.w	r2, r3, #31
 800581c:	4907      	ldr	r1, [pc, #28]	; (800583c <__NVIC_EnableIRQ+0x38>)
 800581e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2001      	movs	r0, #1
 8005826:	fa00 f202 	lsl.w	r2, r0, r2
 800582a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	e000e100 	.word	0xe000e100

08005840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005850:	2b00      	cmp	r3, #0
 8005852:	db0a      	blt.n	800586a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	490c      	ldr	r1, [pc, #48]	; (800588c <__NVIC_SetPriority+0x4c>)
 800585a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585e:	0112      	lsls	r2, r2, #4
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	440b      	add	r3, r1
 8005864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005868:	e00a      	b.n	8005880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	4908      	ldr	r1, [pc, #32]	; (8005890 <__NVIC_SetPriority+0x50>)
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	3b04      	subs	r3, #4
 8005878:	0112      	lsls	r2, r2, #4
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	440b      	add	r3, r1
 800587e:	761a      	strb	r2, [r3, #24]
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	e000e100 	.word	0xe000e100
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005894:	b480      	push	{r7}
 8005896:	b089      	sub	sp, #36	; 0x24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f1c3 0307 	rsb	r3, r3, #7
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	bf28      	it	cs
 80058b2:	2304      	movcs	r3, #4
 80058b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d902      	bls.n	80058c4 <NVIC_EncodePriority+0x30>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3b03      	subs	r3, #3
 80058c2:	e000      	b.n	80058c6 <NVIC_EncodePriority+0x32>
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43da      	mvns	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	401a      	ands	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058dc:	f04f 31ff 	mov.w	r1, #4294967295
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	43d9      	mvns	r1, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ec:	4313      	orrs	r3, r2
         );
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3724      	adds	r7, #36	; 0x24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005900:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <__NVIC_SystemReset+0x20>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800590c:	4903      	ldr	r1, [pc, #12]	; (800591c <__NVIC_SystemReset+0x20>)
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <__NVIC_SystemReset+0x24>)
 8005910:	4313      	orrs	r3, r2
 8005912:	60cb      	str	r3, [r1, #12]
 8005914:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <__NVIC_SystemReset+0x1c>
 800591c:	e000ed00 	.word	0xe000ed00
 8005920:	05fa0004 	.word	0x05fa0004

08005924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3b01      	subs	r3, #1
 8005930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005934:	d301      	bcc.n	800593a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005936:	2301      	movs	r3, #1
 8005938:	e00f      	b.n	800595a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800593a:	4a0a      	ldr	r2, [pc, #40]	; (8005964 <SysTick_Config+0x40>)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3b01      	subs	r3, #1
 8005940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005942:	210f      	movs	r1, #15
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	f7ff ff7a 	bl	8005840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <SysTick_Config+0x40>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005952:	4b04      	ldr	r3, [pc, #16]	; (8005964 <SysTick_Config+0x40>)
 8005954:	2207      	movs	r2, #7
 8005956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	e000e010 	.word	0xe000e010

08005968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ff15 	bl	80057a0 <__NVIC_SetPriorityGrouping>
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	4603      	mov	r3, r0
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
 800598a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800598c:	f7ff ff2c 	bl	80057e8 <__NVIC_GetPriorityGrouping>
 8005990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	6978      	ldr	r0, [r7, #20]
 8005998:	f7ff ff7c 	bl	8005894 <NVIC_EncodePriority>
 800599c:	4602      	mov	r2, r0
 800599e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059a2:	4611      	mov	r1, r2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff ff4b 	bl	8005840 <__NVIC_SetPriority>
}
 80059aa:	bf00      	nop
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	4603      	mov	r3, r0
 80059ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ff1f 	bl	8005804 <__NVIC_EnableIRQ>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80059d2:	f7ff ff93 	bl	80058fc <__NVIC_SystemReset>

080059d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff ffa0 	bl	8005924 <SysTick_Config>
 80059e4:	4603      	mov	r3, r0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e08d      	b.n	8005b1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_DMA_Init+0x138>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d80f      	bhi.n	8005a2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <HAL_DMA_Init+0x13c>)
 8005a16:	4413      	add	r3, r2
 8005a18:	4a45      	ldr	r2, [pc, #276]	; (8005b30 <HAL_DMA_Init+0x140>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	009a      	lsls	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a42      	ldr	r2, [pc, #264]	; (8005b34 <HAL_DMA_Init+0x144>)
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a2c:	e00e      	b.n	8005a4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	4b40      	ldr	r3, [pc, #256]	; (8005b38 <HAL_DMA_Init+0x148>)
 8005a36:	4413      	add	r3, r2
 8005a38:	4a3d      	ldr	r2, [pc, #244]	; (8005b30 <HAL_DMA_Init+0x140>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	009a      	lsls	r2, r3, #2
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a3c      	ldr	r2, [pc, #240]	; (8005b3c <HAL_DMA_Init+0x14c>)
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa1e 	bl	8005ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aac:	d102      	bne.n	8005ab4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ac8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_DMA_Init+0x104>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d80c      	bhi.n	8005af4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa3e 	bl	8005f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e008      	b.n	8005b06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40020407 	.word	0x40020407
 8005b2c:	bffdfff8 	.word	0xbffdfff8
 8005b30:	cccccccd 	.word	0xcccccccd
 8005b34:	40020000 	.word	0x40020000
 8005b38:	bffdfbf8 	.word	0xbffdfbf8
 8005b3c:	40020400 	.word	0x40020400

08005b40 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_DMA_Start_IT+0x20>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e066      	b.n	8005c2e <HAL_DMA_Start_IT+0xee>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d155      	bne.n	8005c20 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f962 	bl	8005e62 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 020e 	orr.w	r2, r2, #14
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e00f      	b.n	8005bd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 020a 	orr.w	r2, r2, #10
 8005bd6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c0c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e005      	b.n	8005c2c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d00d      	beq.n	8005c6a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
 8005c68:	e047      	b.n	8005cfa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 020e 	bic.w	r2, r2, #14
 8005c78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f003 021f 	and.w	r2, r3, #31
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005cb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005cd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
    }
  }
  return status;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2204      	movs	r2, #4
 8005d26:	409a      	lsls	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d026      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x7a>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d021      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d107      	bne.n	8005d58 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0204 	bic.w	r2, r2, #4
 8005d56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	f003 021f 	and.w	r2, r3, #31
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2104      	movs	r1, #4
 8005d66:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d071      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d7c:	e06c      	b.n	8005e58 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2202      	movs	r2, #2
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02e      	beq.n	8005df0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d029      	beq.n	8005df0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 020a 	bic.w	r2, r2, #10
 8005db8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	f003 021f 	and.w	r2, r3, #31
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2102      	movs	r1, #2
 8005dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d038      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005dee:	e033      	b.n	8005e58 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	2208      	movs	r2, #8
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02a      	beq.n	8005e5a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d025      	beq.n	8005e5a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 020e 	bic.w	r2, r2, #14
 8005e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	f003 021f 	and.w	r2, r3, #31
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
}
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e78:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e8a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e90:	f003 021f 	and.w	r2, r3, #31
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2101      	movs	r1, #1
 8005e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d108      	bne.n	8005ec2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ec0:	e007      	b.n	8005ed2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d802      	bhi.n	8005efa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ef4:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	e001      	b.n	8005efe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005efc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	3b08      	subs	r3, #8
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	091b      	lsrs	r3, r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	009a      	lsls	r2, r3, #2
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4413      	add	r3, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2201      	movs	r2, #1
 8005f34:	409a      	lsls	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40020407 	.word	0x40020407
 8005f4c:	40020800 	.word	0x40020800
 8005f50:	40020820 	.word	0x40020820
 8005f54:	cccccccd 	.word	0xcccccccd
 8005f58:	40020880 	.word	0x40020880

08005f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	461a      	mov	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f7e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2201      	movs	r2, #1
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	1000823f 	.word	0x1000823f
 8005fa0:	40020940 	.word	0x40020940

08005fa4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fb6:	4b24      	ldr	r3, [pc, #144]	; (8006048 <HAL_FLASH_Program+0xa4>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_FLASH_Program+0x1e>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e03e      	b.n	8006040 <HAL_FLASH_Program+0x9c>
 8005fc2:	4b21      	ldr	r3, [pc, #132]	; (8006048 <HAL_FLASH_Program+0xa4>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fcc:	f000 f888 	bl	80060e0 <FLASH_WaitForLastOperation>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12e      	bne.n	8006038 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <HAL_FLASH_Program+0xa4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fea:	68b8      	ldr	r0, [r7, #8]
 8005fec:	f000 f8cc 	bl	8006188 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	e010      	b.n	8006018 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d002      	beq.n	8006002 <HAL_FLASH_Program+0x5e>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d10a      	bne.n	8006018 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 f8e2 	bl	80061d0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d102      	bne.n	8006018 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006012:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006016:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800601c:	f000 f860 	bl	80060e0 <FLASH_WaitForLastOperation>
 8006020:	4603      	mov	r3, r0
 8006022:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d006      	beq.n	8006038 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <HAL_FLASH_Program+0xa8>)
 800602c:	695a      	ldr	r2, [r3, #20]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	43db      	mvns	r3, r3
 8006032:	4906      	ldr	r1, [pc, #24]	; (800604c <HAL_FLASH_Program+0xa8>)
 8006034:	4013      	ands	r3, r2
 8006036:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006038:	4b03      	ldr	r3, [pc, #12]	; (8006048 <HAL_FLASH_Program+0xa4>)
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000014 	.word	0x20000014
 800604c:	40022000 	.word	0x40022000

08006050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da0b      	bge.n	800607a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <HAL_FLASH_Unlock+0x3c>)
 8006066:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <HAL_FLASH_Unlock+0x40>)
 800606c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_FLASH_Unlock+0x38>)
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800607a:	79fb      	ldrb	r3, [r7, #7]
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40022000 	.word	0x40022000
 800608c:	45670123 	.word	0x45670123
 8006090:	cdef89ab 	.word	0xcdef89ab

08006094 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <HAL_FLASH_Lock+0x30>)
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <HAL_FLASH_Lock+0x30>)
 80060a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_FLASH_Lock+0x30>)
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da01      	bge.n	80060b6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80060b6:	79fb      	ldrb	r3, [r7, #7]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40022000 	.word	0x40022000

080060c8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_FLASH_GetError+0x14>)
 80060ce:	685b      	ldr	r3, [r3, #4]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000014 	.word	0x20000014

080060e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80060e8:	f7fe fb18 	bl	800471c <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80060ee:	e009      	b.n	8006104 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80060f0:	f7fe fb14 	bl	800471c <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d201      	bcs.n	8006104 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e038      	b.n	8006176 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006104:	4b1e      	ldr	r3, [pc, #120]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006110:	d0ee      	beq.n	80060f0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006112:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800611a:	4013      	ands	r3, r2
 800611c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01e      	beq.n	8006162 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <FLASH_WaitForLastOperation+0xa4>)
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4313      	orrs	r3, r2
 800612c:	4a15      	ldr	r2, [pc, #84]	; (8006184 <FLASH_WaitForLastOperation+0xa4>)
 800612e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <FLASH_WaitForLastOperation+0x6a>
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006144:	490e      	ldr	r1, [pc, #56]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	618b      	str	r3, [r1, #24]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <FLASH_WaitForLastOperation+0x7e>
 8006154:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800615c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e009      	b.n	8006176 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006162:	4b07      	ldr	r3, [pc, #28]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d102      	bne.n	8006174 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <FLASH_WaitForLastOperation+0xa0>)
 8006170:	2201      	movs	r2, #1
 8006172:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40022000 	.word	0x40022000
 8006184:	20000014 	.word	0x20000014

08006188 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006188:	b490      	push	{r4, r7}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <FLASH_Program_DoubleWord+0x44>)
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <FLASH_Program_DoubleWord+0x44>)
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80061a6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80061aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	f04f 0400 	mov.w	r4, #0
 80061b6:	0013      	movs	r3, r2
 80061b8:	2400      	movs	r4, #0
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	3204      	adds	r2, #4
 80061be:	6013      	str	r3, [r2, #0]
}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc90      	pop	{r4, r7}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40022000 	.word	0x40022000

080061d0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b089      	sub	sp, #36	; 0x24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <FLASH_Program_Fast+0x64>)
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <FLASH_Program_Fast+0x64>)
 80061ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f2:	f3ef 8310 	mrs	r3, PRIMASK
 80061f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80061f8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80061fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80061fc:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3304      	adds	r3, #4
 800620a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	3304      	adds	r3, #4
 8006210:	617b      	str	r3, [r7, #20]
    row_index--;
 8006212:	7ffb      	ldrb	r3, [r7, #31]
 8006214:	3b01      	subs	r3, #1
 8006216:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006218:	7ffb      	ldrb	r3, [r7, #31]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ef      	bne.n	80061fe <FLASH_Program_Fast+0x2e>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006228:	bf00      	nop
 800622a:	3724      	adds	r7, #36	; 0x24
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	40022000 	.word	0x40022000

08006238 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006242:	4b4a      	ldr	r3, [pc, #296]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_FLASHEx_Erase+0x16>
 800624a:	2302      	movs	r3, #2
 800624c:	e089      	b.n	8006362 <HAL_FLASHEx_Erase+0x12a>
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006258:	f7ff ff42 	bl	80060e0 <FLASH_WaitForLastOperation>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d179      	bne.n	800635a <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006266:	4b41      	ldr	r3, [pc, #260]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 8006268:	2200      	movs	r2, #0
 800626a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800626c:	4b40      	ldr	r3, [pc, #256]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006274:	2b00      	cmp	r3, #0
 8006276:	d019      	beq.n	80062ac <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006278:	4b3d      	ldr	r3, [pc, #244]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3c      	ldr	r2, [pc, #240]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 800627e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006282:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006284:	4b3a      	ldr	r3, [pc, #232]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006290:	4b37      	ldr	r3, [pc, #220]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a36      	ldr	r2, [pc, #216]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 8006296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800629a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800629c:	4b33      	ldr	r3, [pc, #204]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 800629e:	2203      	movs	r2, #3
 80062a0:	771a      	strb	r2, [r3, #28]
 80062a2:	e016      	b.n	80062d2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80062a4:	4b31      	ldr	r3, [pc, #196]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	771a      	strb	r2, [r3, #28]
 80062aa:	e012      	b.n	80062d2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80062ac:	4b30      	ldr	r3, [pc, #192]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80062b8:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 80062be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062c2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80062c4:	4b29      	ldr	r3, [pc, #164]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 80062c6:	2202      	movs	r2, #2
 80062c8:	771a      	strb	r2, [r3, #28]
 80062ca:	e002      	b.n	80062d2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80062cc:	4b27      	ldr	r3, [pc, #156]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d111      	bne.n	80062fe <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f848 	bl	8006374 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062e8:	f7ff fefa 	bl	80060e0 <FLASH_WaitForLastOperation>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	4a1e      	ldr	r2, [pc, #120]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 80062f6:	f023 0304 	bic.w	r3, r3, #4
 80062fa:	6153      	str	r3, [r2, #20]
 80062fc:	e02b      	b.n	8006356 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f04f 32ff 	mov.w	r2, #4294967295
 8006304:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	60bb      	str	r3, [r7, #8]
 800630c:	e01b      	b.n	8006346 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4619      	mov	r1, r3
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f000 f84b 	bl	80063b0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800631a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800631e:	f7ff fedf 	bl	80060e0 <FLASH_WaitForLastOperation>
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006326:	4b12      	ldr	r3, [pc, #72]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	4a11      	ldr	r2, [pc, #68]	; (8006370 <HAL_FLASHEx_Erase+0x138>)
 800632c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8006330:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	601a      	str	r2, [r3, #0]
          break;
 800633e:	e00a      	b.n	8006356 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	3301      	adds	r3, #1
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	4413      	add	r3, r2
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	d3db      	bcc.n	800630e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006356:	f000 f84f 	bl	80063f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <HAL_FLASHEx_Erase+0x134>)
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]

  return status;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000014 	.word	0x20000014
 8006370:	40022000 	.word	0x40022000

08006374 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d005      	beq.n	8006392 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <FLASH_MassErase+0x38>)
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4a08      	ldr	r2, [pc, #32]	; (80063ac <FLASH_MassErase+0x38>)
 800638c:	f043 0304 	orr.w	r3, r3, #4
 8006390:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <FLASH_MassErase+0x38>)
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <FLASH_MassErase+0x38>)
 8006398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639c:	6153      	str	r3, [r2, #20]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40022000 	.word	0x40022000

080063b0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <FLASH_PageErase+0x44>)
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80063ca:	490a      	ldr	r1, [pc, #40]	; (80063f4 <FLASH_PageErase+0x44>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80063d0:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <FLASH_PageErase+0x44>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	4a07      	ldr	r2, [pc, #28]	; (80063f4 <FLASH_PageErase+0x44>)
 80063d6:	f043 0302 	orr.w	r3, r3, #2
 80063da:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <FLASH_PageErase+0x44>)
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <FLASH_PageErase+0x44>)
 80063e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e6:	6153      	str	r3, [r2, #20]
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40022000 	.word	0x40022000

080063f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80063fe:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <FLASH_FlushCaches+0x80>)
 8006400:	7f1b      	ldrb	r3, [r3, #28]
 8006402:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d002      	beq.n	8006410 <FLASH_FlushCaches+0x18>
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d111      	bne.n	8006434 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006410:	4b1a      	ldr	r3, [pc, #104]	; (800647c <FLASH_FlushCaches+0x84>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a19      	ldr	r2, [pc, #100]	; (800647c <FLASH_FlushCaches+0x84>)
 8006416:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4b17      	ldr	r3, [pc, #92]	; (800647c <FLASH_FlushCaches+0x84>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a16      	ldr	r2, [pc, #88]	; (800647c <FLASH_FlushCaches+0x84>)
 8006422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006426:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <FLASH_FlushCaches+0x84>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <FLASH_FlushCaches+0x84>)
 800642e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006432:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d002      	beq.n	8006440 <FLASH_FlushCaches+0x48>
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	2b03      	cmp	r3, #3
 800643e:	d111      	bne.n	8006464 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006440:	4b0e      	ldr	r3, [pc, #56]	; (800647c <FLASH_FlushCaches+0x84>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a0d      	ldr	r2, [pc, #52]	; (800647c <FLASH_FlushCaches+0x84>)
 8006446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <FLASH_FlushCaches+0x84>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <FLASH_FlushCaches+0x84>)
 8006452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006456:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006458:	4b08      	ldr	r3, [pc, #32]	; (800647c <FLASH_FlushCaches+0x84>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a07      	ldr	r2, [pc, #28]	; (800647c <FLASH_FlushCaches+0x84>)
 800645e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006462:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <FLASH_FlushCaches+0x80>)
 8006466:	2200      	movs	r2, #0
 8006468:	771a      	strb	r2, [r3, #28]
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000014 	.word	0x20000014
 800647c:	40022000 	.word	0x40022000

08006480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800648e:	e15a      	b.n	8006746 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	2101      	movs	r1, #1
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 814c 	beq.w	8006740 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d00b      	beq.n	80064c8 <HAL_GPIO_Init+0x48>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d007      	beq.n	80064c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064bc:	2b11      	cmp	r3, #17
 80064be:	d003      	beq.n	80064c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b12      	cmp	r3, #18
 80064c6:	d130      	bne.n	800652a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	2203      	movs	r2, #3
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	43db      	mvns	r3, r3
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4013      	ands	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064fe:	2201      	movs	r2, #1
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4013      	ands	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 0201 	and.w	r2, r3, #1
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	2203      	movs	r2, #3
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4013      	ands	r3, r2
 8006540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d003      	beq.n	800656a <HAL_GPIO_Init+0xea>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b12      	cmp	r3, #18
 8006568:	d123      	bne.n	80065b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	08da      	lsrs	r2, r3, #3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3208      	adds	r2, #8
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	220f      	movs	r2, #15
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	43db      	mvns	r3, r3
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4013      	ands	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	08da      	lsrs	r2, r3, #3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3208      	adds	r2, #8
 80065ac:	6939      	ldr	r1, [r7, #16]
 80065ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	2203      	movs	r2, #3
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	43db      	mvns	r3, r3
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4013      	ands	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f003 0203 	and.w	r2, r3, #3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a6 	beq.w	8006740 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065f4:	4b5b      	ldr	r3, [pc, #364]	; (8006764 <HAL_GPIO_Init+0x2e4>)
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	4a5a      	ldr	r2, [pc, #360]	; (8006764 <HAL_GPIO_Init+0x2e4>)
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	6613      	str	r3, [r2, #96]	; 0x60
 8006600:	4b58      	ldr	r3, [pc, #352]	; (8006764 <HAL_GPIO_Init+0x2e4>)
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800660c:	4a56      	ldr	r2, [pc, #344]	; (8006768 <HAL_GPIO_Init+0x2e8>)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	089b      	lsrs	r3, r3, #2
 8006612:	3302      	adds	r3, #2
 8006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	220f      	movs	r2, #15
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4013      	ands	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006636:	d01f      	beq.n	8006678 <HAL_GPIO_Init+0x1f8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a4c      	ldr	r2, [pc, #304]	; (800676c <HAL_GPIO_Init+0x2ec>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d019      	beq.n	8006674 <HAL_GPIO_Init+0x1f4>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a4b      	ldr	r2, [pc, #300]	; (8006770 <HAL_GPIO_Init+0x2f0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_GPIO_Init+0x1f0>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a4a      	ldr	r2, [pc, #296]	; (8006774 <HAL_GPIO_Init+0x2f4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00d      	beq.n	800666c <HAL_GPIO_Init+0x1ec>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a49      	ldr	r2, [pc, #292]	; (8006778 <HAL_GPIO_Init+0x2f8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <HAL_GPIO_Init+0x1e8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a48      	ldr	r2, [pc, #288]	; (800677c <HAL_GPIO_Init+0x2fc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d101      	bne.n	8006664 <HAL_GPIO_Init+0x1e4>
 8006660:	2305      	movs	r3, #5
 8006662:	e00a      	b.n	800667a <HAL_GPIO_Init+0x1fa>
 8006664:	2306      	movs	r3, #6
 8006666:	e008      	b.n	800667a <HAL_GPIO_Init+0x1fa>
 8006668:	2304      	movs	r3, #4
 800666a:	e006      	b.n	800667a <HAL_GPIO_Init+0x1fa>
 800666c:	2303      	movs	r3, #3
 800666e:	e004      	b.n	800667a <HAL_GPIO_Init+0x1fa>
 8006670:	2302      	movs	r3, #2
 8006672:	e002      	b.n	800667a <HAL_GPIO_Init+0x1fa>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <HAL_GPIO_Init+0x1fa>
 8006678:	2300      	movs	r3, #0
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	f002 0203 	and.w	r2, r2, #3
 8006680:	0092      	lsls	r2, r2, #2
 8006682:	4093      	lsls	r3, r2
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800668a:	4937      	ldr	r1, [pc, #220]	; (8006768 <HAL_GPIO_Init+0x2e8>)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	3302      	adds	r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006698:	4b39      	ldr	r3, [pc, #228]	; (8006780 <HAL_GPIO_Init+0x300>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4013      	ands	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066bc:	4a30      	ldr	r2, [pc, #192]	; (8006780 <HAL_GPIO_Init+0x300>)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80066c2:	4b2f      	ldr	r3, [pc, #188]	; (8006780 <HAL_GPIO_Init+0x300>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	43db      	mvns	r3, r3
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4013      	ands	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066e6:	4a26      	ldr	r2, [pc, #152]	; (8006780 <HAL_GPIO_Init+0x300>)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <HAL_GPIO_Init+0x300>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	43db      	mvns	r3, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4013      	ands	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006710:	4a1b      	ldr	r2, [pc, #108]	; (8006780 <HAL_GPIO_Init+0x300>)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006716:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <HAL_GPIO_Init+0x300>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	43db      	mvns	r3, r3
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4013      	ands	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800673a:	4a11      	ldr	r2, [pc, #68]	; (8006780 <HAL_GPIO_Init+0x300>)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3301      	adds	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	f47f ae9d 	bne.w	8006490 <HAL_GPIO_Init+0x10>
  }
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	40010000 	.word	0x40010000
 800676c:	48000400 	.word	0x48000400
 8006770:	48000800 	.word	0x48000800
 8006774:	48000c00 	.word	0x48000c00
 8006778:	48001000 	.word	0x48001000
 800677c:	48001400 	.word	0x48001400
 8006780:	40010400 	.word	0x40010400

08006784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800679c:	2301      	movs	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e001      	b.n	80067a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
 80067c0:	4613      	mov	r3, r2
 80067c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067c4:	787b      	ldrb	r3, [r7, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067d0:	e002      	b.n	80067d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067d2:	887a      	ldrh	r2, [r7, #2]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d141      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067f2:	4b4b      	ldr	r3, [pc, #300]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fe:	d131      	bne.n	8006864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006800:	4b47      	ldr	r3, [pc, #284]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006806:	4a46      	ldr	r2, [pc, #280]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006810:	4b43      	ldr	r3, [pc, #268]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006818:	4a41      	ldr	r2, [pc, #260]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800681e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006820:	4b40      	ldr	r3, [pc, #256]	; (8006924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2232      	movs	r2, #50	; 0x32
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	4a3f      	ldr	r2, [pc, #252]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	0c9b      	lsrs	r3, r3, #18
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006836:	e002      	b.n	800683e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683e:	4b38      	ldr	r3, [pc, #224]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684a:	d102      	bne.n	8006852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f2      	bne.n	8006838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006852:	4b33      	ldr	r3, [pc, #204]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685e:	d158      	bne.n	8006912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e057      	b.n	8006914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006864:	4b2e      	ldr	r3, [pc, #184]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	4a2d      	ldr	r2, [pc, #180]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006874:	e04d      	b.n	8006912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d141      	bne.n	8006902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800687e:	4b28      	ldr	r3, [pc, #160]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688a:	d131      	bne.n	80068f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800688c:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006892:	4a23      	ldr	r2, [pc, #140]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068a4:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068ac:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2232      	movs	r2, #50	; 0x32
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	4a1c      	ldr	r2, [pc, #112]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	0c9b      	lsrs	r3, r3, #18
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068c2:	e002      	b.n	80068ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ca:	4b15      	ldr	r3, [pc, #84]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d6:	d102      	bne.n	80068de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f2      	bne.n	80068c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068de:	4b10      	ldr	r3, [pc, #64]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ea:	d112      	bne.n	8006912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e011      	b.n	8006914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f6:	4a0a      	ldr	r2, [pc, #40]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006900:	e007      	b.n	8006912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800690a:	4a05      	ldr	r2, [pc, #20]	; (8006920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40007000 	.word	0x40007000
 8006924:	20000008 	.word	0x20000008
 8006928:	431bde83 	.word	0x431bde83

0800692c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800693a:	6093      	str	r3, [r2, #8]
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40007000 	.word	0x40007000

0800694c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e308      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d075      	beq.n	8006a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800696a:	4ba3      	ldr	r3, [pc, #652]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 030c 	and.w	r3, r3, #12
 8006972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006974:	4ba0      	ldr	r3, [pc, #640]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d102      	bne.n	800698a <HAL_RCC_OscConfig+0x3e>
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d002      	beq.n	8006990 <HAL_RCC_OscConfig+0x44>
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d10b      	bne.n	80069a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006990:	4b99      	ldr	r3, [pc, #612]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05b      	beq.n	8006a54 <HAL_RCC_OscConfig+0x108>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d157      	bne.n	8006a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e2e3      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d106      	bne.n	80069c0 <HAL_RCC_OscConfig+0x74>
 80069b2:	4b91      	ldr	r3, [pc, #580]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a90      	ldr	r2, [pc, #576]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e01d      	b.n	80069fc <HAL_RCC_OscConfig+0xb0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0x98>
 80069ca:	4b8b      	ldr	r3, [pc, #556]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a8a      	ldr	r2, [pc, #552]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4b88      	ldr	r3, [pc, #544]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a87      	ldr	r2, [pc, #540]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0xb0>
 80069e4:	4b84      	ldr	r3, [pc, #528]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a83      	ldr	r2, [pc, #524]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	4b81      	ldr	r3, [pc, #516]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a80      	ldr	r2, [pc, #512]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 80069f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fd fe8a 	bl	800471c <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fd fe86 	bl	800471c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	; 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e2a8      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a1e:	4b76      	ldr	r3, [pc, #472]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0xc0>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fd fe76 	bl	800471c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a34:	f7fd fe72 	bl	800471c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b64      	cmp	r3, #100	; 0x64
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e294      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a46:	4b6c      	ldr	r3, [pc, #432]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0xe8>
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d075      	beq.n	8006b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a62:	4b65      	ldr	r3, [pc, #404]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a6c:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b0c      	cmp	r3, #12
 8006a7a:	d102      	bne.n	8006a82 <HAL_RCC_OscConfig+0x136>
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d002      	beq.n	8006a88 <HAL_RCC_OscConfig+0x13c>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d11f      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a88:	4b5b      	ldr	r3, [pc, #364]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x154>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e267      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa0:	4b55      	ldr	r3, [pc, #340]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	061b      	lsls	r3, r3, #24
 8006aae:	4952      	ldr	r1, [pc, #328]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ab4:	4b51      	ldr	r3, [pc, #324]	; (8006bfc <HAL_RCC_OscConfig+0x2b0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fd fde3 	bl	8004684 <HAL_InitTick>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d043      	beq.n	8006b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e253      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d023      	beq.n	8006b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad0:	4b49      	ldr	r3, [pc, #292]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a48      	ldr	r2, [pc, #288]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fd fe1e 	bl	800471c <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae4:	f7fd fe1a 	bl	800471c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e23c      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006af6:	4b40      	ldr	r3, [pc, #256]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b02:	4b3d      	ldr	r3, [pc, #244]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	061b      	lsls	r3, r3, #24
 8006b10:	4939      	ldr	r1, [pc, #228]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	604b      	str	r3, [r1, #4]
 8006b16:	e01a      	b.n	8006b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b18:	4b37      	ldr	r3, [pc, #220]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a36      	ldr	r2, [pc, #216]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fd fdfa 	bl	800471c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fd fdf6 	bl	800471c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e218      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b3e:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x1e0>
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d03c      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01c      	beq.n	8006b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b62:	4b25      	ldr	r3, [pc, #148]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b68:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b72:	f7fd fdd3 	bl	800471c <HAL_GetTick>
 8006b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b7a:	f7fd fdcf 	bl	800471c <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e1f1      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ef      	beq.n	8006b7a <HAL_RCC_OscConfig+0x22e>
 8006b9a:	e01b      	b.n	8006bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b9c:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ba2:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bac:	f7fd fdb6 	bl	800471c <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb4:	f7fd fdb2 	bl	800471c <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e1d4      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1ef      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80ab 	beq.w	8006d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006be2:	2300      	movs	r3, #0
 8006be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006be6:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCC_OscConfig+0x2b4>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e005      	b.n	8006c02 <HAL_RCC_OscConfig+0x2b6>
 8006bf6:	bf00      	nop
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	2000000c 	.word	0x2000000c
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c06:	4baf      	ldr	r3, [pc, #700]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0a:	4aae      	ldr	r2, [pc, #696]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c10:	6593      	str	r3, [r2, #88]	; 0x58
 8006c12:	4bac      	ldr	r3, [pc, #688]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c22:	4ba9      	ldr	r3, [pc, #676]	; (8006ec8 <HAL_RCC_OscConfig+0x57c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d118      	bne.n	8006c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c2e:	4ba6      	ldr	r3, [pc, #664]	; (8006ec8 <HAL_RCC_OscConfig+0x57c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4aa5      	ldr	r2, [pc, #660]	; (8006ec8 <HAL_RCC_OscConfig+0x57c>)
 8006c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c3a:	f7fd fd6f 	bl	800471c <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c42:	f7fd fd6b 	bl	800471c <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e18d      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c54:	4b9c      	ldr	r3, [pc, #624]	; (8006ec8 <HAL_RCC_OscConfig+0x57c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0f0      	beq.n	8006c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d108      	bne.n	8006c7a <HAL_RCC_OscConfig+0x32e>
 8006c68:	4b96      	ldr	r3, [pc, #600]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	4a95      	ldr	r2, [pc, #596]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c78:	e024      	b.n	8006cc4 <HAL_RCC_OscConfig+0x378>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d110      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x358>
 8006c82:	4b90      	ldr	r3, [pc, #576]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	4a8e      	ldr	r2, [pc, #568]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c8a:	f043 0304 	orr.w	r3, r3, #4
 8006c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c92:	4b8c      	ldr	r3, [pc, #560]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c98:	4a8a      	ldr	r2, [pc, #552]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006c9a:	f043 0301 	orr.w	r3, r3, #1
 8006c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ca2:	e00f      	b.n	8006cc4 <HAL_RCC_OscConfig+0x378>
 8006ca4:	4b87      	ldr	r3, [pc, #540]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	4a86      	ldr	r2, [pc, #536]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cb4:	4b83      	ldr	r3, [pc, #524]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cba:	4a82      	ldr	r2, [pc, #520]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006cbc:	f023 0304 	bic.w	r3, r3, #4
 8006cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d016      	beq.n	8006cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ccc:	f7fd fd26 	bl	800471c <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd2:	e00a      	b.n	8006cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd4:	f7fd fd22 	bl	800471c <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e142      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cea:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ed      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x388>
 8006cf8:	e015      	b.n	8006d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fd fd0f 	bl	800471c <HAL_GetTick>
 8006cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d00:	e00a      	b.n	8006d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d02:	f7fd fd0b 	bl	800471c <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e12b      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d18:	4b6a      	ldr	r3, [pc, #424]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1ed      	bne.n	8006d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d26:	7ffb      	ldrb	r3, [r7, #31]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2c:	4b65      	ldr	r3, [pc, #404]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	4a64      	ldr	r2, [pc, #400]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d03c      	beq.n	8006dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01c      	beq.n	8006d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d4c:	4b5d      	ldr	r3, [pc, #372]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d52:	4a5c      	ldr	r2, [pc, #368]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5c:	f7fd fcde 	bl	800471c <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d64:	f7fd fcda 	bl	800471c <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e0fc      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d76:	4b53      	ldr	r3, [pc, #332]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0ef      	beq.n	8006d64 <HAL_RCC_OscConfig+0x418>
 8006d84:	e01b      	b.n	8006dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d86:	4b4f      	ldr	r3, [pc, #316]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d8c:	4a4d      	ldr	r2, [pc, #308]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d96:	f7fd fcc1 	bl	800471c <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d9e:	f7fd fcbd 	bl	800471c <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e0df      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006db0:	4b44      	ldr	r3, [pc, #272]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1ef      	bne.n	8006d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80d3 	beq.w	8006f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dc8:	4b3e      	ldr	r3, [pc, #248]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 030c 	and.w	r3, r3, #12
 8006dd0:	2b0c      	cmp	r3, #12
 8006dd2:	f000 808d 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d15a      	bne.n	8006e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dde:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dea:	f7fd fc97 	bl	800471c <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df2:	f7fd fc93 	bl	800471c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e0b5      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e04:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f0      	bne.n	8006df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e10:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	4b2d      	ldr	r3, [pc, #180]	; (8006ecc <HAL_RCC_OscConfig+0x580>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6a11      	ldr	r1, [r2, #32]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e20:	3a01      	subs	r2, #1
 8006e22:	0112      	lsls	r2, r2, #4
 8006e24:	4311      	orrs	r1, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006e2a:	0212      	lsls	r2, r2, #8
 8006e2c:	4311      	orrs	r1, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e32:	0852      	lsrs	r2, r2, #1
 8006e34:	3a01      	subs	r2, #1
 8006e36:	0552      	lsls	r2, r2, #21
 8006e38:	4311      	orrs	r1, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e3e:	0852      	lsrs	r2, r2, #1
 8006e40:	3a01      	subs	r2, #1
 8006e42:	0652      	lsls	r2, r2, #25
 8006e44:	4311      	orrs	r1, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e4a:	06d2      	lsls	r2, r2, #27
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	491d      	ldr	r1, [pc, #116]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1a      	ldr	r2, [pc, #104]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e60:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6c:	f7fd fc56 	bl	800471c <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e74:	f7fd fc52 	bl	800471c <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e074      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0f0      	beq.n	8006e74 <HAL_RCC_OscConfig+0x528>
 8006e92:	e06c      	b.n	8006f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a0a      	ldr	r2, [pc, #40]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006ea0:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4a07      	ldr	r2, [pc, #28]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <HAL_RCC_OscConfig+0x578>)
 8006eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebc:	f7fd fc2e 	bl	800471c <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec2:	e00e      	b.n	8006ee2 <HAL_RCC_OscConfig+0x596>
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fd fc24 	bl	800471c <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e046      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee2:	4b25      	ldr	r3, [pc, #148]	; (8006f78 <HAL_RCC_OscConfig+0x62c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x584>
 8006eee:	e03e      	b.n	8006f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e039      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006efc:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <HAL_RCC_OscConfig+0x62c>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 0203 	and.w	r2, r3, #3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d12c      	bne.n	8006f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d123      	bne.n	8006f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d11b      	bne.n	8006f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d113      	bne.n	8006f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d109      	bne.n	8006f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	3b01      	subs	r3, #1
 8006f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d001      	beq.n	8006f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40021000 	.word	0x40021000

08006f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e11e      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f94:	4b91      	ldr	r3, [pc, #580]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d910      	bls.n	8006fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa2:	4b8e      	ldr	r3, [pc, #568]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f023 020f 	bic.w	r2, r3, #15
 8006faa:	498c      	ldr	r1, [pc, #560]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb2:	4b8a      	ldr	r3, [pc, #552]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e106      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d073      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d129      	bne.n	800702c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fd8:	4b81      	ldr	r3, [pc, #516]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0f4      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006fe8:	f000 f99e 	bl	8007328 <RCC_GetSysClockFreqFromPLLSource>
 8006fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4a7c      	ldr	r2, [pc, #496]	; (80071e4 <HAL_RCC_ClockConfig+0x268>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d93f      	bls.n	8007076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ff6:	4b7a      	ldr	r3, [pc, #488]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800700a:	2b00      	cmp	r3, #0
 800700c:	d033      	beq.n	8007076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007012:	2b00      	cmp	r3, #0
 8007014:	d12f      	bne.n	8007076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007016:	4b72      	ldr	r3, [pc, #456]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701e:	4a70      	ldr	r2, [pc, #448]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e024      	b.n	8007076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d107      	bne.n	8007044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007034:	4b6a      	ldr	r3, [pc, #424]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d109      	bne.n	8007054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0c6      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007044:	4b66      	ldr	r3, [pc, #408]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0be      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007054:	f000 f8ce 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 8007058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	4a61      	ldr	r2, [pc, #388]	; (80071e4 <HAL_RCC_ClockConfig+0x268>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d909      	bls.n	8007076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007062:	4b5f      	ldr	r3, [pc, #380]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800706a:	4a5d      	ldr	r2, [pc, #372]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 800706c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007072:	2380      	movs	r3, #128	; 0x80
 8007074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007076:	4b5a      	ldr	r3, [pc, #360]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f023 0203 	bic.w	r2, r3, #3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4957      	ldr	r1, [pc, #348]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007084:	4313      	orrs	r3, r2
 8007086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007088:	f7fd fb48 	bl	800471c <HAL_GetTick>
 800708c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	e00a      	b.n	80070a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007090:	f7fd fb44 	bl	800471c <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	; 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e095      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	4b4e      	ldr	r3, [pc, #312]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 020c 	and.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1eb      	bne.n	8007090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d023      	beq.n	800710c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070d0:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80070d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80070e8:	4b3d      	ldr	r3, [pc, #244]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80070f0:	4a3b      	ldr	r2, [pc, #236]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80070f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f8:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4936      	ldr	r1, [pc, #216]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
 800710a:	e008      	b.n	800711e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d105      	bne.n	800711e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007112:	4b33      	ldr	r3, [pc, #204]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	4a32      	ldr	r2, [pc, #200]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800711c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800711e:	4b2f      	ldr	r3, [pc, #188]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d21d      	bcs.n	8007168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712c:	4b2b      	ldr	r3, [pc, #172]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f023 020f 	bic.w	r2, r3, #15
 8007134:	4929      	ldr	r1, [pc, #164]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800713c:	f7fd faee 	bl	800471c <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007142:	e00a      	b.n	800715a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007144:	f7fd faea 	bl	800471c <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007152:	4293      	cmp	r3, r2
 8007154:	d901      	bls.n	800715a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e03b      	b.n	80071d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715a:	4b20      	ldr	r3, [pc, #128]	; (80071dc <HAL_RCC_ClockConfig+0x260>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d1ed      	bne.n	8007144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007174:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	4917      	ldr	r1, [pc, #92]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007192:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	490f      	ldr	r1, [pc, #60]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071a6:	f000 f825 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 80071aa:	4601      	mov	r1, r0
 80071ac:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <HAL_RCC_ClockConfig+0x264>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <HAL_RCC_ClockConfig+0x26c>)
 80071b8:	5cd3      	ldrb	r3, [r2, r3]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	fa21 f303 	lsr.w	r3, r1, r3
 80071c2:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <HAL_RCC_ClockConfig+0x270>)
 80071c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80071c6:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <HAL_RCC_ClockConfig+0x274>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fd fa5a 	bl	8004684 <HAL_InitTick>
 80071d0:	4603      	mov	r3, r0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40022000 	.word	0x40022000
 80071e0:	40021000 	.word	0x40021000
 80071e4:	04c4b400 	.word	0x04c4b400
 80071e8:	0800a278 	.word	0x0800a278
 80071ec:	20000008 	.word	0x20000008
 80071f0:	2000000c 	.word	0x2000000c

080071f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80071fa:	4b2c      	ldr	r3, [pc, #176]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	2b04      	cmp	r3, #4
 8007204:	d102      	bne.n	800720c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007206:	4b2a      	ldr	r3, [pc, #168]	; (80072b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	e047      	b.n	800729c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800720c:	4b27      	ldr	r3, [pc, #156]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 030c 	and.w	r3, r3, #12
 8007214:	2b08      	cmp	r3, #8
 8007216:	d102      	bne.n	800721e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007218:	4b26      	ldr	r3, [pc, #152]	; (80072b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	e03e      	b.n	800729c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800721e:	4b23      	ldr	r3, [pc, #140]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
 8007226:	2b0c      	cmp	r3, #12
 8007228:	d136      	bne.n	8007298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800722a:	4b20      	ldr	r3, [pc, #128]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007234:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	3301      	adds	r3, #1
 8007240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b03      	cmp	r3, #3
 8007246:	d10c      	bne.n	8007262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007248:	4a1a      	ldr	r2, [pc, #104]	; (80072b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	4a16      	ldr	r2, [pc, #88]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007252:	68d2      	ldr	r2, [r2, #12]
 8007254:	0a12      	lsrs	r2, r2, #8
 8007256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	617b      	str	r3, [r7, #20]
      break;
 8007260:	e00c      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007262:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	4a10      	ldr	r2, [pc, #64]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800726c:	68d2      	ldr	r2, [r2, #12]
 800726e:	0a12      	lsrs	r2, r2, #8
 8007270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	617b      	str	r3, [r7, #20]
      break;
 800727a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800727c:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	0e5b      	lsrs	r3, r3, #25
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	3301      	adds	r3, #1
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	613b      	str	r3, [r7, #16]
 8007296:	e001      	b.n	800729c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800729c:	693b      	ldr	r3, [r7, #16]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40021000 	.word	0x40021000
 80072b0:	00f42400 	.word	0x00f42400
 80072b4:	007a1200 	.word	0x007a1200

080072b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <HAL_RCC_GetHCLKFreq+0x14>)
 80072be:	681b      	ldr	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000008 	.word	0x20000008

080072d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072d4:	f7ff fff0 	bl	80072b8 <HAL_RCC_GetHCLKFreq>
 80072d8:	4601      	mov	r1, r0
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072e6:	5cd3      	ldrb	r3, [r2, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40021000 	.word	0x40021000
 80072f8:	0800a288 	.word	0x0800a288

080072fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007300:	f7ff ffda 	bl	80072b8 <HAL_RCC_GetHCLKFreq>
 8007304:	4601      	mov	r1, r0
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	0adb      	lsrs	r3, r3, #11
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4a04      	ldr	r2, [pc, #16]	; (8007324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007312:	5cd3      	ldrb	r3, [r2, r3]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40021000 	.word	0x40021000
 8007324:	0800a288 	.word	0x0800a288

08007328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800732e:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007338:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	3301      	adds	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b03      	cmp	r3, #3
 800734a:	d10c      	bne.n	8007366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007356:	68d2      	ldr	r2, [r2, #12]
 8007358:	0a12      	lsrs	r2, r2, #8
 800735a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	617b      	str	r3, [r7, #20]
    break;
 8007364:	e00c      	b.n	8007380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007366:	4a12      	ldr	r2, [pc, #72]	; (80073b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	fbb2 f3f3 	udiv	r3, r2, r3
 800736e:	4a0e      	ldr	r2, [pc, #56]	; (80073a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007370:	68d2      	ldr	r2, [r2, #12]
 8007372:	0a12      	lsrs	r2, r2, #8
 8007374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007378:	fb02 f303 	mul.w	r3, r2, r3
 800737c:	617b      	str	r3, [r7, #20]
    break;
 800737e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007380:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	0e5b      	lsrs	r3, r3, #25
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	3301      	adds	r3, #1
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800739a:	687b      	ldr	r3, [r7, #4]
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	40021000 	.word	0x40021000
 80073ac:	007a1200 	.word	0x007a1200
 80073b0:	00f42400 	.word	0x00f42400

080073b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073bc:	2300      	movs	r3, #0
 80073be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073c0:	2300      	movs	r3, #0
 80073c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8098 	beq.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073d2:	2300      	movs	r3, #0
 80073d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d6:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10d      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073e2:	4b40      	ldr	r3, [pc, #256]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e6:	4a3f      	ldr	r2, [pc, #252]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ec:	6593      	str	r3, [r2, #88]	; 0x58
 80073ee:	4b3d      	ldr	r3, [pc, #244]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fa:	2301      	movs	r3, #1
 80073fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073fe:	4b3a      	ldr	r3, [pc, #232]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a39      	ldr	r2, [pc, #228]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800740a:	f7fd f987 	bl	800471c <HAL_GetTick>
 800740e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007410:	e009      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007412:	f7fd f983 	bl	800471c <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b02      	cmp	r3, #2
 800741e:	d902      	bls.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	74fb      	strb	r3, [r7, #19]
        break;
 8007424:	e005      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007426:	4b30      	ldr	r3, [pc, #192]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0ef      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007432:	7cfb      	ldrb	r3, [r7, #19]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d159      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007438:	4b2a      	ldr	r3, [pc, #168]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01e      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	429a      	cmp	r2, r3
 8007452:	d019      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007460:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800746c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007470:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007476:	4a1b      	ldr	r2, [pc, #108]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800747c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007480:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d016      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007492:	f7fd f943 	bl	800471c <HAL_GetTick>
 8007496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007498:	e00b      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749a:	f7fd f93f 	bl	800471c <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d902      	bls.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	74fb      	strb	r3, [r7, #19]
            break;
 80074b0:	e006      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ec      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074c0:	7cfb      	ldrb	r3, [r7, #19]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10b      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	4903      	ldr	r1, [pc, #12]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074dc:	e008      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074de:	7cfb      	ldrb	r3, [r7, #19]
 80074e0:	74bb      	strb	r3, [r7, #18]
 80074e2:	e005      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074e4:	40021000 	.word	0x40021000
 80074e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	7cfb      	ldrb	r3, [r7, #19]
 80074ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074f0:	7c7b      	ldrb	r3, [r7, #17]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d105      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f6:	4ba6      	ldr	r3, [pc, #664]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	4aa5      	ldr	r2, [pc, #660]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800750e:	4ba0      	ldr	r3, [pc, #640]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007514:	f023 0203 	bic.w	r2, r3, #3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	499c      	ldr	r1, [pc, #624]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007530:	4b97      	ldr	r3, [pc, #604]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007536:	f023 020c 	bic.w	r2, r3, #12
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	4994      	ldr	r1, [pc, #592]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007552:	4b8f      	ldr	r3, [pc, #572]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	498b      	ldr	r1, [pc, #556]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007574:	4b86      	ldr	r3, [pc, #536]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	4983      	ldr	r1, [pc, #524]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0320 	and.w	r3, r3, #32
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007596:	4b7e      	ldr	r3, [pc, #504]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	497a      	ldr	r1, [pc, #488]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075b8:	4b75      	ldr	r3, [pc, #468]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	4972      	ldr	r1, [pc, #456]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075da:	4b6d      	ldr	r3, [pc, #436]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	4969      	ldr	r1, [pc, #420]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075fc:	4b64      	ldr	r3, [pc, #400]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	4961      	ldr	r1, [pc, #388]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800761e:	4b5c      	ldr	r3, [pc, #368]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	4958      	ldr	r1, [pc, #352]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800763c:	2b00      	cmp	r3, #0
 800763e:	d015      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007640:	4b53      	ldr	r3, [pc, #332]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764e:	4950      	ldr	r1, [pc, #320]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800765e:	d105      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007660:	4b4b      	ldr	r3, [pc, #300]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4a4a      	ldr	r2, [pc, #296]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800766a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007674:	2b00      	cmp	r3, #0
 8007676:	d015      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007678:	4b45      	ldr	r3, [pc, #276]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	4942      	ldr	r1, [pc, #264]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007696:	d105      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007698:	4b3d      	ldr	r3, [pc, #244]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4a3c      	ldr	r2, [pc, #240]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d015      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076b0:	4b37      	ldr	r3, [pc, #220]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	4934      	ldr	r1, [pc, #208]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ce:	d105      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d0:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	4a2e      	ldr	r2, [pc, #184]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f6:	4926      	ldr	r1, [pc, #152]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007706:	d105      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4a20      	ldr	r2, [pc, #128]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800770e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007712:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d015      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	4918      	ldr	r1, [pc, #96]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800773e:	d105      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007740:	4b13      	ldr	r3, [pc, #76]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4a12      	ldr	r2, [pc, #72]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d015      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007758:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007766:	490a      	ldr	r1, [pc, #40]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007776:	d105      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	4a04      	ldr	r2, [pc, #16]	; (8007790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800777e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007782:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007784:	7cbb      	ldrb	r3, [r7, #18]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40021000 	.word	0x40021000

08007794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e049      	b.n	800783a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fc fd92 	bl	80042e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 fcc8 	bl	8008168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e042      	b.n	80078e2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a21      	ldr	r2, [pc, #132]	; (80078f0 <HAL_TIM_Base_Start+0xac>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <HAL_TIM_Base_Start+0xb0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <HAL_TIM_Base_Start+0xb4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <HAL_TIM_Base_Start+0xb8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start+0x5c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a19      	ldr	r2, [pc, #100]	; (8007900 <HAL_TIM_Base_Start+0xbc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d115      	bne.n	80078cc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	4b17      	ldr	r3, [pc, #92]	; (8007904 <HAL_TIM_Base_Start+0xc0>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d015      	beq.n	80078de <HAL_TIM_Base_Start+0x9a>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b8:	d011      	beq.n	80078de <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0201 	orr.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ca:	e008      	b.n	80078de <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e000      	b.n	80078e0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40012c00 	.word	0x40012c00
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40013400 	.word	0x40013400
 8007900:	40014000 	.word	0x40014000
 8007904:	00010007 	.word	0x00010007

08007908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e049      	b.n	80079ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f841 	bl	80079b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f000 fc0e 	bl	8008168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d109      	bne.n	80079f0 <HAL_TIM_PWM_Start_IT+0x24>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	bf14      	ite	ne
 80079e8:	2301      	movne	r3, #1
 80079ea:	2300      	moveq	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	e03c      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x9e>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d109      	bne.n	8007a0a <HAL_TIM_PWM_Start_IT+0x3e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	bf14      	ite	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	2300      	moveq	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	e02f      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x9e>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d109      	bne.n	8007a24 <HAL_TIM_PWM_Start_IT+0x58>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	bf14      	ite	ne
 8007a1c:	2301      	movne	r3, #1
 8007a1e:	2300      	moveq	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	e022      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x9e>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b0c      	cmp	r3, #12
 8007a28:	d109      	bne.n	8007a3e <HAL_TIM_PWM_Start_IT+0x72>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	e015      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x9e>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b10      	cmp	r3, #16
 8007a42:	d109      	bne.n	8007a58 <HAL_TIM_PWM_Start_IT+0x8c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	bf14      	ite	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	2300      	moveq	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	e008      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x9e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	bf14      	ite	ne
 8007a64:	2301      	movne	r3, #1
 8007a66:	2300      	moveq	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e0dd      	b.n	8007c2e <HAL_TIM_PWM_Start_IT+0x262>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <HAL_TIM_PWM_Start_IT+0xb6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a80:	e023      	b.n	8007aca <HAL_TIM_PWM_Start_IT+0xfe>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d104      	bne.n	8007a92 <HAL_TIM_PWM_Start_IT+0xc6>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a90:	e01b      	b.n	8007aca <HAL_TIM_PWM_Start_IT+0xfe>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d104      	bne.n	8007aa2 <HAL_TIM_PWM_Start_IT+0xd6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aa0:	e013      	b.n	8007aca <HAL_TIM_PWM_Start_IT+0xfe>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d104      	bne.n	8007ab2 <HAL_TIM_PWM_Start_IT+0xe6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ab0:	e00b      	b.n	8007aca <HAL_TIM_PWM_Start_IT+0xfe>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d104      	bne.n	8007ac2 <HAL_TIM_PWM_Start_IT+0xf6>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ac0:	e003      	b.n	8007aca <HAL_TIM_PWM_Start_IT+0xfe>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b0c      	cmp	r3, #12
 8007ace:	d841      	bhi.n	8007b54 <HAL_TIM_PWM_Start_IT+0x188>
 8007ad0:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_TIM_PWM_Start_IT+0x10c>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007b0d 	.word	0x08007b0d
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b55 	.word	0x08007b55
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b1f 	.word	0x08007b1f
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b31 	.word	0x08007b31
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b43 	.word	0x08007b43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0202 	orr.w	r2, r2, #2
 8007b1a:	60da      	str	r2, [r3, #12]
      break;
 8007b1c:	e01b      	b.n	8007b56 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0204 	orr.w	r2, r2, #4
 8007b2c:	60da      	str	r2, [r3, #12]
      break;
 8007b2e:	e012      	b.n	8007b56 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0208 	orr.w	r2, r2, #8
 8007b3e:	60da      	str	r2, [r3, #12]
      break;
 8007b40:	e009      	b.n	8007b56 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0210 	orr.w	r2, r2, #16
 8007b50:	60da      	str	r2, [r3, #12]
      break;
 8007b52:	e000      	b.n	8007b56 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8007b54:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 ff24 	bl	80089ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a33      	ldr	r2, [pc, #204]	; (8007c38 <HAL_TIM_PWM_Start_IT+0x26c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d013      	beq.n	8007b96 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a32      	ldr	r2, [pc, #200]	; (8007c3c <HAL_TIM_PWM_Start_IT+0x270>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00e      	beq.n	8007b96 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a30      	ldr	r2, [pc, #192]	; (8007c40 <HAL_TIM_PWM_Start_IT+0x274>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2f      	ldr	r2, [pc, #188]	; (8007c44 <HAL_TIM_PWM_Start_IT+0x278>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d101      	bne.n	8007b9a <HAL_TIM_PWM_Start_IT+0x1ce>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <HAL_TIM_PWM_Start_IT+0x1d0>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d007      	beq.n	8007bb0 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <HAL_TIM_PWM_Start_IT+0x26c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d018      	beq.n	8007bec <HAL_TIM_PWM_Start_IT+0x220>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc2:	d013      	beq.n	8007bec <HAL_TIM_PWM_Start_IT+0x220>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a20      	ldr	r2, [pc, #128]	; (8007c4c <HAL_TIM_PWM_Start_IT+0x280>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00e      	beq.n	8007bec <HAL_TIM_PWM_Start_IT+0x220>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <HAL_TIM_PWM_Start_IT+0x284>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d009      	beq.n	8007bec <HAL_TIM_PWM_Start_IT+0x220>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <HAL_TIM_PWM_Start_IT+0x270>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIM_PWM_Start_IT+0x220>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a16      	ldr	r2, [pc, #88]	; (8007c40 <HAL_TIM_PWM_Start_IT+0x274>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d115      	bne.n	8007c18 <HAL_TIM_PWM_Start_IT+0x24c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <HAL_TIM_PWM_Start_IT+0x288>)
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	d015      	beq.n	8007c2a <HAL_TIM_PWM_Start_IT+0x25e>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c04:	d011      	beq.n	8007c2a <HAL_TIM_PWM_Start_IT+0x25e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0201 	orr.w	r2, r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c16:	e008      	b.n	8007c2a <HAL_TIM_PWM_Start_IT+0x25e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e000      	b.n	8007c2c <HAL_TIM_PWM_Start_IT+0x260>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40012c00 	.word	0x40012c00
 8007c3c:	40013400 	.word	0x40013400
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40014400 	.word	0x40014400
 8007c48:	40014800 	.word	0x40014800
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	00010007 	.word	0x00010007

08007c58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e097      	b.n	8007d9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fc faeb 	bl	800425c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007c9c:	f023 0307 	bic.w	r3, r3, #7
 8007ca0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f000 fa5b 	bl	8008168 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cda:	f023 0303 	bic.w	r3, r3, #3
 8007cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	4313      	orrs	r3, r2
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007cf8:	f023 030c 	bic.w	r3, r3, #12
 8007cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	4313      	orrs	r3, r2
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	011a      	lsls	r2, r3, #4
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	031b      	lsls	r3, r3, #12
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e0fd      	b.n	8007fba <HAL_TIM_PWM_ConfigChannel+0x216>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b14      	cmp	r3, #20
 8007dca:	f200 80f0 	bhi.w	8007fae <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007faf 	.word	0x08007faf
 8007ddc:	08007faf 	.word	0x08007faf
 8007de0:	08007faf 	.word	0x08007faf
 8007de4:	08007e69 	.word	0x08007e69
 8007de8:	08007faf 	.word	0x08007faf
 8007dec:	08007faf 	.word	0x08007faf
 8007df0:	08007faf 	.word	0x08007faf
 8007df4:	08007eab 	.word	0x08007eab
 8007df8:	08007faf 	.word	0x08007faf
 8007dfc:	08007faf 	.word	0x08007faf
 8007e00:	08007faf 	.word	0x08007faf
 8007e04:	08007eeb 	.word	0x08007eeb
 8007e08:	08007faf 	.word	0x08007faf
 8007e0c:	08007faf 	.word	0x08007faf
 8007e10:	08007faf 	.word	0x08007faf
 8007e14:	08007f2d 	.word	0x08007f2d
 8007e18:	08007faf 	.word	0x08007faf
 8007e1c:	08007faf 	.word	0x08007faf
 8007e20:	08007faf 	.word	0x08007faf
 8007e24:	08007f6d 	.word	0x08007f6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fa2a 	bl	8008288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0208 	orr.w	r2, r2, #8
 8007e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0204 	bic.w	r2, r2, #4
 8007e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6999      	ldr	r1, [r3, #24]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	619a      	str	r2, [r3, #24]
      break;
 8007e66:	e0a3      	b.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa9a 	bl	80083a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6999      	ldr	r1, [r3, #24]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	021a      	lsls	r2, r3, #8
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	619a      	str	r2, [r3, #24]
      break;
 8007ea8:	e082      	b.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fb03 	bl	80084bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f042 0208 	orr.w	r2, r2, #8
 8007ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0204 	bic.w	r2, r2, #4
 8007ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69d9      	ldr	r1, [r3, #28]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	61da      	str	r2, [r3, #28]
      break;
 8007ee8:	e062      	b.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fb6b 	bl	80085cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69d9      	ldr	r1, [r3, #28]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	021a      	lsls	r2, r3, #8
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	61da      	str	r2, [r3, #28]
      break;
 8007f2a:	e041      	b.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fbd4 	bl	80086e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0208 	orr.w	r2, r2, #8
 8007f46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0204 	bic.w	r2, r2, #4
 8007f56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007f6a:	e021      	b.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fc18 	bl	80087a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	021a      	lsls	r2, r3, #8
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007fac:	e000      	b.n	8007fb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007fae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_TIM_ConfigClockSource+0x18>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e0b9      	b.n	8008150 <HAL_TIM_ConfigClockSource+0x18c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008006:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b70      	cmp	r3, #112	; 0x70
 8008016:	d02e      	beq.n	8008076 <HAL_TIM_ConfigClockSource+0xb2>
 8008018:	2b70      	cmp	r3, #112	; 0x70
 800801a:	d812      	bhi.n	8008042 <HAL_TIM_ConfigClockSource+0x7e>
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	f000 8084 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x166>
 8008022:	2b30      	cmp	r3, #48	; 0x30
 8008024:	d806      	bhi.n	8008034 <HAL_TIM_ConfigClockSource+0x70>
 8008026:	2b10      	cmp	r3, #16
 8008028:	d07f      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
 800802a:	2b20      	cmp	r3, #32
 800802c:	d07d      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d07b      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008032:	e084      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008034:	2b50      	cmp	r3, #80	; 0x50
 8008036:	d048      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x106>
 8008038:	2b60      	cmp	r3, #96	; 0x60
 800803a:	d056      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x126>
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d064      	beq.n	800810a <HAL_TIM_ConfigClockSource+0x146>
      break;
 8008040:	e07d      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008042:	4a45      	ldr	r2, [pc, #276]	; (8008158 <HAL_TIM_ConfigClockSource+0x194>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d070      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
 8008048:	4a43      	ldr	r2, [pc, #268]	; (8008158 <HAL_TIM_ConfigClockSource+0x194>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d809      	bhi.n	8008062 <HAL_TIM_ConfigClockSource+0x9e>
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008052:	d027      	beq.n	80080a4 <HAL_TIM_ConfigClockSource+0xe0>
 8008054:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008058:	d067      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d06d      	beq.n	800813c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008060:	e06d      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008062:	4a3e      	ldr	r2, [pc, #248]	; (800815c <HAL_TIM_ConfigClockSource+0x198>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d060      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
 8008068:	4a3d      	ldr	r2, [pc, #244]	; (8008160 <HAL_TIM_ConfigClockSource+0x19c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d05d      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
 800806e:	4a3d      	ldr	r2, [pc, #244]	; (8008164 <HAL_TIM_ConfigClockSource+0x1a0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d05a      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x166>
      break;
 8008074:	e063      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6899      	ldr	r1, [r3, #8]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f000 fc71 	bl	800896c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008098:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	609a      	str	r2, [r3, #8]
      break;
 80080a2:	e04c      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	6899      	ldr	r1, [r3, #8]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f000 fc5a 	bl	800896c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080c6:	609a      	str	r2, [r3, #8]
      break;
 80080c8:	e039      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 fbcc 	bl	8008874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2150      	movs	r1, #80	; 0x50
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fc25 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80080e8:	e029      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6859      	ldr	r1, [r3, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f000 fbeb 	bl	80088d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2160      	movs	r1, #96	; 0x60
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fc15 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008108:	e019      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	6859      	ldr	r1, [r3, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	461a      	mov	r2, r3
 8008118:	f000 fbac 	bl	8008874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2140      	movs	r1, #64	; 0x40
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fc05 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008128:	e009      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f000 fbfc 	bl	8008932 <TIM_ITRx_SetConfig>
        break;
 800813a:	e000      	b.n	800813e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800813c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	00100020 	.word	0x00100020
 800815c:	00100040 	.word	0x00100040
 8008160:	00100070 	.word	0x00100070
 8008164:	00100030 	.word	0x00100030

08008168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a3c      	ldr	r2, [pc, #240]	; (800826c <TIM_Base_SetConfig+0x104>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00f      	beq.n	80081a0 <TIM_Base_SetConfig+0x38>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008186:	d00b      	beq.n	80081a0 <TIM_Base_SetConfig+0x38>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a39      	ldr	r2, [pc, #228]	; (8008270 <TIM_Base_SetConfig+0x108>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d007      	beq.n	80081a0 <TIM_Base_SetConfig+0x38>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a38      	ldr	r2, [pc, #224]	; (8008274 <TIM_Base_SetConfig+0x10c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_Base_SetConfig+0x38>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a37      	ldr	r2, [pc, #220]	; (8008278 <TIM_Base_SetConfig+0x110>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d108      	bne.n	80081b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a2d      	ldr	r2, [pc, #180]	; (800826c <TIM_Base_SetConfig+0x104>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01b      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c0:	d017      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a2a      	ldr	r2, [pc, #168]	; (8008270 <TIM_Base_SetConfig+0x108>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d013      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a29      	ldr	r2, [pc, #164]	; (8008274 <TIM_Base_SetConfig+0x10c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00f      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a28      	ldr	r2, [pc, #160]	; (8008278 <TIM_Base_SetConfig+0x110>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00b      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a27      	ldr	r2, [pc, #156]	; (800827c <TIM_Base_SetConfig+0x114>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a26      	ldr	r2, [pc, #152]	; (8008280 <TIM_Base_SetConfig+0x118>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d003      	beq.n	80081f2 <TIM_Base_SetConfig+0x8a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a25      	ldr	r2, [pc, #148]	; (8008284 <TIM_Base_SetConfig+0x11c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d108      	bne.n	8008204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a10      	ldr	r2, [pc, #64]	; (800826c <TIM_Base_SetConfig+0x104>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00f      	beq.n	8008250 <TIM_Base_SetConfig+0xe8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a11      	ldr	r2, [pc, #68]	; (8008278 <TIM_Base_SetConfig+0x110>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0xe8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a10      	ldr	r2, [pc, #64]	; (800827c <TIM_Base_SetConfig+0x114>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0xe8>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a0f      	ldr	r2, [pc, #60]	; (8008280 <TIM_Base_SetConfig+0x118>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0xe8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <TIM_Base_SetConfig+0x11c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d103      	bne.n	8008258 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	615a      	str	r2, [r3, #20]
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40000400 	.word	0x40000400
 8008274:	40000800 	.word	0x40000800
 8008278:	40013400 	.word	0x40013400
 800827c:	40014000 	.word	0x40014000
 8008280:	40014400 	.word	0x40014400
 8008284:	40014800 	.word	0x40014800

08008288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	f023 0201 	bic.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f023 0302 	bic.w	r3, r3, #2
 80082d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a2c      	ldr	r2, [pc, #176]	; (8008394 <TIM_OC1_SetConfig+0x10c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00f      	beq.n	8008308 <TIM_OC1_SetConfig+0x80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a2b      	ldr	r2, [pc, #172]	; (8008398 <TIM_OC1_SetConfig+0x110>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_OC1_SetConfig+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a2a      	ldr	r2, [pc, #168]	; (800839c <TIM_OC1_SetConfig+0x114>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_OC1_SetConfig+0x80>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a29      	ldr	r2, [pc, #164]	; (80083a0 <TIM_OC1_SetConfig+0x118>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_OC1_SetConfig+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <TIM_OC1_SetConfig+0x11c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d10c      	bne.n	8008322 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0308 	bic.w	r3, r3, #8
 800830e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f023 0304 	bic.w	r3, r3, #4
 8008320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1b      	ldr	r2, [pc, #108]	; (8008394 <TIM_OC1_SetConfig+0x10c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00f      	beq.n	800834a <TIM_OC1_SetConfig+0xc2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1a      	ldr	r2, [pc, #104]	; (8008398 <TIM_OC1_SetConfig+0x110>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d00b      	beq.n	800834a <TIM_OC1_SetConfig+0xc2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a19      	ldr	r2, [pc, #100]	; (800839c <TIM_OC1_SetConfig+0x114>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d007      	beq.n	800834a <TIM_OC1_SetConfig+0xc2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <TIM_OC1_SetConfig+0x118>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d003      	beq.n	800834a <TIM_OC1_SetConfig+0xc2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <TIM_OC1_SetConfig+0x11c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d111      	bne.n	800836e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4313      	orrs	r3, r2
 8008362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	621a      	str	r2, [r3, #32]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40013400 	.word	0x40013400
 800839c:	40014000 	.word	0x40014000
 80083a0:	40014400 	.word	0x40014400
 80083a4:	40014800 	.word	0x40014800

080083a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f023 0210 	bic.w	r2, r3, #16
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f023 0320 	bic.w	r3, r3, #32
 80083f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a28      	ldr	r2, [pc, #160]	; (80084a8 <TIM_OC2_SetConfig+0x100>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_OC2_SetConfig+0x6c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a27      	ldr	r2, [pc, #156]	; (80084ac <TIM_OC2_SetConfig+0x104>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d10d      	bne.n	8008430 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800841a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a1d      	ldr	r2, [pc, #116]	; (80084a8 <TIM_OC2_SetConfig+0x100>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00f      	beq.n	8008458 <TIM_OC2_SetConfig+0xb0>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a1c      	ldr	r2, [pc, #112]	; (80084ac <TIM_OC2_SetConfig+0x104>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00b      	beq.n	8008458 <TIM_OC2_SetConfig+0xb0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1b      	ldr	r2, [pc, #108]	; (80084b0 <TIM_OC2_SetConfig+0x108>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d007      	beq.n	8008458 <TIM_OC2_SetConfig+0xb0>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1a      	ldr	r2, [pc, #104]	; (80084b4 <TIM_OC2_SetConfig+0x10c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d003      	beq.n	8008458 <TIM_OC2_SetConfig+0xb0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a19      	ldr	r2, [pc, #100]	; (80084b8 <TIM_OC2_SetConfig+0x110>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d113      	bne.n	8008480 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800845e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	621a      	str	r2, [r3, #32]
}
 800849a:	bf00      	nop
 800849c:	371c      	adds	r7, #28
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40012c00 	.word	0x40012c00
 80084ac:	40013400 	.word	0x40013400
 80084b0:	40014000 	.word	0x40014000
 80084b4:	40014400 	.word	0x40014400
 80084b8:	40014800 	.word	0x40014800

080084bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a27      	ldr	r2, [pc, #156]	; (80085b8 <TIM_OC3_SetConfig+0xfc>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d003      	beq.n	8008526 <TIM_OC3_SetConfig+0x6a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a26      	ldr	r2, [pc, #152]	; (80085bc <TIM_OC3_SetConfig+0x100>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d10d      	bne.n	8008542 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800852c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	021b      	lsls	r3, r3, #8
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a1c      	ldr	r2, [pc, #112]	; (80085b8 <TIM_OC3_SetConfig+0xfc>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00f      	beq.n	800856a <TIM_OC3_SetConfig+0xae>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a1b      	ldr	r2, [pc, #108]	; (80085bc <TIM_OC3_SetConfig+0x100>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_OC3_SetConfig+0xae>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a1a      	ldr	r2, [pc, #104]	; (80085c0 <TIM_OC3_SetConfig+0x104>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_OC3_SetConfig+0xae>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a19      	ldr	r2, [pc, #100]	; (80085c4 <TIM_OC3_SetConfig+0x108>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_OC3_SetConfig+0xae>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <TIM_OC3_SetConfig+0x10c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d113      	bne.n	8008592 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	621a      	str	r2, [r3, #32]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	40012c00 	.word	0x40012c00
 80085bc:	40013400 	.word	0x40013400
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40014400 	.word	0x40014400
 80085c8:	40014800 	.word	0x40014800

080085cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800861a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	031b      	lsls	r3, r3, #12
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a28      	ldr	r2, [pc, #160]	; (80086cc <TIM_OC4_SetConfig+0x100>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC4_SetConfig+0x6c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a27      	ldr	r2, [pc, #156]	; (80086d0 <TIM_OC4_SetConfig+0x104>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10d      	bne.n	8008654 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800863e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1d      	ldr	r2, [pc, #116]	; (80086cc <TIM_OC4_SetConfig+0x100>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00f      	beq.n	800867c <TIM_OC4_SetConfig+0xb0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1c      	ldr	r2, [pc, #112]	; (80086d0 <TIM_OC4_SetConfig+0x104>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00b      	beq.n	800867c <TIM_OC4_SetConfig+0xb0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a1b      	ldr	r2, [pc, #108]	; (80086d4 <TIM_OC4_SetConfig+0x108>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_OC4_SetConfig+0xb0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a1a      	ldr	r2, [pc, #104]	; (80086d8 <TIM_OC4_SetConfig+0x10c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_OC4_SetConfig+0xb0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a19      	ldr	r2, [pc, #100]	; (80086dc <TIM_OC4_SetConfig+0x110>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d113      	bne.n	80086a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008682:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800868a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	019b      	lsls	r3, r3, #6
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	019b      	lsls	r3, r3, #6
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40012c00 	.word	0x40012c00
 80086d0:	40013400 	.word	0x40013400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400
 80086dc:	40014800 	.word	0x40014800

080086e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800870e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008724:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	041b      	lsls	r3, r3, #16
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a17      	ldr	r2, [pc, #92]	; (8008794 <TIM_OC5_SetConfig+0xb4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00f      	beq.n	800875a <TIM_OC5_SetConfig+0x7a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a16      	ldr	r2, [pc, #88]	; (8008798 <TIM_OC5_SetConfig+0xb8>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00b      	beq.n	800875a <TIM_OC5_SetConfig+0x7a>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a15      	ldr	r2, [pc, #84]	; (800879c <TIM_OC5_SetConfig+0xbc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d007      	beq.n	800875a <TIM_OC5_SetConfig+0x7a>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a14      	ldr	r2, [pc, #80]	; (80087a0 <TIM_OC5_SetConfig+0xc0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <TIM_OC5_SetConfig+0x7a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <TIM_OC5_SetConfig+0xc4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d109      	bne.n	800876e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008760:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	621a      	str	r2, [r3, #32]
}
 8008788:	bf00      	nop
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	40012c00 	.word	0x40012c00
 8008798:	40013400 	.word	0x40013400
 800879c:	40014000 	.word	0x40014000
 80087a0:	40014400 	.word	0x40014400
 80087a4:	40014800 	.word	0x40014800

080087a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	051b      	lsls	r3, r3, #20
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a18      	ldr	r2, [pc, #96]	; (8008860 <TIM_OC6_SetConfig+0xb8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00f      	beq.n	8008824 <TIM_OC6_SetConfig+0x7c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a17      	ldr	r2, [pc, #92]	; (8008864 <TIM_OC6_SetConfig+0xbc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00b      	beq.n	8008824 <TIM_OC6_SetConfig+0x7c>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a16      	ldr	r2, [pc, #88]	; (8008868 <TIM_OC6_SetConfig+0xc0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d007      	beq.n	8008824 <TIM_OC6_SetConfig+0x7c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a15      	ldr	r2, [pc, #84]	; (800886c <TIM_OC6_SetConfig+0xc4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d003      	beq.n	8008824 <TIM_OC6_SetConfig+0x7c>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a14      	ldr	r2, [pc, #80]	; (8008870 <TIM_OC6_SetConfig+0xc8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d109      	bne.n	8008838 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800882a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	029b      	lsls	r3, r3, #10
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40012c00 	.word	0x40012c00
 8008864:	40013400 	.word	0x40013400
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800

08008874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f023 030a 	bic.w	r3, r3, #10
 80088b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	621a      	str	r2, [r3, #32]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f023 0210 	bic.w	r2, r3, #16
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800890e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	f043 0307 	orr.w	r3, r3, #7
 8008958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	609a      	str	r2, [r3, #8]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	021a      	lsls	r2, r3, #8
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	431a      	orrs	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4313      	orrs	r3, r2
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4313      	orrs	r3, r2
 8008998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	609a      	str	r2, [r3, #8]
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	2201      	movs	r2, #1
 80089c0:	fa02 f303 	lsl.w	r3, r2, r3
 80089c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1a      	ldr	r2, [r3, #32]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	43db      	mvns	r3, r3
 80089ce:	401a      	ands	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a1a      	ldr	r2, [r3, #32]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	fa01 f303 	lsl.w	r3, r1, r3
 80089e4:	431a      	orrs	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
	...

080089f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e065      	b.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a2c      	ldr	r2, [pc, #176]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d004      	beq.n	8008a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a2b      	ldr	r2, [pc, #172]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d108      	bne.n	8008a56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1b      	ldr	r2, [pc, #108]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d018      	beq.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a86:	d013      	beq.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00e      	beq.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a17      	ldr	r2, [pc, #92]	; (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d009      	beq.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a12      	ldr	r2, [pc, #72]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d004      	beq.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10c      	bne.n	8008aca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	40012c00 	.word	0x40012c00
 8008aec:	40013400 	.word	0x40013400
 8008af0:	40000400 	.word	0x40000400
 8008af4:	40000800 	.word	0x40000800
 8008af8:	40014000 	.word	0x40014000

08008afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e087      	b.n	8008c28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	041b      	lsls	r3, r3, #16
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a27      	ldr	r2, [pc, #156]	; (8008c34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a25      	ldr	r2, [pc, #148]	; (8008c38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d106      	bne.n	8008bb4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a1e      	ldr	r2, [pc, #120]	; (8008c34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d004      	beq.n	8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a1d      	ldr	r2, [pc, #116]	; (8008c38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d126      	bne.n	8008c16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	051b      	lsls	r3, r3, #20
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a0e      	ldr	r2, [pc, #56]	; (8008c34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d106      	bne.n	8008c16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	40012c00 	.word	0x40012c00
 8008c38:	40013400 	.word	0x40013400

08008c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e042      	b.n	8008cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d106      	bne.n	8008c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fb fbab 	bl	80043bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2224      	movs	r2, #36	; 0x24
 8008c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0201 	bic.w	r2, r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fad2 	bl	8009228 <UART_SetConfig>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e022      	b.n	8008cd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fd6e 	bl	8009778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0201 	orr.w	r2, r2, #1
 8008cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fdf5 	bl	80098bc <UART_CheckIdleState>
 8008cd2:	4603      	mov	r3, r0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d168      	bne.n	8008dc6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_UART_Transmit_DMA+0x24>
 8008cfa:	88fb      	ldrh	r3, [r7, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e061      	b.n	8008dc8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <HAL_UART_Transmit_DMA+0x36>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e05a      	b.n	8008dc8 <HAL_UART_Transmit_DMA+0xec>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	88fa      	ldrh	r2, [r7, #6]
 8008d24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2221      	movs	r2, #33	; 0x21
 8008d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d02c      	beq.n	8008da2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4c:	4a20      	ldr	r2, [pc, #128]	; (8008dd0 <HAL_UART_Transmit_DMA+0xf4>)
 8008d4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d54:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <HAL_UART_Transmit_DMA+0xf8>)
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5c:	4a1e      	ldr	r2, [pc, #120]	; (8008dd8 <HAL_UART_Transmit_DMA+0xfc>)
 8008d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d64:	2200      	movs	r2, #0
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d70:	4619      	mov	r1, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3328      	adds	r3, #40	; 0x28
 8008d78:	461a      	mov	r2, r3
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	f7fc fee0 	bl	8005b40 <HAL_DMA_Start_IT>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00d      	beq.n	8008da2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2210      	movs	r2, #16
 8008d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e012      	b.n	8008dc8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2240      	movs	r2, #64	; 0x40
 8008da8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dc0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e000      	b.n	8008dc8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008dc6:	2302      	movs	r3, #2
  }
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	08009acf 	.word	0x08009acf
 8008dd4:	08009b23 	.word	0x08009b23
 8008dd8:	08009bc5 	.word	0x08009bc5

08008ddc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d170      	bne.n	8008ed6 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <HAL_UART_Receive_DMA+0x24>
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e069      	b.n	8008ed8 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_UART_Receive_DMA+0x36>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e062      	b.n	8008ed8 <HAL_UART_Receive_DMA+0xfc>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	88fa      	ldrh	r2, [r7, #6]
 8008e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2222      	movs	r2, #34	; 0x22
 8008e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d02c      	beq.n	8008e9a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <HAL_UART_Receive_DMA+0x104>)
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e4c:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <HAL_UART_Receive_DMA+0x108>)
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e54:	4a24      	ldr	r2, [pc, #144]	; (8008ee8 <HAL_UART_Receive_DMA+0x10c>)
 8008e56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3324      	adds	r3, #36	; 0x24
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e70:	461a      	mov	r2, r3
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	f7fc fe64 	bl	8005b40 <HAL_DMA_Start_IT>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2210      	movs	r2, #16
 8008e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e01e      	b.n	8008ed8 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eb0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0201 	orr.w	r2, r2, #1
 8008ec0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e000      	b.n	8008ed8 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8008ed6:	2302      	movs	r3, #2
  }
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	08009b3f 	.word	0x08009b3f
 8008ee4:	08009ba9 	.word	0x08009ba9
 8008ee8:	08009bc5 	.word	0x08009bc5

08008eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f0c:	69fa      	ldr	r2, [r7, #28]
 8008f0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f12:	4013      	ands	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d118      	bne.n	8008f4e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d013      	beq.n	8008f4e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 8145 	beq.w	80091ce <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4798      	blx	r3
      }
      return;
 8008f4c:	e13f      	b.n	80091ce <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80e8 	beq.w	8009126 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4ba1      	ldr	r3, [pc, #644]	; (80091e0 <HAL_UART_IRQHandler+0x2f4>)
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d105      	bne.n	8008f6c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	4ba0      	ldr	r3, [pc, #640]	; (80091e4 <HAL_UART_IRQHandler+0x2f8>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 80dd 	beq.w	8009126 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d010      	beq.n	8008f98 <HAL_UART_IRQHandler+0xac>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2201      	movs	r2, #1
 8008f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d010      	beq.n	8008fc4 <HAL_UART_IRQHandler+0xd8>
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fba:	f043 0204 	orr.w	r2, r3, #4
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	f003 0304 	and.w	r3, r3, #4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d010      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x104>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2204      	movs	r2, #4
 8008fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe6:	f043 0202 	orr.w	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f003 0308 	and.w	r3, r3, #8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d015      	beq.n	8009026 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	d104      	bne.n	800900e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4b76      	ldr	r3, [pc, #472]	; (80091e0 <HAL_UART_IRQHandler+0x2f4>)
 8009008:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2208      	movs	r2, #8
 8009014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901c:	f043 0208 	orr.w	r2, r3, #8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <HAL_UART_IRQHandler+0x168>
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00c      	beq.n	8009054 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904a:	f043 0220 	orr.w	r2, r3, #32
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80b9 	beq.w	80091d2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d011      	beq.n	800908e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009094:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a0:	2b40      	cmp	r3, #64	; 0x40
 80090a2:	d004      	beq.n	80090ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d031      	beq.n	8009112 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fcea 	bl	8009a88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d123      	bne.n	800910a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d013      	beq.n	8009102 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090de:	4a42      	ldr	r2, [pc, #264]	; (80091e8 <HAL_UART_IRQHandler+0x2fc>)
 80090e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fc fda5 	bl	8005c36 <HAL_DMA_Abort_IT>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d017      	beq.n	8009122 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e00f      	b.n	8009122 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fa fd0c 	bl	8003b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009108:	e00b      	b.n	8009122 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fa fd08 	bl	8003b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	e007      	b.n	8009122 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fa fd04 	bl	8003b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009120:	e057      	b.n	80091d2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009122:	bf00      	nop
    return;
 8009124:	e055      	b.n	80091d2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00d      	beq.n	800914c <HAL_UART_IRQHandler+0x260>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009142:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fdad 	bl	8009ca4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800914a:	e045      	b.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d008      	beq.n	800917c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	2b00      	cmp	r3, #0
 8009170:	d031      	beq.n	80091d6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
    }
    return;
 800917a:	e02c      	b.n	80091d6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009182:	2b00      	cmp	r3, #0
 8009184:	d008      	beq.n	8009198 <HAL_UART_IRQHandler+0x2ac>
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fd6d 	bl	8009c70 <UART_EndTransmit_IT>
    return;
 8009196:	e01f      	b.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d008      	beq.n	80091b4 <HAL_UART_IRQHandler+0x2c8>
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fd8d 	bl	8009ccc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b2:	e011      	b.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00c      	beq.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	da09      	bge.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fd77 	bl	8009cb8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ca:	bf00      	nop
 80091cc:	e004      	b.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80091ce:	bf00      	nop
 80091d0:	e002      	b.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80091d6:	bf00      	nop
  }
}
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	10000001 	.word	0x10000001
 80091e4:	04000120 	.word	0x04000120
 80091e8:	08009c45 	.word	0x08009c45

080091ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009228:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800922c:	b088      	sub	sp, #32
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	431a      	orrs	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	4313      	orrs	r3, r2
 800924c:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	4313      	orrs	r3, r2
 8009256:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	4bb0      	ldr	r3, [pc, #704]	; (8009520 <UART_SetConfig+0x2f8>)
 8009260:	4013      	ands	r3, r2
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6812      	ldr	r2, [r2, #0]
 8009266:	69f9      	ldr	r1, [r7, #28]
 8009268:	430b      	orrs	r3, r1
 800926a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4aa5      	ldr	r2, [pc, #660]	; (8009524 <UART_SetConfig+0x2fc>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d004      	beq.n	800929c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	4313      	orrs	r3, r2
 800929a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80092a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	69f9      	ldr	r1, [r7, #28]
 80092b0:	430b      	orrs	r3, r1
 80092b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ba:	f023 010f 	bic.w	r1, r3, #15
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a96      	ldr	r2, [pc, #600]	; (8009528 <UART_SetConfig+0x300>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d121      	bne.n	8009318 <UART_SetConfig+0xf0>
 80092d4:	4b95      	ldr	r3, [pc, #596]	; (800952c <UART_SetConfig+0x304>)
 80092d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d816      	bhi.n	8009310 <UART_SetConfig+0xe8>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <UART_SetConfig+0xc0>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	08009305 	.word	0x08009305
 80092f0:	080092ff 	.word	0x080092ff
 80092f4:	0800930b 	.word	0x0800930b
 80092f8:	2301      	movs	r3, #1
 80092fa:	76fb      	strb	r3, [r7, #27]
 80092fc:	e0be      	b.n	800947c <UART_SetConfig+0x254>
 80092fe:	2302      	movs	r3, #2
 8009300:	76fb      	strb	r3, [r7, #27]
 8009302:	e0bb      	b.n	800947c <UART_SetConfig+0x254>
 8009304:	2304      	movs	r3, #4
 8009306:	76fb      	strb	r3, [r7, #27]
 8009308:	e0b8      	b.n	800947c <UART_SetConfig+0x254>
 800930a:	2308      	movs	r3, #8
 800930c:	76fb      	strb	r3, [r7, #27]
 800930e:	e0b5      	b.n	800947c <UART_SetConfig+0x254>
 8009310:	2310      	movs	r3, #16
 8009312:	76fb      	strb	r3, [r7, #27]
 8009314:	bf00      	nop
 8009316:	e0b1      	b.n	800947c <UART_SetConfig+0x254>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a84      	ldr	r2, [pc, #528]	; (8009530 <UART_SetConfig+0x308>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d134      	bne.n	800938c <UART_SetConfig+0x164>
 8009322:	4b82      	ldr	r3, [pc, #520]	; (800952c <UART_SetConfig+0x304>)
 8009324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009328:	f003 030c 	and.w	r3, r3, #12
 800932c:	2b0c      	cmp	r3, #12
 800932e:	d829      	bhi.n	8009384 <UART_SetConfig+0x15c>
 8009330:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <UART_SetConfig+0x110>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	0800936d 	.word	0x0800936d
 800933c:	08009385 	.word	0x08009385
 8009340:	08009385 	.word	0x08009385
 8009344:	08009385 	.word	0x08009385
 8009348:	08009379 	.word	0x08009379
 800934c:	08009385 	.word	0x08009385
 8009350:	08009385 	.word	0x08009385
 8009354:	08009385 	.word	0x08009385
 8009358:	08009373 	.word	0x08009373
 800935c:	08009385 	.word	0x08009385
 8009360:	08009385 	.word	0x08009385
 8009364:	08009385 	.word	0x08009385
 8009368:	0800937f 	.word	0x0800937f
 800936c:	2300      	movs	r3, #0
 800936e:	76fb      	strb	r3, [r7, #27]
 8009370:	e084      	b.n	800947c <UART_SetConfig+0x254>
 8009372:	2302      	movs	r3, #2
 8009374:	76fb      	strb	r3, [r7, #27]
 8009376:	e081      	b.n	800947c <UART_SetConfig+0x254>
 8009378:	2304      	movs	r3, #4
 800937a:	76fb      	strb	r3, [r7, #27]
 800937c:	e07e      	b.n	800947c <UART_SetConfig+0x254>
 800937e:	2308      	movs	r3, #8
 8009380:	76fb      	strb	r3, [r7, #27]
 8009382:	e07b      	b.n	800947c <UART_SetConfig+0x254>
 8009384:	2310      	movs	r3, #16
 8009386:	76fb      	strb	r3, [r7, #27]
 8009388:	bf00      	nop
 800938a:	e077      	b.n	800947c <UART_SetConfig+0x254>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a68      	ldr	r2, [pc, #416]	; (8009534 <UART_SetConfig+0x30c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d120      	bne.n	80093d8 <UART_SetConfig+0x1b0>
 8009396:	4b65      	ldr	r3, [pc, #404]	; (800952c <UART_SetConfig+0x304>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d00f      	beq.n	80093c4 <UART_SetConfig+0x19c>
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d802      	bhi.n	80093ae <UART_SetConfig+0x186>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <UART_SetConfig+0x190>
 80093ac:	e010      	b.n	80093d0 <UART_SetConfig+0x1a8>
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d005      	beq.n	80093be <UART_SetConfig+0x196>
 80093b2:	2b30      	cmp	r3, #48	; 0x30
 80093b4:	d009      	beq.n	80093ca <UART_SetConfig+0x1a2>
 80093b6:	e00b      	b.n	80093d0 <UART_SetConfig+0x1a8>
 80093b8:	2300      	movs	r3, #0
 80093ba:	76fb      	strb	r3, [r7, #27]
 80093bc:	e05e      	b.n	800947c <UART_SetConfig+0x254>
 80093be:	2302      	movs	r3, #2
 80093c0:	76fb      	strb	r3, [r7, #27]
 80093c2:	e05b      	b.n	800947c <UART_SetConfig+0x254>
 80093c4:	2304      	movs	r3, #4
 80093c6:	76fb      	strb	r3, [r7, #27]
 80093c8:	e058      	b.n	800947c <UART_SetConfig+0x254>
 80093ca:	2308      	movs	r3, #8
 80093cc:	76fb      	strb	r3, [r7, #27]
 80093ce:	e055      	b.n	800947c <UART_SetConfig+0x254>
 80093d0:	2310      	movs	r3, #16
 80093d2:	76fb      	strb	r3, [r7, #27]
 80093d4:	bf00      	nop
 80093d6:	e051      	b.n	800947c <UART_SetConfig+0x254>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a56      	ldr	r2, [pc, #344]	; (8009538 <UART_SetConfig+0x310>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d120      	bne.n	8009424 <UART_SetConfig+0x1fc>
 80093e2:	4b52      	ldr	r3, [pc, #328]	; (800952c <UART_SetConfig+0x304>)
 80093e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80093ec:	2b40      	cmp	r3, #64	; 0x40
 80093ee:	d00f      	beq.n	8009410 <UART_SetConfig+0x1e8>
 80093f0:	2b40      	cmp	r3, #64	; 0x40
 80093f2:	d802      	bhi.n	80093fa <UART_SetConfig+0x1d2>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <UART_SetConfig+0x1dc>
 80093f8:	e010      	b.n	800941c <UART_SetConfig+0x1f4>
 80093fa:	2b80      	cmp	r3, #128	; 0x80
 80093fc:	d005      	beq.n	800940a <UART_SetConfig+0x1e2>
 80093fe:	2bc0      	cmp	r3, #192	; 0xc0
 8009400:	d009      	beq.n	8009416 <UART_SetConfig+0x1ee>
 8009402:	e00b      	b.n	800941c <UART_SetConfig+0x1f4>
 8009404:	2300      	movs	r3, #0
 8009406:	76fb      	strb	r3, [r7, #27]
 8009408:	e038      	b.n	800947c <UART_SetConfig+0x254>
 800940a:	2302      	movs	r3, #2
 800940c:	76fb      	strb	r3, [r7, #27]
 800940e:	e035      	b.n	800947c <UART_SetConfig+0x254>
 8009410:	2304      	movs	r3, #4
 8009412:	76fb      	strb	r3, [r7, #27]
 8009414:	e032      	b.n	800947c <UART_SetConfig+0x254>
 8009416:	2308      	movs	r3, #8
 8009418:	76fb      	strb	r3, [r7, #27]
 800941a:	e02f      	b.n	800947c <UART_SetConfig+0x254>
 800941c:	2310      	movs	r3, #16
 800941e:	76fb      	strb	r3, [r7, #27]
 8009420:	bf00      	nop
 8009422:	e02b      	b.n	800947c <UART_SetConfig+0x254>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a3e      	ldr	r2, [pc, #248]	; (8009524 <UART_SetConfig+0x2fc>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d124      	bne.n	8009478 <UART_SetConfig+0x250>
 800942e:	4b3f      	ldr	r3, [pc, #252]	; (800952c <UART_SetConfig+0x304>)
 8009430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800943c:	d012      	beq.n	8009464 <UART_SetConfig+0x23c>
 800943e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009442:	d802      	bhi.n	800944a <UART_SetConfig+0x222>
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <UART_SetConfig+0x230>
 8009448:	e012      	b.n	8009470 <UART_SetConfig+0x248>
 800944a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944e:	d006      	beq.n	800945e <UART_SetConfig+0x236>
 8009450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009454:	d009      	beq.n	800946a <UART_SetConfig+0x242>
 8009456:	e00b      	b.n	8009470 <UART_SetConfig+0x248>
 8009458:	2300      	movs	r3, #0
 800945a:	76fb      	strb	r3, [r7, #27]
 800945c:	e00e      	b.n	800947c <UART_SetConfig+0x254>
 800945e:	2302      	movs	r3, #2
 8009460:	76fb      	strb	r3, [r7, #27]
 8009462:	e00b      	b.n	800947c <UART_SetConfig+0x254>
 8009464:	2304      	movs	r3, #4
 8009466:	76fb      	strb	r3, [r7, #27]
 8009468:	e008      	b.n	800947c <UART_SetConfig+0x254>
 800946a:	2308      	movs	r3, #8
 800946c:	76fb      	strb	r3, [r7, #27]
 800946e:	e005      	b.n	800947c <UART_SetConfig+0x254>
 8009470:	2310      	movs	r3, #16
 8009472:	76fb      	strb	r3, [r7, #27]
 8009474:	bf00      	nop
 8009476:	e001      	b.n	800947c <UART_SetConfig+0x254>
 8009478:	2310      	movs	r3, #16
 800947a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a28      	ldr	r2, [pc, #160]	; (8009524 <UART_SetConfig+0x2fc>)
 8009482:	4293      	cmp	r3, r2
 8009484:	f040 80a1 	bne.w	80095ca <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009488:	7efb      	ldrb	r3, [r7, #27]
 800948a:	2b08      	cmp	r3, #8
 800948c:	d823      	bhi.n	80094d6 <UART_SetConfig+0x2ae>
 800948e:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <UART_SetConfig+0x26c>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	080094b9 	.word	0x080094b9
 8009498:	080094d7 	.word	0x080094d7
 800949c:	080094c1 	.word	0x080094c1
 80094a0:	080094d7 	.word	0x080094d7
 80094a4:	080094c7 	.word	0x080094c7
 80094a8:	080094d7 	.word	0x080094d7
 80094ac:	080094d7 	.word	0x080094d7
 80094b0:	080094d7 	.word	0x080094d7
 80094b4:	080094cf 	.word	0x080094cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b8:	f7fd ff0a 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 80094bc:	6178      	str	r0, [r7, #20]
        break;
 80094be:	e00f      	b.n	80094e0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c0:	4b1e      	ldr	r3, [pc, #120]	; (800953c <UART_SetConfig+0x314>)
 80094c2:	617b      	str	r3, [r7, #20]
        break;
 80094c4:	e00c      	b.n	80094e0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094c6:	f7fd fe95 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 80094ca:	6178      	str	r0, [r7, #20]
        break;
 80094cc:	e008      	b.n	80094e0 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d2:	617b      	str	r3, [r7, #20]
        break;
 80094d4:	e004      	b.n	80094e0 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	76bb      	strb	r3, [r7, #26]
        break;
 80094de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 8130 	beq.w	8009748 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	4a14      	ldr	r2, [pc, #80]	; (8009540 <UART_SetConfig+0x318>)
 80094ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f2:	461a      	mov	r2, r3
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4613      	mov	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	429a      	cmp	r2, r3
 800950a:	d305      	bcc.n	8009518 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	429a      	cmp	r2, r3
 8009516:	d915      	bls.n	8009544 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	76bb      	strb	r3, [r7, #26]
 800951c:	e114      	b.n	8009748 <UART_SetConfig+0x520>
 800951e:	bf00      	nop
 8009520:	cfff69f3 	.word	0xcfff69f3
 8009524:	40008000 	.word	0x40008000
 8009528:	40013800 	.word	0x40013800
 800952c:	40021000 	.word	0x40021000
 8009530:	40004400 	.word	0x40004400
 8009534:	40004800 	.word	0x40004800
 8009538:	40004c00 	.word	0x40004c00
 800953c:	00f42400 	.word	0x00f42400
 8009540:	0800a290 	.word	0x0800a290
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	4618      	mov	r0, r3
 8009548:	f04f 0100 	mov.w	r1, #0
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	4a87      	ldr	r2, [pc, #540]	; (8009770 <UART_SetConfig+0x548>)
 8009552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f04f 0400 	mov.w	r4, #0
 800955c:	461a      	mov	r2, r3
 800955e:	4623      	mov	r3, r4
 8009560:	f7f7 fa78 	bl	8000a54 <__aeabi_uldivmod>
 8009564:	4603      	mov	r3, r0
 8009566:	460c      	mov	r4, r1
 8009568:	4619      	mov	r1, r3
 800956a:	4622      	mov	r2, r4
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	f04f 0400 	mov.w	r4, #0
 8009574:	0214      	lsls	r4, r2, #8
 8009576:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800957a:	020b      	lsls	r3, r1, #8
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	6852      	ldr	r2, [r2, #4]
 8009580:	0852      	lsrs	r2, r2, #1
 8009582:	4611      	mov	r1, r2
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	eb13 0b01 	adds.w	fp, r3, r1
 800958c:	eb44 0c02 	adc.w	ip, r4, r2
 8009590:	4658      	mov	r0, fp
 8009592:	4661      	mov	r1, ip
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f04f 0400 	mov.w	r4, #0
 800959c:	461a      	mov	r2, r3
 800959e:	4623      	mov	r3, r4
 80095a0:	f7f7 fa58 	bl	8000a54 <__aeabi_uldivmod>
 80095a4:	4603      	mov	r3, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b0:	d308      	bcc.n	80095c4 <UART_SetConfig+0x39c>
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095b8:	d204      	bcs.n	80095c4 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	e0c1      	b.n	8009748 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	76bb      	strb	r3, [r7, #26]
 80095c8:	e0be      	b.n	8009748 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d2:	d164      	bne.n	800969e <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80095d4:	7efb      	ldrb	r3, [r7, #27]
 80095d6:	2b08      	cmp	r3, #8
 80095d8:	d827      	bhi.n	800962a <UART_SetConfig+0x402>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x3b8>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	08009605 	.word	0x08009605
 80095e4:	0800960d 	.word	0x0800960d
 80095e8:	08009615 	.word	0x08009615
 80095ec:	0800962b 	.word	0x0800962b
 80095f0:	0800961b 	.word	0x0800961b
 80095f4:	0800962b 	.word	0x0800962b
 80095f8:	0800962b 	.word	0x0800962b
 80095fc:	0800962b 	.word	0x0800962b
 8009600:	08009623 	.word	0x08009623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009604:	f7fd fe64 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 8009608:	6178      	str	r0, [r7, #20]
        break;
 800960a:	e013      	b.n	8009634 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800960c:	f7fd fe76 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 8009610:	6178      	str	r0, [r7, #20]
        break;
 8009612:	e00f      	b.n	8009634 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009614:	4b57      	ldr	r3, [pc, #348]	; (8009774 <UART_SetConfig+0x54c>)
 8009616:	617b      	str	r3, [r7, #20]
        break;
 8009618:	e00c      	b.n	8009634 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800961a:	f7fd fdeb 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 800961e:	6178      	str	r0, [r7, #20]
        break;
 8009620:	e008      	b.n	8009634 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009626:	617b      	str	r3, [r7, #20]
        break;
 8009628:	e004      	b.n	8009634 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	76bb      	strb	r3, [r7, #26]
        break;
 8009632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8086 	beq.w	8009748 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	4a4b      	ldr	r2, [pc, #300]	; (8009770 <UART_SetConfig+0x548>)
 8009642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009646:	461a      	mov	r2, r3
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	fbb3 f3f2 	udiv	r3, r3, r2
 800964e:	005a      	lsls	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	085b      	lsrs	r3, r3, #1
 8009656:	441a      	add	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	b29b      	uxth	r3, r3
 8009662:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d916      	bls.n	8009698 <UART_SetConfig+0x470>
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009670:	d212      	bcs.n	8009698 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	b29b      	uxth	r3, r3
 8009676:	f023 030f 	bic.w	r3, r3, #15
 800967a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	085b      	lsrs	r3, r3, #1
 8009680:	b29b      	uxth	r3, r3
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	b29a      	uxth	r2, r3
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	4313      	orrs	r3, r2
 800968c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	89fa      	ldrh	r2, [r7, #14]
 8009694:	60da      	str	r2, [r3, #12]
 8009696:	e057      	b.n	8009748 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	76bb      	strb	r3, [r7, #26]
 800969c:	e054      	b.n	8009748 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800969e:	7efb      	ldrb	r3, [r7, #27]
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d828      	bhi.n	80096f6 <UART_SetConfig+0x4ce>
 80096a4:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <UART_SetConfig+0x484>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	080096d1 	.word	0x080096d1
 80096b0:	080096d9 	.word	0x080096d9
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	080096f7 	.word	0x080096f7
 80096bc:	080096e7 	.word	0x080096e7
 80096c0:	080096f7 	.word	0x080096f7
 80096c4:	080096f7 	.word	0x080096f7
 80096c8:	080096f7 	.word	0x080096f7
 80096cc:	080096ef 	.word	0x080096ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096d0:	f7fd fdfe 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 80096d4:	6178      	str	r0, [r7, #20]
        break;
 80096d6:	e013      	b.n	8009700 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096d8:	f7fd fe10 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 80096dc:	6178      	str	r0, [r7, #20]
        break;
 80096de:	e00f      	b.n	8009700 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096e0:	4b24      	ldr	r3, [pc, #144]	; (8009774 <UART_SetConfig+0x54c>)
 80096e2:	617b      	str	r3, [r7, #20]
        break;
 80096e4:	e00c      	b.n	8009700 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096e6:	f7fd fd85 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 80096ea:	6178      	str	r0, [r7, #20]
        break;
 80096ec:	e008      	b.n	8009700 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096f2:	617b      	str	r3, [r7, #20]
        break;
 80096f4:	e004      	b.n	8009700 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	76bb      	strb	r3, [r7, #26]
        break;
 80096fe:	bf00      	nop
    }

    if (pclk != 0U)
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d020      	beq.n	8009748 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	4a19      	ldr	r2, [pc, #100]	; (8009770 <UART_SetConfig+0x548>)
 800970c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009710:	461a      	mov	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	fbb3 f2f2 	udiv	r2, r3, r2
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	085b      	lsrs	r3, r3, #1
 800971e:	441a      	add	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	fbb2 f3f3 	udiv	r3, r2, r3
 8009728:	b29b      	uxth	r3, r3
 800972a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b0f      	cmp	r3, #15
 8009730:	d908      	bls.n	8009744 <UART_SetConfig+0x51c>
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009738:	d204      	bcs.n	8009744 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	60da      	str	r2, [r3, #12]
 8009742:	e001      	b.n	8009748 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009764:	7ebb      	ldrb	r3, [r7, #26]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3720      	adds	r7, #32
 800976a:	46bd      	mov	sp, r7
 800976c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009770:	0800a290 	.word	0x0800a290
 8009774:	00f42400 	.word	0x00f42400

08009778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	f003 0308 	and.w	r3, r3, #8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01a      	beq.n	800988e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009876:	d10a      	bne.n	800988e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	605a      	str	r2, [r3, #4]
  }
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098cc:	f7fa ff26 	bl	800471c <HAL_GetTick>
 80098d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0308 	and.w	r3, r3, #8
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d10e      	bne.n	80098fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f82c 	bl	800994c <UART_WaitOnFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e022      	b.n	8009944 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b04      	cmp	r3, #4
 800990a:	d10e      	bne.n	800992a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800990c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f816 	bl	800994c <UART_WaitOnFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e00c      	b.n	8009944 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	4613      	mov	r3, r2
 800995a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800995c:	e062      	b.n	8009a24 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d05e      	beq.n	8009a24 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009966:	f7fa fed9 	bl	800471c <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	429a      	cmp	r2, r3
 8009974:	d302      	bcc.n	800997c <UART_WaitOnFlagUntilTimeout+0x30>
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d11d      	bne.n	80099b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800998a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0201 	bic.w	r2, r2, #1
 800999a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2220      	movs	r2, #32
 80099a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e045      	b.n	8009a44 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d02e      	beq.n	8009a24 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099d4:	d126      	bne.n	8009a24 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0201 	bic.w	r2, r2, #1
 80099fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e00f      	b.n	8009a44 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69da      	ldr	r2, [r3, #28]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	bf0c      	ite	eq
 8009a34:	2301      	moveq	r3, #1
 8009a36:	2300      	movne	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d08d      	beq.n	800995e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009a62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009a72:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d114      	bne.n	8009b14 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b00:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b10:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b12:	e002      	b.n	8009b1a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7fa fa11 	bl	8003f3c <HAL_UART_TxCpltCallback>
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f7ff fb5b 	bl	80091ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 0320 	and.w	r3, r3, #32
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d11f      	bne.n	8009b9a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b70:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0201 	bic.w	r2, r2, #1
 8009b80:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b90:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fb30 	bl	8009200 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ba0:	bf00      	nop
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fb2c 	bl	8009214 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bbc:	bf00      	nop
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bd8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009be0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bec:	2b80      	cmp	r3, #128	; 0x80
 8009bee:	d109      	bne.n	8009c04 <UART_DMAError+0x40>
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	2b21      	cmp	r3, #33	; 0x21
 8009bf4:	d106      	bne.n	8009c04 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009bfe:	6978      	ldr	r0, [r7, #20]
 8009c00:	f7ff ff24 	bl	8009a4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b40      	cmp	r3, #64	; 0x40
 8009c10:	d109      	bne.n	8009c26 <UART_DMAError+0x62>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b22      	cmp	r3, #34	; 0x22
 8009c16:	d106      	bne.n	8009c26 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	f7ff ff31 	bl	8009a88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2c:	f043 0210 	orr.w	r2, r3, #16
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c36:	6978      	ldr	r0, [r7, #20]
 8009c38:	f7f9 ff72 	bl	8003b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c3c:	bf00      	nop
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7f9 ff5c 	bl	8003b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c68:	bf00      	nop
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c86:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fa f950 	bl	8003f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e027      	b.n	8009d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2224      	movs	r2, #36	; 0x24
 8009d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0201 	bic.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b084      	sub	sp, #16
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e02d      	b.n	8009dc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2224      	movs	r2, #36	; 0x24
 8009d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
 8009d90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f850 	bl	8009e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e02d      	b.n	8009e42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2224      	movs	r2, #36	; 0x24
 8009df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f812 	bl	8009e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b089      	sub	sp, #36	; 0x24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009e54:	4a2f      	ldr	r2, [pc, #188]	; (8009f14 <UARTEx_SetNbDataToProcess+0xc8>)
 8009e56:	f107 0314 	add.w	r3, r7, #20
 8009e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e5e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009e62:	4a2d      	ldr	r2, [pc, #180]	; (8009f18 <UARTEx_SetNbDataToProcess+0xcc>)
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e6c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d108      	bne.n	8009e8a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e88:	e03d      	b.n	8009f06 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e8a:	2308      	movs	r3, #8
 8009e8c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e8e:	2308      	movs	r3, #8
 8009e90:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	0e5b      	lsrs	r3, r3, #25
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	f003 0307 	and.w	r3, r3, #7
 8009ea0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	0f5b      	lsrs	r3, r3, #29
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eb2:	7fbb      	ldrb	r3, [r7, #30]
 8009eb4:	7f3a      	ldrb	r2, [r7, #28]
 8009eb6:	f107 0120 	add.w	r1, r7, #32
 8009eba:	440a      	add	r2, r1
 8009ebc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ec4:	7f3a      	ldrb	r2, [r7, #28]
 8009ec6:	f107 0120 	add.w	r1, r7, #32
 8009eca:	440a      	add	r2, r1
 8009ecc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009edc:	7ffb      	ldrb	r3, [r7, #31]
 8009ede:	7f7a      	ldrb	r2, [r7, #29]
 8009ee0:	f107 0120 	add.w	r1, r7, #32
 8009ee4:	440a      	add	r2, r1
 8009ee6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009eee:	7f7a      	ldrb	r2, [r7, #29]
 8009ef0:	f107 0120 	add.w	r1, r7, #32
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f06:	bf00      	nop
 8009f08:	3724      	adds	r7, #36	; 0x24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	0800a05c 	.word	0x0800a05c
 8009f18:	0800a064 	.word	0x0800a064

08009f1c <__errno>:
 8009f1c:	4b01      	ldr	r3, [pc, #4]	; (8009f24 <__errno+0x8>)
 8009f1e:	6818      	ldr	r0, [r3, #0]
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	20000034 	.word	0x20000034

08009f28 <__libc_init_array>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	4e0d      	ldr	r6, [pc, #52]	; (8009f60 <__libc_init_array+0x38>)
 8009f2c:	4c0d      	ldr	r4, [pc, #52]	; (8009f64 <__libc_init_array+0x3c>)
 8009f2e:	1ba4      	subs	r4, r4, r6
 8009f30:	10a4      	asrs	r4, r4, #2
 8009f32:	2500      	movs	r5, #0
 8009f34:	42a5      	cmp	r5, r4
 8009f36:	d109      	bne.n	8009f4c <__libc_init_array+0x24>
 8009f38:	4e0b      	ldr	r6, [pc, #44]	; (8009f68 <__libc_init_array+0x40>)
 8009f3a:	4c0c      	ldr	r4, [pc, #48]	; (8009f6c <__libc_init_array+0x44>)
 8009f3c:	f000 f882 	bl	800a044 <_init>
 8009f40:	1ba4      	subs	r4, r4, r6
 8009f42:	10a4      	asrs	r4, r4, #2
 8009f44:	2500      	movs	r5, #0
 8009f46:	42a5      	cmp	r5, r4
 8009f48:	d105      	bne.n	8009f56 <__libc_init_array+0x2e>
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}
 8009f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f50:	4798      	blx	r3
 8009f52:	3501      	adds	r5, #1
 8009f54:	e7ee      	b.n	8009f34 <__libc_init_array+0xc>
 8009f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f5a:	4798      	blx	r3
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	e7f2      	b.n	8009f46 <__libc_init_array+0x1e>
 8009f60:	0800a2b8 	.word	0x0800a2b8
 8009f64:	0800a2b8 	.word	0x0800a2b8
 8009f68:	0800a2b8 	.word	0x0800a2b8
 8009f6c:	0800a2bc 	.word	0x0800a2bc

08009f70 <memcpy>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	1e43      	subs	r3, r0, #1
 8009f74:	440a      	add	r2, r1
 8009f76:	4291      	cmp	r1, r2
 8009f78:	d100      	bne.n	8009f7c <memcpy+0xc>
 8009f7a:	bd10      	pop	{r4, pc}
 8009f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f84:	e7f7      	b.n	8009f76 <memcpy+0x6>

08009f86 <memset>:
 8009f86:	4402      	add	r2, r0
 8009f88:	4603      	mov	r3, r0
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d100      	bne.n	8009f90 <memset+0xa>
 8009f8e:	4770      	bx	lr
 8009f90:	f803 1b01 	strb.w	r1, [r3], #1
 8009f94:	e7f9      	b.n	8009f8a <memset+0x4>
	...

08009f98 <sqrtf>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	ed2d 8b02 	vpush	{d8}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	eeb0 8a40 	vmov.f32	s16, s0
 8009fa4:	f000 f848 	bl	800a038 <__ieee754_sqrtf>
 8009fa8:	4b21      	ldr	r3, [pc, #132]	; (800a030 <sqrtf+0x98>)
 8009faa:	f993 4000 	ldrsb.w	r4, [r3]
 8009fae:	1c63      	adds	r3, r4, #1
 8009fb0:	d02c      	beq.n	800a00c <sqrtf+0x74>
 8009fb2:	eeb4 8a48 	vcmp.f32	s16, s16
 8009fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fba:	d627      	bvs.n	800a00c <sqrtf+0x74>
 8009fbc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc4:	d522      	bpl.n	800a00c <sqrtf+0x74>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	4b1a      	ldr	r3, [pc, #104]	; (800a034 <sqrtf+0x9c>)
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	ee18 0a10 	vmov	r0, s16
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9308      	str	r3, [sp, #32]
 8009fd6:	f7f6 fa83 	bl	80004e0 <__aeabi_f2d>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	b9ac      	cbnz	r4, 800a014 <sqrtf+0x7c>
 8009fe8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fec:	4668      	mov	r0, sp
 8009fee:	f000 f826 	bl	800a03e <matherr>
 8009ff2:	b1b8      	cbz	r0, 800a024 <sqrtf+0x8c>
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	b11b      	cbz	r3, 800a000 <sqrtf+0x68>
 8009ff8:	f7ff ff90 	bl	8009f1c <__errno>
 8009ffc:	9b08      	ldr	r3, [sp, #32]
 8009ffe:	6003      	str	r3, [r0, #0]
 800a000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a004:	f7f6 fcd6 	bl	80009b4 <__aeabi_d2f>
 800a008:	ee00 0a10 	vmov	s0, r0
 800a00c:	b00a      	add	sp, #40	; 0x28
 800a00e:	ecbd 8b02 	vpop	{d8}
 800a012:	bd10      	pop	{r4, pc}
 800a014:	4610      	mov	r0, r2
 800a016:	4619      	mov	r1, r3
 800a018:	f7f6 fbe4 	bl	80007e4 <__aeabi_ddiv>
 800a01c:	2c02      	cmp	r4, #2
 800a01e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a022:	d1e3      	bne.n	8009fec <sqrtf+0x54>
 800a024:	f7ff ff7a 	bl	8009f1c <__errno>
 800a028:	2321      	movs	r3, #33	; 0x21
 800a02a:	6003      	str	r3, [r0, #0]
 800a02c:	e7e2      	b.n	8009ff4 <sqrtf+0x5c>
 800a02e:	bf00      	nop
 800a030:	20000098 	.word	0x20000098
 800a034:	0800a2a8 	.word	0x0800a2a8

0800a038 <__ieee754_sqrtf>:
 800a038:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a03c:	4770      	bx	lr

0800a03e <matherr>:
 800a03e:	2000      	movs	r0, #0
 800a040:	4770      	bx	lr
	...

0800a044 <_init>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr

0800a050 <_fini>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	bf00      	nop
 800a054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a056:	bc08      	pop	{r3}
 800a058:	469e      	mov	lr, r3
 800a05a:	4770      	bx	lr
