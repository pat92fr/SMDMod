
ControlFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb4  2000000c  08006d3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bc0  08006d3c  00022bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016853  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002874  00000000  00000000  0003688f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  00039108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0003a608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002040d  00000000  00000000  0003b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff5b  00000000  00000000  0005bddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9d85  00000000  00000000  0006bd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  00145b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006cb8 	.word	0x08006cb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006cb8 	.word	0x08006cb8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <stop_blinking+0x3c>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2100      	movs	r1, #0
 8000526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <stop_blinking+0x40>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2100      	movs	r1, #0
 8000530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <stop_blinking+0x44>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <stop_blinking+0x48>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2100      	movs	r1, #0
 8000544:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	20000028 	.word	0x20000028
 8000558:	20000030 	.word	0x20000030
 800055c:	20000038 	.word	0x20000038
 8000560:	2000003c 	.word	0x2000003c

08000564 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e011      	b.n	8000598 <HAL_Led_Init+0x34>
    {
        stop_blinking(id);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff ffcf 	bl	8000518 <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <HAL_Led_Init+0x44>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <HAL_Led_Init+0x48>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	2201      	movs	r2, #1
 800058c:	4619      	mov	r1, r3
 800058e:	f003 f977 	bl	8003880 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3301      	adds	r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b01      	cmp	r3, #1
 800059c:	ddea      	ble.n	8000574 <HAL_Led_Init+0x10>
    }
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	08006ce8 	.word	0x08006ce8
 80005ac:	08006ce4 	.word	0x08006ce4

080005b0 <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 80005b6:	f001 fb9d 	bl	8001cf4 <HAL_GetTick>
 80005ba:	6038      	str	r0, [r7, #0]
    int id = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e063      	b.n	800068e <HAL_Led_Process+0xde>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 80005c6:	4a35      	ldr	r2, [pc, #212]	; (800069c <HAL_Led_Process+0xec>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d05a      	beq.n	8000688 <HAL_Led_Process+0xd8>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 80005d2:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <HAL_Led_Process+0xf0>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005da:	4930      	ldr	r1, [pc, #192]	; (800069c <HAL_Led_Process+0xec>)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005e2:	4413      	add	r3, r2
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d34e      	bcc.n	8000688 <HAL_Led_Process+0xd8>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 80005ea:	4a2e      	ldr	r2, [pc, #184]	; (80006a4 <HAL_Led_Process+0xf4>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f2:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <HAL_Led_Process+0xf8>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005fa:	4619      	mov	r1, r3
 80005fc:	f003 f928 	bl	8003850 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10c      	bne.n	8000620 <HAL_Led_Process+0x70>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8000606:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <HAL_Led_Process+0xf4>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800060e:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <HAL_Led_Process+0xf8>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	f003 f931 	bl	8003880 <HAL_GPIO_WritePin>
 800061e:	e00b      	b.n	8000638 <HAL_Led_Process+0x88>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <HAL_Led_Process+0xf4>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000628:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <HAL_Led_Process+0xf8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f003 f924 	bl	8003880 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 8000638:	4a19      	ldr	r2, [pc, #100]	; (80006a0 <HAL_Led_Process+0xf0>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000640:	4916      	ldr	r1, [pc, #88]	; (800069c <HAL_Led_Process+0xec>)
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000648:	441a      	add	r2, r3
 800064a:	4915      	ldr	r1, [pc, #84]	; (80006a0 <HAL_Led_Process+0xf0>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <HAL_Led_Process+0xfc>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f083 0301 	eor.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d011      	beq.n	8000688 <HAL_Led_Process+0xd8>
                {
                    --blinkin_counter[id];
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <HAL_Led_Process+0x100>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <HAL_Led_Process+0x100>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_Led_Process+0x100>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <HAL_Led_Process+0xd8>
                    {
                        stop_blinking(id);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff48 	bl	8000518 <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b01      	cmp	r3, #1
 8000692:	dd98      	ble.n	80005c6 <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	08006ce8 	.word	0x08006ce8
 80006a8:	08006ce4 	.word	0x08006ce4
 80006ac:	20000038 	.word	0x20000038
 80006b0:	20000030 	.word	0x20000030

080006b4 <HAL_Led_Reset>:
    stop_blinking(id);
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
}

void HAL_Led_Reset(int id)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff2b 	bl	8000518 <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_Led_Reset+0x30>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Led_Reset+0x34>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d2:	2201      	movs	r2, #1
 80006d4:	4619      	mov	r1, r3
 80006d6:	f003 f8d3 	bl	8003880 <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08006ce8 	.word	0x08006ce8
 80006e8:	08006ce4 	.word	0x08006ce4

080006ec <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 80006f8:	4919      	ldr	r1, [pc, #100]	; (8000760 <HAL_Led_Blink+0x74>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <HAL_Led_Blink+0x24>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	3b01      	subs	r3, #1
 800070e:	e000      	b.n	8000712 <HAL_Led_Blink+0x26>
 8000710:	2300      	movs	r3, #0
 8000712:	4914      	ldr	r1, [pc, #80]	; (8000764 <HAL_Led_Blink+0x78>)
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf0c      	ite	eq
 8000720:	2301      	moveq	r3, #1
 8000722:	2300      	movne	r3, #0
 8000724:	b2d9      	uxtb	r1, r3
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_Led_Blink+0x7c>)
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	460a      	mov	r2, r1
 800072e:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 8000730:	f001 fae0 	bl	8001cf4 <HAL_GetTick>
 8000734:	4601      	mov	r1, r0
 8000736:	4a0d      	ldr	r2, [pc, #52]	; (800076c <HAL_Led_Blink+0x80>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 800073e:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <HAL_Led_Blink+0x84>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <HAL_Led_Blink+0x88>)
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f003 f895 	bl	8003880 <HAL_GPIO_WritePin>
}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028
 8000764:	20000030 	.word	0x20000030
 8000768:	20000038 	.word	0x20000038
 800076c:	2000003c 	.word	0x2000003c
 8000770:	08006ce8 	.word	0x08006ce8
 8000774:	08006ce4 	.word	0x08006ce4

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f001 fa54 	bl	8001c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f84b 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 fb03 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 800078a:	f000 facf 	bl	8000d2c <MX_DMA_Init>
  MX_ADC1_Init();
 800078e:	f000 f8af 	bl	80008f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000792:	f000 f925 	bl	80009e0 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000796:	f000 f989 	bl	8000aac <MX_TIM1_Init>
  MX_TIM4_Init();
 800079a:	f000 f9f7 	bl	8000b8c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800079e:	f000 fa79 	bl	8000c94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Led_Init();
 80007a2:	f7ff fedf 	bl	8000564 <HAL_Led_Init>
	HAL_Led_Blink(LED0,10,150);
 80007a6:	2296      	movs	r2, #150	; 0x96
 80007a8:	210a      	movs	r1, #10
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff9e 	bl	80006ec <HAL_Led_Blink>
	HAL_Led_Blink(LED1,10,150);
 80007b0:	2296      	movs	r2, #150	; 0x96
 80007b2:	210a      	movs	r1, #10
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff99 	bl	80006ec <HAL_Led_Blink>
	HAL_Serial_Init_Half_Duplex(
 80007ba:	2300      	movs	r3, #0
 80007bc:	9303      	str	r3, [sp, #12]
 80007be:	2310      	movs	r3, #16
 80007c0:	9302      	str	r3, [sp, #8]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <main+0x94>)
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007d2:	490f      	ldr	r1, [pc, #60]	; (8000810 <main+0x98>)
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <main+0x9c>)
 80007d6:	f000 fba9 	bl	8000f2c <HAL_Serial_Init_Half_Duplex>
	);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t start_time = HAL_GetTick();
 80007da:	f001 fa8b 	bl	8001cf4 <HAL_GetTick>
 80007de:	6078      	str	r0, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 80007e0:	f001 fa88 	bl	8001cf4 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d902      	bls.n	80007f6 <main+0x7e>
	{
		//if(regs[REG_LED]==0)
		if(1)
		{
			HAL_Led_Reset(LED0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ff5f 	bl	80006b4 <HAL_Led_Reset>
		else
		{
			HAL_Led_Set(LED0);
		}
	}
	HAL_Led_Process();
 80007f6:	f7ff fedb 	bl	80005b0 <HAL_Led_Process>


	// TRACE
	HAL_Serial_Print(&serial,".");
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <main+0xa0>)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x98>)
 80007fe:	f000 ff3b 	bl	8001678 <HAL_Serial_Print>
	HAL_Delay(10);
 8000802:	200a      	movs	r0, #10
 8000804:	f001 fa82 	bl	8001d0c <HAL_Delay>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8000808:	e7ea      	b.n	80007e0 <main+0x68>
 800080a:	bf00      	nop
 800080c:	48000400 	.word	0x48000400
 8000810:	2000023c 	.word	0x2000023c
 8000814:	20002b30 	.word	0x20002b30
 8000818:	08006cd0 	.word	0x08006cd0

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b0a4      	sub	sp, #144	; 0x90
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000826:	2238      	movs	r2, #56	; 0x38
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fa3b 	bl	8006ca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2244      	movs	r2, #68	; 0x44
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fa2d 	bl	8006ca6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000850:	f003 f82e 	bl	80038b0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	2340      	movs	r3, #64	; 0x40
 8000860:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800086e:	234b      	movs	r3, #75	; 0x4b
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800088a:	4618      	mov	r0, r3
 800088c:	f003 f8c4 	bl	8003a18 <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000896:	f000 faf9 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089e:	2303      	movs	r3, #3
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008b2:	2104      	movs	r1, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fbc7 	bl	8004048 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008c0:	f000 fae4 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80008c4:	f248 0302 	movw	r3, #32770	; 0x8002
 80008c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fdd2 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008e2:	f000 fad3 	bl	8000e8c <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3790      	adds	r7, #144	; 0x90
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f006 f9cc 	bl	8006ca6 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000910:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800091e:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000938:	2204      	movs	r2, #4
 800093a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000944:	2200      	movs	r2, #0
 8000946:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800094a:	2201      	movs	r2, #1
 800094c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000978:	4817      	ldr	r0, [pc, #92]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800097a:	f001 fbbf 	bl	80020fc <HAL_ADC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 fa82 	bl	8000e8c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000994:	f002 f950 	bl	8002c38 <HAL_ADCEx_MultiModeConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800099e:	f000 fa75 	bl	8000e8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_ADC1_Init+0xec>)
 80009a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a6:	2306      	movs	r3, #6
 80009a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ae:	237f      	movs	r3, #127	; 0x7f
 80009b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009b2:	2304      	movs	r3, #4
 80009b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_ADC1_Init+0xe8>)
 80009c0:	f001 fd24 	bl	800240c <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009ca:	f000 fa5f 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000170 	.word	0x20000170
 80009dc:	2a000400 	.word	0x2a000400

080009e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 f95a 	bl	8006ca6 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <MX_ADC2_Init+0xc4>)
 80009f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 80009fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a5c:	f001 fb4e 	bl	80020fc <HAL_ADC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000a66:	f000 fa11 	bl	8000e8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_ADC2_Init+0xc8>)
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a76:	237f      	movs	r3, #127	; 0x7f
 8000a78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_ADC2_Init+0xc0>)
 8000a88:	f001 fcc0 	bl	800240c <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a92:	f000 f9fb 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000104 	.word	0x20000104
 8000aa4:	50000100 	.word	0x50000100
 8000aa8:	04300002 	.word	0x04300002

08000aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09a      	sub	sp, #104	; 0x68
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ab6:	2224      	movs	r2, #36	; 0x24
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 f8f3 	bl	8006ca6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2234      	movs	r2, #52	; 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f006 f8e7 	bl	8006ca6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <MX_TIM1_Init+0xdc>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000b30:	f003 ff4e 	bl	80049d0 <HAL_TIM_Encoder_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b3a:	f000 f9a7 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000b52:	f004 fde7 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8000b5c:	f000 f996 	bl	8000e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_TIM1_Init+0xd8>)
 8000b6e:	f004 fe5b 	bl	8005828 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000b78:	f000 f988 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3768      	adds	r7, #104	; 0x68
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20002ae4 	.word	0x20002ae4
 8000b88:	40012c00 	.word	0x40012c00

08000b8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000bc0:	4a33      	ldr	r2, [pc, #204]	; (8000c90 <MX_TIM4_Init+0x104>)
 8000bc2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bc4:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000bcc:	2220      	movs	r2, #32
 8000bce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3749;
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000bd2:	f640 62a5 	movw	r2, #3749	; 0xea5
 8000bd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be4:	4829      	ldr	r0, [pc, #164]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000be6:	f003 fe3b 	bl	8004860 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000bf0:	f000 f94c 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000c02:	f004 f89b 	bl	8004d3c <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c0c:	f000 f93e 	bl	8000e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c10:	481e      	ldr	r0, [pc, #120]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000c12:	f003 fe7c 	bl	800490e <HAL_TIM_PWM_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000c1c:	f000 f936 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000c30:	f004 fd78 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c3a:	f000 f927 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3e:	2360      	movs	r3, #96	; 0x60
 8000c40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000c56:	f003 ff61 	bl	8004b1c <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000c60:	f000 f914 	bl	8000e8c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000c70:	f003 ff54 	bl	8004b1c <HAL_TIM_PWM_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000c7a:	f000 f907 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <MX_TIM4_Init+0x100>)
 8000c80:	f000 fe50 	bl	8001924 <HAL_TIM_MspPostInit>

}
 8000c84:	bf00      	nop
 8000c86:	3738      	adds	r7, #56	; 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000b8 	.word	0x200000b8
 8000c90:	40000800 	.word	0x40000800

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <MX_USART2_UART_Init+0x94>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cde:	f004 fe43 	bl	8005968 <HAL_UART_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ce8:	f000 f8d0 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cf0:	f005 fec5 	bl	8006a7e <HAL_UARTEx_SetTxFifoThreshold>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfa:	f000 f8c7 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000d02:	f005 fefa 	bl	8006afa <HAL_UARTEx_SetRxFifoThreshold>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d0c:	f000 f8be 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000d12:	f005 fe7b 	bl	8006a0c <HAL_UARTEx_DisableFifoMode>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d1c:	f000 f8b6 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20002b30 	.word	0x20002b30
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6493      	str	r3, [r2, #72]	; 0x48
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	200b      	movs	r0, #11
 8000d68:	f002 f8e1 	bl	8002f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	200b      	movs	r0, #11
 8000d6e:	f002 f8f8 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	200c      	movs	r0, #12
 8000d78:	f002 f8d9 	bl	8002f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d7c:	200c      	movs	r0, #12
 8000d7e:	f002 f8f0 	bl	8002f62 <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a36      	ldr	r2, [pc, #216]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a2a      	ldr	r2, [pc, #168]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <MX_GPIO_Init+0xf4>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED0_Pin|UART2_TX_DIR_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f002 fd42 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_RX_DIR_GPIO_Port, UART2_RX_DIR_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <MX_GPIO_Init+0xf8>)
 8000e02:	f002 fd3d 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_FAULT_Pin */
  GPIO_InitStruct.Pin = GPIO_FAULT_Pin;
 8000e06:	2302      	movs	r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f002 fb96 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8000e20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e26:	2311      	movs	r3, #17
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f002 fb86 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_TX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_TX_DIR_Pin;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_TX_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5c:	f002 fb76 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_RX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_RX_DIR_Pin;
 8000e60:	2310      	movs	r3, #16
 8000e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_RX_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0xf8>)
 8000e78:	f002 fb68 	bl	800354c <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <Error_Handler+0x6>

08000e94 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e032      	b.n	8000f0a <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_UART_ErrorCallback+0x90>)
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d124      	bne.n	8000f00 <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_UART_ErrorCallback+0x90>)
 8000ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4917      	ldr	r1, [pc, #92]	; (8000f24 <HAL_UART_ErrorCallback+0x90>)
 8000ec6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eca:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8000ece:	3210      	adds	r2, #16
 8000ed0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000ed4:	3310      	adds	r3, #16
 8000ed6:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_UART_ErrorCallback+0x90>)
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_UART_ErrorCallback+0x90>)
 8000eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eee:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f004 fe05 	bl	8005b08 <HAL_UART_Receive_DMA>
		   break;
 8000efe:	e00b      	b.n	8000f18 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_UART_ErrorCallback+0x8c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_UART_ErrorCallback+0x94>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d1c5      	bne.n	8000ea4 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000004c 	.word	0x2000004c
 8000f24:	20000044 	.word	0x20000044
 8000f28:	20000048 	.word	0x20000048

08000f2c <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8000f3a:	4b45      	ldr	r3, [pc, #276]	; (8001050 <HAL_Serial_Init_Half_Duplex+0x124>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	4943      	ldr	r1, [pc, #268]	; (8001050 <HAL_Serial_Init_Half_Duplex+0x124>)
 8000f42:	600a      	str	r2, [r1, #0]
 8000f44:	4943      	ldr	r1, [pc, #268]	; (8001054 <HAL_Serial_Init_Half_Duplex+0x128>)
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8000f64:	3308      	adds	r3, #8
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8000f70:	330c      	adds	r3, #12
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8000f7c:	3210      	adds	r2, #16
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000f84:	3310      	adds	r3, #16
 8000f86:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8000f92:	3310      	adds	r3, #16
 8000f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f004 fdb5 	bl	8005b08 <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fa4:	3314      	adds	r3, #20
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fb0:	3318      	adds	r3, #24
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fbc:	331c      	adds	r3, #28
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fc8:	331e      	adds	r3, #30
 8000fca:	7e3a      	ldrb	r2, [r7, #24]
 8000fcc:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fd4:	3320      	adds	r3, #32
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fe0:	3324      	adds	r3, #36	; 0x24
 8000fe2:	8c3a      	ldrh	r2, [r7, #32]
 8000fe4:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000fec:	3326      	adds	r3, #38	; 0x26
 8000fee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ff2:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001004:	331c      	adds	r3, #28
 8001006:	8819      	ldrh	r1, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800100e:	331e      	adds	r3, #30
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf0c      	ite	eq
 8001016:	2301      	moveq	r3, #1
 8001018:	2300      	movne	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	f002 fc2f 	bl	8003880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001028:	3320      	adds	r3, #32
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001032:	3324      	adds	r3, #36	; 0x24
 8001034:	8819      	ldrh	r1, [r3, #0]
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800103c:	3326      	adds	r3, #38	; 0x26
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	f002 fc1d 	bl	8003880 <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000048 	.word	0x20000048
 8001054:	20000044 	.word	0x20000044

08001058 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_Serial_Write+0x18>
        return 0;
 800106c:	2300      	movs	r3, #0
 800106e:	e09a      	b.n	80011a6 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001076:	3304      	adds	r3, #4
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	4613      	mov	r3, r2
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4403      	add	r3, r0
 8001088:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800108c:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001094:	3304      	adds	r3, #4
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	019b      	lsls	r3, r3, #6
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f005 fdee 	bl	8006c90 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80010ca:	3304      	adds	r3, #4
 80010cc:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80010d4:	330c      	adds	r3, #12
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d163      	bne.n	80011a4 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80010e2:	330c      	adds	r3, #12
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80010ee:	3314      	adds	r3, #20
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d028      	beq.n	8001148 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80010fc:	3318      	adds	r3, #24
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001106:	331c      	adds	r3, #28
 8001108:	8819      	ldrh	r1, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001110:	331e      	adds	r3, #30
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	f002 fbb3 	bl	8003880 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001120:	3320      	adds	r3, #32
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800112a:	3324      	adds	r3, #36	; 0x24
 800112c:	8819      	ldrh	r1, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001134:	3326      	adds	r3, #38	; 0x26
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	f002 fb9c 	bl	8003880 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001152:	3308      	adds	r3, #8
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800116a:	3308      	adds	r3, #8
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	4613      	mov	r3, r2
 8001172:	019b      	lsls	r3, r3, #6
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800117e:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8001180:	b29b      	uxth	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	4621      	mov	r1, r4
 8001186:	f004 fc3f 	bl	8005a08 <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001190:	3308      	adds	r3, #8
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	f003 021f 	and.w	r2, r3, #31
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80011a0:	3308      	adds	r3, #8
 80011a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
	...

080011b0 <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 80011b8:	4b71      	ldr	r3, [pc, #452]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e0d0      	b.n	8001362 <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a6f      	ldr	r2, [pc, #444]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	f040 80c2 	bne.w	8001358 <HAL_UART_TxCpltCallback+0x1a8>
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a6a      	ldr	r2, [pc, #424]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80011e2:	330c      	adds	r3, #12
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	f040 80b6 	bne.w	8001358 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a64      	ldr	r2, [pc, #400]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80011fa:	3304      	adds	r3, #4
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4960      	ldr	r1, [pc, #384]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001208:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800120c:	3308      	adds	r3, #8
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d04a      	beq.n	80012aa <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8001214:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 800121e:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8001220:	4b57      	ldr	r3, [pc, #348]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001226:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800122a:	4b55      	ldr	r3, [pc, #340]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a55      	ldr	r2, [pc, #340]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001238:	3308      	adds	r3, #8
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	019b      	lsls	r3, r3, #6
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 800124e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8001260:	3308      	adds	r3, #8
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4613      	mov	r3, r2
 8001266:	019b      	lsls	r3, r3, #6
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8001272:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4621      	mov	r1, r4
 800127a:	f004 fbc5 	bl	8005a08 <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 800127e:	4b40      	ldr	r3, [pc, #256]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a40      	ldr	r2, [pc, #256]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800128c:	3308      	adds	r3, #8
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	493b      	ldr	r1, [pc, #236]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800129c:	f002 021f 	and.w	r2, r2, #31
 80012a0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80012a4:	3308      	adds	r3, #8
 80012a6:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 80012a8:	e064      	b.n	8001374 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a35      	ldr	r2, [pc, #212]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80012b8:	330c      	adds	r3, #12
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a30      	ldr	r2, [pc, #192]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80012cc:	3314      	adds	r3, #20
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d04f      	beq.n	8001374 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 80012d4:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2a      	ldr	r2, [pc, #168]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80012e2:	3318      	adds	r3, #24
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80012f4:	331c      	adds	r3, #28
 80012f6:	8819      	ldrh	r1, [r3, #0]
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001306:	331e      	adds	r3, #30
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	f002 fab3 	bl	8003880 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001328:	3320      	adds	r3, #32
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800133a:	3324      	adds	r3, #36	; 0x24
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_UART_TxCpltCallback+0x1d4>)
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800134c:	3326      	adds	r3, #38	; 0x26
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	f002 fa95 	bl	8003880 <HAL_GPIO_WritePin>
           break;
 8001356:	e00d      	b.n	8001374 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_UART_TxCpltCallback+0x1d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_UART_TxCpltCallback+0x1d8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	f47f af27 	bne.w	80011c0 <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 8001372:	e000      	b.n	8001376 <HAL_UART_TxCpltCallback+0x1c6>
           break;
 8001374:	bf00      	nop
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	bf00      	nop
 8001380:	20000050 	.word	0x20000050
 8001384:	20000044 	.word	0x20000044
 8001388:	20000048 	.word	0x20000048

0800138c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800139c:	e004      	b.n	80013a8 <ts_itoa+0x1c>
		div *= base;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d2f3      	bcs.n	800139e <ts_itoa+0x12>

	while (div != 0)
 80013b6:	e029      	b.n	800140c <ts_itoa+0x80>
	{
		int num = d/div;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80013ca:	fb02 f201 	mul.w	r2, r2, r1
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b09      	cmp	r3, #9
 80013e0:	dd0a      	ble.n	80013f8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c58      	adds	r0, r3, #1
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	6008      	str	r0, [r1, #0]
 80013f0:	3237      	adds	r2, #55	; 0x37
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e009      	b.n	800140c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1c58      	adds	r0, r3, #1
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	6008      	str	r0, [r1, #0]
 8001406:	3230      	adds	r2, #48	; 0x30
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1d2      	bne.n	80013b8 <ts_itoa+0x2c>
	}
}
 8001412:	bf00      	nop
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b088      	sub	sp, #32
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800142e:	e07d      	b.n	800152c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b25      	cmp	r3, #37	; 0x25
 8001436:	d171      	bne.n	800151c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3301      	adds	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d01e      	beq.n	8001484 <ts_formatstring+0x66>
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	dc06      	bgt.n	8001458 <ts_formatstring+0x3a>
 800144a:	2b58      	cmp	r3, #88	; 0x58
 800144c:	d050      	beq.n	80014f0 <ts_formatstring+0xd2>
 800144e:	2b63      	cmp	r3, #99	; 0x63
 8001450:	d00e      	beq.n	8001470 <ts_formatstring+0x52>
 8001452:	2b25      	cmp	r3, #37	; 0x25
 8001454:	d058      	beq.n	8001508 <ts_formatstring+0xea>
 8001456:	e05d      	b.n	8001514 <ts_formatstring+0xf6>
 8001458:	2b73      	cmp	r3, #115	; 0x73
 800145a:	d02b      	beq.n	80014b4 <ts_formatstring+0x96>
 800145c:	2b73      	cmp	r3, #115	; 0x73
 800145e:	dc02      	bgt.n	8001466 <ts_formatstring+0x48>
 8001460:	2b69      	cmp	r3, #105	; 0x69
 8001462:	d00f      	beq.n	8001484 <ts_formatstring+0x66>
 8001464:	e056      	b.n	8001514 <ts_formatstring+0xf6>
 8001466:	2b75      	cmp	r3, #117	; 0x75
 8001468:	d037      	beq.n	80014da <ts_formatstring+0xbc>
 800146a:	2b78      	cmp	r3, #120	; 0x78
 800146c:	d040      	beq.n	80014f0 <ts_formatstring+0xd2>
 800146e:	e051      	b.n	8001514 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	1d1a      	adds	r2, r3, #4
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60fa      	str	r2, [r7, #12]
 800147e:	b2ca      	uxtb	r2, r1
 8001480:	701a      	strb	r2, [r3, #0]
				break;
 8001482:	e047      	b.n	8001514 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1d1a      	adds	r2, r3, #4
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da07      	bge.n	80014a4 <ts_formatstring+0x86>
					{
						val *= -1;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	425b      	negs	r3, r3
 8001498:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	60fa      	str	r2, [r7, #12]
 80014a0:	222d      	movs	r2, #45	; 0x2d
 80014a2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80014a4:	69f9      	ldr	r1, [r7, #28]
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	220a      	movs	r2, #10
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff6d 	bl	800138c <ts_itoa>
				}
				break;
 80014b2:	e02f      	b.n	8001514 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80014be:	e007      	b.n	80014d0 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	1c53      	adds	r3, r2, #1
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1c59      	adds	r1, r3, #1
 80014ca:	60f9      	str	r1, [r7, #12]
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f3      	bne.n	80014c0 <ts_formatstring+0xa2>
					}
				}
				break;
 80014d8:	e01c      	b.n	8001514 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	1d1a      	adds	r2, r3, #4
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	220a      	movs	r2, #10
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff4f 	bl	800138c <ts_itoa>
				break;
 80014ee:	e011      	b.n	8001514 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1d1a      	adds	r2, r3, #4
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2210      	movs	r2, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff43 	bl	800138c <ts_itoa>
				break;
 8001506:	e005      	b.n	8001514 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60fa      	str	r2, [r7, #12]
 800150e:	2225      	movs	r2, #37	; 0x25
 8001510:	701a      	strb	r2, [r3, #0]
				  break;
 8001512:	bf00      	nop
			}
			fmt++;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	e007      	b.n	800152c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	1c53      	adds	r3, r2, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1c59      	adds	r1, r3, #1
 8001526:	60f9      	str	r1, [r7, #12]
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f af7d 	bne.w	8001430 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	461a      	mov	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	int length = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800155a:	e081      	b.n	8001660 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b25      	cmp	r3, #37	; 0x25
 8001562:	d177      	bne.n	8001654 <ts_formatlength+0x108>
		{
			++fmt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3301      	adds	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3b58      	subs	r3, #88	; 0x58
 8001570:	2b20      	cmp	r3, #32
 8001572:	d86a      	bhi.n	800164a <ts_formatlength+0xfe>
 8001574:	a201      	add	r2, pc, #4	; (adr r2, 800157c <ts_formatlength+0x30>)
 8001576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157a:	bf00      	nop
 800157c:	0800163d 	.word	0x0800163d
 8001580:	0800164b 	.word	0x0800164b
 8001584:	0800164b 	.word	0x0800164b
 8001588:	0800164b 	.word	0x0800164b
 800158c:	0800164b 	.word	0x0800164b
 8001590:	0800164b 	.word	0x0800164b
 8001594:	0800164b 	.word	0x0800164b
 8001598:	0800164b 	.word	0x0800164b
 800159c:	0800164b 	.word	0x0800164b
 80015a0:	0800164b 	.word	0x0800164b
 80015a4:	0800164b 	.word	0x0800164b
 80015a8:	08001601 	.word	0x08001601
 80015ac:	0800160f 	.word	0x0800160f
 80015b0:	0800164b 	.word	0x0800164b
 80015b4:	0800164b 	.word	0x0800164b
 80015b8:	0800164b 	.word	0x0800164b
 80015bc:	0800164b 	.word	0x0800164b
 80015c0:	0800160f 	.word	0x0800160f
 80015c4:	0800164b 	.word	0x0800164b
 80015c8:	0800164b 	.word	0x0800164b
 80015cc:	0800164b 	.word	0x0800164b
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	0800164b 	.word	0x0800164b
 80015d8:	0800164b 	.word	0x0800164b
 80015dc:	0800164b 	.word	0x0800164b
 80015e0:	0800164b 	.word	0x0800164b
 80015e4:	0800164b 	.word	0x0800164b
 80015e8:	0800161d 	.word	0x0800161d
 80015ec:	0800164b 	.word	0x0800164b
 80015f0:	0800160f 	.word	0x0800160f
 80015f4:	0800164b 	.word	0x0800164b
 80015f8:	0800164b 	.word	0x0800164b
 80015fc:	0800163d 	.word	0x0800163d
			{
			  case 'c':
		  		  va_arg(va, int);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3304      	adds	r3, #4
 8001604:	603b      	str	r3, [r7, #0]
				  ++length;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
				  break;
 800160c:	e025      	b.n	800165a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	330b      	adds	r3, #11
 8001612:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3304      	adds	r3, #4
 8001618:	603b      	str	r3, [r7, #0]
				  break;
 800161a:	e01e      	b.n	800165a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	1d1a      	adds	r2, r3, #4
 8001620:	603a      	str	r2, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8001626:	e002      	b.n	800162e <ts_formatlength+0xe2>
			  			  ++length;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f6      	bne.n	8001628 <ts_formatlength+0xdc>
			  	  }
				  break;
 800163a:	e00e      	b.n	800165a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3308      	adds	r3, #8
 8001640:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	3304      	adds	r3, #4
 8001646:	603b      	str	r3, [r7, #0]
				  break;
 8001648:	e007      	b.n	800165a <ts_formatlength+0x10e>
			  default:
				  ++length;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
				  break;
 8001650:	bf00      	nop
 8001652:	e002      	b.n	800165a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f af79 	bne.w	800155c <ts_formatlength+0x10>
	}
	return length;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_Serial_Print>:

int HAL_Serial_Print(HAL_Serial_Handler * hserial,const char *fmt, ...)
{
 8001678:	b40e      	push	{r1, r2, r3}
 800167a:	b5b0      	push	{r4, r5, r7, lr}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	int length = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 8001686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800168a:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001690:	f7ff ff5c 	bl	800154c <ts_formatlength>
 8001694:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 8001696:	466b      	mov	r3, sp
 8001698:	461d      	mov	r5, r3
		char buf[length];
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	1e43      	subs	r3, r0, #1
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	4603      	mov	r3, r0
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	f04f 0400 	mov.w	r4, #0
 80016b0:	00d4      	lsls	r4, r2, #3
 80016b2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016b6:	00cb      	lsls	r3, r1, #3
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	f04f 0400 	mov.w	r4, #0
 80016c8:	00d4      	lsls	r4, r2, #3
 80016ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016ce:	00cb      	lsls	r3, r1, #3
 80016d0:	4603      	mov	r3, r0
 80016d2:	3307      	adds	r3, #7
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	ebad 0d03 	sub.w	sp, sp, r3
 80016dc:	466b      	mov	r3, sp
 80016de:	3300      	adds	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 80016e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016e6:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe95 	bl	800141e <ts_formatstring>
 80016f4:	6178      	str	r0, [r7, #20]
		length = HAL_Serial_Write(hserial, (uint8_t*)buf, length);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fcab 	bl	8001058 <HAL_Serial_Write>
 8001702:	6178      	str	r0, [r7, #20]
 8001704:	46ad      	mov	sp, r5
		va_end(va);
	}
	return length;
 8001706:	697b      	ldr	r3, [r7, #20]
}
 8001708:	4618      	mov	r0, r3
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001712:	b003      	add	sp, #12
 8001714:	4770      	bx	lr
	...

08001718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6613      	str	r3, [r2, #96]	; 0x60
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800174e:	f002 f953 	bl	80039f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001780:	d12d      	bne.n	80017de <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_ADC_MspInit+0xec>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <HAL_ADC_MspInit+0xec>)
 800178a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_ADC_MspInit+0xec>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10b      	bne.n	80017ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a2d      	ldr	r2, [pc, #180]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 800179a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c8:	2303      	movs	r3, #3
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	481f      	ldr	r0, [pc, #124]	; (8001854 <HAL_ADC_MspInit+0xf4>)
 80017d8:	f001 feb8 	bl	800354c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017dc:	e032      	b.n	8001844 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0xf8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d12d      	bne.n	8001844 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_ADC_MspInit+0xec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <HAL_ADC_MspInit+0xec>)
 80017f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_ADC_MspInit+0xec>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10b      	bne.n	8001812 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 8001800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_ADC_MspInit+0xf0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800182a:	2301      	movs	r3, #1
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f001 fe84 	bl	800354c <HAL_GPIO_Init>
}
 8001844:	bf00      	nop
 8001846:	3730      	adds	r7, #48	; 0x30
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000054 	.word	0x20000054
 8001850:	40021000 	.word	0x40021000
 8001854:	48001400 	.word	0x48001400
 8001858:	50000100 	.word	0x50000100

0800185c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a18      	ldr	r2, [pc, #96]	; (80018dc <HAL_TIM_Encoder_MspInit+0x80>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d129      	bne.n	80018d2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001888:	6613      	str	r3, [r2, #96]	; 0x60
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x84>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x84>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018c0:	2306      	movs	r3, #6
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f001 fe3d 	bl	800354c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_TIM_Base_MspInit+0x38>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10b      	bne.n	800190e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_TIM_Base_MspInit+0x3c>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0x3c>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_TIM_Base_MspInit+0x3c>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40000800 	.word	0x40000800
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_TIM_MspPostInit+0x64>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d11b      	bne.n	800197e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_TIM_MspPostInit+0x68>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_TIM_MspPostInit+0x68>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_TIM_MspPostInit+0x68>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800196e:	2302      	movs	r3, #2
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_TIM_MspPostInit+0x6c>)
 800197a:	f001 fde7 	bl	800354c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40000800 	.word	0x40000800
 800198c:	40021000 	.word	0x40021000
 8001990:	48000400 	.word	0x48000400

08001994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a53      	ldr	r2, [pc, #332]	; (8001b00 <HAL_UART_MspInit+0x16c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	f040 80a0 	bne.w	8001af8 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b8:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a51      	ldr	r2, [pc, #324]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <HAL_UART_MspInit+0x170>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a12:	2307      	movs	r3, #7
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f001 fd94 	bl	800354c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a24:	2308      	movs	r3, #8
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a34:	2307      	movs	r3, #7
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4832      	ldr	r0, [pc, #200]	; (8001b08 <HAL_UART_MspInit+0x174>)
 8001a40:	f001 fd84 	bl	800354c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001a44:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <HAL_UART_MspInit+0x17c>)
 8001a48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a4c:	221a      	movs	r2, #26
 8001a4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a70:	2220      	movs	r2, #32
 8001a72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a7a:	4824      	ldr	r0, [pc, #144]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a7c:	f001 fa8c 	bl	8002f98 <HAL_DMA_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8001a86:	f7ff fa01 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a8e:	679a      	str	r2, [r3, #120]	; 0x78
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <HAL_UART_MspInit+0x178>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_UART_MspInit+0x184>)
 8001a9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001a9e:	221b      	movs	r2, #27
 8001aa0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001acc:	4811      	ldr	r0, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ace:	f001 fa63 	bl	8002f98 <HAL_DMA_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8001ad8:	f7ff f9d8 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ae0:	675a      	str	r2, [r3, #116]	; 0x74
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_UART_MspInit+0x180>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	2026      	movs	r0, #38	; 0x26
 8001aee:	f001 fa1e 	bl	8002f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001af2:	2026      	movs	r0, #38	; 0x26
 8001af4:	f001 fa35 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40004400 	.word	0x40004400
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	20000058 	.word	0x20000058
 8001b10:	40020008 	.word	0x40020008
 8001b14:	200001dc 	.word	0x200001dc
 8001b18:	4002001c 	.word	0x4002001c

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b68:	f000 f8b2 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <DMA1_Channel1_IRQHandler+0x10>)
 8001b76:	f001 fb99 	bl	80032ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000058 	.word	0x20000058

08001b84 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <DMA1_Channel2_IRQHandler+0x10>)
 8001b8a:	f001 fb8f 	bl	80032ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200001dc 	.word	0x200001dc

08001b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <USART2_IRQHandler+0x10>)
 8001b9e:	f004 f83b 	bl	8005c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20002b30 	.word	0x20002b30

08001bac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <SystemInit+0x28>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb6:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <SystemInit+0x28>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SystemInit+0x28>)
 8001bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bd8:	480d      	ldr	r0, [pc, #52]	; (8001c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <LoopForever+0xe>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf4:	4c0b      	ldr	r4, [pc, #44]	; (8001c24 <LoopForever+0x16>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c02:	f7ff ffd3 	bl	8001bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f005 f81f 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0a:	f7fe fdb5 	bl	8000778 <main>

08001c0e <LoopForever>:

LoopForever:
    b LoopForever
 8001c0e:	e7fe      	b.n	8001c0e <LoopForever>
  ldr   r0, =_estack
 8001c10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c1c:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 8001c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c24:	20002bc0 	.word	0x20002bc0

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>

08001c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f001 f96f 	bl	8002f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f80e 	bl	8001c5c <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	e001      	b.n	8001c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c4c:	f7ff fd64 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c50:	79fb      	ldrb	r3, [r7, #7]

}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_InitTick+0x68>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d022      	beq.n	8001cb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_InitTick+0x6c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_InitTick+0x68>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f97a 	bl	8002f7e <HAL_SYSTICK_Config>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10f      	bne.n	8001cb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	d809      	bhi.n	8001caa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c96:	2200      	movs	r2, #0
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9e:	f001 f946 	bl	8002f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_InitTick+0x70>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e007      	b.n	8001cba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	e004      	b.n	8001cba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x1c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_IncTick+0x1c>)
 8001ce0:	6013      	str	r3, [r2, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20002bbc 	.word	0x20002bbc
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_GetTick+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20002bbc 	.word	0x20002bbc

08001d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff ffee 	bl	8001cf4 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d004      	beq.n	8001d30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_Delay+0x40>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d30:	bf00      	nop
 8001d32:	f7ff ffdf 	bl	8001cf4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d8f7      	bhi.n	8001d32 <HAL_Delay+0x26>
  {
  }
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3360      	adds	r3, #96	; 0x60
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <LL_ADC_SetOffset+0x44>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	03fff000 	.word	0x03fff000

08001e00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3360      	adds	r3, #96	; 0x60
 8001e0e:	461a      	mov	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3360      	adds	r3, #96	; 0x60
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3360      	adds	r3, #96	; 0x60
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3360      	adds	r3, #96	; 0x60
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	615a      	str	r2, [r3, #20]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3330      	adds	r3, #48	; 0x30
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	211f      	movs	r1, #31
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 011f 	and.w	r1, r3, #31
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3314      	adds	r3, #20
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	0e5b      	lsrs	r3, r3, #25
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	4413      	add	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	0d1b      	lsrs	r3, r3, #20
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2107      	movs	r1, #7
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0d1b      	lsrs	r3, r3, #20
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0318 	and.w	r3, r3, #24
 8001fc6:	4908      	ldr	r1, [pc, #32]	; (8001fe8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc8:	40d9      	lsrs	r1, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	400b      	ands	r3, r1
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	0007ffff 	.word	0x0007ffff

08001fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6093      	str	r3, [r2, #8]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002024:	d101      	bne.n	800202a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800204c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002074:	d101      	bne.n	800207a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <LL_ADC_IsEnabled+0x18>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <LL_ADC_IsEnabled+0x1a>
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d101      	bne.n	80020c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d101      	bne.n	80020ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e16b      	b.n	80023ee <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fb1b 	bl	8001760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff67 	bl	8002010 <LL_ADC_IsDeepPowerDownEnabled>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff4d 	bl	8001fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff82 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d113      	bne.n	800218a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff66 	bl	8002038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800216c:	4ba2      	ldr	r3, [pc, #648]	; (80023f8 <HAL_ADC_Init+0x2fc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	4aa2      	ldr	r2, [pc, #648]	; (80023fc <HAL_ADC_Init+0x300>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800217c:	e002      	b.n	8002184 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3b01      	subs	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff66 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff77 	bl	80020ae <LL_ADC_REG_IsConversionOngoing>
 80021c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 8106 	bne.w	80023dc <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8102 	bne.w	80023dc <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021e0:	f043 0202 	orr.w	r2, r3, #2
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff4b 	bl	8002088 <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021fc:	f7ff ff44 	bl	8002088 <LL_ADC_IsEnabled>
 8002200:	4604      	mov	r4, r0
 8002202:	487f      	ldr	r0, [pc, #508]	; (8002400 <HAL_ADC_Init+0x304>)
 8002204:	f7ff ff40 	bl	8002088 <LL_ADC_IsEnabled>
 8002208:	4603      	mov	r3, r0
 800220a:	4323      	orrs	r3, r4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4619      	mov	r1, r3
 8002216:	487b      	ldr	r0, [pc, #492]	; (8002404 <HAL_ADC_Init+0x308>)
 8002218:	f7ff fd9a 	bl	8001d50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7f5b      	ldrb	r3, [r3, #29]
 8002220:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002226:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800222c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002232:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800223a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002246:	2b01      	cmp	r3, #1
 8002248:	d106      	bne.n	8002258 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	3b01      	subs	r3, #1
 8002250:	045b      	lsls	r3, r3, #17
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_ADC_Init+0x30c>)
 800227c:	4013      	ands	r3, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	430b      	orrs	r3, r1
 8002286:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff03 	bl	80020ae <LL_ADC_REG_IsConversionOngoing>
 80022a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff10 	bl	80020d4 <LL_ADC_INJ_IsConversionOngoing>
 80022b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d16d      	bne.n	8002398 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d16a      	bne.n	8002398 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022de:	f023 0302 	bic.w	r3, r3, #2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d017      	beq.n	8002324 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002302:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800230c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6911      	ldr	r1, [r2, #16]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002322:	e013      	b.n	800234c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002332:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002348:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002352:	2b01      	cmp	r3, #1
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002378:	430a      	orrs	r2, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e007      	b.n	8002398 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10c      	bne.n	80023ba <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f023 010f 	bic.w	r1, r3, #15
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020f 	bic.w	r2, r2, #15
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80023da:	e007      	b.n	80023ec <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	053e2d63 	.word	0x053e2d63
 8002400:	50000100 	.word	0x50000100
 8002404:	50000300 	.word	0x50000300
 8002408:	fff04007 	.word	0xfff04007

0800240c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0b6      	sub	sp, #216	; 0xd8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x22>
 800242a:	2302      	movs	r3, #2
 800242c:	e3c7      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x7b2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fe37 	bl	80020ae <LL_ADC_REG_IsConversionOngoing>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 83ac 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	f7ff fd4d 	bl	8001ef4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fe25 	bl	80020ae <LL_ADC_REG_IsConversionOngoing>
 8002464:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe31 	bl	80020d4 <LL_ADC_INJ_IsConversionOngoing>
 8002472:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002476:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 81d9 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 81d4 	bne.w	8002832 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002492:	d10f      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	4619      	mov	r1, r3
 80024a0:	f7ff fd54 	bl	8001f4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fd0e 	bl	8001ece <LL_ADC_SetSamplingTimeCommonConfig>
 80024b2:	e00e      	b.n	80024d2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6819      	ldr	r1, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f7ff fd43 	bl	8001f4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fcfe 	bl	8001ece <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d022      	beq.n	800253a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6919      	ldr	r1, [r3, #16]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002504:	f7ff fc58 	bl	8001db8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6919      	ldr	r1, [r3, #16]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	461a      	mov	r2, r3
 8002516:	f7ff fca4 	bl	8001e62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7f1b      	ldrb	r3, [r3, #28]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x124>
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	e000      	b.n	8002532 <HAL_ADC_ConfigChannel+0x126>
 8002530:	2300      	movs	r3, #0
 8002532:	461a      	mov	r2, r3
 8002534:	f7ff fcb0 	bl	8001e98 <LL_ADC_SetOffsetSaturation>
 8002538:	e17b      	b.n	8002832 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fc5d 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x15a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fc52 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	0e9b      	lsrs	r3, r3, #26
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	e01e      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x198>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fc47 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800258c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e004      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1b0>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	e018      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1e2>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80025e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d106      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fc16 	bl	8001e2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fbfa 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <HAL_ADC_ConfigChannel+0x220>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fbef 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	e01e      	b.n	800266a <HAL_ADC_ConfigChannel+0x25e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fbe4 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800264a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e004      	b.n	8002668 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800265e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x276>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	0e9b      	lsrs	r3, r3, #26
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x2a8>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800269a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800269e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e004      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80026aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fbb3 	bl	8001e2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2102      	movs	r1, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fb97 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x2e6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2102      	movs	r1, #2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fb8c 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	0e9b      	lsrs	r3, r3, #26
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x324>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fb81 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e004      	b.n	800272e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x33c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	e016      	b.n	8002776 <HAL_ADC_ConfigChannel+0x36a>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800275a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002768:	2320      	movs	r3, #32
 800276a:	e004      	b.n	8002776 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800276c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2200      	movs	r2, #0
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fb52 	bl	8001e2c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2103      	movs	r1, #3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fb36 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x3a8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2103      	movs	r1, #3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fb2b 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	e017      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x3d8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2103      	movs	r1, #3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fb20 	bl	8001e00 <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ce:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80027da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x3f0>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e011      	b.n	8002820 <HAL_ADC_ConfigChannel+0x414>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800280a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800280c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2103      	movs	r1, #3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fafd 	bl	8001e2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fc26 	bl	8002088 <LL_ADC_IsEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8140 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	461a      	mov	r2, r3
 8002852:	f7ff fba7 	bl	8001fa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a8f      	ldr	r2, [pc, #572]	; (8002a98 <HAL_ADC_ConfigChannel+0x68c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	f040 8131 	bne.w	8002ac4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_ADC_ConfigChannel+0x47e>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	3301      	adds	r3, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2b09      	cmp	r3, #9
 8002880:	bf94      	ite	ls
 8002882:	2301      	movls	r3, #1
 8002884:	2300      	movhi	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	e019      	b.n	80028be <HAL_ADC_ConfigChannel+0x4b2>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800289c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80028a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b09      	cmp	r3, #9
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d079      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_ADC_ConfigChannel+0x4d2>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	e015      	b.n	800290a <HAL_ADC_ConfigChannel+0x4fe>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e003      	b.n	8002902 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3301      	adds	r3, #1
 8002904:	069b      	lsls	r3, r3, #26
 8002906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_ADC_ConfigChannel+0x51e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	e017      	b.n	800295a <HAL_ADC_ConfigChannel+0x54e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	ea42 0103 	orr.w	r1, r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x574>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	3301      	adds	r3, #1
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	e018      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x5a6>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800299c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f003 021f 	and.w	r2, r3, #31
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b2:	430b      	orrs	r3, r1
 80029b4:	e081      	b.n	8002aba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x5c6>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	3301      	adds	r3, #1
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d0:	e015      	b.n	80029fe <HAL_ADC_ConfigChannel+0x5f2>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e003      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	069b      	lsls	r3, r3, #26
 80029fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x612>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	e017      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x642>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4e:	ea42 0103 	orr.w	r1, r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x66e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0e9b      	lsrs	r3, r3, #26
 8002a64:	3301      	adds	r3, #1
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b1e      	subs	r3, #30
 8002a72:	051b      	lsls	r3, r3, #20
 8002a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x6ac>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	613b      	str	r3, [r7, #16]
  return result;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d104      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e006      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x698>
 8002a96:	bf00      	nop
 8002a98:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	051b      	lsls	r3, r3, #20
 8002ab4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6892      	ldr	r2, [r2, #8]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7ff fa44 	bl	8001f4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d070      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad0:	483e      	ldr	r0, [pc, #248]	; (8002bcc <HAL_ADC_ConfigChannel+0x7c0>)
 8002ad2:	f7ff f963 	bl	8001d9c <LL_ADC_GetCommonPathInternalCh>
 8002ad6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_ADC_ConfigChannel+0x6e2>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d126      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d120      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b02:	d156      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	482f      	ldr	r0, [pc, #188]	; (8002bcc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b10:	f7ff f931 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099a      	lsrs	r2, r3, #6
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d113      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x762>
 8002b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d02a      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b64:	4619      	mov	r1, r3
 8002b66:	4819      	ldr	r0, [pc, #100]	; (8002bcc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b68:	f7ff f905 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b6c:	e021      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d11c      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d116      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d011      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b96:	4619      	mov	r1, r3
 8002b98:	480c      	ldr	r0, [pc, #48]	; (8002bcc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b9a:	f7ff f8ec 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
 8002b9e:	e008      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	37d8      	adds	r7, #216	; 0xd8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	80080000 	.word	0x80080000
 8002bcc:	50000300 	.word	0x50000300
 8002bd0:	c3210000 	.word	0xc3210000
 8002bd4:	90c00010 	.word	0x90c00010
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	053e2d63 	.word	0x053e2d63
 8002be0:	c7520000 	.word	0xc7520000
 8002be4:	50000100 	.word	0x50000100
 8002be8:	cb840000 	.word	0xcb840000

08002bec <LL_ADC_IsEnabled>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <LL_ADC_IsEnabled+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <LL_ADC_IsEnabled+0x1a>
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d101      	bne.n	8002c2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b0a1      	sub	sp, #132	; 0x84
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e087      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c66:	d102      	bne.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002c68:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	e001      	b.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e06a      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ffbd 	bl	8002c12 <LL_ADC_REG_IsConversionOngoing>
 8002c98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ffb7 	bl	8002c12 <LL_ADC_REG_IsConversionOngoing>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d14c      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d149      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cb0:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002cb2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d028      	beq.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cce:	035b      	lsls	r3, r3, #13
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cdc:	f7ff ff86 	bl	8002bec <LL_ADC_IsEnabled>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	4823      	ldr	r0, [pc, #140]	; (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002ce4:	f7ff ff82 	bl	8002bec <LL_ADC_IsEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4323      	orrs	r3, r4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d133      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cf8:	f023 030f 	bic.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	6811      	ldr	r1, [r2, #0]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	6892      	ldr	r2, [r2, #8]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	431a      	orrs	r2, r3
 8002d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0c:	e024      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d1e:	f7ff ff65 	bl	8002bec <LL_ADC_IsEnabled>
 8002d22:	4604      	mov	r4, r0
 8002d24:	4812      	ldr	r0, [pc, #72]	; (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8002d26:	f7ff ff61 	bl	8002bec <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d112      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d3a:	f023 030f 	bic.w	r3, r3, #15
 8002d3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d42:	e009      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d56:	e000      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3784      	adds	r7, #132	; 0x84
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	50000100 	.word	0x50000100
 8002d74:	50000300 	.word	0x50000300

08002d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002daa:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60d3      	str	r3, [r2, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <__NVIC_EnableIRQ+0x38>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db0a      	blt.n	8002e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	490c      	ldr	r1, [pc, #48]	; (8002e64 <__NVIC_SetPriority+0x4c>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e40:	e00a      	b.n	8002e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4908      	ldr	r1, [pc, #32]	; (8002e68 <__NVIC_SetPriority+0x50>)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	440b      	add	r3, r1
 8002e56:	761a      	strb	r2, [r3, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	bf28      	it	cs
 8002e8a:	2304      	movcs	r3, #4
 8002e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d902      	bls.n	8002e9c <NVIC_EncodePriority+0x30>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3b03      	subs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <NVIC_EncodePriority+0x32>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	401a      	ands	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43d9      	mvns	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	4313      	orrs	r3, r2
         );
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee4:	d301      	bcc.n	8002eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <SysTick_Config+0x40>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef2:	210f      	movs	r1, #15
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f7ff ff8e 	bl	8002e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <SysTick_Config+0x40>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <SysTick_Config+0x40>)
 8002f04:	2207      	movs	r2, #7
 8002f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	e000e010 	.word	0xe000e010

08002f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff29 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3c:	f7ff ff40 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ff90 	bl	8002e6c <NVIC_EncodePriority>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff5f 	bl	8002e18 <__NVIC_SetPriority>
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff33 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ffa4 	bl	8002ed4 <SysTick_Config>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e08d      	b.n	80030c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_DMA_Init+0x138>)
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d80f      	bhi.n	8002fd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_DMA_Init+0x13c>)
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a45      	ldr	r2, [pc, #276]	; (80030d8 <HAL_DMA_Init+0x140>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	009a      	lsls	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a42      	ldr	r2, [pc, #264]	; (80030dc <HAL_DMA_Init+0x144>)
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fd4:	e00e      	b.n	8002ff4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_DMA_Init+0x148>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a3d      	ldr	r2, [pc, #244]	; (80030d8 <HAL_DMA_Init+0x140>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <HAL_DMA_Init+0x14c>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fa1e 	bl	8003488 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003054:	d102      	bne.n	800305c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003070:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_DMA_Init+0x104>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b04      	cmp	r3, #4
 8003080:	d80c      	bhi.n	800309c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa3e 	bl	8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	e008      	b.n	80030ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40020407 	.word	0x40020407
 80030d4:	bffdfff8 	.word	0xbffdfff8
 80030d8:	cccccccd 	.word	0xcccccccd
 80030dc:	40020000 	.word	0x40020000
 80030e0:	bffdfbf8 	.word	0xbffdfbf8
 80030e4:	40020400 	.word	0x40020400

080030e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_DMA_Start_IT+0x20>
 8003104:	2302      	movs	r3, #2
 8003106:	e066      	b.n	80031d6 <HAL_DMA_Start_IT+0xee>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d155      	bne.n	80031c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f962 	bl	800340a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 020e 	orr.w	r2, r2, #14
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00f      	b.n	8003180 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0204 	bic.w	r2, r2, #4
 800316e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 020a 	orr.w	r2, r2, #10
 800317e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e005      	b.n	80031d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
 80031d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d00d      	beq.n	8003212 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e047      	b.n	80032a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 020e 	bic.w	r2, r2, #14
 8003220:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003240:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800325e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003276:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003280:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
    }
  }
  return status;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2204      	movs	r2, #4
 80032ce:	409a      	lsls	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d026      	beq.n	8003326 <HAL_DMA_IRQHandler+0x7a>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d021      	beq.n	8003326 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0204 	bic.w	r2, r2, #4
 80032fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	2104      	movs	r1, #4
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b00      	cmp	r3, #0
 800331a:	d071      	beq.n	8003400 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003324:	e06c      	b.n	8003400 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2202      	movs	r2, #2
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d029      	beq.n	8003398 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 020a 	bic.w	r2, r2, #10
 8003360:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2102      	movs	r1, #2
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d038      	beq.n	8003400 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003396:	e033      	b.n	8003400 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2208      	movs	r2, #8
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02a      	beq.n	8003402 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 020e 	bic.w	r2, r2, #14
 80033c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f003 021f 	and.w	r2, r3, #31
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003400:	bf00      	nop
 8003402:	bf00      	nop
}
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003420:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d108      	bne.n	800346a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003468:	e007      	b.n	800347a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d802      	bhi.n	80034a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e001      	b.n	80034a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034a4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3b08      	subs	r3, #8
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	009a      	lsls	r2, r3, #2
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2201      	movs	r2, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40020407 	.word	0x40020407
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020820 	.word	0x40020820
 80034fc:	cccccccd 	.word	0xcccccccd
 8003500:	40020880 	.word	0x40020880

08003504 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	461a      	mov	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a08      	ldr	r2, [pc, #32]	; (8003548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003526:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3b01      	subs	r3, #1
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2201      	movs	r2, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	1000823f 	.word	0x1000823f
 8003548:	40020940 	.word	0x40020940

0800354c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800355a:	e15a      	b.n	8003812 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 814c 	beq.w	800380c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d00b      	beq.n	8003594 <HAL_GPIO_Init+0x48>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d007      	beq.n	8003594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003588:	2b11      	cmp	r3, #17
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b12      	cmp	r3, #18
 8003592:	d130      	bne.n	80035f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ca:	2201      	movs	r2, #1
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0201 	and.w	r2, r3, #1
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0xea>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b12      	cmp	r3, #18
 8003634:	d123      	bne.n	800367e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	08da      	lsrs	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3208      	adds	r2, #8
 800363e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	220f      	movs	r2, #15
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	08da      	lsrs	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3208      	adds	r2, #8
 8003678:	6939      	ldr	r1, [r7, #16]
 800367a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80a6 	beq.w	800380c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c0:	4b5b      	ldr	r3, [pc, #364]	; (8003830 <HAL_GPIO_Init+0x2e4>)
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	4a5a      	ldr	r2, [pc, #360]	; (8003830 <HAL_GPIO_Init+0x2e4>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6613      	str	r3, [r2, #96]	; 0x60
 80036cc:	4b58      	ldr	r3, [pc, #352]	; (8003830 <HAL_GPIO_Init+0x2e4>)
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036d8:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_GPIO_Init+0x2e8>)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	3302      	adds	r3, #2
 80036e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	220f      	movs	r2, #15
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003702:	d01f      	beq.n	8003744 <HAL_GPIO_Init+0x1f8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a4c      	ldr	r2, [pc, #304]	; (8003838 <HAL_GPIO_Init+0x2ec>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d019      	beq.n	8003740 <HAL_GPIO_Init+0x1f4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a4b      	ldr	r2, [pc, #300]	; (800383c <HAL_GPIO_Init+0x2f0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_GPIO_Init+0x1f0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a4a      	ldr	r2, [pc, #296]	; (8003840 <HAL_GPIO_Init+0x2f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00d      	beq.n	8003738 <HAL_GPIO_Init+0x1ec>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a49      	ldr	r2, [pc, #292]	; (8003844 <HAL_GPIO_Init+0x2f8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <HAL_GPIO_Init+0x1e8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a48      	ldr	r2, [pc, #288]	; (8003848 <HAL_GPIO_Init+0x2fc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_GPIO_Init+0x1e4>
 800372c:	2305      	movs	r3, #5
 800372e:	e00a      	b.n	8003746 <HAL_GPIO_Init+0x1fa>
 8003730:	2306      	movs	r3, #6
 8003732:	e008      	b.n	8003746 <HAL_GPIO_Init+0x1fa>
 8003734:	2304      	movs	r3, #4
 8003736:	e006      	b.n	8003746 <HAL_GPIO_Init+0x1fa>
 8003738:	2303      	movs	r3, #3
 800373a:	e004      	b.n	8003746 <HAL_GPIO_Init+0x1fa>
 800373c:	2302      	movs	r3, #2
 800373e:	e002      	b.n	8003746 <HAL_GPIO_Init+0x1fa>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_GPIO_Init+0x1fa>
 8003744:	2300      	movs	r3, #0
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	f002 0203 	and.w	r2, r2, #3
 800374c:	0092      	lsls	r2, r2, #2
 800374e:	4093      	lsls	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003756:	4937      	ldr	r1, [pc, #220]	; (8003834 <HAL_GPIO_Init+0x2e8>)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003764:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_GPIO_Init+0x300>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003788:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_GPIO_Init+0x300>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800378e:	4b2f      	ldr	r3, [pc, #188]	; (800384c <HAL_GPIO_Init+0x300>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037b2:	4a26      	ldr	r2, [pc, #152]	; (800384c <HAL_GPIO_Init+0x300>)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_GPIO_Init+0x300>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_GPIO_Init+0x300>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_GPIO_Init+0x300>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003806:	4a11      	ldr	r2, [pc, #68]	; (800384c <HAL_GPIO_Init+0x300>)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3301      	adds	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f ae9d 	bne.w	800355c <HAL_GPIO_Init+0x10>
  }
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	40010000 	.word	0x40010000
 8003838:	48000400 	.word	0x48000400
 800383c:	48000800 	.word	0x48000800
 8003840:	48000c00 	.word	0x48000c00
 8003844:	48001000 	.word	0x48001000
 8003848:	48001400 	.word	0x48001400
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d141      	bne.n	8003942 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038be:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d131      	bne.n	8003930 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038cc:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d2:	4a46      	ldr	r2, [pc, #280]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038dc:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e4:	4a41      	ldr	r2, [pc, #260]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2232      	movs	r2, #50	; 0x32
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a3f      	ldr	r2, [pc, #252]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0c9b      	lsrs	r3, r3, #18
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003902:	e002      	b.n	800390a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3b01      	subs	r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d102      	bne.n	800391e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f2      	bne.n	8003904 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392a:	d158      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e057      	b.n	80039e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003936:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003940:	e04d      	b.n	80039de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003948:	d141      	bne.n	80039ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	d131      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003958:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395e:	4a23      	ldr	r2, [pc, #140]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003968:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003970:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003976:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2232      	movs	r2, #50	; 0x32
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	0c9b      	lsrs	r3, r3, #18
 800398a:	3301      	adds	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800398e:	e002      	b.n	8003996 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d102      	bne.n	80039aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f2      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d112      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e011      	b.n	80039e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039cc:	e007      	b.n	80039de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40007000 	.word	0x40007000
 80039f0:	20000000 	.word	0x20000000
 80039f4:	431bde83 	.word	0x431bde83

080039f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a06:	6093      	str	r3, [r2, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40007000 	.word	0x40007000

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e308      	b.n	800403c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d075      	beq.n	8003b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a36:	4ba3      	ldr	r3, [pc, #652]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a40:	4ba0      	ldr	r3, [pc, #640]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3e>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_OscConfig+0x44>
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b99      	ldr	r3, [pc, #612]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d157      	bne.n	8003b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e2e3      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x74>
 8003a7e:	4b91      	ldr	r3, [pc, #580]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a90      	ldr	r2, [pc, #576]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b8b      	ldr	r3, [pc, #556]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a8a      	ldr	r2, [pc, #552]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b88      	ldr	r3, [pc, #544]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a87      	ldr	r2, [pc, #540]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003ab0:	4b84      	ldr	r3, [pc, #528]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a83      	ldr	r2, [pc, #524]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f910 	bl	8001cf4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fe f90c 	bl	8001cf4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e2a8      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xc0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fe f8fc 	bl	8001cf4 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fe f8f8 	bl	8001cf4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e294      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0xe8>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b38:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_OscConfig+0x136>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d002      	beq.n	8003b54 <HAL_RCC_OscConfig+0x13c>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11f      	bne.n	8003b94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b54:	4b5b      	ldr	r3, [pc, #364]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x154>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e267      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6c:	4b55      	ldr	r3, [pc, #340]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	4952      	ldr	r1, [pc, #328]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b80:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x2b0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe f869 	bl	8001c5c <HAL_InitTick>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d043      	beq.n	8003c18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e253      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b49      	ldr	r3, [pc, #292]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f8a4 	bl	8001cf4 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fe f8a0 	bl	8001cf4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e23c      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc2:	4b40      	ldr	r3, [pc, #256]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bce:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	4939      	ldr	r1, [pc, #228]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
 8003be2:	e01a      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be4:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a36      	ldr	r2, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe f880 	bl	8001cf4 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fe f87c 	bl	8001cf4 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e218      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x1e0>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fe f859 	bl	8001cf4 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fe f855 	bl	8001cf4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1f1      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <HAL_RCC_OscConfig+0x22e>
 8003c66:	e01b      	b.n	8003ca0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fe f83c 	bl	8001cf4 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fe f838 	bl	8001cf4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1d4      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ef      	bne.n	8003c80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ab 	beq.w	8003e04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2b4>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e005      	b.n	8003cce <HAL_RCC_OscConfig+0x2b6>
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	20000004 	.word	0x20000004
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4baf      	ldr	r3, [pc, #700]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	4aae      	ldr	r2, [pc, #696]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cde:	4bac      	ldr	r3, [pc, #688]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cee:	4ba9      	ldr	r3, [pc, #676]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d118      	bne.n	8003d2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfa:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4aa5      	ldr	r2, [pc, #660]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d06:	f7fd fff5 	bl	8001cf4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0e:	f7fd fff1 	bl	8001cf4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e18d      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d20:	4b9c      	ldr	r3, [pc, #624]	; (8003f94 <HAL_RCC_OscConfig+0x57c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_RCC_OscConfig+0x32e>
 8003d34:	4b96      	ldr	r3, [pc, #600]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a95      	ldr	r2, [pc, #596]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d44:	e024      	b.n	8003d90 <HAL_RCC_OscConfig+0x378>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d110      	bne.n	8003d70 <HAL_RCC_OscConfig+0x358>
 8003d4e:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4a8e      	ldr	r2, [pc, #568]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d56:	f043 0304 	orr.w	r3, r3, #4
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5e:	4b8c      	ldr	r3, [pc, #560]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	4a8a      	ldr	r2, [pc, #552]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6e:	e00f      	b.n	8003d90 <HAL_RCC_OscConfig+0x378>
 8003d70:	4b87      	ldr	r3, [pc, #540]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	4a86      	ldr	r2, [pc, #536]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d80:	4b83      	ldr	r3, [pc, #524]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	4a82      	ldr	r2, [pc, #520]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d016      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fd ffac 	bl	8001cf4 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fd ffa8 	bl	8001cf4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e142      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	4b76      	ldr	r3, [pc, #472]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ed      	beq.n	8003da0 <HAL_RCC_OscConfig+0x388>
 8003dc4:	e015      	b.n	8003df2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd ff95 	bl	8001cf4 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd ff91 	bl	8001cf4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e12b      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de4:	4b6a      	ldr	r3, [pc, #424]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ed      	bne.n	8003dce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df2:	7ffb      	ldrb	r3, [r7, #31]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a64      	ldr	r2, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d03c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e18:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1e:	4a5c      	ldr	r2, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fd ff64 	bl	8001cf4 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e30:	f7fd ff60 	bl	8001cf4 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0fc      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e42:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCC_OscConfig+0x418>
 8003e50:	e01b      	b.n	8003e8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e52:	4b4f      	ldr	r3, [pc, #316]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e58:	4a4d      	ldr	r2, [pc, #308]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fd ff47 	bl	8001cf4 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e6a:	f7fd ff43 	bl	8001cf4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0df      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e7c:	4b44      	ldr	r3, [pc, #272]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ef      	bne.n	8003e6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80d3 	beq.w	800403a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	f000 808d 	beq.w	8003fbc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d15a      	bne.n	8003f60 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd ff1d 	bl	8001cf4 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd ff19 	bl	8001cf4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0b5      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_OscConfig+0x580>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6a11      	ldr	r1, [r2, #32]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eec:	3a01      	subs	r2, #1
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	4311      	orrs	r1, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ef6:	0212      	lsls	r2, r2, #8
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003efe:	0852      	lsrs	r2, r2, #1
 8003f00:	3a01      	subs	r2, #1
 8003f02:	0552      	lsls	r2, r2, #21
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f0a:	0852      	lsrs	r2, r2, #1
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	0652      	lsls	r2, r2, #25
 8003f10:	4311      	orrs	r1, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f16:	06d2      	lsls	r2, r2, #27
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	491d      	ldr	r1, [pc, #116]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a17      	ldr	r2, [pc, #92]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fd fedc 	bl	8001cf4 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f40:	f7fd fed8 	bl	8001cf4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e074      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x528>
 8003f5e:	e06c      	b.n	800403a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd feb4 	bl	8001cf4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	e00e      	b.n	8003fae <HAL_RCC_OscConfig+0x596>
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40007000 	.word	0x40007000
 8003f98:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd feaa 	bl	8001cf4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e046      	b.n	800403c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_OscConfig+0x62c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x584>
 8003fba:	e03e      	b.n	800403a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e039      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCC_OscConfig+0x62c>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 0203 	and.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d12c      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d123      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d11b      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d113      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d109      	bne.n	8004036 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	3b01      	subs	r3, #1
 8004030:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e11e      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b91      	ldr	r3, [pc, #580]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d910      	bls.n	8004090 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 020f 	bic.w	r2, r3, #15
 8004076:	498c      	ldr	r1, [pc, #560]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b8a      	ldr	r3, [pc, #552]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e106      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d073      	beq.n	8004184 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d129      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a4:	4b81      	ldr	r3, [pc, #516]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0f4      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80040b4:	f000 f99e 	bl	80043f4 <RCC_GetSysClockFreqFromPLLSource>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4a7c      	ldr	r2, [pc, #496]	; (80042b0 <HAL_RCC_ClockConfig+0x268>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d93f      	bls.n	8004142 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040c2:	4b7a      	ldr	r3, [pc, #488]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d033      	beq.n	8004142 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d12f      	bne.n	8004142 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040e2:	4b72      	ldr	r3, [pc, #456]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ea:	4a70      	ldr	r2, [pc, #448]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e024      	b.n	8004142 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004100:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0c6      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004110:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0be      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004120:	f000 f8ce 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8004124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4a61      	ldr	r2, [pc, #388]	; (80042b0 <HAL_RCC_ClockConfig+0x268>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d909      	bls.n	8004142 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800412e:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	4a5d      	ldr	r2, [pc, #372]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4957      	ldr	r1, [pc, #348]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fdce 	bl	8001cf4 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fdca 	bl	8001cf4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e095      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b4e      	ldr	r3, [pc, #312]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d023      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a42      	ldr	r2, [pc, #264]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80041b4:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041bc:	4a3b      	ldr	r2, [pc, #236]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4936      	ldr	r1, [pc, #216]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	e008      	b.n	80041ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b80      	cmp	r3, #128	; 0x80
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4a32      	ldr	r2, [pc, #200]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 80041e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d21d      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 020f 	bic.w	r2, r3, #15
 8004200:	4929      	ldr	r1, [pc, #164]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004208:	f7fd fd74 	bl	8001cf4 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fd fd70 	bl	8001cf4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e03b      	b.n	800429e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	; (80042a8 <HAL_RCC_ClockConfig+0x260>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d1ed      	bne.n	8004210 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4917      	ldr	r1, [pc, #92]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490f      	ldr	r1, [pc, #60]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004272:	f000 f825 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8004276:	4601      	mov	r1, r0
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_ClockConfig+0x264>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_RCC_ClockConfig+0x26c>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	fa21 f303 	lsr.w	r3, r1, r3
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_RCC_ClockConfig+0x270>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fce0 	bl	8001c5c <HAL_InitTick>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40022000 	.word	0x40022000
 80042ac:	40021000 	.word	0x40021000
 80042b0:	04c4b400 	.word	0x04c4b400
 80042b4:	08006cf0 	.word	0x08006cf0
 80042b8:	20000000 	.word	0x20000000
 80042bc:	20000004 	.word	0x20000004

080042c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042d2:	4b2a      	ldr	r3, [pc, #168]	; (800437c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e047      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d102      	bne.n	80042ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e03e      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d136      	bne.n	8004364 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	3301      	adds	r3, #1
 800430c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b03      	cmp	r3, #3
 8004312:	d10c      	bne.n	800432e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004314:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800431e:	68d2      	ldr	r2, [r2, #12]
 8004320:	0a12      	lsrs	r2, r2, #8
 8004322:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	617b      	str	r3, [r7, #20]
      break;
 800432c:	e00c      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	0a12      	lsrs	r2, r2, #8
 800433c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
      break;
 8004346:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	0e5b      	lsrs	r3, r3, #25
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e001      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004368:	693b      	ldr	r3, [r7, #16]
}
 800436a:	4618      	mov	r0, r3
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4601      	mov	r1, r0
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08006d00 	.word	0x08006d00

080043c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043cc:	f7ff ffda 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043d0:	4601      	mov	r1, r0
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0adb      	lsrs	r3, r3, #11
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043de:	5cd3      	ldrb	r3, [r2, r3]
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000
 80043f0:	08006d00 	.word	0x08006d00

080043f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d10c      	bne.n	8004432 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004418:	4a17      	ldr	r2, [pc, #92]	; (8004478 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004422:	68d2      	ldr	r2, [r2, #12]
 8004424:	0a12      	lsrs	r2, r2, #8
 8004426:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	617b      	str	r3, [r7, #20]
    break;
 8004430:	e00c      	b.n	800444c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004432:	4a12      	ldr	r2, [pc, #72]	; (800447c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	0a12      	lsrs	r2, r2, #8
 8004440:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
    break;
 800444a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0e5b      	lsrs	r3, r3, #25
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004466:	687b      	ldr	r3, [r7, #4]
}
 8004468:	4618      	mov	r0, r3
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	40021000 	.word	0x40021000
 8004478:	007a1200 	.word	0x007a1200
 800447c:	00f42400 	.word	0x00f42400

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004488:	2300      	movs	r3, #0
 800448a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800448c:	2300      	movs	r3, #0
 800448e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8098 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	4b40      	ldr	r3, [pc, #256]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	; 0x58
 80044ba:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	2301      	movs	r3, #1
 80044c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ca:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a39      	ldr	r2, [pc, #228]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d6:	f7fd fc0d 	bl	8001cf4 <HAL_GetTick>
 80044da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044dc:	e009      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044de:	f7fd fc09 	bl	8001cf4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	74fb      	strb	r3, [r7, #19]
        break;
 80044f0:	e005      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f2:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ef      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d159      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01e      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	429a      	cmp	r2, r3
 800451e:	d019      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004542:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800454c:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d016      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fd fbc9 	bl	8001cf4 <HAL_GetTick>
 8004562:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004564:	e00b      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fd fbc5 	bl	8001cf4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	; 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d902      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	74fb      	strb	r3, [r7, #19]
            break;
 800457c:	e006      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ec      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	4903      	ldr	r1, [pc, #12]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
 80045ae:	e005      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045bc:	7c7b      	ldrb	r3, [r7, #17]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c2:	4ba6      	ldr	r3, [pc, #664]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	4aa5      	ldr	r2, [pc, #660]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045da:	4ba0      	ldr	r3, [pc, #640]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f023 0203 	bic.w	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	499c      	ldr	r1, [pc, #624]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045fc:	4b97      	ldr	r3, [pc, #604]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 020c 	bic.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4994      	ldr	r1, [pc, #592]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800461e:	4b8f      	ldr	r3, [pc, #572]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	498b      	ldr	r1, [pc, #556]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004640:	4b86      	ldr	r3, [pc, #536]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	4983      	ldr	r1, [pc, #524]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004662:	4b7e      	ldr	r3, [pc, #504]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	497a      	ldr	r1, [pc, #488]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004684:	4b75      	ldr	r3, [pc, #468]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	4972      	ldr	r1, [pc, #456]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a6:	4b6d      	ldr	r3, [pc, #436]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	4969      	ldr	r1, [pc, #420]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c8:	4b64      	ldr	r3, [pc, #400]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	4961      	ldr	r1, [pc, #388]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ea:	4b5c      	ldr	r3, [pc, #368]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	4958      	ldr	r1, [pc, #352]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	4950      	ldr	r1, [pc, #320]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472a:	d105      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472c:	4b4b      	ldr	r3, [pc, #300]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a4a      	ldr	r2, [pc, #296]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004736:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004744:	4b45      	ldr	r3, [pc, #276]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4942      	ldr	r1, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004762:	d105      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004764:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4a3c      	ldr	r2, [pc, #240]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800477c:	4b37      	ldr	r3, [pc, #220]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	4934      	ldr	r1, [pc, #208]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800479c:	4b2f      	ldr	r3, [pc, #188]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d015      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b4:	4b29      	ldr	r3, [pc, #164]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	4926      	ldr	r1, [pc, #152]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d2:	d105      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d4:	4b21      	ldr	r3, [pc, #132]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a20      	ldr	r2, [pc, #128]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	4918      	ldr	r1, [pc, #96]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a12      	ldr	r2, [pc, #72]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004824:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004850:	7cbb      	ldrb	r3, [r7, #18]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000

08004860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e049      	b.n	8004906 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd f82c 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 fb1e 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e049      	b.n	80049b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f841 	bl	80049bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 fac7 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e097      	b.n	8004b14 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fc ff2f 	bl	800185c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004a14:	f023 0307 	bic.w	r3, r3, #7
 8004a18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f000 fa5b 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	4313      	orrs	r3, r2
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a70:	f023 030c 	bic.w	r3, r3, #12
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	011a      	lsls	r2, r3, #4
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004aae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0fd      	b.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b14      	cmp	r3, #20
 8004b42:	f200 80f0 	bhi.w	8004d26 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004d27 	.word	0x08004d27
 8004b54:	08004d27 	.word	0x08004d27
 8004b58:	08004d27 	.word	0x08004d27
 8004b5c:	08004be1 	.word	0x08004be1
 8004b60:	08004d27 	.word	0x08004d27
 8004b64:	08004d27 	.word	0x08004d27
 8004b68:	08004d27 	.word	0x08004d27
 8004b6c:	08004c23 	.word	0x08004c23
 8004b70:	08004d27 	.word	0x08004d27
 8004b74:	08004d27 	.word	0x08004d27
 8004b78:	08004d27 	.word	0x08004d27
 8004b7c:	08004c63 	.word	0x08004c63
 8004b80:	08004d27 	.word	0x08004d27
 8004b84:	08004d27 	.word	0x08004d27
 8004b88:	08004d27 	.word	0x08004d27
 8004b8c:	08004ca5 	.word	0x08004ca5
 8004b90:	08004d27 	.word	0x08004d27
 8004b94:	08004d27 	.word	0x08004d27
 8004b98:	08004d27 	.word	0x08004d27
 8004b9c:	08004ce5 	.word	0x08004ce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fa2a 	bl	8005000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0204 	bic.w	r2, r2, #4
 8004bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6999      	ldr	r1, [r3, #24]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691a      	ldr	r2, [r3, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	619a      	str	r2, [r3, #24]
      break;
 8004bde:	e0a3      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fa9a 	bl	8005120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	619a      	str	r2, [r3, #24]
      break;
 8004c20:	e082      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fb03 	bl	8005234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0208 	orr.w	r2, r2, #8
 8004c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0204 	bic.w	r2, r2, #4
 8004c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69d9      	ldr	r1, [r3, #28]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	61da      	str	r2, [r3, #28]
      break;
 8004c60:	e062      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fb6b 	bl	8005344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	021a      	lsls	r2, r3, #8
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	61da      	str	r2, [r3, #28]
      break;
 8004ca2:	e041      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fbd4 	bl	8005458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ce2:	e021      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fc18 	bl	8005520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004d24:	e000      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_ConfigClockSource+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0b9      	b.n	8004ec8 <HAL_TIM_ConfigClockSource+0x18c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b70      	cmp	r3, #112	; 0x70
 8004d8e:	d02e      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0xb2>
 8004d90:	2b70      	cmp	r3, #112	; 0x70
 8004d92:	d812      	bhi.n	8004dba <HAL_TIM_ConfigClockSource+0x7e>
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	f000 8084 	beq.w	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d806      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x70>
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d07f      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d07d      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d07b      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004daa:	e084      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004dac:	2b50      	cmp	r3, #80	; 0x50
 8004dae:	d048      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x106>
 8004db0:	2b60      	cmp	r3, #96	; 0x60
 8004db2:	d056      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x126>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d064      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8004db8:	e07d      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004dba:	4a45      	ldr	r2, [pc, #276]	; (8004ed0 <HAL_TIM_ConfigClockSource+0x194>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d070      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004dc0:	4a43      	ldr	r2, [pc, #268]	; (8004ed0 <HAL_TIM_ConfigClockSource+0x194>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d809      	bhi.n	8004dda <HAL_TIM_ConfigClockSource+0x9e>
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d027      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0xe0>
 8004dcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004dd0:	d067      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	d06d      	beq.n	8004eb4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004dd8:	e06d      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8004dda:	4a3e      	ldr	r2, [pc, #248]	; (8004ed4 <HAL_TIM_ConfigClockSource+0x198>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d060      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004de0:	4a3d      	ldr	r2, [pc, #244]	; (8004ed8 <HAL_TIM_ConfigClockSource+0x19c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d05d      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
 8004de6:	4a3d      	ldr	r2, [pc, #244]	; (8004edc <HAL_TIM_ConfigClockSource+0x1a0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d05a      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8004dec:	e063      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6899      	ldr	r1, [r3, #8]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f000 fc71 	bl	80056e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	609a      	str	r2, [r3, #8]
      break;
 8004e1a:	e04c      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6899      	ldr	r1, [r3, #8]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f000 fc5a 	bl	80056e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e3e:	609a      	str	r2, [r3, #8]
      break;
 8004e40:	e039      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 fbcc 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2150      	movs	r1, #80	; 0x50
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fc25 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004e60:	e029      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6859      	ldr	r1, [r3, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f000 fbeb 	bl	800564a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2160      	movs	r1, #96	; 0x60
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fc15 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004e80:	e019      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fbac 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fc05 	bl	80056aa <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e009      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f000 fbfc 	bl	80056aa <TIM_ITRx_SetConfig>
        break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8004eb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	00100020 	.word	0x00100020
 8004ed4:	00100040 	.word	0x00100040
 8004ed8:	00100070 	.word	0x00100070
 8004edc:	00100030 	.word	0x00100030

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3c      	ldr	r2, [pc, #240]	; (8004fe4 <TIM_Base_SetConfig+0x104>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00f      	beq.n	8004f18 <TIM_Base_SetConfig+0x38>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d00b      	beq.n	8004f18 <TIM_Base_SetConfig+0x38>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <TIM_Base_SetConfig+0x108>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d007      	beq.n	8004f18 <TIM_Base_SetConfig+0x38>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a38      	ldr	r2, [pc, #224]	; (8004fec <TIM_Base_SetConfig+0x10c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0x38>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a37      	ldr	r2, [pc, #220]	; (8004ff0 <TIM_Base_SetConfig+0x110>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d108      	bne.n	8004f2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <TIM_Base_SetConfig+0x104>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01b      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d017      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <TIM_Base_SetConfig+0x108>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a29      	ldr	r2, [pc, #164]	; (8004fec <TIM_Base_SetConfig+0x10c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00f      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <TIM_Base_SetConfig+0x110>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00b      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d007      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <TIM_Base_SetConfig+0x8a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a25      	ldr	r2, [pc, #148]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <TIM_Base_SetConfig+0x104>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0xe8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <TIM_Base_SetConfig+0x110>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0xe8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0xe8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a0f      	ldr	r2, [pc, #60]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0xe8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d103      	bne.n	8004fd0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	615a      	str	r2, [r3, #20]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40013400 	.word	0x40013400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800

08005000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f023 0302 	bic.w	r3, r3, #2
 800504c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2c      	ldr	r2, [pc, #176]	; (800510c <TIM_OC1_SetConfig+0x10c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00f      	beq.n	8005080 <TIM_OC1_SetConfig+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_OC1_SetConfig+0x110>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_OC1_SetConfig+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_OC1_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_OC1_SetConfig+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a29      	ldr	r2, [pc, #164]	; (8005118 <TIM_OC1_SetConfig+0x118>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_OC1_SetConfig+0x80>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a28      	ldr	r2, [pc, #160]	; (800511c <TIM_OC1_SetConfig+0x11c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10c      	bne.n	800509a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 0308 	bic.w	r3, r3, #8
 8005086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 0304 	bic.w	r3, r3, #4
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1b      	ldr	r2, [pc, #108]	; (800510c <TIM_OC1_SetConfig+0x10c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00f      	beq.n	80050c2 <TIM_OC1_SetConfig+0xc2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1a      	ldr	r2, [pc, #104]	; (8005110 <TIM_OC1_SetConfig+0x110>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_OC1_SetConfig+0xc2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <TIM_OC1_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <TIM_OC1_SetConfig+0xc2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <TIM_OC1_SetConfig+0x118>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC1_SetConfig+0xc2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a17      	ldr	r2, [pc, #92]	; (800511c <TIM_OC1_SetConfig+0x11c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d111      	bne.n	80050e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	621a      	str	r2, [r3, #32]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40013400 	.word	0x40013400
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400
 800511c:	40014800 	.word	0x40014800

08005120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0320 	bic.w	r3, r3, #32
 800516e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a28      	ldr	r2, [pc, #160]	; (8005220 <TIM_OC2_SetConfig+0x100>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC2_SetConfig+0x6c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a27      	ldr	r2, [pc, #156]	; (8005224 <TIM_OC2_SetConfig+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d10d      	bne.n	80051a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <TIM_OC2_SetConfig+0x100>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00f      	beq.n	80051d0 <TIM_OC2_SetConfig+0xb0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <TIM_OC2_SetConfig+0x104>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_OC2_SetConfig+0xb0>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <TIM_OC2_SetConfig+0x108>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_OC2_SetConfig+0xb0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1a      	ldr	r2, [pc, #104]	; (800522c <TIM_OC2_SetConfig+0x10c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_OC2_SetConfig+0xb0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a19      	ldr	r2, [pc, #100]	; (8005230 <TIM_OC2_SetConfig+0x110>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d113      	bne.n	80051f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <TIM_OC3_SetConfig+0xfc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d003      	beq.n	800529e <TIM_OC3_SetConfig+0x6a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <TIM_OC3_SetConfig+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10d      	bne.n	80052ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <TIM_OC3_SetConfig+0xfc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00f      	beq.n	80052e2 <TIM_OC3_SetConfig+0xae>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <TIM_OC3_SetConfig+0x100>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <TIM_OC3_SetConfig+0xae>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <TIM_OC3_SetConfig+0x104>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <TIM_OC3_SetConfig+0xae>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <TIM_OC3_SetConfig+0x108>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC3_SetConfig+0xae>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a18      	ldr	r2, [pc, #96]	; (8005340 <TIM_OC3_SetConfig+0x10c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d113      	bne.n	800530a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40013400 	.word	0x40013400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	031b      	lsls	r3, r3, #12
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a28      	ldr	r2, [pc, #160]	; (8005444 <TIM_OC4_SetConfig+0x100>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC4_SetConfig+0x6c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a27      	ldr	r2, [pc, #156]	; (8005448 <TIM_OC4_SetConfig+0x104>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10d      	bne.n	80053cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	031b      	lsls	r3, r3, #12
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <TIM_OC4_SetConfig+0x100>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <TIM_OC4_SetConfig+0xb0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <TIM_OC4_SetConfig+0x104>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_OC4_SetConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <TIM_OC4_SetConfig+0x108>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_OC4_SetConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <TIM_OC4_SetConfig+0x10c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC4_SetConfig+0xb0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a19      	ldr	r2, [pc, #100]	; (8005454 <TIM_OC4_SetConfig+0x110>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d113      	bne.n	800541c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005402:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	019b      	lsls	r3, r3, #6
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40012c00 	.word	0x40012c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800549c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a17      	ldr	r2, [pc, #92]	; (800550c <TIM_OC5_SetConfig+0xb4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00f      	beq.n	80054d2 <TIM_OC5_SetConfig+0x7a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a16      	ldr	r2, [pc, #88]	; (8005510 <TIM_OC5_SetConfig+0xb8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <TIM_OC5_SetConfig+0x7a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a15      	ldr	r2, [pc, #84]	; (8005514 <TIM_OC5_SetConfig+0xbc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d007      	beq.n	80054d2 <TIM_OC5_SetConfig+0x7a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a14      	ldr	r2, [pc, #80]	; (8005518 <TIM_OC5_SetConfig+0xc0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_OC5_SetConfig+0x7a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <TIM_OC5_SetConfig+0xc4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d109      	bne.n	80054e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	621a      	str	r2, [r3, #32]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800

08005520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <TIM_OC6_SetConfig+0xb8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00f      	beq.n	800559c <TIM_OC6_SetConfig+0x7c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a17      	ldr	r2, [pc, #92]	; (80055dc <TIM_OC6_SetConfig+0xbc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00b      	beq.n	800559c <TIM_OC6_SetConfig+0x7c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <TIM_OC6_SetConfig+0xc0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d007      	beq.n	800559c <TIM_OC6_SetConfig+0x7c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a15      	ldr	r2, [pc, #84]	; (80055e4 <TIM_OC6_SetConfig+0xc4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_OC6_SetConfig+0x7c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <TIM_OC6_SetConfig+0xc8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d109      	bne.n	80055b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	029b      	lsls	r3, r3, #10
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40013400 	.word	0x40013400
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40014400 	.word	0x40014400
 80055e8:	40014800 	.word	0x40014800

080055ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 030a 	bic.w	r3, r3, #10
 8005628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564a:	b480      	push	{r7}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f023 0210 	bic.w	r2, r3, #16
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	031b      	lsls	r3, r3, #12
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f043 0307 	orr.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	431a      	orrs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	609a      	str	r2, [r3, #8]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005738:	2302      	movs	r3, #2
 800573a:	e065      	b.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2c      	ldr	r2, [pc, #176]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d108      	bne.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b2:	d013      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a17      	ldr	r2, [pc, #92]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a12      	ldr	r2, [pc, #72]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a13      	ldr	r2, [pc, #76]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40014000 	.word	0x40014000

08005828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e087      	b.n	8005954 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a27      	ldr	r2, [pc, #156]	; (8005960 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d106      	bne.n	80058e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d126      	bne.n	8005942 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	051b      	lsls	r3, r3, #20
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a0e      	ldr	r2, [pc, #56]	; (8005960 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d106      	bne.n	8005942 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40013400 	.word	0x40013400

08005968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e042      	b.n	8005a00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fc f801 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2224      	movs	r2, #36	; 0x24
 8005996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fad2 	bl	8005f54 <UART_SetConfig>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e022      	b.n	8005a00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fd6e 	bl	80064a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fdf5 	bl	80065e8 <UART_CheckIdleState>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d168      	bne.n	8005af2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_UART_Transmit_DMA+0x24>
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e061      	b.n	8005af4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Transmit_DMA+0x36>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e05a      	b.n	8005af4 <HAL_UART_Transmit_DMA+0xec>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2221      	movs	r2, #33	; 0x21
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02c      	beq.n	8005ace <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	4a20      	ldr	r2, [pc, #128]	; (8005afc <HAL_UART_Transmit_DMA+0xf4>)
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_UART_Transmit_DMA+0xf8>)
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a88:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <HAL_UART_Transmit_DMA+0xfc>)
 8005a8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	2200      	movs	r2, #0
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3328      	adds	r3, #40	; 0x28
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	f7fd fb1e 	bl	80030e8 <HAL_DMA_Start_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e012      	b.n	8005af4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2240      	movs	r2, #64	; 0x40
 8005ad4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aec:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e000      	b.n	8005af4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
  }
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	080067fb 	.word	0x080067fb
 8005b00:	0800684f 	.word	0x0800684f
 8005b04:	080068f1 	.word	0x080068f1

08005b08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d170      	bne.n	8005c02 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_UART_Receive_DMA+0x24>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e069      	b.n	8005c04 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Receive_DMA+0x36>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e062      	b.n	8005c04 <HAL_UART_Receive_DMA+0xfc>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2222      	movs	r2, #34	; 0x22
 8005b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d02c      	beq.n	8005bc6 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <HAL_UART_Receive_DMA+0x104>)
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <HAL_UART_Receive_DMA+0x108>)
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b80:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <HAL_UART_Receive_DMA+0x10c>)
 8005b82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b88:	2200      	movs	r2, #0
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3324      	adds	r3, #36	; 0x24
 8005b96:	4619      	mov	r1, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	f7fd faa2 	bl	80030e8 <HAL_DMA_Start_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2210      	movs	r2, #16
 8005bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e01e      	b.n	8005c04 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bdc:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bfc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	e000      	b.n	8005c04 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	0800686b 	.word	0x0800686b
 8005c10:	080068d5 	.word	0x080068d5
 8005c14:	080068f1 	.word	0x080068f1

08005c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c3e:	4013      	ands	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d118      	bne.n	8005c7a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8145 	beq.w	8005efa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
      }
      return;
 8005c78:	e13f      	b.n	8005efa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80e8 	beq.w	8005e52 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4ba1      	ldr	r3, [pc, #644]	; (8005f0c <HAL_UART_IRQHandler+0x2f4>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d105      	bne.n	8005c98 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4ba0      	ldr	r3, [pc, #640]	; (8005f10 <HAL_UART_IRQHandler+0x2f8>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80dd 	beq.w	8005e52 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <HAL_UART_IRQHandler+0xac>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cba:	f043 0201 	orr.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d010      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xd8>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f043 0204 	orr.w	r2, r3, #4
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d010      	beq.n	8005d1c <HAL_UART_IRQHandler+0x104>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f043 0202 	orr.w	r2, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d015      	beq.n	8005d52 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4b76      	ldr	r3, [pc, #472]	; (8005f0c <HAL_UART_IRQHandler+0x2f4>)
 8005d34:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2208      	movs	r2, #8
 8005d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f043 0208 	orr.w	r2, r3, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <HAL_UART_IRQHandler+0x168>
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80b9 	beq.w	8005efe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d011      	beq.n	8005dba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d004      	beq.n	8005dda <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d031      	beq.n	8005e3e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fcea 	bl	80067b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d123      	bne.n	8005e36 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d013      	beq.n	8005e2e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0a:	4a42      	ldr	r2, [pc, #264]	; (8005f14 <HAL_UART_IRQHandler+0x2fc>)
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fd f9e3 	bl	80031de <HAL_DMA_Abort_IT>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	e00f      	b.n	8005e4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb f830 	bl	8000e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	e00b      	b.n	8005e4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fb f82c 	bl	8000e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3c:	e007      	b.n	8005e4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fb f828 	bl	8000e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005e4c:	e057      	b.n	8005efe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4e:	bf00      	nop
    return;
 8005e50:	e055      	b.n	8005efe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <HAL_UART_IRQHandler+0x260>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fdad 	bl	80069d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e76:	e045      	b.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d031      	beq.n	8005f02 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
    }
    return;
 8005ea6:	e02c      	b.n	8005f02 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x2ac>
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fd6d 	bl	800699c <UART_EndTransmit_IT>
    return;
 8005ec2:	e01f      	b.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x2c8>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fd8d 	bl	80069f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ede:	e011      	b.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da09      	bge.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fd77 	bl	80069e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef6:	bf00      	nop
 8005ef8:	e004      	b.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005efa:	bf00      	nop
 8005efc:	e002      	b.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005f02:	bf00      	nop
  }
}
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	10000001 	.word	0x10000001
 8005f10:	04000120 	.word	0x04000120
 8005f14:	08006971 	.word	0x08006971

08005f18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4bb0      	ldr	r3, [pc, #704]	; (800624c <UART_SetConfig+0x2f8>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	69f9      	ldr	r1, [r7, #28]
 8005f94:	430b      	orrs	r3, r1
 8005f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4aa5      	ldr	r2, [pc, #660]	; (8006250 <UART_SetConfig+0x2fc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fd2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	69f9      	ldr	r1, [r7, #28]
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	f023 010f 	bic.w	r1, r3, #15
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a96      	ldr	r2, [pc, #600]	; (8006254 <UART_SetConfig+0x300>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d121      	bne.n	8006044 <UART_SetConfig+0xf0>
 8006000:	4b95      	ldr	r3, [pc, #596]	; (8006258 <UART_SetConfig+0x304>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	2b03      	cmp	r3, #3
 800600c:	d816      	bhi.n	800603c <UART_SetConfig+0xe8>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <UART_SetConfig+0xc0>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006025 	.word	0x08006025
 8006018:	08006031 	.word	0x08006031
 800601c:	0800602b 	.word	0x0800602b
 8006020:	08006037 	.word	0x08006037
 8006024:	2301      	movs	r3, #1
 8006026:	76fb      	strb	r3, [r7, #27]
 8006028:	e0be      	b.n	80061a8 <UART_SetConfig+0x254>
 800602a:	2302      	movs	r3, #2
 800602c:	76fb      	strb	r3, [r7, #27]
 800602e:	e0bb      	b.n	80061a8 <UART_SetConfig+0x254>
 8006030:	2304      	movs	r3, #4
 8006032:	76fb      	strb	r3, [r7, #27]
 8006034:	e0b8      	b.n	80061a8 <UART_SetConfig+0x254>
 8006036:	2308      	movs	r3, #8
 8006038:	76fb      	strb	r3, [r7, #27]
 800603a:	e0b5      	b.n	80061a8 <UART_SetConfig+0x254>
 800603c:	2310      	movs	r3, #16
 800603e:	76fb      	strb	r3, [r7, #27]
 8006040:	bf00      	nop
 8006042:	e0b1      	b.n	80061a8 <UART_SetConfig+0x254>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a84      	ldr	r2, [pc, #528]	; (800625c <UART_SetConfig+0x308>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d134      	bne.n	80060b8 <UART_SetConfig+0x164>
 800604e:	4b82      	ldr	r3, [pc, #520]	; (8006258 <UART_SetConfig+0x304>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b0c      	cmp	r3, #12
 800605a:	d829      	bhi.n	80060b0 <UART_SetConfig+0x15c>
 800605c:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x110>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006099 	.word	0x08006099
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060a5 	.word	0x080060a5
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060b1 	.word	0x080060b1
 8006084:	0800609f 	.word	0x0800609f
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060ab 	.word	0x080060ab
 8006098:	2300      	movs	r3, #0
 800609a:	76fb      	strb	r3, [r7, #27]
 800609c:	e084      	b.n	80061a8 <UART_SetConfig+0x254>
 800609e:	2302      	movs	r3, #2
 80060a0:	76fb      	strb	r3, [r7, #27]
 80060a2:	e081      	b.n	80061a8 <UART_SetConfig+0x254>
 80060a4:	2304      	movs	r3, #4
 80060a6:	76fb      	strb	r3, [r7, #27]
 80060a8:	e07e      	b.n	80061a8 <UART_SetConfig+0x254>
 80060aa:	2308      	movs	r3, #8
 80060ac:	76fb      	strb	r3, [r7, #27]
 80060ae:	e07b      	b.n	80061a8 <UART_SetConfig+0x254>
 80060b0:	2310      	movs	r3, #16
 80060b2:	76fb      	strb	r3, [r7, #27]
 80060b4:	bf00      	nop
 80060b6:	e077      	b.n	80061a8 <UART_SetConfig+0x254>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a68      	ldr	r2, [pc, #416]	; (8006260 <UART_SetConfig+0x30c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d120      	bne.n	8006104 <UART_SetConfig+0x1b0>
 80060c2:	4b65      	ldr	r3, [pc, #404]	; (8006258 <UART_SetConfig+0x304>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d00f      	beq.n	80060f0 <UART_SetConfig+0x19c>
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d802      	bhi.n	80060da <UART_SetConfig+0x186>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <UART_SetConfig+0x190>
 80060d8:	e010      	b.n	80060fc <UART_SetConfig+0x1a8>
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d005      	beq.n	80060ea <UART_SetConfig+0x196>
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d009      	beq.n	80060f6 <UART_SetConfig+0x1a2>
 80060e2:	e00b      	b.n	80060fc <UART_SetConfig+0x1a8>
 80060e4:	2300      	movs	r3, #0
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e05e      	b.n	80061a8 <UART_SetConfig+0x254>
 80060ea:	2302      	movs	r3, #2
 80060ec:	76fb      	strb	r3, [r7, #27]
 80060ee:	e05b      	b.n	80061a8 <UART_SetConfig+0x254>
 80060f0:	2304      	movs	r3, #4
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e058      	b.n	80061a8 <UART_SetConfig+0x254>
 80060f6:	2308      	movs	r3, #8
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e055      	b.n	80061a8 <UART_SetConfig+0x254>
 80060fc:	2310      	movs	r3, #16
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	bf00      	nop
 8006102:	e051      	b.n	80061a8 <UART_SetConfig+0x254>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a56      	ldr	r2, [pc, #344]	; (8006264 <UART_SetConfig+0x310>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d120      	bne.n	8006150 <UART_SetConfig+0x1fc>
 800610e:	4b52      	ldr	r3, [pc, #328]	; (8006258 <UART_SetConfig+0x304>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d00f      	beq.n	800613c <UART_SetConfig+0x1e8>
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d802      	bhi.n	8006126 <UART_SetConfig+0x1d2>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <UART_SetConfig+0x1dc>
 8006124:	e010      	b.n	8006148 <UART_SetConfig+0x1f4>
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d005      	beq.n	8006136 <UART_SetConfig+0x1e2>
 800612a:	2bc0      	cmp	r3, #192	; 0xc0
 800612c:	d009      	beq.n	8006142 <UART_SetConfig+0x1ee>
 800612e:	e00b      	b.n	8006148 <UART_SetConfig+0x1f4>
 8006130:	2300      	movs	r3, #0
 8006132:	76fb      	strb	r3, [r7, #27]
 8006134:	e038      	b.n	80061a8 <UART_SetConfig+0x254>
 8006136:	2302      	movs	r3, #2
 8006138:	76fb      	strb	r3, [r7, #27]
 800613a:	e035      	b.n	80061a8 <UART_SetConfig+0x254>
 800613c:	2304      	movs	r3, #4
 800613e:	76fb      	strb	r3, [r7, #27]
 8006140:	e032      	b.n	80061a8 <UART_SetConfig+0x254>
 8006142:	2308      	movs	r3, #8
 8006144:	76fb      	strb	r3, [r7, #27]
 8006146:	e02f      	b.n	80061a8 <UART_SetConfig+0x254>
 8006148:	2310      	movs	r3, #16
 800614a:	76fb      	strb	r3, [r7, #27]
 800614c:	bf00      	nop
 800614e:	e02b      	b.n	80061a8 <UART_SetConfig+0x254>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3e      	ldr	r2, [pc, #248]	; (8006250 <UART_SetConfig+0x2fc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d124      	bne.n	80061a4 <UART_SetConfig+0x250>
 800615a:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <UART_SetConfig+0x304>)
 800615c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006160:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006168:	d012      	beq.n	8006190 <UART_SetConfig+0x23c>
 800616a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616e:	d802      	bhi.n	8006176 <UART_SetConfig+0x222>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <UART_SetConfig+0x230>
 8006174:	e012      	b.n	800619c <UART_SetConfig+0x248>
 8006176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617a:	d006      	beq.n	800618a <UART_SetConfig+0x236>
 800617c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006180:	d009      	beq.n	8006196 <UART_SetConfig+0x242>
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x248>
 8006184:	2300      	movs	r3, #0
 8006186:	76fb      	strb	r3, [r7, #27]
 8006188:	e00e      	b.n	80061a8 <UART_SetConfig+0x254>
 800618a:	2302      	movs	r3, #2
 800618c:	76fb      	strb	r3, [r7, #27]
 800618e:	e00b      	b.n	80061a8 <UART_SetConfig+0x254>
 8006190:	2304      	movs	r3, #4
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	e008      	b.n	80061a8 <UART_SetConfig+0x254>
 8006196:	2308      	movs	r3, #8
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e005      	b.n	80061a8 <UART_SetConfig+0x254>
 800619c:	2310      	movs	r3, #16
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	bf00      	nop
 80061a2:	e001      	b.n	80061a8 <UART_SetConfig+0x254>
 80061a4:	2310      	movs	r3, #16
 80061a6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <UART_SetConfig+0x2fc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	f040 80a1 	bne.w	80062f6 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061b4:	7efb      	ldrb	r3, [r7, #27]
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d823      	bhi.n	8006202 <UART_SetConfig+0x2ae>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x26c>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	08006203 	.word	0x08006203
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	08006203 	.word	0x08006203
 80061d0:	080061f3 	.word	0x080061f3
 80061d4:	08006203 	.word	0x08006203
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006203 	.word	0x08006203
 80061e0:	080061fb 	.word	0x080061fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe f8da 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80061e8:	6178      	str	r0, [r7, #20]
        break;
 80061ea:	e00f      	b.n	800620c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <UART_SetConfig+0x314>)
 80061ee:	617b      	str	r3, [r7, #20]
        break;
 80061f0:	e00c      	b.n	800620c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f2:	f7fe f865 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 80061f6:	6178      	str	r0, [r7, #20]
        break;
 80061f8:	e008      	b.n	800620c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	617b      	str	r3, [r7, #20]
        break;
 8006200:	e004      	b.n	800620c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	76bb      	strb	r3, [r7, #26]
        break;
 800620a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8130 	beq.w	8006474 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	4a14      	ldr	r2, [pc, #80]	; (800626c <UART_SetConfig+0x318>)
 800621a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800621e:	461a      	mov	r2, r3
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	fbb3 f3f2 	udiv	r3, r3, r2
 8006226:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d305      	bcc.n	8006244 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d915      	bls.n	8006270 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	76bb      	strb	r3, [r7, #26]
 8006248:	e114      	b.n	8006474 <UART_SetConfig+0x520>
 800624a:	bf00      	nop
 800624c:	cfff69f3 	.word	0xcfff69f3
 8006250:	40008000 	.word	0x40008000
 8006254:	40013800 	.word	0x40013800
 8006258:	40021000 	.word	0x40021000
 800625c:	40004400 	.word	0x40004400
 8006260:	40004800 	.word	0x40004800
 8006264:	40004c00 	.word	0x40004c00
 8006268:	00f42400 	.word	0x00f42400
 800626c:	08006d08 	.word	0x08006d08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	4618      	mov	r0, r3
 8006274:	f04f 0100 	mov.w	r1, #0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	4a87      	ldr	r2, [pc, #540]	; (800649c <UART_SetConfig+0x548>)
 800627e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f04f 0400 	mov.w	r4, #0
 8006288:	461a      	mov	r2, r3
 800628a:	4623      	mov	r3, r4
 800628c:	f7f9 ffc4 	bl	8000218 <__aeabi_uldivmod>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4619      	mov	r1, r3
 8006296:	4622      	mov	r2, r4
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	f04f 0400 	mov.w	r4, #0
 80062a0:	0214      	lsls	r4, r2, #8
 80062a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062a6:	020b      	lsls	r3, r1, #8
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6852      	ldr	r2, [r2, #4]
 80062ac:	0852      	lsrs	r2, r2, #1
 80062ae:	4611      	mov	r1, r2
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	eb13 0b01 	adds.w	fp, r3, r1
 80062b8:	eb44 0c02 	adc.w	ip, r4, r2
 80062bc:	4658      	mov	r0, fp
 80062be:	4661      	mov	r1, ip
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f04f 0400 	mov.w	r4, #0
 80062c8:	461a      	mov	r2, r3
 80062ca:	4623      	mov	r3, r4
 80062cc:	f7f9 ffa4 	bl	8000218 <__aeabi_uldivmod>
 80062d0:	4603      	mov	r3, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062dc:	d308      	bcc.n	80062f0 <UART_SetConfig+0x39c>
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e4:	d204      	bcs.n	80062f0 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	e0c1      	b.n	8006474 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	76bb      	strb	r3, [r7, #26]
 80062f4:	e0be      	b.n	8006474 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fe:	d164      	bne.n	80063ca <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8006300:	7efb      	ldrb	r3, [r7, #27]
 8006302:	2b08      	cmp	r3, #8
 8006304:	d827      	bhi.n	8006356 <UART_SetConfig+0x402>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <UART_SetConfig+0x3b8>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	08006357 	.word	0x08006357
 800631c:	08006347 	.word	0x08006347
 8006320:	08006357 	.word	0x08006357
 8006324:	08006357 	.word	0x08006357
 8006328:	08006357 	.word	0x08006357
 800632c:	0800634f 	.word	0x0800634f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7fe f834 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8006334:	6178      	str	r0, [r7, #20]
        break;
 8006336:	e013      	b.n	8006360 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006338:	f7fe f846 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 800633c:	6178      	str	r0, [r7, #20]
        break;
 800633e:	e00f      	b.n	8006360 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006340:	4b57      	ldr	r3, [pc, #348]	; (80064a0 <UART_SetConfig+0x54c>)
 8006342:	617b      	str	r3, [r7, #20]
        break;
 8006344:	e00c      	b.n	8006360 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006346:	f7fd ffbb 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 800634a:	6178      	str	r0, [r7, #20]
        break;
 800634c:	e008      	b.n	8006360 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006352:	617b      	str	r3, [r7, #20]
        break;
 8006354:	e004      	b.n	8006360 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	76bb      	strb	r3, [r7, #26]
        break;
 800635e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8086 	beq.w	8006474 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	4a4b      	ldr	r2, [pc, #300]	; (800649c <UART_SetConfig+0x548>)
 800636e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006372:	461a      	mov	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	fbb3 f3f2 	udiv	r3, r3, r2
 800637a:	005a      	lsls	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	441a      	add	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	b29b      	uxth	r3, r3
 800638e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b0f      	cmp	r3, #15
 8006394:	d916      	bls.n	80063c4 <UART_SetConfig+0x470>
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639c:	d212      	bcs.n	80063c4 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f023 030f 	bic.w	r3, r3, #15
 80063a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	89fb      	ldrh	r3, [r7, #14]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	89fa      	ldrh	r2, [r7, #14]
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e057      	b.n	8006474 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	76bb      	strb	r3, [r7, #26]
 80063c8:	e054      	b.n	8006474 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ca:	7efb      	ldrb	r3, [r7, #27]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d828      	bhi.n	8006422 <UART_SetConfig+0x4ce>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0x484>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	08006405 	.word	0x08006405
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	08006423 	.word	0x08006423
 80063e8:	08006413 	.word	0x08006413
 80063ec:	08006423 	.word	0x08006423
 80063f0:	08006423 	.word	0x08006423
 80063f4:	08006423 	.word	0x08006423
 80063f8:	0800641b 	.word	0x0800641b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7fd ffce 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8006400:	6178      	str	r0, [r7, #20]
        break;
 8006402:	e013      	b.n	800642c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fd ffe0 	bl	80043c8 <HAL_RCC_GetPCLK2Freq>
 8006408:	6178      	str	r0, [r7, #20]
        break;
 800640a:	e00f      	b.n	800642c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800640c:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <UART_SetConfig+0x54c>)
 800640e:	617b      	str	r3, [r7, #20]
        break;
 8006410:	e00c      	b.n	800642c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006412:	f7fd ff55 	bl	80042c0 <HAL_RCC_GetSysClockFreq>
 8006416:	6178      	str	r0, [r7, #20]
        break;
 8006418:	e008      	b.n	800642c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641e:	617b      	str	r3, [r7, #20]
        break;
 8006420:	e004      	b.n	800642c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	76bb      	strb	r3, [r7, #26]
        break;
 800642a:	bf00      	nop
    }

    if (pclk != 0U)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	4a19      	ldr	r2, [pc, #100]	; (800649c <UART_SetConfig+0x548>)
 8006438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643c:	461a      	mov	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	fbb3 f2f2 	udiv	r2, r3, r2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	441a      	add	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	fbb2 f3f3 	udiv	r3, r2, r3
 8006454:	b29b      	uxth	r3, r3
 8006456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d908      	bls.n	8006470 <UART_SetConfig+0x51c>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d204      	bcs.n	8006470 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e001      	b.n	8006474 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006490:	7ebb      	ldrb	r3, [r7, #26]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800649c:	08006d08 	.word	0x08006d08
 80064a0:	00f42400 	.word	0x00f42400

080064a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01a      	beq.n	80065ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a2:	d10a      	bne.n	80065ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f8:	f7fb fb7c 	bl	8001cf4 <HAL_GetTick>
 80065fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d10e      	bne.n	800662a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f82c 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e022      	b.n	8006670 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b04      	cmp	r3, #4
 8006636:	d10e      	bne.n	8006656 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f816 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e00c      	b.n	8006670 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006688:	e062      	b.n	8006750 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d05e      	beq.n	8006750 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006692:	f7fb fb2f 	bl	8001cf4 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d302      	bcc.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11d      	bne.n	80066e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e045      	b.n	8006770 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02e      	beq.n	8006750 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006700:	d126      	bne.n	8006750 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800670a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800671a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e00f      	b.n	8006770 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4013      	ands	r3, r2
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	79fb      	ldrb	r3, [r7, #7]
 800676a:	429a      	cmp	r2, r3
 800676c:	d08d      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800678e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800679e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d114      	bne.n	8006840 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800682c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800683e:	e002      	b.n	8006846 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7fa fcb5 	bl	80011b0 <HAL_UART_TxCpltCallback>
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fb5b 	bl	8005f18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d11f      	bne.n	80068c6 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800689c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068bc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fb30 	bl	8005f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fb2c 	bl	8005f40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800690c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d109      	bne.n	8006930 <UART_DMAError+0x40>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b21      	cmp	r3, #33	; 0x21
 8006920:	d106      	bne.n	8006930 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f7ff ff24 	bl	8006778 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d109      	bne.n	8006952 <UART_DMAError+0x62>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b22      	cmp	r3, #34	; 0x22
 8006942:	d106      	bne.n	8006952 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2200      	movs	r2, #0
 8006948:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800694c:	6978      	ldr	r0, [r7, #20]
 800694e:	f7ff ff31 	bl	80067b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f043 0210 	orr.w	r2, r3, #16
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006962:	6978      	ldr	r0, [r7, #20]
 8006964:	f7fa fa96 	bl	8000e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006968:	bf00      	nop
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f7fa fa80 	bl	8000e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fa fbf4 	bl	80011b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e027      	b.n	8006a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2224      	movs	r2, #36	; 0x24
 8006a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e02d      	b.n	8006af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2224      	movs	r2, #36	; 0x24
 8006aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f850 	bl	8006b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e02d      	b.n	8006b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2224      	movs	r2, #36	; 0x24
 8006b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0201 	bic.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f812 	bl	8006b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006b80:	4a2f      	ldr	r2, [pc, #188]	; (8006c40 <UARTEx_SetNbDataToProcess+0xc8>)
 8006b82:	f107 0314 	add.w	r3, r7, #20
 8006b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b8a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006b8e:	4a2d      	ldr	r2, [pc, #180]	; (8006c44 <UARTEx_SetNbDataToProcess+0xcc>)
 8006b90:	f107 030c 	add.w	r3, r7, #12
 8006b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b98:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bb4:	e03d      	b.n	8006c32 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bba:	2308      	movs	r3, #8
 8006bbc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	0e5b      	lsrs	r3, r3, #25
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0f5b      	lsrs	r3, r3, #29
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bde:	7fbb      	ldrb	r3, [r7, #30]
 8006be0:	7f3a      	ldrb	r2, [r7, #28]
 8006be2:	f107 0120 	add.w	r1, r7, #32
 8006be6:	440a      	add	r2, r1
 8006be8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bf0:	7f3a      	ldrb	r2, [r7, #28]
 8006bf2:	f107 0120 	add.w	r1, r7, #32
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	7f7a      	ldrb	r2, [r7, #29]
 8006c0c:	f107 0120 	add.w	r1, r7, #32
 8006c10:	440a      	add	r2, r1
 8006c12:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c1a:	7f7a      	ldrb	r2, [r7, #29]
 8006c1c:	f107 0120 	add.w	r1, r7, #32
 8006c20:	440a      	add	r2, r1
 8006c22:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c32:	bf00      	nop
 8006c34:	3724      	adds	r7, #36	; 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	08006cd4 	.word	0x08006cd4
 8006c44:	08006cdc 	.word	0x08006cdc

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4e0d      	ldr	r6, [pc, #52]	; (8006c80 <__libc_init_array+0x38>)
 8006c4c:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c4e:	1ba4      	subs	r4, r4, r6
 8006c50:	10a4      	asrs	r4, r4, #2
 8006c52:	2500      	movs	r5, #0
 8006c54:	42a5      	cmp	r5, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	4e0b      	ldr	r6, [pc, #44]	; (8006c88 <__libc_init_array+0x40>)
 8006c5a:	4c0c      	ldr	r4, [pc, #48]	; (8006c8c <__libc_init_array+0x44>)
 8006c5c:	f000 f82c 	bl	8006cb8 <_init>
 8006c60:	1ba4      	subs	r4, r4, r6
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	2500      	movs	r5, #0
 8006c66:	42a5      	cmp	r5, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c70:	4798      	blx	r3
 8006c72:	3501      	adds	r5, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c7a:	4798      	blx	r3
 8006c7c:	3501      	adds	r5, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	08006d28 	.word	0x08006d28
 8006c84:	08006d28 	.word	0x08006d28
 8006c88:	08006d28 	.word	0x08006d28
 8006c8c:	08006d2c 	.word	0x08006d2c

08006c90 <memcpy>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	1e43      	subs	r3, r0, #1
 8006c94:	440a      	add	r2, r1
 8006c96:	4291      	cmp	r1, r2
 8006c98:	d100      	bne.n	8006c9c <memcpy+0xc>
 8006c9a:	bd10      	pop	{r4, pc}
 8006c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca4:	e7f7      	b.n	8006c96 <memcpy+0x6>

08006ca6 <memset>:
 8006ca6:	4402      	add	r2, r0
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d100      	bne.n	8006cb0 <memset+0xa>
 8006cae:	4770      	bx	lr
 8006cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb4:	e7f9      	b.n	8006caa <memset+0x4>
	...

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
