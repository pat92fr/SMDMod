
ControlFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c3c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a060  0800a060  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a068  0800a068  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a06c  0800a06c  0001a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800a070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003578  20000034  0800a0a4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035ac  0800a0a4  000235ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc1e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003883  00000000  00000000  0003cc82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c0  00000000  00000000  00040508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  00041cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022060  00000000  00000000  000432d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000147b1  00000000  00000000  00065330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc5c4  00000000  00000000  00079ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001560a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  00156120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009dfc 	.word	0x08009dfc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08009dfc 	.word	0x08009dfc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <scale_all_sensors>:
static float present_velocity_dps = 0.0f;
static float last_setpoint_velocity_dps = 0.0f;
static uint16_t last_encoder_counter = 0;

void scale_all_sensors()
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	// scale motor current sense (unit:mA) and estimated average motor current with sign (using PWM ratio and setpoint PWM sign)
	float const a = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_A_L],regs[REG_CAL_CURRENT_SENSE_A_H]));
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <scale_all_sensors+0xa4>)
 8000520:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	4a25      	ldr	r2, [pc, #148]	; (80005bc <scale_all_sensors+0xa4>)
 8000528:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800052c:	4313      	orrs	r3, r2
 800052e:	ee07 3a90 	vmov	s15, r3
 8000532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000536:	edc7 7a01 	vstr	s15, [r7, #4]
	present_motor_current_ma = (motor_current_input_adc-motor_current_input_adc_offset)/4096.0f*a*pwm_sign*pwm_ratio;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <scale_all_sensors+0xa8>)
 800053c:	ed93 7a00 	vldr	s14, [r3]
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <scale_all_sensors+0xac>)
 8000542:	edd3 7a00 	vldr	s15, [r3]
 8000546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800054a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80005c8 <scale_all_sensors+0xb0>
 800054e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000552:	edd7 7a01 	vldr	s15, [r7, #4]
 8000556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800055a:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <scale_all_sensors+0xb4>)
 800055c:	edd3 7a00 	vldr	s15, [r3]
 8000560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <scale_all_sensors+0xb8>)
 8000566:	edd3 7a00 	vldr	s15, [r3]
 800056a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <scale_all_sensors+0xbc>)
 8000570:	edc3 7a00 	vstr	s15, [r3]

	// scale voltage (unit:0.1V)
	present_voltage_0v1 = voltage_input_adc/4096.0f*3.3f*24.0f/2.2f*10.0f*VOLTAGE_CALIBRATION;
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <scale_all_sensors+0xc0>)
 8000576:	ed93 7a00 	vldr	s14, [r3]
 800057a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80005c8 <scale_all_sensors+0xb0>
 800057e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000582:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80005dc <scale_all_sensors+0xc4>
 8000586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800058a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800058e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000592:	eddf 6a13 	vldr	s13, [pc, #76]	; 80005e0 <scale_all_sensors+0xc8>
 8000596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800059a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800059e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80005e4 <scale_all_sensors+0xcc>
 80005a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <scale_all_sensors+0xd0>)
 80005ac:	edc3 7a00 	vstr	s15, [r3]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	200000e8 	.word	0x200000e8
 80005c0:	20000058 	.word	0x20000058
 80005c4:	20000060 	.word	0x20000060
 80005c8:	45800000 	.word	0x45800000
 80005cc:	20000064 	.word	0x20000064
 80005d0:	20000068 	.word	0x20000068
 80005d4:	2000006c 	.word	0x2000006c
 80005d8:	2000005c 	.word	0x2000005c
 80005dc:	40533333 	.word	0x40533333
 80005e0:	400ccccd 	.word	0x400ccccd
 80005e4:	3f8ccccd 	.word	0x3f8ccccd
 80005e8:	20000070 	.word	0x20000070

080005ec <APP_Control_Reset>:

// called once after SW REBBOT or HW RESET, and every time entering a new control loop mode
void APP_Control_Reset()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	// reset
	entering_state = true;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <APP_Control_Reset+0x48>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
	counter = 0;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <APP_Control_Reset+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
	pid_reset(&pid_velocity);
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <APP_Control_Reset+0x50>)
 80005fe:	f001 fe5c 	bl	80022ba <pid_reset>
	pid_reset(&pid_current);
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <APP_Control_Reset+0x54>)
 8000604:	f001 fe59 	bl	80022ba <pid_reset>
	setpoint_pwm = 0.0f;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <APP_Control_Reset+0x58>)
 800060a:	f04f 0200 	mov.w	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
	setpoint_current_ma = 0.0f;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <APP_Control_Reset+0x5c>)
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
	setpoint_acceleration_dpss = 0.0f;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <APP_Control_Reset+0x60>)
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
	setpoint_velocity_dps = 0.0f;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <APP_Control_Reset+0x64>)
 8000622:	f04f 0200 	mov.w	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
	last_setpoint_velocity_dps = 0.0f;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <APP_Control_Reset+0x68>)
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000084 	.word	0x20000084
 800063c:	20000088 	.word	0x20000088
 8000640:	20000094 	.word	0x20000094
 8000644:	20000074 	.word	0x20000074
 8000648:	20000078 	.word	0x20000078
 800064c:	2000007c 	.word	0x2000007c
 8000650:	20000080 	.word	0x20000080
 8000654:	200000a4 	.word	0x200000a4

08000658 <APP_Control_Init>:

// called once after SW REBOOT or HW RESET
void APP_Control_Init()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	// reset (EWMA) filtered sensor inputs
	motor_current_input_adc = 0.0f;
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <APP_Control_Init+0x90>)
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
	voltage_input_adc = 0.0f; // NOTE : init by zero will delay the present voltage estimation by 1 ms at least
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <APP_Control_Init+0x94>)
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
	motor_current_input_adc_offset = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_B_L],regs[REG_CAL_CURRENT_SENSE_B_H]));
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <APP_Control_Init+0x98>)
 800066e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <APP_Control_Init+0x98>)
 8000676:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800067a:	4313      	orrs	r3, r2
 800067c:	ee07 3a90 	vmov	s15, r3
 8000680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <APP_Control_Init+0x9c>)
 8000686:	edc3 7a00 	vstr	s15, [r3]

	// force motor in coast
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <APP_Control_Init+0xa0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2200      	movs	r2, #0
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <APP_Control_Init+0xa0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
	// start motor PWM generation
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 800069a:	2100      	movs	r1, #0
 800069c:	4816      	ldr	r0, [pc, #88]	; (80006f8 <APP_Control_Init+0xa0>)
 800069e:	f006 fddf 	bl	8007260 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 80006a2:	2104      	movs	r1, #4
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <APP_Control_Init+0xa0>)
 80006a6:	f006 fddb 	bl	8007260 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim6);
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <APP_Control_Init+0xa4>)
 80006ac:	f006 fd14 	bl	80070d8 <HAL_TIM_Base_Start>
	// start ADC
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 80006b0:	2203      	movs	r2, #3
 80006b2:	4913      	ldr	r1, [pc, #76]	; (8000700 <APP_Control_Init+0xa8>)
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <APP_Control_Init+0xac>)
 80006b6:	f003 fbfb 	bl	8003eb0 <HAL_ADC_Start_DMA>
	// start Encoder
	HAL_TIM_IC_Start(&htim1,TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <APP_Control_Init+0xb0>)
 80006be:	f006 ff15 	bl	80074ec <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start(&htim1,TIM_CHANNEL_2);
 80006c2:	2104      	movs	r1, #4
 80006c4:	4810      	ldr	r0, [pc, #64]	; (8000708 <APP_Control_Init+0xb0>)
 80006c6:	f006 ff11 	bl	80074ec <HAL_TIM_IC_Start>

	// 2ms delay for filtered sensor inputs to stabilize
	HAL_Delay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f003 f806 	bl	80036dc <HAL_Delay>
	scale_all_sensors();
 80006d0:	f7ff ff22 	bl	8000518 <scale_all_sensors>
	HAL_Delay(1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f003 f801 	bl	80036dc <HAL_Delay>
	scale_all_sensors();
 80006da:	f7ff ff1d 	bl	8000518 <scale_all_sensors>

	// reset all state control loop variables
	APP_Control_Reset();
 80006de:	f7ff ff85 	bl	80005ec <APP_Control_Reset>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000058 	.word	0x20000058
 80006ec:	2000005c 	.word	0x2000005c
 80006f0:	200000e8 	.word	0x200000e8
 80006f4:	20000060 	.word	0x20000060
 80006f8:	200001cc 	.word	0x200001cc
 80006fc:	20002bec 	.word	0x20002bec
 8000700:	20000050 	.word	0x20000050
 8000704:	20000218 	.word	0x20000218
 8000708:	20002c38 	.word	0x20002c38

0800070c <APP_Control_Process>:

// called from main loop
void APP_Control_Process()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0a6      	sub	sp, #152	; 0x98
 8000710:	af00      	add	r7, sp, #0
	// apply 1ms period
	uint16_t current_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 8000712:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <APP_Control_Process+0x1bc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000718:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	if(current_time_us<period_us)
 800071c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000720:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000724:	4293      	cmp	r3, r2
 8000726:	f0c0 85ff 	bcc.w	8001328 <APP_Control_Process+0xc1c>
		return;
	__HAL_TIM_SET_COUNTER(&htim6,(current_time_us-period_us));
 800072a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800072e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000732:	1a9a      	subs	r2, r3, r2
 8000734:	4b64      	ldr	r3, [pc, #400]	; (80008c8 <APP_Control_Process+0x1bc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	625a      	str	r2, [r3, #36]	; 0x24

	// acquire motor current and voltage (see ADC DMA completed conversion callback)

	// scale sensor at process rate
	scale_all_sensors();
 800073a:	f7ff feed 	bl	8000518 <scale_all_sensors>

	// compute velocity from encoder
	uint16_t const present_encoder_counter = __HAL_TIM_GET_COUNTER(&htim1);
 800073e:	4b63      	ldr	r3, [pc, #396]	; (80008cc <APP_Control_Process+0x1c0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	int16_t const delta_encoder_counter = present_encoder_counter - last_encoder_counter;
 8000748:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <APP_Control_Process+0x1c4>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	float const CPR = 48.0f; // TODO ==> make a dedicated EEPROM REG
 8000758:	4b5e      	ldr	r3, [pc, #376]	; (80008d4 <APP_Control_Process+0x1c8>)
 800075a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float const REDUCT = 34.0f; // TODO ==> make a dedicated EEPROM REG
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <APP_Control_Process+0x1cc>)
 8000760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	// TODO add a radius of wheel to compute body speed, and not only motor speed
	float present_speed_dps_unfiltered = (float)delta_encoder_counter/CPR/REDUCT*360.0f*LOOP_FREQUENCY_HZ;
 8000764:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000770:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000774:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000778:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800077c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000780:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80008dc <APP_Control_Process+0x1d0>
 8000784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000788:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80008e0 <APP_Control_Process+0x1d4>
 800078c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000790:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	last_encoder_counter = present_encoder_counter;
 8000794:	4a4e      	ldr	r2, [pc, #312]	; (80008d0 <APP_Control_Process+0x1c4>)
 8000796:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800079a:	8013      	strh	r3, [r2, #0]
	present_velocity_dps = ALPHA_VELOCITY * present_speed_dps_unfiltered + (1.0f-ALPHA_VELOCITY)*present_velocity_dps;
 800079c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80007a0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80008e4 <APP_Control_Process+0x1d8>
 80007a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007a8:	4b4f      	ldr	r3, [pc, #316]	; (80008e8 <APP_Control_Process+0x1dc>)
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80008ec <APP_Control_Process+0x1e0>
 80007b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <APP_Control_Process+0x1dc>)
 80007bc:	edc3 7a00 	vstr	s15, [r3]
	if( regs[REG_INV_ROTATION_SENSOR_VALUE]==1)
 80007c0:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <APP_Control_Process+0x1e4>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d107      	bne.n	80007d8 <APP_Control_Process+0xcc>
		present_velocity_dps = -present_velocity_dps;
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <APP_Control_Process+0x1dc>)
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	eef1 7a67 	vneg.f32	s15, s15
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <APP_Control_Process+0x1dc>)
 80007d4:	edc3 7a00 	vstr	s15, [r3]

	// torque enable logic
	bool torque_enable = (regs[REG_TORQUE_ENABLE]!=0) && (regs[REG_HARDWARE_ERROR_STATUS]==0);
 80007d8:	4b45      	ldr	r3, [pc, #276]	; (80008f0 <APP_Control_Process+0x1e4>)
 80007da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <APP_Control_Process+0xe4>
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <APP_Control_Process+0x1e4>)
 80007e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <APP_Control_Process+0xe4>
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <APP_Control_Process+0xe6>
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80007f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	if(torque_enable)
 8000802:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000806:	2b00      	cmp	r3, #0
 8000808:	f000 842d 	beq.w	8001066 <APP_Control_Process+0x95a>
	{
		// modes & transitions
		// compute setpoint_pwm
		switch(current_control_mode)
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <APP_Control_Process+0x1e8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b04      	cmp	r3, #4
 8000812:	f200 838e 	bhi.w	8000f32 <APP_Control_Process+0x826>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <APP_Control_Process+0x110>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	08000831 	.word	0x08000831
 8000820:	0800087d 	.word	0x0800087d
 8000824:	0800090d 	.word	0x0800090d
 8000828:	08000ca1 	.word	0x08000ca1
 800082c:	08000e5b 	.word	0x08000e5b
		{
		case REG_CONTROL_MODE_OFF:
			if(entering_state)
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <APP_Control_Process+0x1ec>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <APP_Control_Process+0x132>
			{
				entering_state = false;
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <APP_Control_Process+0x1ec>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
			}
			// reset
			setpoint_acceleration_dpss = 0.0f;
 800083e:	4b2f      	ldr	r3, [pc, #188]	; (80008fc <APP_Control_Process+0x1f0>)
 8000840:	f04f 0200 	mov.w	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
			setpoint_velocity_dps = 0.0f;
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <APP_Control_Process+0x1f4>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <APP_Control_Process+0x1f8>)
 8000850:	f04f 0200 	mov.w	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
			setpoint_pwm = 0.0f;
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <APP_Control_Process+0x1fc>)
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_OFF)
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <APP_Control_Process+0x1e4>)
 8000860:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 835b 	beq.w	8000f20 <APP_Control_Process+0x814>
			{
				APP_Control_Reset();
 800086a:	f7ff febf 	bl	80005ec <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <APP_Control_Process+0x1e4>)
 8000870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000874:	461a      	mov	r2, r3
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <APP_Control_Process+0x1e8>)
 8000878:	601a      	str	r2, [r3, #0]
			}
			break;
 800087a:	e351      	b.n	8000f20 <APP_Control_Process+0x814>

		case REG_CONTROL_MODE_ACCELERATION_PROFIL_VELOCITY_TORQUE:
			if(entering_state)
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <APP_Control_Process+0x1ec>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <APP_Control_Process+0x17e>
			{
				entering_state = false;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <APP_Control_Process+0x1ec>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
			}
			// reset
			setpoint_acceleration_dpss = 0.0f;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <APP_Control_Process+0x1f0>)
 800088c:	f04f 0200 	mov.w	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
			setpoint_velocity_dps = 0.0f;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <APP_Control_Process+0x1f4>)
 8000894:	f04f 0200 	mov.w	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <APP_Control_Process+0x1f8>)
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			setpoint_pwm = 0.0f;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <APP_Control_Process+0x1fc>)
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_ACCELERATION_PROFIL_VELOCITY_TORQUE)
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <APP_Control_Process+0x1e4>)
 80008ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	f000 8337 	beq.w	8000f24 <APP_Control_Process+0x818>
			{
				APP_Control_Reset();
 80008b6:	f7ff fe99 	bl	80005ec <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <APP_Control_Process+0x1e4>)
 80008bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <APP_Control_Process+0x1e8>)
 80008c4:	601a      	str	r2, [r3, #0]
			}
			break;
 80008c6:	e32d      	b.n	8000f24 <APP_Control_Process+0x818>
 80008c8:	20002bec 	.word	0x20002bec
 80008cc:	20002c38 	.word	0x20002c38
 80008d0:	200000a8 	.word	0x200000a8
 80008d4:	42400000 	.word	0x42400000
 80008d8:	42080000 	.word	0x42080000
 80008dc:	43b40000 	.word	0x43b40000
 80008e0:	447a0000 	.word	0x447a0000
 80008e4:	3df5c28f 	.word	0x3df5c28f
 80008e8:	200000a0 	.word	0x200000a0
 80008ec:	3f6147ae 	.word	0x3f6147ae
 80008f0:	200000e8 	.word	0x200000e8
 80008f4:	20000004 	.word	0x20000004
 80008f8:	20000000 	.word	0x20000000
 80008fc:	2000007c 	.word	0x2000007c
 8000900:	20000080 	.word	0x20000080
 8000904:	20000078 	.word	0x20000078
 8000908:	20000074 	.word	0x20000074

		case REG_CONTROL_MODE_VELOCITY_TORQUE:
			if(entering_state)
 800090c:	4bd0      	ldr	r3, [pc, #832]	; (8000c50 <APP_Control_Process+0x544>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d02a      	beq.n	800096a <APP_Control_Process+0x25e>
			{
				entering_state = false;
 8000914:	4bce      	ldr	r3, [pc, #824]	; (8000c50 <APP_Control_Process+0x544>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 800091a:	4bce      	ldr	r3, [pc, #824]	; (8000c54 <APP_Control_Process+0x548>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8000922:	4bcc      	ldr	r3, [pc, #816]	; (8000c54 <APP_Control_Process+0x548>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				// init limit RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 800092a:	4bca      	ldr	r3, [pc, #808]	; (8000c54 <APP_Control_Process+0x548>)
 800092c:	7e1a      	ldrb	r2, [r3, #24]
 800092e:	4bc9      	ldr	r3, [pc, #804]	; (8000c54 <APP_Control_Process+0x548>)
 8000930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8000934:	4bc7      	ldr	r3, [pc, #796]	; (8000c54 <APP_Control_Process+0x548>)
 8000936:	7e5a      	ldrb	r2, [r3, #25]
 8000938:	4bc6      	ldr	r3, [pc, #792]	; (8000c54 <APP_Control_Process+0x548>)
 800093a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 800093e:	4bc5      	ldr	r3, [pc, #788]	; (8000c54 <APP_Control_Process+0x548>)
 8000940:	7e9a      	ldrb	r2, [r3, #26]
 8000942:	4bc4      	ldr	r3, [pc, #784]	; (8000c54 <APP_Control_Process+0x548>)
 8000944:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000948:	4bc2      	ldr	r3, [pc, #776]	; (8000c54 <APP_Control_Process+0x548>)
 800094a:	7eda      	ldrb	r2, [r3, #27]
 800094c:	4bc1      	ldr	r3, [pc, #772]	; (8000c54 <APP_Control_Process+0x548>)
 800094e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset
				last_setpoint_velocity_dps = 0.0f;
 8000952:	4bc1      	ldr	r3, [pc, #772]	; (8000c58 <APP_Control_Process+0x54c>)
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 800095a:	4bbe      	ldr	r3, [pc, #760]	; (8000c54 <APP_Control_Process+0x548>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 8000962:	4bbc      	ldr	r3, [pc, #752]	; (8000c54 <APP_Control_Process+0x548>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}
			{
				// limit velocity
				float goal_velocity_dps = (int16_t)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 800096a:	4bba      	ldr	r3, [pc, #744]	; (8000c54 <APP_Control_Process+0x548>)
 800096c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b21a      	sxth	r2, r3
 8000974:	4bb7      	ldr	r3, [pc, #732]	; (8000c54 <APP_Control_Process+0x548>)
 8000976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800097a:	b21b      	sxth	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	b21b      	sxth	r3, r3
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000988:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				float const max_velocity_dps = (float)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 800098c:	4bb1      	ldr	r3, [pc, #708]	; (8000c54 <APP_Control_Process+0x548>)
 800098e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	4aaf      	ldr	r2, [pc, #700]	; (8000c54 <APP_Control_Process+0x548>)
 8000996:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 800099a:	4313      	orrs	r3, r2
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				goal_velocity_dps = fconstrain(goal_velocity_dps,-max_velocity_dps,max_velocity_dps);
 80009a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80009ac:	eef1 7a67 	vneg.f32	s15, s15
 80009b0:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 80009b4:	eef0 0a67 	vmov.f32	s1, s15
 80009b8:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80009bc:	f001 fc54 	bl	8002268 <fconstrain>
 80009c0:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

				// no profil
				setpoint_velocity_dps = goal_velocity_dps;
 80009c4:	4aa5      	ldr	r2, [pc, #660]	; (8000c5c <APP_Control_Process+0x550>)
 80009c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009c8:	6013      	str	r3, [r2, #0]

				// compute velocity error error
				float const error_velocity_dps = setpoint_velocity_dps - present_velocity_dps;
 80009ca:	4ba4      	ldr	r3, [pc, #656]	; (8000c5c <APP_Control_Process+0x550>)
 80009cc:	ed93 7a00 	vldr	s14, [r3]
 80009d0:	4ba3      	ldr	r3, [pc, #652]	; (8000c60 <APP_Control_Process+0x554>)
 80009d2:	edd3 7a00 	vldr	s15, [r3]
 80009d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009da:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

				// compute current setpoint from velocity error using a PID velocity and a velocity and acceleration feed forward
				// compute current setpoint from position setpoint using a PID position and velocity/acceleration feed forwards
				float const pid_vel_kff = (float)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H]))/1000.0f;
 80009de:	4b9d      	ldr	r3, [pc, #628]	; (8000c54 <APP_Control_Process+0x548>)
 80009e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	4a9b      	ldr	r2, [pc, #620]	; (8000c54 <APP_Control_Process+0x548>)
 80009e8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80009ec:	4313      	orrs	r3, r2
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f6:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8000c64 <APP_Control_Process+0x558>
 80009fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009fe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				float const pid_acc_kff = (float)(MAKE_SHORT(regs[REG_PID_ACCELERATION_KFF_L],regs[REG_PID_ACCELERATION_KFF_H]))/100000.0f;
 8000a02:	4b94      	ldr	r3, [pc, #592]	; (8000c54 <APP_Control_Process+0x548>)
 8000a04:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	4a92      	ldr	r2, [pc, #584]	; (8000c54 <APP_Control_Process+0x548>)
 8000a0c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8000a10:	4313      	orrs	r3, r2
 8000a12:	ee07 3a90 	vmov	s15, r3
 8000a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000c68 <APP_Control_Process+0x55c>
 8000a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				float const velocity_feed_forward = pid_vel_kff * setpoint_velocity_dps;
 8000a26:	4b8d      	ldr	r3, [pc, #564]	; (8000c5c <APP_Control_Process+0x550>)
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a34:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				setpoint_acceleration_dpss = setpoint_velocity_dps - last_setpoint_velocity_dps;
 8000a38:	4b88      	ldr	r3, [pc, #544]	; (8000c5c <APP_Control_Process+0x550>)
 8000a3a:	ed93 7a00 	vldr	s14, [r3]
 8000a3e:	4b86      	ldr	r3, [pc, #536]	; (8000c58 <APP_Control_Process+0x54c>)
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a48:	4b88      	ldr	r3, [pc, #544]	; (8000c6c <APP_Control_Process+0x560>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
				float const acceleration_feed_forward = pid_acc_kff * setpoint_acceleration_dpss;
 8000a4e:	4b87      	ldr	r3, [pc, #540]	; (8000c6c <APP_Control_Process+0x560>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				last_setpoint_velocity_dps = setpoint_velocity_dps;
 8000a60:	4b7e      	ldr	r3, [pc, #504]	; (8000c5c <APP_Control_Process+0x550>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a7c      	ldr	r2, [pc, #496]	; (8000c58 <APP_Control_Process+0x54c>)
 8000a66:	6013      	str	r3, [r2, #0]
				// TODO Update REG names from position to velocity
				float const pid_vel_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8000a68:	4b7a      	ldr	r3, [pc, #488]	; (8000c54 <APP_Control_Process+0x548>)
 8000a6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	4a78      	ldr	r2, [pc, #480]	; (8000c54 <APP_Control_Process+0x548>)
 8000a72:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8000a76:	4313      	orrs	r3, r2
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a80:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8000c70 <APP_Control_Process+0x564>
 8000a84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const pid_vel_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8000a8c:	4b71      	ldr	r3, [pc, #452]	; (8000c54 <APP_Control_Process+0x548>)
 8000a8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	4a6f      	ldr	r2, [pc, #444]	; (8000c54 <APP_Control_Process+0x548>)
 8000a96:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aa4:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8000c64 <APP_Control_Process+0x558>
 8000aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000aac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				float const pid_vel_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8000ab0:	4b68      	ldr	r3, [pc, #416]	; (8000c54 <APP_Control_Process+0x548>)
 8000ab2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <APP_Control_Process+0x548>)
 8000aba:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ac8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8000ad4:	4b5f      	ldr	r3, [pc, #380]	; (8000c54 <APP_Control_Process+0x548>)
 8000ad6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	4a5d      	ldr	r2, [pc, #372]	; (8000c54 <APP_Control_Process+0x548>)
 8000ade:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8000af0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000af4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afc:	eeb0 3a67 	vmov.f32	s6, s15
 8000b00:	eddf 2a5c 	vldr	s5, [pc, #368]	; 8000c74 <APP_Control_Process+0x568>
 8000b04:	ed97 2a0c 	vldr	s4, [r7, #48]	; 0x30
 8000b08:	edd7 1a0d 	vldr	s3, [r7, #52]	; 0x34
 8000b0c:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8000b10:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8000b14:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000b18:	4857      	ldr	r0, [pc, #348]	; (8000c78 <APP_Control_Process+0x56c>)
 8000b1a:	f001 fbe4 	bl	80022e6 <pid_process_antiwindup_clamp_with_ff>
 8000b1e:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8000b22:	eddf 7a56 	vldr	s15, [pc, #344]	; 8000c7c <APP_Control_Process+0x570>
 8000b26:	ee27 7a27 	vmul.f32	s14, s14, s15
										current_limit,
										ALPHA_VELOCITY,
										velocity_feed_forward+acceleration_feed_forward
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8000b2a:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <APP_Control_Process+0x574>)
 8000b2c:	edd3 7a00 	vldr	s15, [r3]
 8000b30:	eddf 6a54 	vldr	s13, [pc, #336]	; 8000c84 <APP_Control_Process+0x578>
 8000b34:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8000b38:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8000b3c:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <APP_Control_Process+0x574>)
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8000b42:	4b4f      	ldr	r3, [pc, #316]	; (8000c80 <APP_Control_Process+0x574>)
 8000b44:	ed93 7a00 	vldr	s14, [r3]
 8000b48:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <APP_Control_Process+0x57c>)
 8000b4a:	edd3 7a00 	vldr	s15, [r3]
 8000b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <APP_Control_Process+0x548>)
 8000b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <APP_Control_Process+0x548>)
 8000b60:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000b64:	4313      	orrs	r3, r2
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000c64 <APP_Control_Process+0x558>
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <APP_Control_Process+0x548>)
 8000b7c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4a34      	ldr	r2, [pc, #208]	; (8000c54 <APP_Control_Process+0x548>)
 8000b84:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b92:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000c70 <APP_Control_Process+0x564>
 8000b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <APP_Control_Process+0x548>)
 8000ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4a2b      	ldr	r2, [pc, #172]	; (8000c54 <APP_Control_Process+0x548>)
 8000ba8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000bac:	4313      	orrs	r3, r2
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000c70 <APP_Control_Process+0x564>
 8000bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbe:	edc7 7a08 	vstr	s15, [r7, #32]
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <APP_Control_Process+0x548>)
 8000bc4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <APP_Control_Process+0x548>)
 8000bcc:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	ee07 3a90 	vmov	s15, r3
 8000bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bda:	edc7 7a07 	vstr	s15, [r7, #28]
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <APP_Control_Process+0x574>)
 8000be0:	ed93 7a00 	vldr	s14, [r3]
 8000be4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bec:	eeb0 3a67 	vmov.f32	s6, s15
 8000bf0:	eddf 2a26 	vldr	s5, [pc, #152]	; 8000c8c <APP_Control_Process+0x580>
 8000bf4:	ed97 2a07 	vldr	s4, [r7, #28]
 8000bf8:	eddf 1a24 	vldr	s3, [pc, #144]	; 8000c8c <APP_Control_Process+0x580>
 8000bfc:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8000c00:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8000c04:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000c08:	4821      	ldr	r0, [pc, #132]	; (8000c90 <APP_Control_Process+0x584>)
 8000c0a:	f001 fb6c 	bl	80022e6 <pid_process_antiwindup_clamp_with_ff>
 8000c0e:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8000c12:	eddf 7a18 	vldr	s15, [pc, #96]	; 8000c74 <APP_Control_Process+0x568>
 8000c16:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <APP_Control_Process+0x588>)
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000c98 <APP_Control_Process+0x58c>
 8000c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8000c28:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <APP_Control_Process+0x588>)
 8000c2e:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_VELOCITY_TORQUE)
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <APP_Control_Process+0x548>)
 8000c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	f000 8175 	beq.w	8000f28 <APP_Control_Process+0x81c>
			{
				APP_Control_Reset();
 8000c3e:	f7ff fcd5 	bl	80005ec <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <APP_Control_Process+0x548>)
 8000c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <APP_Control_Process+0x590>)
 8000c4c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c4e:	e16b      	b.n	8000f28 <APP_Control_Process+0x81c>
 8000c50:	20000000 	.word	0x20000000
 8000c54:	200000e8 	.word	0x200000e8
 8000c58:	200000a4 	.word	0x200000a4
 8000c5c:	20000080 	.word	0x20000080
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	447a0000 	.word	0x447a0000
 8000c68:	47c35000 	.word	0x47c35000
 8000c6c:	2000007c 	.word	0x2000007c
 8000c70:	42c80000 	.word	0x42c80000
 8000c74:	3df5c28f 	.word	0x3df5c28f
 8000c78:	20000088 	.word	0x20000088
 8000c7c:	3f75c28f 	.word	0x3f75c28f
 8000c80:	20000078 	.word	0x20000078
 8000c84:	3d23d710 	.word	0x3d23d710
 8000c88:	2000006c 	.word	0x2000006c
 8000c8c:	00000000 	.word	0x00000000
 8000c90:	20000094 	.word	0x20000094
 8000c94:	20000074 	.word	0x20000074
 8000c98:	3f6147ae 	.word	0x3f6147ae
 8000c9c:	20000004 	.word	0x20000004

		case REG_CONTROL_MODE_CURRENT:
			if(entering_state)
 8000ca0:	4ba7      	ldr	r3, [pc, #668]	; (8000f40 <APP_Control_Process+0x834>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d024      	beq.n	8000cf2 <APP_Control_Process+0x5e6>
			{
				entering_state = false;
 8000ca8:	4ba5      	ldr	r3, [pc, #660]	; (8000f40 <APP_Control_Process+0x834>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8000cae:	4ba5      	ldr	r3, [pc, #660]	; (8000f44 <APP_Control_Process+0x838>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8000cb6:	4ba3      	ldr	r3, [pc, #652]	; (8000f44 <APP_Control_Process+0x838>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8000cbe:	4ba1      	ldr	r3, [pc, #644]	; (8000f44 <APP_Control_Process+0x838>)
 8000cc0:	7e9a      	ldrb	r2, [r3, #26]
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	; (8000f44 <APP_Control_Process+0x838>)
 8000cc4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8000cc8:	4b9e      	ldr	r3, [pc, #632]	; (8000f44 <APP_Control_Process+0x838>)
 8000cca:	7eda      	ldrb	r2, [r3, #27]
 8000ccc:	4b9d      	ldr	r3, [pc, #628]	; (8000f44 <APP_Control_Process+0x838>)
 8000cce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 8000cd2:	4b9c      	ldr	r3, [pc, #624]	; (8000f44 <APP_Control_Process+0x838>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 8000cda:	4b9a      	ldr	r3, [pc, #616]	; (8000f44 <APP_Control_Process+0x838>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8000ce2:	4b98      	ldr	r3, [pc, #608]	; (8000f44 <APP_Control_Process+0x838>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8000cea:	4b96      	ldr	r3, [pc, #600]	; (8000f44 <APP_Control_Process+0x838>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			{
				float const goal_current = (int16_t)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8000cf2:	4b94      	ldr	r3, [pc, #592]	; (8000f44 <APP_Control_Process+0x838>)
 8000cf4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b91      	ldr	r3, [pc, #580]	; (8000f44 <APP_Control_Process+0x838>)
 8000cfe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d10:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				float const current_limit = (float)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
 8000d14:	4b8b      	ldr	r3, [pc, #556]	; (8000f44 <APP_Control_Process+0x838>)
 8000d16:	7e5b      	ldrb	r3, [r3, #25]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	4a8a      	ldr	r2, [pc, #552]	; (8000f44 <APP_Control_Process+0x838>)
 8000d1c:	7e12      	ldrb	r2, [r2, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				setpoint_current_ma = fconstrain(goal_current,-current_limit,current_limit);
 8000d2c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000d30:	eef1 7a67 	vneg.f32	s15, s15
 8000d34:	ed97 1a1c 	vldr	s2, [r7, #112]	; 0x70
 8000d38:	eef0 0a67 	vmov.f32	s1, s15
 8000d3c:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8000d40:	f001 fa92 	bl	8002268 <fconstrain>
 8000d44:	eef0 7a40 	vmov.f32	s15, s0
 8000d48:	4b7f      	ldr	r3, [pc, #508]	; (8000f48 <APP_Control_Process+0x83c>)
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8000d4e:	4b7e      	ldr	r3, [pc, #504]	; (8000f48 <APP_Control_Process+0x83c>)
 8000d50:	ed93 7a00 	vldr	s14, [r3]
 8000d54:	4b7d      	ldr	r3, [pc, #500]	; (8000f4c <APP_Control_Process+0x840>)
 8000d56:	edd3 7a00 	vldr	s15, [r3]
 8000d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/100.0f;
 8000d62:	4b78      	ldr	r3, [pc, #480]	; (8000f44 <APP_Control_Process+0x838>)
 8000d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	4a76      	ldr	r2, [pc, #472]	; (8000f44 <APP_Control_Process+0x838>)
 8000d6c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000d70:	4313      	orrs	r3, r2
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d7a:	eddf 6a75 	vldr	s13, [pc, #468]	; 8000f50 <APP_Control_Process+0x844>
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/1000.0f;
 8000d86:	4b6f      	ldr	r3, [pc, #444]	; (8000f44 <APP_Control_Process+0x838>)
 8000d88:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	4a6d      	ldr	r2, [pc, #436]	; (8000f44 <APP_Control_Process+0x838>)
 8000d90:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8000d94:	4313      	orrs	r3, r2
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d9e:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8000f54 <APP_Control_Process+0x848>
 8000da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8000daa:	4b66      	ldr	r3, [pc, #408]	; (8000f44 <APP_Control_Process+0x838>)
 8000dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <APP_Control_Process+0x838>)
 8000db4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000db8:	4313      	orrs	r3, r2
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dc2:	eddf 6a63 	vldr	s13, [pc, #396]	; 8000f50 <APP_Control_Process+0x844>
 8000dc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dca:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <APP_Control_Process+0x838>)
 8000dd0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	4a5b      	ldr	r2, [pc, #364]	; (8000f44 <APP_Control_Process+0x838>)
 8000dd8:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <APP_Control_Process+0x83c>)
 8000dec:	ed93 7a00 	vldr	s14, [r3]
 8000df0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df8:	eeb0 3a67 	vmov.f32	s6, s15
 8000dfc:	eddf 2a56 	vldr	s5, [pc, #344]	; 8000f58 <APP_Control_Process+0x84c>
 8000e00:	ed97 2a17 	vldr	s4, [r7, #92]	; 0x5c
 8000e04:	eddf 1a54 	vldr	s3, [pc, #336]	; 8000f58 <APP_Control_Process+0x84c>
 8000e08:	ed97 1a19 	vldr	s2, [r7, #100]	; 0x64
 8000e0c:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8000e10:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8000e14:	4851      	ldr	r0, [pc, #324]	; (8000f5c <APP_Control_Process+0x850>)
 8000e16:	f001 fa66 	bl	80022e6 <pid_process_antiwindup_clamp_with_ff>
 8000e1a:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8000e1e:	eddf 7a50 	vldr	s15, [pc, #320]	; 8000f60 <APP_Control_Process+0x854>
 8000e22:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8000e26:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <APP_Control_Process+0x858>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000f68 <APP_Control_Process+0x85c>
 8000e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8000e34:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <APP_Control_Process+0x858>)
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_CURRENT)
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <APP_Control_Process+0x838>)
 8000e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d071      	beq.n	8000f2c <APP_Control_Process+0x820>
			{
				APP_Control_Reset();
 8000e48:	f7ff fbd0 	bl	80005ec <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <APP_Control_Process+0x838>)
 8000e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <APP_Control_Process+0x860>)
 8000e56:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e58:	e068      	b.n	8000f2c <APP_Control_Process+0x820>


		case REG_CONTROL_MODE_PWM:
			if(entering_state)
 8000e5a:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <APP_Control_Process+0x834>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d022      	beq.n	8000ea8 <APP_Control_Process+0x79c>
			{
				entering_state = false;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <APP_Control_Process+0x834>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = 0;
 8000e68:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <APP_Control_Process+0x838>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = 0;
 8000e70:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <APP_Control_Process+0x838>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = 0;
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <APP_Control_Process+0x838>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = 0;
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <APP_Control_Process+0x838>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <APP_Control_Process+0x838>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <APP_Control_Process+0x838>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <APP_Control_Process+0x838>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <APP_Control_Process+0x838>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			// compute pwm setpoint from goal pwm
			{
				float const goal_pwm = (int16_t)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <APP_Control_Process+0x838>)
 8000eaa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <APP_Control_Process+0x838>)
 8000eb4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_MAX_PWM_100_L],regs[REG_MAX_PWM_100_H]));
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <APP_Control_Process+0x838>)
 8000ecc:	7edb      	ldrb	r3, [r3, #27]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <APP_Control_Process+0x838>)
 8000ed2:	7e92      	ldrb	r2, [r2, #26]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	ee07 3a90 	vmov	s15, r3
 8000eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ede:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				setpoint_pwm = fconstrain(goal_pwm,-pwm_limit,pwm_limit);
 8000ee2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000ee6:	eef1 7a67 	vneg.f32	s15, s15
 8000eea:	ed97 1a1e 	vldr	s2, [r7, #120]	; 0x78
 8000eee:	eef0 0a67 	vmov.f32	s1, s15
 8000ef2:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8000ef6:	f001 f9b7 	bl	8002268 <fconstrain>
 8000efa:	eef0 7a40 	vmov.f32	s15, s0
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <APP_Control_Process+0x858>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_PWM)
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <APP_Control_Process+0x838>)
 8000f06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d010      	beq.n	8000f30 <APP_Control_Process+0x824>
			{
				APP_Control_Reset();
 8000f0e:	f7ff fb6d 	bl	80005ec <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <APP_Control_Process+0x838>)
 8000f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <APP_Control_Process+0x860>)
 8000f1c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f1e:	e007      	b.n	8000f30 <APP_Control_Process+0x824>
			break;
 8000f20:	bf00      	nop
 8000f22:	e006      	b.n	8000f32 <APP_Control_Process+0x826>
			break;
 8000f24:	bf00      	nop
 8000f26:	e004      	b.n	8000f32 <APP_Control_Process+0x826>
			break;
 8000f28:	bf00      	nop
 8000f2a:	e002      	b.n	8000f32 <APP_Control_Process+0x826>
			break;
 8000f2c:	bf00      	nop
 8000f2e:	e000      	b.n	8000f32 <APP_Control_Process+0x826>
			break;
 8000f30:	bf00      	nop
		}

		// motor leads maybe inverted, user can reverse polarity of motor (EEPROM parameter)
		float const pwm_inv = regs[REG_INV_ROTATION_MOTOR] > 0 ? -1.0f : 1.0f;
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <APP_Control_Process+0x838>)
 8000f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d01b      	beq.n	8000f74 <APP_Control_Process+0x868>
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <APP_Control_Process+0x864>)
 8000f3e:	e01b      	b.n	8000f78 <APP_Control_Process+0x86c>
 8000f40:	20000000 	.word	0x20000000
 8000f44:	200000e8 	.word	0x200000e8
 8000f48:	20000078 	.word	0x20000078
 8000f4c:	2000006c 	.word	0x2000006c
 8000f50:	42c80000 	.word	0x42c80000
 8000f54:	447a0000 	.word	0x447a0000
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	3df5c28f 	.word	0x3df5c28f
 8000f64:	20000074 	.word	0x20000074
 8000f68:	3f6147ae 	.word	0x3f6147ae
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	bf800000 	.word	0xbf800000
 8000f74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f78:	61bb      	str	r3, [r7, #24]
		float pwm = pwm_inv * setpoint_pwm; // [-100 100]
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <APP_Control_Process+0x9a8>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f88:	edc7 7a05 	vstr	s15, [r7, #20]

		// apply pwm
		if(pwm>=0.0f)
 8000f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f98:	db32      	blt.n	8001000 <APP_Control_Process+0x8f4>
		{
			// scale PWM from [-100,+100] to CCRx
			uint16_t const CCR1 = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <APP_Control_Process+0x9ac>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	81fb      	strh	r3, [r7, #14]
			uint16_t const CCR2 = (uint16_t)((1.0f-pwm/100.0f)*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8000fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fbc:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80010bc <APP_Control_Process+0x9b0>
 8000fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <APP_Control_Process+0x9ac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	81bb      	strh	r3, [r7, #12]
			// apply
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR1);
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <APP_Control_Process+0x9ac>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	89fa      	ldrh	r2, [r7, #14]
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCR2);
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <APP_Control_Process+0x9ac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	89ba      	ldrh	r2, [r7, #12]
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ffe:	e04e      	b.n	800109e <APP_Control_Process+0x992>

		}
		else
		{
			// scale PWM from [-100,+100] to CCRx
			uint16_t const CCR1 = (uint16_t)((1.0f+pwm/100.0f)*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001000:	ed97 7a05 	vldr	s14, [r7, #20]
 8001004:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80010bc <APP_Control_Process+0x9b0>
 8001008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001010:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <APP_Control_Process+0x9ac>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	3301      	adds	r3, #1
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800102c:	ee17 3a90 	vmov	r3, s15
 8001030:	b29b      	uxth	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	827b      	strh	r3, [r7, #18]
			uint16_t const CCR2 = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <APP_Control_Process+0x9ac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	3301      	adds	r3, #1
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800104a:	ee17 3a90 	vmov	r3, s15
 800104e:	b29b      	uxth	r3, r3
 8001050:	3301      	adds	r3, #1
 8001052:	823b      	strh	r3, [r7, #16]
			// apply
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR1);
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <APP_Control_Process+0x9ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	8a7a      	ldrh	r2, [r7, #18]
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCR2);
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <APP_Control_Process+0x9ac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	8a3a      	ldrh	r2, [r7, #16]
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
 8001064:	e01b      	b.n	800109e <APP_Control_Process+0x992>
		}
	}
	else
	{
		APP_Control_Reset();
 8001066:	f7ff fac1 	bl	80005ec <APP_Control_Reset>
		// motor brake
		uint16_t const CCRx = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <APP_Control_Process+0x9ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	3301      	adds	r3, #1
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107e:	ee17 3a90 	vmov	r3, s15
 8001082:	b29b      	uxth	r3, r3
 8001084:	3301      	adds	r3, #1
 8001086:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCRx);
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <APP_Control_Process+0x9ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCRx);
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <APP_Control_Process+0x9ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// Note : This is an unipolar current sensing architecture,
	// then motor current is always positive in FORWARD and REVERSE drive phase,
	// and zero in BRAKE phases. So, the sign of the current, is build from the sign of the PWM setpoint
	pwm_sign = ( setpoint_pwm < 0.0f ) ? -1.0f : 1.0f;
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <APP_Control_Process+0x9a8>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ac:	d50a      	bpl.n	80010c4 <APP_Control_Process+0x9b8>
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <APP_Control_Process+0x9b4>)
 80010b0:	e00a      	b.n	80010c8 <APP_Control_Process+0x9bc>
 80010b2:	bf00      	nop
 80010b4:	20000074 	.word	0x20000074
 80010b8:	200001cc 	.word	0x200001cc
 80010bc:	42c80000 	.word	0x42c80000
 80010c0:	bf800000 	.word	0xbf800000
 80010c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010c8:	4a99      	ldr	r2, [pc, #612]	; (8001330 <APP_Control_Process+0xc24>)
 80010ca:	6013      	str	r3, [r2, #0]
	pwm_ratio = fabsf(setpoint_pwm)/100.0f;
 80010cc:	4b99      	ldr	r3, [pc, #612]	; (8001334 <APP_Control_Process+0xc28>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80010d6:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001338 <APP_Control_Process+0xc2c>
 80010da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010de:	4b97      	ldr	r3, [pc, #604]	; (800133c <APP_Control_Process+0xc30>)
 80010e0:	edc3 7a00 	vstr	s15, [r3]

	// live update of RAM regs
	regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(0.0f));
 80010e4:	4b96      	ldr	r3, [pc, #600]	; (8001340 <APP_Control_Process+0xc34>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(0.0f));
 80010ec:	4b94      	ldr	r3, [pc, #592]	; (8001340 <APP_Control_Process+0xc34>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)present_velocity_dps);
 80010f4:	4b93      	ldr	r3, [pc, #588]	; (8001344 <APP_Control_Process+0xc38>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	b21b      	sxth	r3, r3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b8e      	ldr	r3, [pc, #568]	; (8001340 <APP_Control_Process+0xc34>)
 8001108:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)present_velocity_dps);
 800110c:	4b8d      	ldr	r3, [pc, #564]	; (8001344 <APP_Control_Process+0xc38>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	ee17 3a90 	vmov	r3, s15
 800111a:	b21b      	sxth	r3, r3
 800111c:	121b      	asrs	r3, r3, #8
 800111e:	b21b      	sxth	r3, r3
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b87      	ldr	r3, [pc, #540]	; (8001340 <APP_Control_Process+0xc34>)
 8001124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	regs[REG_PRESENT_CURRENT_MA_L] = LOW_BYTE((int16_t)present_motor_current_ma);
 8001128:	4b87      	ldr	r3, [pc, #540]	; (8001348 <APP_Control_Process+0xc3c>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001132:	ee17 3a90 	vmov	r3, s15
 8001136:	b21b      	sxth	r3, r3
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b81      	ldr	r3, [pc, #516]	; (8001340 <APP_Control_Process+0xc34>)
 800113c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = HIGH_BYTE((int16_t)present_motor_current_ma);
 8001140:	4b81      	ldr	r3, [pc, #516]	; (8001348 <APP_Control_Process+0xc3c>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114a:	ee17 3a90 	vmov	r3, s15
 800114e:	b21b      	sxth	r3, r3
 8001150:	121b      	asrs	r3, r3, #8
 8001152:	b21b      	sxth	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b7a      	ldr	r3, [pc, #488]	; (8001340 <APP_Control_Process+0xc34>)
 8001158:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	regs[REG_PRESENT_VOLTAGE] = (uint8_t)(present_voltage_0v1);
 800115c:	4b7b      	ldr	r3, [pc, #492]	; (800134c <APP_Control_Process+0xc40>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001166:	edc7 7a01 	vstr	s15, [r7, #4]
 800116a:	793b      	ldrb	r3, [r7, #4]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b74      	ldr	r3, [pc, #464]	; (8001340 <APP_Control_Process+0xc34>)
 8001170:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 8001174:	4b72      	ldr	r3, [pc, #456]	; (8001340 <APP_Control_Process+0xc34>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	float moving_threshold = regs[REG_MOVING_THRESHOLD_DPS];
 800117c:	4b70      	ldr	r3, [pc, #448]	; (8001340 <APP_Control_Process+0xc34>)
 800117e:	7fdb      	ldrb	r3, [r3, #31]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	edc7 7a02 	vstr	s15, [r7, #8]
	regs[REG_MOVING] = ( fabs(present_velocity_dps) > moving_threshold ) ? 1 : 0;
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <APP_Control_Process+0xc38>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	eef0 7ae7 	vabs.f32	s15, s15
 8001196:	ed97 7a02 	vldr	s14, [r7, #8]
 800119a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	bf4c      	ite	mi
 80011a4:	2301      	movmi	r3, #1
 80011a6:	2300      	movpl	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b64      	ldr	r3, [pc, #400]	; (8001340 <APP_Control_Process+0xc34>)
 80011ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(0.0f));
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <APP_Control_Process+0xc34>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(0.0f));
 80011ba:	4b61      	ldr	r3, [pc, #388]	; (8001340 <APP_Control_Process+0xc34>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)setpoint_velocity_dps);
 80011c2:	4b63      	ldr	r3, [pc, #396]	; (8001350 <APP_Control_Process+0xc44>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <APP_Control_Process+0xc34>)
 80011d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)setpoint_velocity_dps);
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <APP_Control_Process+0xc44>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e4:	ee17 3a90 	vmov	r3, s15
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	121b      	asrs	r3, r3, #8
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <APP_Control_Process+0xc34>)
 80011f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)pid_position.err_integral); // DEBUG
	//regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)pid_position.err_integral); // DEBUG

	regs[REG_SETPOINT_CURRENT_MA_L] = LOW_BYTE((int16_t)setpoint_current_ma);
 80011f6:	4b57      	ldr	r3, [pc, #348]	; (8001354 <APP_Control_Process+0xc48>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	b21b      	sxth	r3, r3
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <APP_Control_Process+0xc34>)
 800120a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = HIGH_BYTE((int16_t)setpoint_current_ma);
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <APP_Control_Process+0xc48>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001218:	ee17 3a90 	vmov	r3, s15
 800121c:	b21b      	sxth	r3, r3
 800121e:	121b      	asrs	r3, r3, #8
 8001220:	b21b      	sxth	r3, r3
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <APP_Control_Process+0xc34>)
 8001226:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	regs[REG_SETPOINT_PWM_100_L] = LOW_BYTE((int16_t)setpoint_pwm);
 800122a:	4b42      	ldr	r3, [pc, #264]	; (8001334 <APP_Control_Process+0xc28>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	b21b      	sxth	r3, r3
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <APP_Control_Process+0xc34>)
 800123e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = HIGH_BYTE((int16_t)setpoint_pwm);
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <APP_Control_Process+0xc28>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124c:	ee17 3a90 	vmov	r3, s15
 8001250:	b21b      	sxth	r3, r3
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b21b      	sxth	r3, r3
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <APP_Control_Process+0xc34>)
 800125a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = LOW_BYTE((uint16_t)motor_current_input_adc);
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <APP_Control_Process+0xc4c>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <APP_Control_Process+0xc34>)
 8001272:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = HIGH_BYTE((uint16_t)motor_current_input_adc);
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <APP_Control_Process+0xc4c>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001280:	ee17 3a90 	vmov	r3, s15
 8001284:	b29b      	uxth	r3, r3
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	b29b      	uxth	r3, r3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <APP_Control_Process+0xc34>)
 800128e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = LOW_BYTE((uint16_t)motor_current_input_adc_offset);
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <APP_Control_Process+0xc50>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <APP_Control_Process+0xc34>)
 80012a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = HIGH_BYTE((uint16_t)motor_current_input_adc_offset);
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <APP_Control_Process+0xc50>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b29b      	uxth	r3, r3
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <APP_Control_Process+0xc34>)
 80012c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_POSITION_INPUT_ADC_L] = LOW_BYTE((uint16_t)__HAL_TIM_GET_COUNTER(&htim1));
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <APP_Control_Process+0xc54>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <APP_Control_Process+0xc34>)
 80012d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = HIGH_BYTE((uint16_t)__HAL_TIM_GET_COUNTER(&htim1));
 80012d4:	4b22      	ldr	r3, [pc, #136]	; (8001360 <APP_Control_Process+0xc54>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	b29b      	uxth	r3, r3
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <APP_Control_Process+0xc34>)
 80012e4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	regs[REG_VOLTAGE_INPUT_ADC_L] = LOW_BYTE((uint16_t)voltage_input_adc);
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <APP_Control_Process+0xc58>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <APP_Control_Process+0xc34>)
 80012fc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = HIGH_BYTE((uint16_t)voltage_input_adc);
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <APP_Control_Process+0xc58>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130a:	ee17 3a90 	vmov	r3, s15
 800130e:	b29b      	uxth	r3, r3
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b29b      	uxth	r3, r3
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <APP_Control_Process+0xc34>)
 8001318:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// steps
	++counter;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <APP_Control_Process+0xc5c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <APP_Control_Process+0xc5c>)
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e000      	b.n	800132a <APP_Control_Process+0xc1e>
		return;
 8001328:	bf00      	nop
}
 800132a:	3798      	adds	r7, #152	; 0x98
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000064 	.word	0x20000064
 8001334:	20000074 	.word	0x20000074
 8001338:	42c80000 	.word	0x42c80000
 800133c:	20000068 	.word	0x20000068
 8001340:	200000e8 	.word	0x200000e8
 8001344:	200000a0 	.word	0x200000a0
 8001348:	2000006c 	.word	0x2000006c
 800134c:	20000070 	.word	0x20000070
 8001350:	20000080 	.word	0x20000080
 8001354:	20000078 	.word	0x20000078
 8001358:	20000058 	.word	0x20000058
 800135c:	20000060 	.word	0x20000060
 8001360:	20002c38 	.word	0x20002c38
 8001364:	2000005c 	.word	0x2000005c
 8001368:	20000084 	.word	0x20000084

0800136c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d159      	bne.n	8001430 <HAL_ADC_ConvCpltCallback+0xc4>
	{
		// Filter (EWMA) position and voltage ADC samples
		voltage_input_adc = ALPHA_VOLTAGE * (float)(ADC_DMA[2]) + (1.0f-ALPHA_VOLTAGE) * voltage_input_adc;
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <HAL_ADC_ConvCpltCallback+0xd0>)
 800137e:	889b      	ldrh	r3, [r3, #4]
 8001380:	b29b      	uxth	r3, r3
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001440 <HAL_ADC_ConvCpltCallback+0xd4>
 800138e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001448 <HAL_ADC_ConvCpltCallback+0xdc>
 800139c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_ADC_ConvCpltCallback+0xd8>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
		// TIM4 is 40KHz, motor PWM is 20KHz
		// So ADC is triggered twice per motor PWM period by TIM4
		// We will measure ON and OFF instant motor current

		// In FORWARD or REVERSE DRIVE phases, PWM is ON, counter decreases
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_ADC_ConvCpltCallback+0xe0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b10      	cmp	r3, #16
 80013b6:	d117      	bne.n	80013e8 <HAL_ADC_ConvCpltCallback+0x7c>
		{
			// filter motor current
			motor_current_input_adc = ALPHA_CURRENT_SENSE*(float)(ADC_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE)*motor_current_input_adc;
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_ADC_ConvCpltCallback+0xd0>)
 80013ba:	885b      	ldrh	r3, [r3, #2]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001440 <HAL_ADC_ConvCpltCallback+0xd4>
 80013ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_ADC_ConvCpltCallback+0xe4>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001448 <HAL_ADC_ConvCpltCallback+0xdc>
 80013d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_ADC_ConvCpltCallback+0xe4>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
 80013e6:	e01e      	b.n	8001426 <HAL_ADC_ConvCpltCallback+0xba>
		}
		// In BRAKE phase, PWM is OFF, counter increases
		else
		{
			// self-calibrate ADC offset (b) when motor is stopped
			if(setpoint_pwm==0.0f)
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <HAL_ADC_ConvCpltCallback+0xe8>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d116      	bne.n	8001426 <HAL_ADC_ConvCpltCallback+0xba>
			{
				motor_current_input_adc_offset = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset;
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_ADC_ConvCpltCallback+0xd0>)
 80013fa:	885b      	ldrh	r3, [r3, #2]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001406:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001458 <HAL_ADC_ConvCpltCallback+0xec>
 800140a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_ConvCpltCallback+0xf0>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001460 <HAL_ADC_ConvCpltCallback+0xf4>
 8001418:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800141c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_ADC_ConvCpltCallback+0xf0>)
 8001422:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		// restart ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 8001426:	2203      	movs	r2, #3
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <HAL_ADC_ConvCpltCallback+0xd0>)
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <HAL_ADC_ConvCpltCallback+0xcc>)
 800142c:	f002 fd40 	bl	8003eb0 <HAL_ADC_Start_DMA>
	}
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000218 	.word	0x20000218
 800143c:	20000050 	.word	0x20000050
 8001440:	3d4ccccd 	.word	0x3d4ccccd
 8001444:	2000005c 	.word	0x2000005c
 8001448:	3f733333 	.word	0x3f733333
 800144c:	200001cc 	.word	0x200001cc
 8001450:	20000058 	.word	0x20000058
 8001454:	20000074 	.word	0x20000074
 8001458:	3a83126f 	.word	0x3a83126f
 800145c:	20000060 	.word	0x20000060
 8001460:	3f7fbe77 	.word	0x3f7fbe77

08001464 <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8001468:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800146a:	225c      	movs	r2, #92	; 0x5c
 800146c:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 800146e:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001470:	2200      	movs	r2, #0
 8001472:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 8001474:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001476:	2200      	movs	r2, #0
 8001478:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800147c:	2201      	movs	r2, #1
 800147e:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001482:	2203      	movs	r2, #3
 8001484:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001488:	2200      	movs	r2, #0
 800148a:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 800148c:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800148e:	221e      	movs	r2, #30
 8001490:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8001492:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001494:	2200      	movs	r2, #0
 8001496:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800149a:	2296      	movs	r2, #150	; 0x96
 800149c:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 800149e:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014a6:	2220      	movs	r2, #32
 80014a8:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014ac:	2203      	movs	r2, #3
 80014ae:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014b8:	221f      	movs	r2, #31
 80014ba:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 80014bc:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014be:	22fa      	movs	r2, #250	; 0xfa
 80014c0:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 80014c8:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014ca:	2232      	movs	r2, #50	; 0x32
 80014cc:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014d6:	223c      	movs	r2, #60	; 0x3c
 80014d8:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014dc:	222d      	movs	r2, #45	; 0x2d
 80014de:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014e2:	225f      	movs	r2, #95	; 0x5f
 80014e4:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014e8:	2205      	movs	r2, #5
 80014ea:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 80014ec:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 80014f4:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80014fe:	2224      	movs	r2, #36	; 0x24
 8001500:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001506:	2232      	movs	r2, #50	; 0x32
 8001508:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001516:	226e      	movs	r2, #110	; 0x6e
 8001518:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800151e:	220f      	movs	r2, #15
 8001520:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001526:	22b4      	movs	r2, #180	; 0xb4
 8001528:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800153e:	22d0      	movs	r2, #208	; 0xd0
 8001540:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001546:	2207      	movs	r2, #7
 8001548:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800155e:	2210      	movs	r2, #16
 8001560:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001566:	220e      	movs	r2, #14
 8001568:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800156e:	220a      	movs	r2, #10
 8001570:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800157e:	220a      	movs	r2, #10
 8001580:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800158e:	22f4      	movs	r2, #244	; 0xf4
 8001590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015ae:	2214      	movs	r2, #20
 80015b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015be:	22b8      	movs	r2, #184	; 0xb8
 80015c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015c6:	220b      	movs	r2, #11
 80015c8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <factory_reset_eeprom_regs+0x184>)
 80015e0:	f000 f8de 	bl	80017a0 <eeprom_store>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200000e8 	.word	0x200000e8

080015ec <load_eeprom_regs>:


void load_eeprom_regs()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80015f0:	2140      	movs	r1, #64	; 0x40
 80015f2:	4802      	ldr	r0, [pc, #8]	; (80015fc <load_eeprom_regs+0x10>)
 80015f4:	f000 f8c2 	bl	800177c <eeprom_restore>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000e8 	.word	0x200000e8

08001600 <store_eeprom_regs>:

void store_eeprom_regs()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4802      	ldr	r0, [pc, #8]	; (8001610 <store_eeprom_regs+0x10>)
 8001608:	f000 f8ca 	bl	80017a0 <eeprom_store>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000e8 	.word	0x200000e8

08001614 <reset_ram_regs>:

void reset_ram_regs()
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 8001618:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <reset_ram_regs+0x140>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 8001620:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <reset_ram_regs+0x140>)
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = REG_CONTROL_MODE_PWM;
 8001628:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <reset_ram_regs+0x140>)
 800162a:	2204      	movs	r2, #4
 800162c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <reset_ram_regs+0x140>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 8001638:	4b46      	ldr	r3, [pc, #280]	; (8001754 <reset_ram_regs+0x140>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001640:	4b44      	ldr	r3, [pc, #272]	; (8001754 <reset_ram_regs+0x140>)
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001648:	4b42      	ldr	r3, [pc, #264]	; (8001754 <reset_ram_regs+0x140>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <reset_ram_regs+0x140>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001658:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <reset_ram_regs+0x140>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 8001660:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <reset_ram_regs+0x140>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 8001668:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <reset_ram_regs+0x140>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <reset_ram_regs+0x140>)
 8001672:	2200      	movs	r2, #0
 8001674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 8001678:	4b36      	ldr	r3, [pc, #216]	; (8001754 <reset_ram_regs+0x140>)
 800167a:	2200      	movs	r2, #0
 800167c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <reset_ram_regs+0x140>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <reset_ram_regs+0x140>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <reset_ram_regs+0x140>)
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <reset_ram_regs+0x140>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <reset_ram_regs+0x140>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <reset_ram_regs+0x140>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <reset_ram_regs+0x140>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <reset_ram_regs+0x140>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <reset_ram_regs+0x140>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <reset_ram_regs+0x140>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <reset_ram_regs+0x140>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <reset_ram_regs+0x140>)
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <reset_ram_regs+0x140>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <reset_ram_regs+0x140>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <reset_ram_regs+0x140>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = 0;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <reset_ram_regs+0x140>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = 0;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <reset_ram_regs+0x140>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = 0;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <reset_ram_regs+0x140>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = 0;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <reset_ram_regs+0x140>)
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	regs[REG_POSITION_INPUT_ADC_L] = 0;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <reset_ram_regs+0x140>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = 0;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <reset_ram_regs+0x140>)
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	regs[REG_VOLTAGE_INPUT_ADC_L] = 0;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <reset_ram_regs+0x140>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = 0;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <reset_ram_regs+0x140>)
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <reset_ram_regs+0x140>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <reset_ram_regs+0x140>)
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200000e8 	.word	0x200000e8

08001758 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <eeprom_empty+0x20>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	bf0c      	ite	eq
 8001766:	2301      	moveq	r3, #1
 8001768:	2300      	movne	r3, #0
 800176a:	b2db      	uxtb	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	0801f800 	.word	0x0801f800

0800177c <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <eeprom_restore+0x20>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f008 fb21 	bl	8009dd4 <memcpy>
	return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	0801f800 	.word	0x0801f800

080017a0 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b08d      	sub	sp, #52	; 0x34
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80017aa:	f004 f89b 	bl	80058e4 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	233f      	movs	r3, #63	; 0x3f
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 80017c2:	f107 0210 	add.w	r2, r7, #16
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 f97d 	bl	8005acc <HAL_FLASHEx_Erase>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 80017d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 80017e0:	f004 f8a2 	bl	8005928 <HAL_FLASH_Lock>
			return result;
 80017e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80017e8:	e03b      	b.n	8001862 <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 80017ea:	a422      	add	r4, pc, #136	; (adr r4, 8001874 <eeprom_store+0xd4>)
 80017ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80017f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f8:	e02c      	b.n	8001854 <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	18d1      	adds	r1, r2, r3
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	2208      	movs	r2, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fae4 	bl	8009dd4 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <eeprom_store+0xd0>)
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	18d1      	adds	r1, r2, r3
 8001812:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	2000      	movs	r0, #0
 800181c:	f004 f80c 	bl	8005838 <HAL_FLASH_Program>
 8001820:	4603      	mov	r3, r0
 8001822:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 8001826:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00f      	beq.n	800184e <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 800182e:	f004 f895 	bl	800595c <HAL_FLASH_GetError>
 8001832:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 800183a:	f004 f875 	bl	8005928 <HAL_FLASH_Lock>
					return error;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e00e      	b.n	8001862 <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 8001844:	f004 f870 	bl	8005928 <HAL_FLASH_Lock>
				return result;
 8001848:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800184c:	e009      	b.n	8001862 <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	3308      	adds	r3, #8
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3ce      	bcc.n	80017fa <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 800185c:	f004 f864 	bl	8005928 <HAL_FLASH_Lock>
	return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3734      	adds	r7, #52	; 0x34
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	0801f800 	.word	0x0801f800
 8001874:	deadbeef 	.word	0xdeadbeef
 8001878:	00000000 	.word	0x00000000

0800187c <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <stop_blinking+0x3c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2100      	movs	r1, #0
 800188a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <stop_blinking+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2100      	movs	r1, #0
 8001894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <stop_blinking+0x44>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <stop_blinking+0x48>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2100      	movs	r1, #0
 80018a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200000ac 	.word	0x200000ac
 80018bc:	200000b4 	.word	0x200000b4
 80018c0:	200000bc 	.word	0x200000bc
 80018c4:	200000c0 	.word	0x200000c0

080018c8 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e011      	b.n	80018fc <HAL_Led_Init+0x34>
    {
        stop_blinking(id);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffcf 	bl	800187c <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_Led_Init+0x44>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_Led_Init+0x48>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f004 fba9 	bl	8006048 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3301      	adds	r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	ddea      	ble.n	80018d8 <HAL_Led_Init+0x10>
    }
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	08009e28 	.word	0x08009e28
 8001910:	08009e24 	.word	0x08009e24

08001914 <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 800191a:	f001 fed3 	bl	80036c4 <HAL_GetTick>
 800191e:	6038      	str	r0, [r7, #0]
    int id = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	e063      	b.n	80019f2 <HAL_Led_Process+0xde>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 800192a:	4a35      	ldr	r2, [pc, #212]	; (8001a00 <HAL_Led_Process+0xec>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d05a      	beq.n	80019ec <HAL_Led_Process+0xd8>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 8001936:	4a33      	ldr	r2, [pc, #204]	; (8001a04 <HAL_Led_Process+0xf0>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	4930      	ldr	r1, [pc, #192]	; (8001a00 <HAL_Led_Process+0xec>)
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001946:	4413      	add	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d34e      	bcc.n	80019ec <HAL_Led_Process+0xd8>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 800194e:	4a2e      	ldr	r2, [pc, #184]	; (8001a08 <HAL_Led_Process+0xf4>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001956:	4a2d      	ldr	r2, [pc, #180]	; (8001a0c <HAL_Led_Process+0xf8>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195e:	4619      	mov	r1, r3
 8001960:	f004 fb5a 	bl	8006018 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_Led_Process+0x70>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 800196a:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_Led_Process+0xf4>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_Led_Process+0xf8>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800197a:	2201      	movs	r2, #1
 800197c:	4619      	mov	r1, r3
 800197e:	f004 fb63 	bl	8006048 <HAL_GPIO_WritePin>
 8001982:	e00b      	b.n	800199c <HAL_Led_Process+0x88>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_Led_Process+0xf4>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_Led_Process+0xf8>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	f004 fb56 	bl	8006048 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_Led_Process+0xf0>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	4916      	ldr	r1, [pc, #88]	; (8001a00 <HAL_Led_Process+0xec>)
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019ac:	441a      	add	r2, r3
 80019ae:	4915      	ldr	r1, [pc, #84]	; (8001a04 <HAL_Led_Process+0xf0>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 80019b6:	4a16      	ldr	r2, [pc, #88]	; (8001a10 <HAL_Led_Process+0xfc>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d011      	beq.n	80019ec <HAL_Led_Process+0xd8>
                {
                    --blinkin_counter[id];
 80019c8:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_Led_Process+0x100>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	4910      	ldr	r1, [pc, #64]	; (8001a14 <HAL_Led_Process+0x100>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_Led_Process+0x100>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_Led_Process+0xd8>
                    {
                        stop_blinking(id);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff48 	bl	800187c <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	dd98      	ble.n	800192a <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200000ac 	.word	0x200000ac
 8001a04:	200000c0 	.word	0x200000c0
 8001a08:	08009e28 	.word	0x08009e28
 8001a0c:	08009e24 	.word	0x08009e24
 8001a10:	200000bc 	.word	0x200000bc
 8001a14:	200000b4 	.word	0x200000b4

08001a18 <HAL_Led_Set>:

void HAL_Led_Set(int id)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff2b 	bl	800187c <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_Led_Set+0x30>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Led_Set+0x34>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f004 fb05 	bl	8006048 <HAL_GPIO_WritePin>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	08009e28 	.word	0x08009e28
 8001a4c:	08009e24 	.word	0x08009e24

08001a50 <HAL_Led_Reset>:

void HAL_Led_Reset(int id)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff0f 	bl	800187c <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8001a5e:	4a08      	ldr	r2, [pc, #32]	; (8001a80 <HAL_Led_Reset+0x30>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Led_Reset+0x34>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4619      	mov	r1, r3
 8001a72:	f004 fae9 	bl	8006048 <HAL_GPIO_WritePin>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08009e28 	.word	0x08009e28
 8001a84:	08009e24 	.word	0x08009e24

08001a88 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 8001a94:	4919      	ldr	r1, [pc, #100]	; (8001afc <HAL_Led_Blink+0x74>)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_Led_Blink+0x24>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_Led_Blink+0x26>
 8001aac:	2300      	movs	r3, #0
 8001aae:	4914      	ldr	r1, [pc, #80]	; (8001b00 <HAL_Led_Blink+0x78>)
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2d9      	uxtb	r1, r3
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_Led_Blink+0x7c>)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	460a      	mov	r2, r1
 8001aca:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 8001acc:	f001 fdfa 	bl	80036c4 <HAL_GetTick>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_Led_Blink+0x80>)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_Led_Blink+0x84>)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <HAL_Led_Blink+0x88>)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aea:	2200      	movs	r2, #0
 8001aec:	4619      	mov	r1, r3
 8001aee:	f004 faab 	bl	8006048 <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200000ac 	.word	0x200000ac
 8001b00:	200000b4 	.word	0x200000b4
 8001b04:	200000bc 	.word	0x200000bc
 8001b08:	200000c0 	.word	0x200000c0
 8001b0c:	08009e28 	.word	0x08009e28
 8001b10:	08009e24 	.word	0x08009e24

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1a:	f001 fd6e 	bl	80035fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f871 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f000 fb1f 	bl	8002164 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b26:	f000 fae3 	bl	80020f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b2a:	f000 f8d5 	bl	8001cd8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b2e:	f000 f969 	bl	8001e04 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001b32:	f000 f9d7 	bl	8001ee4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001b36:	f000 fa8f 	bl	8002058 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001b3a:	f000 fa57 	bl	8001fec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_Led_Init();
 8001b3e:	f7ff fec3 	bl	80018c8 <HAL_Led_Init>
	HAL_Led_Blink(LED0,10,150);
 8001b42:	2296      	movs	r2, #150	; 0x96
 8001b44:	210a      	movs	r1, #10
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff ff9e 	bl	8001a88 <HAL_Led_Blink>
	HAL_Led_Blink(LED1,10,150);
 8001b4c:	2296      	movs	r2, #150	; 0x96
 8001b4e:	210a      	movs	r1, #10
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff ff99 	bl	8001a88 <HAL_Led_Blink>
	HAL_Serial_Init_Half_Duplex(
 8001b56:	2300      	movs	r3, #0
 8001b58:	9303      	str	r3, [sp, #12]
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <main+0xe0>)
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001b6e:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <main+0xe4>)
 8001b70:	4822      	ldr	r0, [pc, #136]	; (8001bfc <main+0xe8>)
 8001b72:	f000 ffc1 	bl	8002af8 <HAL_Serial_Init_Half_Duplex>
		GPIO_PIN_RESET,
		UART2_RX_DIR_GPIO_Port,
		UART2_RX_DIR_Pin,
		GPIO_PIN_RESET
	);
	if(eeprom_empty())
 8001b76:	f7ff fdef 	bl	8001758 <eeprom_empty>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <main+0x70>
		factory_reset_eeprom_regs();
 8001b80:	f7ff fc70 	bl	8001464 <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8001b84:	f7ff fd32 	bl	80015ec <load_eeprom_regs>
	reset_ram_regs();
 8001b88:	f7ff fd44 	bl	8001614 <reset_ram_regs>
	APP_Control_Init();
 8001b8c:	f7fe fd64 	bl	8000658 <APP_Control_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t start_time = HAL_GetTick();
 8001b90:	f001 fd98 	bl	80036c4 <HAL_GetTick>
 8001b94:	6078      	str	r0, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8001b96:	f001 fd95 	bl	80036c4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <main+0xb4>
	{
		if(regs[REG_LED]==0)
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <main+0xec>)
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d103      	bne.n	8001bb8 <main+0xa4>
		{
			HAL_Led_Reset(LED0);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff ff4d 	bl	8001a50 <HAL_Led_Reset>
 8001bb6:	e007      	b.n	8001bc8 <main+0xb4>
		}
		else if(regs[REG_LED]==1)
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <main+0xec>)
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <main+0xb4>
		{
			HAL_Led_Set(LED0);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff ff28 	bl	8001a18 <HAL_Led_Set>
		}
	}
	HAL_Led_Process();
 8001bc8:	f7ff fea4 	bl	8001914 <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8001bcc:	e008      	b.n	8001be0 <main+0xcc>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8001bce:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <main+0xe4>)
 8001bd0:	f001 f858 	bl	8002c84 <HAL_Serial_GetChar>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fe22 	bl	8002824 <packet_handler>
	while(HAL_Serial_Available(&serial))
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <main+0xe4>)
 8001be2:	f001 f81f 	bl	8002c24 <HAL_Serial_Available>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <main+0xba>
	}

	// regulation
	APP_Control_Process();
 8001bec:	f7fe fd8e 	bl	800070c <APP_Control_Process>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8001bf0:	e7d1      	b.n	8001b96 <main+0x82>
 8001bf2:	bf00      	nop
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	200002e4 	.word	0x200002e4
 8001bfc:	20002c84 	.word	0x20002c84
 8001c00:	200000e8 	.word	0x200000e8

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0a4      	sub	sp, #144	; 0x90
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c0e:	2238      	movs	r2, #56	; 0x38
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f008 f8e9 	bl	8009dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2244      	movs	r2, #68	; 0x44
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f008 f8db 	bl	8009dea <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c38:	f004 fa1e 	bl	8006078 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c46:	2340      	movs	r3, #64	; 0x40
 8001c48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c52:	2304      	movs	r3, #4
 8001c54:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001c56:	234b      	movs	r3, #75	; 0x4b
 8001c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 fab4 	bl	80061e0 <HAL_RCC_OscConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001c7e:	f000 faef 	bl	8002260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2303      	movs	r3, #3
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f004 fdb7 	bl	8006810 <HAL_RCC_ClockConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ca8:	f000 fada 	bl	8002260 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8001cac:	f248 0302 	movw	r3, #32770	; 0x8002
 8001cb0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cb6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 ffc2 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cca:	f000 fac9 	bl	8002260 <Error_Handler>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3790      	adds	r7, #144	; 0x90
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2220      	movs	r2, #32
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 f87a 	bl	8009dea <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001cf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d20:	2208      	movs	r2, #8
 8001d22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d32:	2203      	movs	r2, #3
 8001d34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d36:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d40:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d64:	4824      	ldr	r0, [pc, #144]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d66:	f001 ff1b 	bl	8003ba0 <HAL_ADC_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001d70:	f000 fa76 	bl	8002260 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	481e      	ldr	r0, [pc, #120]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001d80:	f003 f8b8 	bl	8004ef4 <HAL_ADCEx_MultiModeConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001d8a:	f000 fa69 	bl	8002260 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <MX_ADC1_Init+0x124>)
 8001d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d92:	2306      	movs	r3, #6
 8001d94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d9a:	237f      	movs	r3, #127	; 0x7f
 8001d9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4813      	ldr	r0, [pc, #76]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001dac:	f002 fb6c 	bl	8004488 <HAL_ADC_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001db6:	f000 fa53 	bl	8002260 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dba:	230c      	movs	r3, #12
 8001dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001dc4:	f002 fb60 	bl	8004488 <HAL_ADC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001dce:	f000 fa47 	bl	8002260 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_ADC1_Init+0x128>)
 8001dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dd6:	2312      	movs	r3, #18
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_ADC1_Init+0x120>)
 8001de0:	f002 fb52 	bl	8004488 <HAL_ADC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001dea:	f000 fa39 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	; 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000218 	.word	0x20000218
 8001dfc:	04300002 	.word	0x04300002
 8001e00:	2a000400 	.word	0x2a000400

08001e04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09a      	sub	sp, #104	; 0x68
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e0e:	2224      	movs	r2, #36	; 0x24
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f007 ffe9 	bl	8009dea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2234      	movs	r2, #52	; 0x34
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f007 ffdd 	bl	8009dea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e30:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <MX_TIM1_Init+0xdc>)
 8001e34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e60:	2300      	movs	r3, #0
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e64:	2301      	movs	r3, #1
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e70:	2300      	movs	r3, #0
 8001e72:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e74:	2301      	movs	r3, #1
 8001e76:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e84:	4619      	mov	r1, r3
 8001e86:	4815      	ldr	r0, [pc, #84]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001e88:	f005 fc26 	bl	80076d8 <HAL_TIM_Encoder_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001e92:	f000 f9e5 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ea2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001eaa:	f006 fc97 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001eb4:	f000 f9d4 	bl	8002260 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_TIM1_Init+0xd8>)
 8001ec6:	f006 fd0b 	bl	80088e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001ed0:	f000 f9c6 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	3768      	adds	r7, #104	; 0x68
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20002c38 	.word	0x20002c38
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f18:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <MX_TIM4_Init+0x104>)
 8001f1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f24:	2220      	movs	r2, #32
 8001f26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3749;
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f2a:	f640 62a5 	movw	r2, #3749	; 0xea5
 8001f2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f3c:	4829      	ldr	r0, [pc, #164]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f3e:	f005 f873 	bl	8007028 <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f48:	f000 f98a 	bl	8002260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4822      	ldr	r0, [pc, #136]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f5a:	f005 fef3 	bl	8007d44 <HAL_TIM_ConfigClockSource>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001f64:	f000 f97c 	bl	8002260 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f68:	481e      	ldr	r0, [pc, #120]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f6a:	f005 f917 	bl	800719c <HAL_TIM_PWM_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001f74:	f000 f974 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001f88:	f006 fc28 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f92:	f000 f965 	bl	8002260 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f96:	2360      	movs	r3, #96	; 0x60
 8001f98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001fae:	f005 fdb9 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001fb8:	f000 f952 	bl	8002260 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001fc8:	f005 fdac 	bl	8007b24 <HAL_TIM_PWM_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001fd2:	f000 f945 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fd6:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <MX_TIM4_Init+0x100>)
 8001fd8:	f001 f96e 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 8001fdc:	bf00      	nop
 8001fde:	3738      	adds	r7, #56	; 0x38
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200001cc 	.word	0x200001cc
 8001fe8:	40000800 	.word	0x40000800

08001fec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_TIM6_Init+0x64>)
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <MX_TIM6_Init+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 149;
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_TIM6_Init+0x64>)
 8002004:	2295      	movs	r2, #149	; 0x95
 8002006:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_TIM6_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_TIM6_Init+0x64>)
 8002010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002014:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_TIM6_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM6_Init+0x64>)
 800201e:	f005 f803 	bl	8007028 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002028:	f000 f91a 	bl	8002260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM6_Init+0x64>)
 800203a:	f006 fbcf 	bl	80087dc <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002044:	f000 f90c 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20002bec 	.word	0x20002bec
 8002054:	40001000 	.word	0x40001000

08002058 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 800205e:	4a23      	ldr	r2, [pc, #140]	; (80020ec <MX_USART2_UART_Init+0x94>)
 8002060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 80020a2:	f006 fd03 	bl	8008aac <HAL_UART_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020ac:	f000 f8d8 	bl	8002260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b0:	2100      	movs	r1, #0
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 80020b4:	f007 fd85 	bl	8009bc2 <HAL_UARTEx_SetTxFifoThreshold>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020be:	f000 f8cf 	bl	8002260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c2:	2100      	movs	r1, #0
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 80020c6:	f007 fdba 	bl	8009c3e <HAL_UARTEx_SetRxFifoThreshold>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020d0:	f000 f8c6 	bl	8002260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_USART2_UART_Init+0x90>)
 80020d6:	f007 fd3b 	bl	8009b50 <HAL_UARTEx_DisableFifoMode>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020e0:	f000 f8be 	bl	8002260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20002c84 	.word	0x20002c84
 80020ec:	40004400 	.word	0x40004400

080020f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_DMA_Init+0x70>)
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <MX_DMA_Init+0x70>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6493      	str	r3, [r2, #72]	; 0x48
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <MX_DMA_Init+0x70>)
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_DMA_Init+0x70>)
 8002110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <MX_DMA_Init+0x70>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6493      	str	r3, [r2, #72]	; 0x48
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_DMA_Init+0x70>)
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	200b      	movs	r0, #11
 800212c:	f003 f871 	bl	8005212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002130:	200b      	movs	r0, #11
 8002132:	f003 f888 	bl	8005246 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	200c      	movs	r0, #12
 800213c:	f003 f869 	bl	8005212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002140:	200c      	movs	r0, #12
 8002142:	f003 f880 	bl	8005246 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	200d      	movs	r0, #13
 800214c:	f003 f861 	bl	8005212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002150:	200d      	movs	r0, #13
 8002152:	f003 f878 	bl	8005246 <HAL_NVIC_EnableIRQ>

}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <MX_GPIO_Init+0xf4>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <MX_GPIO_Init+0xf4>)
 8002180:	f043 0320 	orr.w	r3, r3, #32
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <MX_GPIO_Init+0xf4>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <MX_GPIO_Init+0xf4>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a30      	ldr	r2, [pc, #192]	; (8002258 <MX_GPIO_Init+0xf4>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <MX_GPIO_Init+0xf4>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <MX_GPIO_Init+0xf4>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <MX_GPIO_Init+0xf4>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <MX_GPIO_Init+0xf4>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED0_Pin|UART2_TX_DIR_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f003 ff3c 	bl	8006048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_RX_DIR_GPIO_Port, UART2_RX_DIR_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2110      	movs	r1, #16
 80021d4:	4821      	ldr	r0, [pc, #132]	; (800225c <MX_GPIO_Init+0xf8>)
 80021d6:	f003 ff37 	bl	8006048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_FAULT_Pin */
  GPIO_InitStruct.Pin = GPIO_FAULT_Pin;
 80021da:	2302      	movs	r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_FAULT_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	4619      	mov	r1, r3
 80021ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f0:	f003 fd90 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 80021f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021fa:	2311      	movs	r3, #17
 80021fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002210:	f003 fd80 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_TX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_TX_DIR_Pin;
 8002214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_TX_DIR_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	f003 fd70 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_RX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_RX_DIR_Pin;
 8002234:	2310      	movs	r3, #16
 8002236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_RX_DIR_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	4619      	mov	r1, r3
 800224a:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_GPIO_Init+0xf8>)
 800224c:	f003 fd62 	bl	8005d14 <HAL_GPIO_Init>

}
 8002250:	bf00      	nop
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	48000400 	.word	0x48000400

08002260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002264:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002266:	e7fe      	b.n	8002266 <Error_Handler+0x6>

08002268 <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002272:	edc7 0a02 	vstr	s1, [r7, #8]
 8002276:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 800227a:	ed97 7a03 	vldr	s14, [r7, #12]
 800227e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	d501      	bpl.n	8002290 <fconstrain+0x28>
        return min;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	e00b      	b.n	80022a8 <fconstrain+0x40>
    else if(x>max)
 8002290:	ed97 7a03 	vldr	s14, [r7, #12]
 8002294:	edd7 7a01 	vldr	s15, [r7, #4]
 8002298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	dd01      	ble.n	80022a6 <fconstrain+0x3e>
        return max;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	e000      	b.n	80022a8 <fconstrain+0x40>
    else
        return x;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	ee07 3a90 	vmov	s15, r3
}
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08e      	sub	sp, #56	; 0x38
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	61f8      	str	r0, [r7, #28]
 80022ee:	ed87 0a06 	vstr	s0, [r7, #24]
 80022f2:	edc7 0a05 	vstr	s1, [r7, #20]
 80022f6:	ed87 1a04 	vstr	s2, [r7, #16]
 80022fa:	edc7 1a03 	vstr	s3, [r7, #12]
 80022fe:	ed87 2a02 	vstr	s4, [r7, #8]
 8002302:	edc7 2a01 	vstr	s5, [r7, #4]
 8002306:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ed97 7a06 	vldr	s14, [r7, #24]
 8002314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002318:	edd7 7a01 	vldr	s15, [r7, #4]
 800231c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002324:	edd7 7a01 	vldr	s15, [r7, #4]
 8002328:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 8002346:	ed97 7a05 	vldr	s14, [r7, #20]
 800234a:	edd7 7a06 	vldr	s15, [r7, #24]
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002362:	ed97 7a03 	vldr	s14, [r7, #12]
 8002366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 800236e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002372:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800237a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	ed97 7a00 	vldr	s14, [r7]
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 800238e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002392:	eef1 7a67 	vneg.f32	s15, s15
 8002396:	ed97 1a02 	vldr	s2, [r7, #8]
 800239a:	eef0 0a67 	vmov.f32	s1, s15
 800239e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80023a2:	f7ff ff61 	bl	8002268 <fconstrain>
 80023a6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 80023aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80023ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80023b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 80023c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80023c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	bfac      	ite	ge
 80023da:	2301      	movge	r3, #1
 80023dc:	2300      	movlt	r3, #0
 80023de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 80023e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <pid_process_antiwindup_clamp_with_ff+0x110>
 80023ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <pid_process_antiwindup_clamp_with_ff+0x110>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <pid_process_antiwindup_clamp_with_ff+0x112>
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80023fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8002408:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800240c:	f083 0301 	eor.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	ed93 7a01 	vldr	s14, [r3, #4]
 800241c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002420:	edd7 7a06 	vldr	s15, [r7, #24]
 8002424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	ee07 3a90 	vmov	s15, r3
}
 8002438:	eeb0 0a67 	vmov.f32	s0, s15
 800243c:	3738      	adds	r7, #56	; 0x38
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	80fb      	strh	r3, [r7, #6]
 8002450:	4613      	mov	r3, r2
 8002452:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8002454:	2300      	movs	r3, #0
 8002456:	81fb      	strh	r3, [r7, #14]
 8002458:	e019      	b.n	800248e <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	b29a      	uxth	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	1c59      	adds	r1, r3, #1
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	4053      	eors	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	b21a      	sxth	r2, r3
 8002478:	89bb      	ldrh	r3, [r7, #12]
 800247a:	490a      	ldr	r1, [pc, #40]	; (80024a4 <updateCRC+0x60>)
 800247c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002480:	b21b      	sxth	r3, r3
 8002482:	4053      	eors	r3, r2
 8002484:	b21b      	sxth	r3, r3
 8002486:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	3301      	adds	r3, #1
 800248c:	81fb      	strh	r3, [r7, #14]
 800248e:	89fa      	ldrh	r2, [r7, #14]
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3e1      	bcc.n	800245a <updateCRC+0x16>
  }

  return crc_accum;
 8002496:	88fb      	ldrh	r3, [r7, #6]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	08009e30 	.word	0x08009e30

080024a8 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <packet_encapsulate+0x84>)
 80024b2:	22ff      	movs	r2, #255	; 0xff
 80024b4:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <packet_encapsulate+0x84>)
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <packet_encapsulate+0x84>)
 80024be:	22fd      	movs	r2, #253	; 0xfd
 80024c0:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <packet_encapsulate+0x84>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <packet_encapsulate+0x88>)
 80024ca:	78da      	ldrb	r2, [r3, #3]
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <packet_encapsulate+0x84>)
 80024ce:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3302      	adds	r3, #2
 80024d6:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <packet_encapsulate+0x84>)
 80024de:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <packet_encapsulate+0x84>)
 80024ea:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 80024ec:	89fb      	ldrh	r3, [r7, #14]
 80024ee:	3305      	adds	r3, #5
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	490d      	ldr	r1, [pc, #52]	; (800252c <packet_encapsulate+0x84>)
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff ffa4 	bl	8002444 <updateCRC>
 80024fc:	4603      	mov	r3, r0
 80024fe:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3307      	adds	r3, #7
 8002504:	89ba      	ldrh	r2, [r7, #12]
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	4a08      	ldr	r2, [pc, #32]	; (800252c <packet_encapsulate+0x84>)
 800250a:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 800250c:	89bb      	ldrh	r3, [r7, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3308      	adds	r3, #8
 8002516:	b2d1      	uxtb	r1, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <packet_encapsulate+0x84>)
 800251a:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3309      	adds	r3, #9
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <packet_encapsulate+0x8c>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000315c 	.word	0x2000315c
 8002530:	200000e8 	.word	0x200000e8
 8002534:	200000d0 	.word	0x200000d0

08002538 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 800253e:	4b9b      	ldr	r3, [pc, #620]	; (80027ac <instruction_handler+0x274>)
 8002540:	79db      	ldrb	r3, [r3, #7]
 8002542:	2b06      	cmp	r3, #6
 8002544:	f000 811a 	beq.w	800277c <instruction_handler+0x244>
 8002548:	2b06      	cmp	r3, #6
 800254a:	dc06      	bgt.n	800255a <instruction_handler+0x22>
 800254c:	2b02      	cmp	r3, #2
 800254e:	d02b      	beq.n	80025a8 <instruction_handler+0x70>
 8002550:	2b03      	cmp	r3, #3
 8002552:	d070      	beq.n	8002636 <instruction_handler+0xfe>
 8002554:	2b01      	cmp	r3, #1
 8002556:	d00a      	beq.n	800256e <instruction_handler+0x36>
 8002558:	e148      	b.n	80027ec <instruction_handler+0x2b4>
 800255a:	2b82      	cmp	r3, #130	; 0x82
 800255c:	f000 8157 	beq.w	800280e <instruction_handler+0x2d6>
 8002560:	2b83      	cmp	r3, #131	; 0x83
 8002562:	f000 80b5 	beq.w	80026d0 <instruction_handler+0x198>
 8002566:	2b08      	cmp	r3, #8
 8002568:	f000 812a 	beq.w	80027c0 <instruction_handler+0x288>
 800256c:	e13e      	b.n	80027ec <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800256e:	4b90      	ldr	r3, [pc, #576]	; (80027b0 <instruction_handler+0x278>)
 8002570:	2255      	movs	r2, #85	; 0x55
 8002572:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002574:	4b8e      	ldr	r3, [pc, #568]	; (80027b0 <instruction_handler+0x278>)
 8002576:	2200      	movs	r2, #0
 8002578:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 800257a:	4b8e      	ldr	r3, [pc, #568]	; (80027b4 <instruction_handler+0x27c>)
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <instruction_handler+0x278>)
 8002580:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8002582:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <instruction_handler+0x27c>)
 8002584:	785a      	ldrb	r2, [r3, #1]
 8002586:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <instruction_handler+0x278>)
 8002588:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 800258a:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <instruction_handler+0x27c>)
 800258c:	789a      	ldrb	r2, [r3, #2]
 800258e:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <instruction_handler+0x278>)
 8002590:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 8002592:	2005      	movs	r0, #5
 8002594:	f7ff ff88 	bl	80024a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002598:	4b87      	ldr	r3, [pc, #540]	; (80027b8 <instruction_handler+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4984      	ldr	r1, [pc, #528]	; (80027b0 <instruction_handler+0x278>)
 80025a0:	4886      	ldr	r0, [pc, #536]	; (80027bc <instruction_handler+0x284>)
 80025a2:	f000 fbbf 	bl	8002d24 <HAL_Serial_Write>
		}
		break;
 80025a6:	e133      	b.n	8002810 <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <instruction_handler+0x274>)
 80025aa:	7a5b      	ldrb	r3, [r3, #9]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <instruction_handler+0x274>)
 80025b2:	7a1b      	ldrb	r3, [r3, #8]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80025bc:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <instruction_handler+0x274>)
 80025be:	7adb      	ldrb	r3, [r3, #11]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	4b79      	ldr	r3, [pc, #484]	; (80027ac <instruction_handler+0x274>)
 80025c6:	7a9b      	ldrb	r3, [r3, #10]
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	2b81      	cmp	r3, #129	; 0x81
 80025d4:	d81e      	bhi.n	8002614 <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <instruction_handler+0x278>)
 80025d8:	2255      	movs	r2, #85	; 0x55
 80025da:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80025dc:	4b74      	ldr	r3, [pc, #464]	; (80027b0 <instruction_handler+0x278>)
 80025de:	2200      	movs	r2, #0
 80025e0:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80025e2:	2300      	movs	r3, #0
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e6:	e00b      	b.n	8002600 <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	441a      	add	r2, r3
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	3309      	adds	r3, #9
 80025f2:	4970      	ldr	r1, [pc, #448]	; (80027b4 <instruction_handler+0x27c>)
 80025f4:	5c89      	ldrb	r1, [r1, r2]
 80025f6:	4a6e      	ldr	r2, [pc, #440]	; (80027b0 <instruction_handler+0x278>)
 80025f8:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	3301      	adds	r3, #1
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002600:	883b      	ldrh	r3, [r7, #0]
 8002602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002604:	429a      	cmp	r2, r3
 8002606:	d3ef      	bcc.n	80025e8 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 8002608:	883b      	ldrh	r3, [r7, #0]
 800260a:	3302      	adds	r3, #2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff4b 	bl	80024a8 <packet_encapsulate>
 8002612:	e008      	b.n	8002626 <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <instruction_handler+0x278>)
 8002616:	2255      	movs	r2, #85	; 0x55
 8002618:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <instruction_handler+0x278>)
 800261c:	2207      	movs	r2, #7
 800261e:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8002620:	2002      	movs	r0, #2
 8002622:	f7ff ff41 	bl	80024a8 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002626:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <instruction_handler+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4960      	ldr	r1, [pc, #384]	; (80027b0 <instruction_handler+0x278>)
 800262e:	4863      	ldr	r0, [pc, #396]	; (80027bc <instruction_handler+0x284>)
 8002630:	f000 fb78 	bl	8002d24 <HAL_Serial_Write>
		}
		break;
 8002634:	e0ec      	b.n	8002810 <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <instruction_handler+0x274>)
 8002638:	7a5b      	ldrb	r3, [r3, #9]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b21a      	sxth	r2, r3
 800263e:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <instruction_handler+0x274>)
 8002640:	7a1b      	ldrb	r3, [r3, #8]
 8002642:	b21b      	sxth	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b21b      	sxth	r3, r3
 8002648:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 800264a:	4b58      	ldr	r3, [pc, #352]	; (80027ac <instruction_handler+0x274>)
 800264c:	799b      	ldrb	r3, [r3, #6]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	b21a      	sxth	r2, r3
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <instruction_handler+0x274>)
 8002654:	795b      	ldrb	r3, [r3, #5]
 8002656:	b21b      	sxth	r3, r3
 8002658:	4313      	orrs	r3, r2
 800265a:	b21b      	sxth	r3, r3
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b05      	subs	r3, #5
 8002660:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	2b81      	cmp	r3, #129	; 0x81
 8002666:	d822      	bhi.n	80026ae <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
 800266c:	e00c      	b.n	8002688 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f103 020a 	add.w	r2, r3, #10
 8002674:	88f9      	ldrh	r1, [r7, #6]
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	440b      	add	r3, r1
 800267a:	494c      	ldr	r1, [pc, #304]	; (80027ac <instruction_handler+0x274>)
 800267c:	5c89      	ldrb	r1, [r1, r2]
 800267e:	4a4d      	ldr	r2, [pc, #308]	; (80027b4 <instruction_handler+0x27c>)
 8002680:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	3301      	adds	r3, #1
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
 8002688:	88bb      	ldrh	r3, [r7, #4]
 800268a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800268c:	429a      	cmp	r2, r3
 800268e:	d3ee      	bcc.n	800266e <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	2b3f      	cmp	r3, #63	; 0x3f
 8002694:	d801      	bhi.n	800269a <instruction_handler+0x162>
				{
					store_eeprom_regs();
 8002696:	f7fe ffb3 	bl	8001600 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800269a:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <instruction_handler+0x278>)
 800269c:	2255      	movs	r2, #85	; 0x55
 800269e:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80026a0:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <instruction_handler+0x278>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7ff fefe 	bl	80024a8 <packet_encapsulate>
 80026ac:	e008      	b.n	80026c0 <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <instruction_handler+0x278>)
 80026b0:	2255      	movs	r2, #85	; 0x55
 80026b2:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 80026b4:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <instruction_handler+0x278>)
 80026b6:	2207      	movs	r2, #7
 80026b8:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7ff fef4 	bl	80024a8 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80026c0:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <instruction_handler+0x280>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	493a      	ldr	r1, [pc, #232]	; (80027b0 <instruction_handler+0x278>)
 80026c8:	483c      	ldr	r0, [pc, #240]	; (80027bc <instruction_handler+0x284>)
 80026ca:	f000 fb2b 	bl	8002d24 <HAL_Serial_Write>
		}
		break;
 80026ce:	e09f      	b.n	8002810 <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <instruction_handler+0x274>)
 80026d2:	799b      	ldrb	r3, [r3, #6]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <instruction_handler+0x274>)
 80026da:	795b      	ldrb	r3, [r3, #5]
 80026dc:	b21b      	sxth	r3, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b07      	subs	r3, #7
 80026e6:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <instruction_handler+0x274>)
 80026ea:	7a5b      	ldrb	r3, [r3, #9]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <instruction_handler+0x274>)
 80026f2:	7a1b      	ldrb	r3, [r3, #8]
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <instruction_handler+0x274>)
 80026fe:	7adb      	ldrb	r3, [r3, #11]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <instruction_handler+0x274>)
 8002704:	7a92      	ldrb	r2, [r2, #10]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 800270a:	8bfa      	ldrh	r2, [r7, #30]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	3301      	adds	r3, #1
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <instruction_handler+0x27c>)
 8002718:	78db      	ldrb	r3, [r3, #3]
 800271a:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	e027      	b.n	8002772 <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3301      	adds	r3, #1
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	330c      	adds	r3, #12
 800272e:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <instruction_handler+0x274>)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	429a      	cmp	r2, r3
 8002740:	d114      	bne.n	800276c <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	e00d      	b.n	8002764 <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	4413      	add	r3, r2
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	8bb9      	ldrh	r1, [r7, #28]
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	440b      	add	r3, r1
 8002756:	4915      	ldr	r1, [pc, #84]	; (80027ac <instruction_handler+0x274>)
 8002758:	5c89      	ldrb	r1, [r1, r2]
 800275a:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <instruction_handler+0x27c>)
 800275c:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	3301      	adds	r3, #1
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	6a3a      	ldr	r2, [r7, #32]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	429a      	cmp	r2, r3
 800276a:	d3ed      	bcc.n	8002748 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	3301      	adds	r3, #1
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	8afb      	ldrh	r3, [r7, #22]
 8002774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002776:	429a      	cmp	r2, r3
 8002778:	d3d3      	bcc.n	8002722 <instruction_handler+0x1ea>
				}
			}
		}
		break;
 800277a:	e049      	b.n	8002810 <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 800277c:	f7fe fe72 	bl	8001464 <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <instruction_handler+0x278>)
 8002782:	2255      	movs	r2, #85	; 0x55
 8002784:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <instruction_handler+0x278>)
 8002788:	2200      	movs	r2, #0
 800278a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 800278c:	2002      	movs	r0, #2
 800278e:	f7ff fe8b 	bl	80024a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <instruction_handler+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	4905      	ldr	r1, [pc, #20]	; (80027b0 <instruction_handler+0x278>)
 800279a:	4808      	ldr	r0, [pc, #32]	; (80027bc <instruction_handler+0x284>)
 800279c:	f000 fac2 	bl	8002d24 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f000 ff9b 	bl	80036dc <HAL_Delay>
			HAL_NVIC_SystemReset();
 80027a6:	f002 fd5c 	bl	8005262 <HAL_NVIC_SystemReset>
		}
		break;
 80027aa:	e031      	b.n	8002810 <instruction_handler+0x2d8>
 80027ac:	20002d10 	.word	0x20002d10
 80027b0:	2000315c 	.word	0x2000315c
 80027b4:	200000e8 	.word	0x200000e8
 80027b8:	200000d0 	.word	0x200000d0
 80027bc:	200002e4 	.word	0x200002e4
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <instruction_handler+0x2e0>)
 80027c2:	2255      	movs	r2, #85	; 0x55
 80027c4:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <instruction_handler+0x2e0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 80027cc:	2002      	movs	r0, #2
 80027ce:	f7ff fe6b 	bl	80024a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <instruction_handler+0x2e4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	490f      	ldr	r1, [pc, #60]	; (8002818 <instruction_handler+0x2e0>)
 80027da:	4811      	ldr	r0, [pc, #68]	; (8002820 <instruction_handler+0x2e8>)
 80027dc:	f000 faa2 	bl	8002d24 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	f000 ff7b 	bl	80036dc <HAL_Delay>
			HAL_NVIC_SystemReset();
 80027e6:	f002 fd3c 	bl	8005262 <HAL_NVIC_SystemReset>
		}
		break;
 80027ea:	e011      	b.n	8002810 <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <instruction_handler+0x2e0>)
 80027ee:	2255      	movs	r2, #85	; 0x55
 80027f0:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <instruction_handler+0x2e0>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 80027f8:	2002      	movs	r0, #2
 80027fa:	f7ff fe55 	bl	80024a8 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <instruction_handler+0x2e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <instruction_handler+0x2e0>)
 8002806:	4806      	ldr	r0, [pc, #24]	; (8002820 <instruction_handler+0x2e8>)
 8002808:	f000 fa8c 	bl	8002d24 <HAL_Serial_Write>
		break;
 800280c:	e000      	b.n	8002810 <instruction_handler+0x2d8>
		break;
 800280e:	bf00      	nop
		// nope
	}
}
 8002810:	bf00      	nop
 8002812:	3730      	adds	r7, #48	; 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000315c 	.word	0x2000315c
 800281c:	200000d0 	.word	0x200000d0
 8002820:	200002e4 	.word	0x200002e4

08002824 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 800282e:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <packet_handler+0x21c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b09      	cmp	r3, #9
 8002834:	f200 8100 	bhi.w	8002a38 <packet_handler+0x214>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <packet_handler+0x1c>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002869 	.word	0x08002869
 8002844:	0800287f 	.word	0x0800287f
 8002848:	080028af 	.word	0x080028af
 800284c:	080028cb 	.word	0x080028cb
 8002850:	080028e7 	.word	0x080028e7
 8002854:	08002909 	.word	0x08002909
 8002858:	08002917 	.word	0x08002917
 800285c:	0800294f 	.word	0x0800294f
 8002860:	0800297d 	.word	0x0800297d
 8002864:	08002999 	.word	0x08002999
	{
	case HEADER1:
		if(c==0xFF)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	f040 80e1 	bne.w	8002a32 <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8002870:	4a74      	ldr	r2, [pc, #464]	; (8002a44 <packet_handler+0x220>)
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <packet_handler+0x21c>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800287c:	e0d9      	b.n	8002a32 <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	2bff      	cmp	r3, #255	; 0xff
 8002882:	d106      	bne.n	8002892 <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8002884:	4a6f      	ldr	r2, [pc, #444]	; (8002a44 <packet_handler+0x220>)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <packet_handler+0x21c>)
 800288c:	2202      	movs	r2, #2
 800288e:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8002890:	e0d2      	b.n	8002a38 <packet_handler+0x214>
		else if(c==0xFD)
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2bfd      	cmp	r3, #253	; 0xfd
 8002896:	d106      	bne.n	80028a6 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8002898:	4a6a      	ldr	r2, [pc, #424]	; (8002a44 <packet_handler+0x220>)
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 800289e:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <packet_handler+0x21c>)
 80028a0:	2203      	movs	r2, #3
 80028a2:	701a      	strb	r2, [r3, #0]
		break;
 80028a4:	e0c8      	b.n	8002a38 <packet_handler+0x214>
			packet_state = HEADER1;
 80028a6:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <packet_handler+0x21c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
		break;
 80028ac:	e0c4      	b.n	8002a38 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2bfd      	cmp	r3, #253	; 0xfd
 80028b2:	d106      	bne.n	80028c2 <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 80028b4:	4a63      	ldr	r2, [pc, #396]	; (8002a44 <packet_handler+0x220>)
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 80028ba:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <packet_handler+0x21c>)
 80028bc:	2203      	movs	r2, #3
 80028be:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80028c0:	e0ba      	b.n	8002a38 <packet_handler+0x214>
			packet_state = HEADER1;
 80028c2:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <packet_handler+0x21c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
		break;
 80028c8:	e0b6      	b.n	8002a38 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 80028d0:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <packet_handler+0x220>)
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <packet_handler+0x21c>)
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80028dc:	e0ac      	b.n	8002a38 <packet_handler+0x214>
			packet_state = HEADER1;
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <packet_handler+0x21c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
		break;
 80028e4:	e0a8      	b.n	8002a38 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	2bfc      	cmp	r3, #252	; 0xfc
 80028ea:	d902      	bls.n	80028f2 <packet_handler+0xce>
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2bfe      	cmp	r3, #254	; 0xfe
 80028f0:	d106      	bne.n	8002900 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 80028f2:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <packet_handler+0x220>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 80028f8:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <packet_handler+0x21c>)
 80028fa:	2205      	movs	r2, #5
 80028fc:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80028fe:	e09b      	b.n	8002a38 <packet_handler+0x214>
			packet_state = HEADER1;
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <packet_handler+0x21c>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
		break;
 8002906:	e097      	b.n	8002a38 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <packet_handler+0x220>)
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <packet_handler+0x21c>)
 8002910:	2206      	movs	r2, #6
 8002912:	701a      	strb	r2, [r3, #0]
		break;
 8002914:	e090      	b.n	8002a38 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 8002916:	4a4b      	ldr	r2, [pc, #300]	; (8002a44 <packet_handler+0x220>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <packet_handler+0x220>)
 800291e:	799b      	ldrb	r3, [r3, #6]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	4a48      	ldr	r2, [pc, #288]	; (8002a44 <packet_handler+0x220>)
 8002924:	7952      	ldrb	r2, [r2, #5]
 8002926:	4313      	orrs	r3, r2
 8002928:	3b02      	subs	r3, #2
 800292a:	4a47      	ldr	r2, [pc, #284]	; (8002a48 <packet_handler+0x224>)
 800292c:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 800292e:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <packet_handler+0x224>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002936:	d806      	bhi.n	8002946 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <packet_handler+0x21c>)
 800293a:	2207      	movs	r2, #7
 800293c:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <packet_handler+0x228>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8002944:	e078      	b.n	8002a38 <packet_handler+0x214>
			packet_state = HEADER1;
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <packet_handler+0x21c>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
		break;
 800294c:	e074      	b.n	8002a38 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <packet_handler+0x228>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	493c      	ldr	r1, [pc, #240]	; (8002a44 <packet_handler+0x220>)
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <packet_handler+0x228>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	4a3b      	ldr	r2, [pc, #236]	; (8002a4c <packet_handler+0x228>)
 8002960:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <packet_handler+0x224>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3b01      	subs	r3, #1
 8002968:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <packet_handler+0x224>)
 800296a:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <packet_handler+0x224>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d160      	bne.n	8002a36 <packet_handler+0x212>
			packet_state = CRC1;
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <packet_handler+0x21c>)
 8002976:	2208      	movs	r2, #8
 8002978:	701a      	strb	r2, [r3, #0]
		break;
 800297a:	e05c      	b.n	8002a36 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <packet_handler+0x228>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4930      	ldr	r1, [pc, #192]	; (8002a44 <packet_handler+0x220>)
 8002982:	79fa      	ldrb	r2, [r7, #7]
 8002984:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <packet_handler+0x228>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <packet_handler+0x228>)
 800298e:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <packet_handler+0x21c>)
 8002992:	2209      	movs	r2, #9
 8002994:	701a      	strb	r2, [r3, #0]
		break;
 8002996:	e04f      	b.n	8002a38 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <packet_handler+0x228>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4929      	ldr	r1, [pc, #164]	; (8002a44 <packet_handler+0x220>)
 800299e:	79fa      	ldrb	r2, [r7, #7]
 80029a0:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <packet_handler+0x228>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <packet_handler+0x220>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <packet_handler+0x228>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	4923      	ldr	r1, [pc, #140]	; (8002a44 <packet_handler+0x220>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21b      	sxth	r3, r3
 80029be:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 80029c0:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <packet_handler+0x228>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	491d      	ldr	r1, [pc, #116]	; (8002a44 <packet_handler+0x220>)
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff fd38 	bl	8002444 <updateCRC>
 80029d4:	4603      	mov	r3, r0
 80029d6:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 80029d8:	89ba      	ldrh	r2, [r7, #12]
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10c      	bne.n	80029fa <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <packet_handler+0x220>)
 80029e2:	791a      	ldrb	r2, [r3, #4]
 80029e4:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <packet_handler+0x22c>)
 80029e6:	78db      	ldrb	r3, [r3, #3]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d003      	beq.n	80029f4 <packet_handler+0x1d0>
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <packet_handler+0x220>)
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	2bfe      	cmp	r3, #254	; 0xfe
 80029f2:	d11a      	bne.n	8002a2a <packet_handler+0x206>
				instruction_handler();
 80029f4:	f7ff fda0 	bl	8002538 <instruction_handler>
 80029f8:	e017      	b.n	8002a2a <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <packet_handler+0x22c>)
 80029fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a00:	3301      	adds	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <packet_handler+0x22c>)
 8002a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <packet_handler+0x230>)
 8002a0c:	2255      	movs	r2, #85	; 0x55
 8002a0e:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <packet_handler+0x230>)
 8002a12:	2203      	movs	r2, #3
 8002a14:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8002a16:	2002      	movs	r0, #2
 8002a18:	f7ff fd46 	bl	80024a8 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <packet_handler+0x234>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	490c      	ldr	r1, [pc, #48]	; (8002a54 <packet_handler+0x230>)
 8002a24:	480d      	ldr	r0, [pc, #52]	; (8002a5c <packet_handler+0x238>)
 8002a26:	f000 f97d 	bl	8002d24 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <packet_handler+0x21c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
		break;
 8002a30:	e002      	b.n	8002a38 <packet_handler+0x214>
		break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <packet_handler+0x214>
		break;
 8002a36:	bf00      	nop
	}
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200000d4 	.word	0x200000d4
 8002a44:	20002d10 	.word	0x20002d10
 8002a48:	200000cc 	.word	0x200000cc
 8002a4c:	200000c8 	.word	0x200000c8
 8002a50:	200000e8 	.word	0x200000e8
 8002a54:	2000315c 	.word	0x2000315c
 8002a58:	200000d0 	.word	0x200000d0
 8002a5c:	200002e4 	.word	0x200002e4

08002a60 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e032      	b.n	8002ad6 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_UART_ErrorCallback+0x90>)
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d124      	bne.n	8002acc <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <HAL_UART_ErrorCallback+0x90>)
 8002a88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4917      	ldr	r1, [pc, #92]	; (8002af0 <HAL_UART_ErrorCallback+0x90>)
 8002a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a96:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8002a9a:	3210      	adds	r2, #16
 8002a9c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002aa0:	3310      	adds	r3, #16
 8002aa2:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <HAL_UART_ErrorCallback+0x90>)
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_UART_ErrorCallback+0x90>)
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002abe:	3310      	adds	r3, #16
 8002ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f006 f8c1 	bl	8008c4c <HAL_UART_Receive_DMA>
		   break;
 8002aca:	e00b      	b.n	8002ae4 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a06      	ldr	r2, [pc, #24]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_UART_ErrorCallback+0x8c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_UART_ErrorCallback+0x94>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1c5      	bne.n	8002a70 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200000e0 	.word	0x200000e0
 8002af0:	200000d8 	.word	0x200000d8
 8002af4:	200000dc 	.word	0x200000dc

08002af8 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8002b06:	4b45      	ldr	r3, [pc, #276]	; (8002c1c <HAL_Serial_Init_Half_Duplex+0x124>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	4943      	ldr	r1, [pc, #268]	; (8002c1c <HAL_Serial_Init_Half_Duplex+0x124>)
 8002b0e:	600a      	str	r2, [r1, #0]
 8002b10:	4943      	ldr	r1, [pc, #268]	; (8002c20 <HAL_Serial_Init_Half_Duplex+0x128>)
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002b24:	3304      	adds	r3, #4
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002b30:	3308      	adds	r3, #8
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8002b48:	3210      	adds	r2, #16
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002b50:	3310      	adds	r3, #16
 8002b52:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002b5e:	3310      	adds	r3, #16
 8002b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b64:	4619      	mov	r1, r3
 8002b66:	f006 f871 	bl	8008c4c <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002b70:	3314      	adds	r3, #20
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002b88:	331c      	adds	r3, #28
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002b94:	331e      	adds	r3, #30
 8002b96:	7e3a      	ldrb	r2, [r7, #24]
 8002b98:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bac:	3324      	adds	r3, #36	; 0x24
 8002bae:	8c3a      	ldrh	r2, [r7, #32]
 8002bb0:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bb8:	3326      	adds	r3, #38	; 0x26
 8002bba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bbe:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bd0:	331c      	adds	r3, #28
 8002bd2:	8819      	ldrh	r1, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bda:	331e      	adds	r3, #30
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	f003 fa2d 	bl	8006048 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bf4:	3320      	adds	r3, #32
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002bfe:	3324      	adds	r3, #36	; 0x24
 8002c00:	8819      	ldrh	r1, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002c08:	3326      	adds	r3, #38	; 0x26
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f003 fa1b 	bl	8006048 <HAL_GPIO_WritePin>
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200000dc 	.word	0x200000dc
 8002c20:	200000d8 	.word	0x200000d8

08002c24 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_Serial_Available+0x14>
        return 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e01f      	b.n	8002c78 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c3e:	3310      	adds	r3, #16
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	6852      	ldr	r2, [r2, #4]
 8002c4a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8002c4e:	4413      	add	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002c58:	3310      	adds	r3, #16
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d303      	bcc.n	8002c6e <HAL_Serial_Available+0x4a>
        return head-tail;
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	e004      	b.n	8002c78 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_Serial_GetChar+0x14>
        return 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e03f      	b.n	8002d18 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c9e:	3310      	adds	r3, #16
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	6852      	ldr	r2, [r2, #4]
 8002caa:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002cb8:	3310      	adds	r3, #16
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d027      	beq.n	8002d16 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ccc:	3310      	adds	r3, #16
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	1c51      	adds	r1, r2, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002cd8:	3310      	adds	r3, #16
 8002cda:	6019      	str	r1, [r3, #0]
 8002cdc:	7813      	ldrb	r3, [r2, #0]
 8002cde:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ce6:	3310      	adds	r3, #16
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d30b      	bcc.n	8002d12 <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002d00:	3310      	adds	r3, #16
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002d0e:	3310      	adds	r3, #16
 8002d10:	601a      	str	r2, [r3, #0]
        return c;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	e000      	b.n	8002d18 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_Serial_Write+0x18>
        return 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e09a      	b.n	8002e72 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d42:	3304      	adds	r3, #4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4403      	add	r3, r0
 8002d54:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002d58:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d60:	3304      	adds	r3, #4
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	019b      	lsls	r3, r3, #6
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3304      	adds	r3, #4
 8002d72:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f007 f82a 	bl	8009dd4 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d86:	3304      	adds	r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d96:	3304      	adds	r3, #4
 8002d98:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002da0:	330c      	adds	r3, #12
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d163      	bne.n	8002e70 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002dae:	330c      	adds	r3, #12
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002dba:	3314      	adds	r3, #20
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002dc8:	3318      	adds	r3, #24
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002dd2:	331c      	adds	r3, #28
 8002dd4:	8819      	ldrh	r1, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ddc:	331e      	adds	r3, #30
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f003 f931 	bl	8006048 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002dec:	3320      	adds	r3, #32
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	8819      	ldrh	r1, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002e00:	3326      	adds	r3, #38	; 0x26
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f003 f91a 	bl	8006048 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e1e:	3308      	adds	r3, #8
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	019b      	lsls	r3, r3, #6
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e36:	3308      	adds	r3, #8
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	019b      	lsls	r3, r3, #6
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002e4a:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4621      	mov	r1, r4
 8002e52:	f005 fe7b 	bl	8008b4c <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}
	...

08002e7c <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8002e84:	4b71      	ldr	r3, [pc, #452]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e0d0      	b.n	800302e <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6f      	ldr	r2, [pc, #444]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f040 80c2 	bne.w	8003024 <HAL_UART_TxCpltCallback+0x1a8>
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6a      	ldr	r2, [pc, #424]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002eae:	330c      	adds	r3, #12
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	f040 80b6 	bne.w	8003024 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b60      	ldr	r3, [pc, #384]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4960      	ldr	r1, [pc, #384]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002ed0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ed4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002ed8:	3308      	adds	r3, #8
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d04a      	beq.n	8002f76 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8002ee0:	4b5a      	ldr	r3, [pc, #360]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5a      	ldr	r2, [pc, #360]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8002eea:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8002eec:	4b57      	ldr	r3, [pc, #348]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002ef2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ef6:	4b55      	ldr	r3, [pc, #340]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f04:	3308      	adds	r3, #8
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	019b      	lsls	r3, r3, #6
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8002f14:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002f1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f1e:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	019b      	lsls	r3, r3, #6
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002f3e:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	4621      	mov	r1, r4
 8002f46:	f005 fe01 	bl	8008b4c <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 8002f4a:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a40      	ldr	r2, [pc, #256]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f58:	3308      	adds	r3, #8
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	493b      	ldr	r1, [pc, #236]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f70:	3308      	adds	r3, #8
 8002f72:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 8002f74:	e064      	b.n	8003040 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 8002f76:	4b35      	ldr	r3, [pc, #212]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a35      	ldr	r2, [pc, #212]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f80:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002f84:	330c      	adds	r3, #12
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 8002f8a:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002f98:	3314      	adds	r3, #20
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d04f      	beq.n	8003040 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fae:	3318      	adds	r3, #24
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fc0:	331c      	adds	r3, #28
 8002fc2:	8819      	ldrh	r1, [r3, #0]
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a21      	ldr	r2, [pc, #132]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002fd2:	331e      	adds	r3, #30
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f003 f831 	bl	8006048 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003006:	3324      	adds	r3, #36	; 0x24
 8003008:	8819      	ldrh	r1, [r3, #0]
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a10      	ldr	r2, [pc, #64]	; (8003050 <HAL_UART_TxCpltCallback+0x1d4>)
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003018:	3326      	adds	r3, #38	; 0x26
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f003 f813 	bl	8006048 <HAL_GPIO_WritePin>
           break;
 8003022:	e00d      	b.n	8003040 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_UART_TxCpltCallback+0x1d0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_UART_TxCpltCallback+0x1d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	f47f af27 	bne.w	8002e8c <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 800303e:	e000      	b.n	8003042 <HAL_UART_TxCpltCallback+0x1c6>
           break;
 8003040:	bf00      	nop
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	200000e4 	.word	0x200000e4
 8003050:	200000d8 	.word	0x200000d8
 8003054:	200000dc 	.word	0x200000dc

08003058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_MspInit+0x44>)
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_MspInit+0x44>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6613      	str	r3, [r2, #96]	; 0x60
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_MspInit+0x44>)
 800306c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_MspInit+0x44>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_MspInit+0x44>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_MspInit+0x44>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800308e:	f003 f897 	bl	80061c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d16f      	bne.n	80031a2 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	4a39      	ldr	r2, [pc, #228]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ce:	4b37      	ldr	r3, [pc, #220]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	4a33      	ldr	r2, [pc, #204]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030e0:	f043 0320 	orr.w	r3, r3, #32
 80030e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fe:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_ADC_MspInit+0x10c>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800310a:	2301      	movs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800310e:	2303      	movs	r3, #3
 8003110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	4619      	mov	r1, r3
 800311c:	4824      	ldr	r0, [pc, #144]	; (80031b0 <HAL_ADC_MspInit+0x110>)
 800311e:	f002 fdf9 	bl	8005d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003126:	2303      	movs	r3, #3
 8003128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003138:	f002 fdec 	bl	8005d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_ADC_MspInit+0x118>)
 8003140:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 8003144:	2205      	movs	r2, #5
 8003146:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 8003150:	2200      	movs	r2, #0
 8003152:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 800315c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 8003164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 800316c:	2220      	movs	r2, #32
 800316e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003176:	480f      	ldr	r0, [pc, #60]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 8003178:	f002 f884 	bl	8005284 <HAL_DMA_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8003182:	f7ff f86d 	bl	8002260 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
 800318c:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <HAL_ADC_MspInit+0x114>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	2012      	movs	r0, #18
 8003198:	f002 f83b 	bl	8005212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800319c:	2012      	movs	r0, #18
 800319e:	f002 f852 	bl	8005246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031a2:	bf00      	nop
 80031a4:	3728      	adds	r7, #40	; 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	48001400 	.word	0x48001400
 80031b4:	20002b8c 	.word	0x20002b8c
 80031b8:	40020030 	.word	0x40020030

080031bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_TIM_Encoder_MspInit+0x80>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d129      	bne.n	8003232 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_TIM_Encoder_MspInit+0x84>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_TIM_Encoder_MspInit+0x84>)
 80031e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031e8:	6613      	str	r3, [r2, #96]	; 0x60
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_TIM_Encoder_MspInit+0x84>)
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_TIM_Encoder_MspInit+0x84>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_TIM_Encoder_MspInit+0x84>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_TIM_Encoder_MspInit+0x84>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800320e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003220:	2306      	movs	r3, #6
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4619      	mov	r1, r3
 800322a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322e:	f002 fd71 	bl	8005d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	; 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40021000 	.word	0x40021000

08003244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_TIM_Base_MspInit+0x68>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d114      	bne.n	8003280 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003256:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6593      	str	r3, [r2, #88]	; 0x58
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	201e      	movs	r0, #30
 8003274:	f001 ffcd 	bl	8005212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003278:	201e      	movs	r0, #30
 800327a:	f001 ffe4 	bl	8005246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800327e:	e010      	b.n	80032a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <HAL_TIM_Base_MspInit+0x70>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10b      	bne.n	80032a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003290:	f043 0310 	orr.w	r3, r3, #16
 8003294:	6593      	str	r3, [r2, #88]	; 0x58
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_TIM_Base_MspInit+0x6c>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40001000 	.word	0x40001000

080032b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <HAL_TIM_MspPostInit+0x64>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d11b      	bne.n	8003312 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_TIM_MspPostInit+0x68>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_TIM_MspPostInit+0x68>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_TIM_MspPostInit+0x68>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032f2:	23c0      	movs	r3, #192	; 0xc0
 80032f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003302:	2302      	movs	r3, #2
 8003304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	4619      	mov	r1, r3
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <HAL_TIM_MspPostInit+0x6c>)
 800330e:	f002 fd01 	bl	8005d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40000800 	.word	0x40000800
 8003320:	40021000 	.word	0x40021000
 8003324:	48000400 	.word	0x48000400

08003328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a53      	ldr	r2, [pc, #332]	; (8003494 <HAL_UART_MspInit+0x16c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f040 80a0 	bne.w	800348c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800334c:	4b52      	ldr	r3, [pc, #328]	; (8003498 <HAL_UART_MspInit+0x170>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_UART_MspInit+0x170>)
 8003352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003356:	6593      	str	r3, [r2, #88]	; 0x58
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_UART_MspInit+0x170>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003364:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <HAL_UART_MspInit+0x170>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	4a4b      	ldr	r2, [pc, #300]	; (8003498 <HAL_UART_MspInit+0x170>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003370:	4b49      	ldr	r3, [pc, #292]	; (8003498 <HAL_UART_MspInit+0x170>)
 8003372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337c:	4b46      	ldr	r3, [pc, #280]	; (8003498 <HAL_UART_MspInit+0x170>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	4a45      	ldr	r2, [pc, #276]	; (8003498 <HAL_UART_MspInit+0x170>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_UART_MspInit+0x170>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033a6:	2307      	movs	r3, #7
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b4:	f002 fcae 	bl	8005d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033b8:	2308      	movs	r3, #8
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c8:	2307      	movs	r3, #7
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	4832      	ldr	r0, [pc, #200]	; (800349c <HAL_UART_MspInit+0x174>)
 80033d4:	f002 fc9e 	bl	8005d14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033da:	4a32      	ldr	r2, [pc, #200]	; (80034a4 <HAL_UART_MspInit+0x17c>)
 80033dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80033de:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033e0:	221a      	movs	r2, #26
 80033e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e4:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ea:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_UART_MspInit+0x178>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <HAL_UART_MspInit+0x178>)
 8003404:	2220      	movs	r2, #32
 8003406:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_UART_MspInit+0x178>)
 800340a:	2200      	movs	r2, #0
 800340c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800340e:	4824      	ldr	r0, [pc, #144]	; (80034a0 <HAL_UART_MspInit+0x178>)
 8003410:	f001 ff38 	bl	8005284 <HAL_DMA_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 800341a:	f7fe ff21 	bl	8002260 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_UART_MspInit+0x178>)
 8003422:	679a      	str	r2, [r3, #120]	; 0x78
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <HAL_UART_MspInit+0x178>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_UART_MspInit+0x180>)
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <HAL_UART_MspInit+0x184>)
 800342e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003432:	221b      	movs	r2, #27
 8003434:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003438:	2210      	movs	r2, #16
 800343a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_UART_MspInit+0x180>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_UART_MspInit+0x180>)
 800344a:	2200      	movs	r2, #0
 800344c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_UART_MspInit+0x180>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003460:	4811      	ldr	r0, [pc, #68]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003462:	f001 ff0f 	bl	8005284 <HAL_DMA_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 800346c:	f7fe fef8 	bl	8002260 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003474:	675a      	str	r2, [r3, #116]	; 0x74
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_UART_MspInit+0x180>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800347c:	2200      	movs	r2, #0
 800347e:	2100      	movs	r1, #0
 8003480:	2026      	movs	r0, #38	; 0x26
 8003482:	f001 fec6 	bl	8005212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003486:	2026      	movs	r0, #38	; 0x26
 8003488:	f001 fedd 	bl	8005246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800348c:	bf00      	nop
 800348e:	3728      	adds	r7, #40	; 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40004400 	.word	0x40004400
 8003498:	40021000 	.word	0x40021000
 800349c:	48000400 	.word	0x48000400
 80034a0:	2000016c 	.word	0x2000016c
 80034a4:	40020008 	.word	0x40020008
 80034a8:	20000284 	.word	0x20000284
 80034ac:	4002001c 	.word	0x4002001c

080034b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b4:	e7fe      	b.n	80034b4 <NMI_Handler+0x4>

080034b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ba:	e7fe      	b.n	80034ba <HardFault_Handler+0x4>

080034bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <MemManage_Handler+0x4>

080034c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c6:	e7fe      	b.n	80034c6 <BusFault_Handler+0x4>

080034c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <UsageFault_Handler+0x4>

080034ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034fc:	f000 f8d0 	bl	80036a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}

08003504 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <DMA1_Channel1_IRQHandler+0x10>)
 800350a:	f002 f845 	bl	8005598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000016c 	.word	0x2000016c

08003518 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <DMA1_Channel2_IRQHandler+0x10>)
 800351e:	f002 f83b 	bl	8005598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000284 	.word	0x20000284

0800352c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <DMA1_Channel3_IRQHandler+0x10>)
 8003532:	f002 f831 	bl	8005598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20002b8c 	.word	0x20002b8c

08003540 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <ADC1_2_IRQHandler+0x10>)
 8003546:	f000 fd67 	bl	8004018 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000218 	.word	0x20000218

08003554 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <TIM4_IRQHandler+0x10>)
 800355a:	f004 f963 	bl	8007824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200001cc 	.word	0x200001cc

08003568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <USART2_IRQHandler+0x10>)
 800356e:	f005 fbf5 	bl	8008d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20002c84 	.word	0x20002c84

0800357c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <SystemInit+0x28>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a07      	ldr	r2, [pc, #28]	; (80035a4 <SystemInit+0x28>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <SystemInit+0x28>)
 8003592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003596:	609a      	str	r2, [r3, #8]
#endif
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035a8:	480d      	ldr	r0, [pc, #52]	; (80035e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035ac:	480d      	ldr	r0, [pc, #52]	; (80035e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ae:	490e      	ldr	r1, [pc, #56]	; (80035e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035b0:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <LoopForever+0xe>)
  movs r3, #0
 80035b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80035b4:	e002      	b.n	80035bc <LoopCopyDataInit>

080035b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ba:	3304      	adds	r3, #4

080035bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c0:	d3f9      	bcc.n	80035b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035c4:	4c0b      	ldr	r4, [pc, #44]	; (80035f4 <LoopForever+0x16>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c8:	e001      	b.n	80035ce <LoopFillZerobss>

080035ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035cc:	3204      	adds	r2, #4

080035ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d0:	d3fb      	bcc.n	80035ca <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035d2:	f7ff ffd3 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d6:	f006 fbd9 	bl	8009d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035da:	f7fe fa9b 	bl	8001b14 <main>

080035de <LoopForever>:

LoopForever:
    b LoopForever
 80035de:	e7fe      	b.n	80035de <LoopForever>
  ldr   r0, =_estack
 80035e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80035ec:	0800a070 	.word	0x0800a070
  ldr r2, =_sbss
 80035f0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80035f4:	200035ac 	.word	0x200035ac

080035f8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <COMP1_2_3_IRQHandler>

080035fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003604:	2003      	movs	r0, #3
 8003606:	f001 fdf9 	bl	80051fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800360a:	2000      	movs	r0, #0
 800360c:	f000 f80e 	bl	800362c <HAL_InitTick>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	71fb      	strb	r3, [r7, #7]
 800361a:	e001      	b.n	8003620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800361c:	f7ff fd1c 	bl	8003058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003620:	79fb      	ldrb	r3, [r7, #7]

}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_InitTick+0x68>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_InitTick+0x6c>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_InitTick+0x68>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800364c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fe08 	bl	800526a <HAL_SYSTICK_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	d809      	bhi.n	800367a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003666:	2200      	movs	r2, #0
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	f04f 30ff 	mov.w	r0, #4294967295
 800366e:	f001 fdd0 	bl	8005212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_InitTick+0x70>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e007      	b.n	800368a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e004      	b.n	800368a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e001      	b.n	800368a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000010 	.word	0x20000010
 8003698:	20000008 	.word	0x20000008
 800369c:	2000000c 	.word	0x2000000c

080036a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_IncTick+0x1c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_IncTick+0x20>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	4a03      	ldr	r2, [pc, #12]	; (80036bc <HAL_IncTick+0x1c>)
 80036b0:	6013      	str	r3, [r2, #0]
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	200035a8 	.word	0x200035a8
 80036c0:	20000010 	.word	0x20000010

080036c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return uwTick;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_GetTick+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	200035a8 	.word	0x200035a8

080036dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e4:	f7ff ffee 	bl	80036c4 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f4:	d004      	beq.n	8003700 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_Delay+0x40>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003700:	bf00      	nop
 8003702:	f7ff ffdf 	bl	80036c4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	429a      	cmp	r2, r3
 8003710:	d8f7      	bhi.n	8003702 <HAL_Delay+0x26>
  {
  }
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000010 	.word	0x20000010

08003720 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3360      	adds	r3, #96	; 0x60
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <LL_ADC_SetOffset+0x44>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	03fff000 	.word	0x03fff000

080037d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3360      	adds	r3, #96	; 0x60
 80037de:	461a      	mov	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3360      	adds	r3, #96	; 0x60
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003832:	b480      	push	{r7}
 8003834:	b087      	sub	sp, #28
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3360      	adds	r3, #96	; 0x60
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	431a      	orrs	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3360      	adds	r3, #96	; 0x60
 8003878:	461a      	mov	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	431a      	orrs	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	615a      	str	r2, [r3, #20]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b087      	sub	sp, #28
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3330      	adds	r3, #48	; 0x30
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	4413      	add	r3, r2
 8003908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	211f      	movs	r1, #31
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	401a      	ands	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	f003 011f 	and.w	r1, r3, #31
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	431a      	orrs	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3314      	adds	r3, #20
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0e5b      	lsrs	r3, r3, #25
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	4413      	add	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	0d1b      	lsrs	r3, r3, #20
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2107      	movs	r1, #7
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	401a      	ands	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	0d1b      	lsrs	r3, r3, #20
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	431a      	orrs	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0318 	and.w	r3, r3, #24
 80039e2:	4908      	ldr	r1, [pc, #32]	; (8003a04 <LL_ADC_SetChannelSingleDiff+0x44>)
 80039e4:	40d9      	lsrs	r1, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	400b      	ands	r3, r1
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	431a      	orrs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	0007ffff 	.word	0x0007ffff

08003a08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 031f 	and.w	r3, r3, #31
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6093      	str	r3, [r2, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a78:	d101      	bne.n	8003a7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac8:	d101      	bne.n	8003ace <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <LL_ADC_IsEnabled+0x18>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <LL_ADC_IsEnabled+0x1a>
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d101      	bne.n	8003b6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d101      	bne.n	8003b90 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e16b      	b.n	8003e92 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fa69 	bl	80030a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff3f 	bl	8003a64 <LL_ADC_IsDeepPowerDownEnabled>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff25 	bl	8003a40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ff5a 	bl	8003ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d113      	bne.n	8003c2e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff ff3e 	bl	8003a8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c10:	4ba2      	ldr	r3, [pc, #648]	; (8003e9c <HAL_ADC_Init+0x2fc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	099b      	lsrs	r3, r3, #6
 8003c16:	4aa2      	ldr	r2, [pc, #648]	; (8003ea0 <HAL_ADC_Init+0x300>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	099b      	lsrs	r3, r3, #6
 8003c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c20:	e002      	b.n	8003c28 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f9      	bne.n	8003c22 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff3e 	bl	8003ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f043 0210 	orr.w	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ff77 	bl	8003b52 <LL_ADC_REG_IsConversionOngoing>
 8003c64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 8106 	bne.w	8003e80 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 8102 	bne.w	8003e80 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c84:	f043 0202 	orr.w	r2, r3, #2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff37 	bl	8003b04 <LL_ADC_IsEnabled>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d111      	bne.n	8003cc0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ca0:	f7ff ff30 	bl	8003b04 <LL_ADC_IsEnabled>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	487f      	ldr	r0, [pc, #508]	; (8003ea4 <HAL_ADC_Init+0x304>)
 8003ca8:	f7ff ff2c 	bl	8003b04 <LL_ADC_IsEnabled>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4323      	orrs	r3, r4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	487b      	ldr	r0, [pc, #492]	; (8003ea8 <HAL_ADC_Init+0x308>)
 8003cbc:	f7ff fd30 	bl	8003720 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	7f5b      	ldrb	r3, [r3, #29]
 8003cc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003cca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003cd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003cd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cde:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d106      	bne.n	8003cfc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	045b      	lsls	r3, r3, #17
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_ADC_Init+0x30c>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	69b9      	ldr	r1, [r7, #24]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff03 	bl	8003b52 <LL_ADC_REG_IsConversionOngoing>
 8003d4c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff10 	bl	8003b78 <LL_ADC_INJ_IsConversionOngoing>
 8003d58:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d16d      	bne.n	8003e3c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d16a      	bne.n	8003e3c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d6a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d72:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d82:	f023 0302 	bic.w	r3, r3, #2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	69b9      	ldr	r1, [r7, #24]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d017      	beq.n	8003dc8 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003da6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003db0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6911      	ldr	r1, [r2, #16]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003dc6:	e013      	b.n	8003df0 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003dd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d118      	bne.n	8003e2c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e10:	4311      	orrs	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	611a      	str	r2, [r3, #16]
 8003e2a:	e007      	b.n	8003e3c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d10c      	bne.n	8003e5e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f023 010f 	bic.w	r1, r3, #15
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	1e5a      	subs	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e5c:	e007      	b.n	8003e6e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 020f 	bic.w	r2, r2, #15
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	f023 0303 	bic.w	r3, r3, #3
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e7e:	e007      	b.n	8003e90 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f043 0210 	orr.w	r2, r3, #16
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e90:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd90      	pop	{r4, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000008 	.word	0x20000008
 8003ea0:	053e2d63 	.word	0x053e2d63
 8003ea4:	50000100 	.word	0x50000100
 8003ea8:	50000300 	.word	0x50000300
 8003eac:	fff04007 	.word	0xfff04007

08003eb0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ebc:	4851      	ldr	r0, [pc, #324]	; (8004004 <HAL_ADC_Start_DMA+0x154>)
 8003ebe:	f7ff fda3 	bl	8003a08 <LL_ADC_GetMultimode>
 8003ec2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fe42 	bl	8003b52 <LL_ADC_REG_IsConversionOngoing>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 808f 	bne.w	8003ff4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_Start_DMA+0x34>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e08a      	b.n	8003ffa <HAL_ADC_Start_DMA+0x14a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d002      	beq.n	8003efe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b09      	cmp	r3, #9
 8003efc:	d173      	bne.n	8003fe6 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 feb2 	bl	8004c68 <ADC_Enable>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d166      	bne.n	8003fdc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a38      	ldr	r2, [pc, #224]	; (8004008 <HAL_ADC_Start_DMA+0x158>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d002      	beq.n	8003f32 <HAL_ADC_Start_DMA+0x82>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	e001      	b.n	8003f36 <HAL_ADC_Start_DMA+0x86>
 8003f32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d002      	beq.n	8003f44 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	f023 0206 	bic.w	r2, r3, #6
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60
 8003f68:	e002      	b.n	8003f70 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <HAL_ADC_Start_DMA+0x15c>)
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	4a24      	ldr	r2, [pc, #144]	; (8004010 <HAL_ADC_Start_DMA+0x160>)
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	4a23      	ldr	r2, [pc, #140]	; (8004014 <HAL_ADC_Start_DMA+0x164>)
 8003f86:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	221c      	movs	r2, #28
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0210 	orr.w	r2, r2, #16
 8003fa6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3340      	adds	r3, #64	; 0x40
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f001 fa04 	bl	80053d4 <HAL_DMA_Start_IT>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fda8 	bl	8003b2a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003fda:	e00d      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003fe4:	e008      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003ff2:	e001      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	50000300 	.word	0x50000300
 8004008:	50000100 	.word	0x50000100
 800400c:	08004d1d 	.word	0x08004d1d
 8004010:	08004df5 	.word	0x08004df5
 8004014:	08004e11 	.word	0x08004e11

08004018 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004034:	4883      	ldr	r0, [pc, #524]	; (8004244 <HAL_ADC_IRQHandler+0x22c>)
 8004036:	f7ff fce7 	bl	8003a08 <LL_ADC_GetMultimode>
 800403a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <HAL_ADC_IRQHandler+0x5e>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d012      	beq.n	8004076 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 ff39 	bl	8004ee0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <HAL_ADC_IRQHandler+0x72>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8085 	beq.w	80041a0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d07f      	beq.n	80041a0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fc01 	bl	80038c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d064      	beq.n	8004192 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a5e      	ldr	r2, [pc, #376]	; (8004248 <HAL_ADC_IRQHandler+0x230>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d002      	beq.n	80040d8 <HAL_ADC_IRQHandler+0xc0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	e001      	b.n	80040dc <HAL_ADC_IRQHandler+0xc4>
 80040d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d008      	beq.n	80040f6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d002      	beq.n	80040f6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b09      	cmp	r3, #9
 80040f4:	d104      	bne.n	8004100 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	e00d      	b.n	800411c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a50      	ldr	r2, [pc, #320]	; (8004248 <HAL_ADC_IRQHandler+0x230>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d002      	beq.n	8004110 <HAL_ADC_IRQHandler+0xf8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e001      	b.n	8004114 <HAL_ADC_IRQHandler+0xfc>
 8004110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004114:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d135      	bne.n	8004192 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b08      	cmp	r3, #8
 8004132:	d12e      	bne.n	8004192 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fd0a 	bl	8003b52 <LL_ADC_REG_IsConversionOngoing>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d11a      	bne.n	800417a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 020c 	bic.w	r2, r2, #12
 8004152:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d112      	bne.n	8004192 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	65da      	str	r2, [r3, #92]	; 0x5c
 8004178:	e00b      	b.n	8004192 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd f8ea 	bl	800136c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	220c      	movs	r2, #12
 800419e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_ADC_IRQHandler+0x19c>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10b      	bne.n	80041cc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 809e 	beq.w	80042fc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 8098 	beq.w	80042fc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fbaa 	bl	8003942 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80041ee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fb65 	bl	80038c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041fa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <HAL_ADC_IRQHandler+0x230>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d002      	beq.n	800420c <HAL_ADC_IRQHandler+0x1f4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	e001      	b.n	8004210 <HAL_ADC_IRQHandler+0x1f8>
 800420c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	4293      	cmp	r3, r2
 8004216:	d008      	beq.n	800422a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b06      	cmp	r3, #6
 8004222:	d002      	beq.n	800422a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b07      	cmp	r3, #7
 8004228:	d104      	bne.n	8004234 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	e011      	b.n	8004258 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a03      	ldr	r2, [pc, #12]	; (8004248 <HAL_ADC_IRQHandler+0x230>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d006      	beq.n	800424c <HAL_ADC_IRQHandler+0x234>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	e005      	b.n	8004250 <HAL_ADC_IRQHandler+0x238>
 8004244:	50000300 	.word	0x50000300
 8004248:	50000100 	.word	0x50000100
 800424c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004250:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004264:	2b00      	cmp	r3, #0
 8004266:	d142      	bne.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d03f      	beq.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8004274:	2b00      	cmp	r3, #0
 8004276:	d13a      	bne.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d133      	bne.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d12e      	bne.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fc6f 	bl	8003b78 <LL_ADC_INJ_IsConversionOngoing>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11a      	bne.n	80042d6 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d112      	bne.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80042d4:	e00b      	b.n	80042ee <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042da:	f043 0210 	orr.w	r2, r3, #16
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fdce 	bl	8004e90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2260      	movs	r2, #96	; 0x60
 80042fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <HAL_ADC_IRQHandler+0x312>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00c      	beq.n	800432a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f89f 	bl	8004460 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d012      	beq.n	800435a <HAL_ADC_IRQHandler+0x342>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fdb4 	bl	8004eb8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <HAL_ADC_IRQHandler+0x372>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00d      	beq.n	800438a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fda6 	bl	8004ecc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d036      	beq.n	8004402 <HAL_ADC_IRQHandler+0x3ea>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d031      	beq.n	8004402 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80043a6:	2301      	movs	r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	e014      	b.n	80043d6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80043b2:	4825      	ldr	r0, [pc, #148]	; (8004448 <HAL_ADC_IRQHandler+0x430>)
 80043b4:	f7ff fb36 	bl	8003a24 <LL_ADC_GetMultiDMATransfer>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80043be:	2301      	movs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	e008      	b.n	80043d6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80043d2:	2301      	movs	r3, #1
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10e      	bne.n	80043fa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ec:	f043 0202 	orr.w	r2, r3, #2
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f83d 	bl	8004474 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <HAL_ADC_IRQHandler+0x426>
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004412:	2b00      	cmp	r3, #0
 8004414:	d013      	beq.n	800443e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	f043 0208 	orr.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004436:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fd33 	bl	8004ea4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800443e:	bf00      	nop
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	50000300 	.word	0x50000300

0800444c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b0b6      	sub	sp, #216	; 0xd8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_ADC_ConfigChannel+0x22>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e3c7      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x7b2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fb4b 	bl	8003b52 <LL_ADC_REG_IsConversionOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 83ac 	bne.w	8004c1c <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f7ff fa0a 	bl	80038ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fb39 	bl	8003b52 <LL_ADC_REG_IsConversionOngoing>
 80044e0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fb45 	bl	8003b78 <LL_ADC_INJ_IsConversionOngoing>
 80044ee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 81d9 	bne.w	80048ae <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 81d4 	bne.w	80048ae <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450e:	d10f      	bne.n	8004530 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	4619      	mov	r1, r3
 800451c:	f7ff fa24 	bl	8003968 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f9b8 	bl	800389e <LL_ADC_SetSamplingTimeCommonConfig>
 800452e:	e00e      	b.n	800454e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	461a      	mov	r2, r3
 800453e:	f7ff fa13 	bl	8003968 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff f9a8 	bl	800389e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d022      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6919      	ldr	r1, [r3, #16]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004580:	f7ff f902 	bl	8003788 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6919      	ldr	r1, [r3, #16]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	461a      	mov	r2, r3
 8004592:	f7ff f94e 	bl	8003832 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6919      	ldr	r1, [r3, #16]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	7f1b      	ldrb	r3, [r3, #28]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d102      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x124>
 80045a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045aa:	e000      	b.n	80045ae <HAL_ADC_ConfigChannel+0x126>
 80045ac:	2300      	movs	r3, #0
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7ff f95a 	bl	8003868 <LL_ADC_SetOffsetSaturation>
 80045b4:	e17b      	b.n	80048ae <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff f907 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x15a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff f8fc 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 80045d8:	4603      	mov	r3, r0
 80045da:	0e9b      	lsrs	r3, r3, #26
 80045dc:	f003 021f 	and.w	r2, r3, #31
 80045e0:	e01e      	b.n	8004620 <HAL_ADC_ConfigChannel+0x198>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2100      	movs	r1, #0
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff f8f1 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004610:	2320      	movs	r3, #32
 8004612:	e004      	b.n	800461e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004628:	2b00      	cmp	r3, #0
 800462a:	d105      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x1b0>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	0e9b      	lsrs	r3, r3, #26
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	e018      	b.n	800466a <HAL_ADC_ConfigChannel+0x1e2>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004644:	fa93 f3a3 	rbit	r3, r3
 8004648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800464c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004654:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800465c:	2320      	movs	r3, #32
 800465e:	e004      	b.n	800466a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004660:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004664:	fab3 f383 	clz	r3, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	429a      	cmp	r2, r3
 800466c:	d106      	bne.n	800467c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff f8c0 	bl	80037fc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f8a4 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 8004688:	4603      	mov	r3, r0
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x220>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2101      	movs	r1, #1
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f899 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	e01e      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x25e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2101      	movs	r1, #1
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f88e 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80046c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80046ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80046d6:	2320      	movs	r3, #32
 80046d8:	e004      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80046da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x276>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0e9b      	lsrs	r3, r3, #26
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	e018      	b.n	8004730 <HAL_ADC_ConfigChannel+0x2a8>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004712:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800471a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004722:	2320      	movs	r3, #32
 8004724:	e004      	b.n	8004730 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	429a      	cmp	r2, r3
 8004732:	d106      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2200      	movs	r2, #0
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff f85d 	bl	80037fc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f841 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <HAL_ADC_ConfigChannel+0x2e6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2102      	movs	r1, #2
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff f836 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 8004764:	4603      	mov	r3, r0
 8004766:	0e9b      	lsrs	r3, r3, #26
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	e01e      	b.n	80047ac <HAL_ADC_ConfigChannel+0x324>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2102      	movs	r1, #2
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff f82b 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 800477a:	4603      	mov	r3, r0
 800477c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800478c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e004      	b.n	80047aa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80047a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a4:	fab3 f383 	clz	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x33c>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	e016      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x36a>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80047d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80047dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80047e4:	2320      	movs	r3, #32
 80047e6:	e004      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80047e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d106      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	2102      	movs	r1, #2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe fffc 	bl	80037fc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2103      	movs	r1, #3
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe ffe0 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 8004810:	4603      	mov	r3, r0
 8004812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x3a8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2103      	movs	r1, #3
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe ffd5 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	0e9b      	lsrs	r3, r3, #26
 800482a:	f003 021f 	and.w	r2, r3, #31
 800482e:	e017      	b.n	8004860 <HAL_ADC_ConfigChannel+0x3d8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2103      	movs	r1, #3
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe ffca 	bl	80037d0 <LL_ADC_GetOffsetChannel>
 800483c:	4603      	mov	r3, r0
 800483e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800484a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800484c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004852:	2320      	movs	r3, #32
 8004854:	e003      	b.n	800485e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x3f0>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0e9b      	lsrs	r3, r3, #26
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	e011      	b.n	800489c <HAL_ADC_ConfigChannel+0x414>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e003      	b.n	800489c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	429a      	cmp	r2, r3
 800489e:	d106      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2103      	movs	r1, #3
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe ffa7 	bl	80037fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f926 	bl	8003b04 <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 8140 	bne.w	8004b40 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6819      	ldr	r1, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	461a      	mov	r2, r3
 80048ce:	f7ff f877 	bl	80039c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	4a8f      	ldr	r2, [pc, #572]	; (8004b14 <HAL_ADC_ConfigChannel+0x68c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	f040 8131 	bne.w	8004b40 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x47e>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	0e9b      	lsrs	r3, r3, #26
 80048f4:	3301      	adds	r3, #1
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	bf94      	ite	ls
 80048fe:	2301      	movls	r3, #1
 8004900:	2300      	movhi	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e019      	b.n	800493a <HAL_ADC_ConfigChannel+0x4b2>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004916:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800491e:	2320      	movs	r3, #32
 8004920:	e003      	b.n	800492a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004924:	fab3 f383 	clz	r3, r3
 8004928:	b2db      	uxtb	r3, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2b09      	cmp	r3, #9
 8004932:	bf94      	ite	ls
 8004934:	2301      	movls	r3, #1
 8004936:	2300      	movhi	r3, #0
 8004938:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800493a:	2b00      	cmp	r3, #0
 800493c:	d079      	beq.n	8004a32 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_ADC_ConfigChannel+0x4d2>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	0e9b      	lsrs	r3, r3, #26
 8004950:	3301      	adds	r3, #1
 8004952:	069b      	lsls	r3, r3, #26
 8004954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004958:	e015      	b.n	8004986 <HAL_ADC_ConfigChannel+0x4fe>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800496c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004972:	2320      	movs	r3, #32
 8004974:	e003      	b.n	800497e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	3301      	adds	r3, #1
 8004980:	069b      	lsls	r3, r3, #26
 8004982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x51e>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0e9b      	lsrs	r3, r3, #26
 8004998:	3301      	adds	r3, #1
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	e017      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x54e>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80049b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80049be:	2320      	movs	r3, #32
 80049c0:	e003      	b.n	80049ca <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80049c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c4:	fab3 f383 	clz	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	ea42 0103 	orr.w	r1, r2, r3
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x574>
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0e9b      	lsrs	r3, r3, #26
 80049ec:	3301      	adds	r3, #1
 80049ee:	f003 021f 	and.w	r2, r3, #31
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	051b      	lsls	r3, r3, #20
 80049fa:	e018      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x5a6>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f003 021f 	and.w	r2, r3, #31
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	e081      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x5c6>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	0e9b      	lsrs	r3, r3, #26
 8004a44:	3301      	adds	r3, #1
 8004a46:	069b      	lsls	r3, r3, #26
 8004a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4c:	e015      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x5f2>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004a66:	2320      	movs	r3, #32
 8004a68:	e003      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	3301      	adds	r3, #1
 8004a74:	069b      	lsls	r3, r3, #26
 8004a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x612>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	0e9b      	lsrs	r3, r3, #26
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2101      	movs	r1, #1
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	e017      	b.n	8004aca <HAL_ADC_ConfigChannel+0x642>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	61fb      	str	r3, [r7, #28]
  return result;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004ab2:	2320      	movs	r3, #32
 8004ab4:	e003      	b.n	8004abe <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	fab3 f383 	clz	r3, r3
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x66e>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	0e9b      	lsrs	r3, r3, #26
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f003 021f 	and.w	r2, r3, #31
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	3b1e      	subs	r3, #30
 8004aee:	051b      	lsls	r3, r3, #20
 8004af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004af4:	e01e      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x6ac>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	613b      	str	r3, [r7, #16]
  return result;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	e006      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x698>
 8004b12:	bf00      	nop
 8004b14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	f003 021f 	and.w	r2, r3, #31
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3b1e      	subs	r3, #30
 8004b2e:	051b      	lsls	r3, r3, #20
 8004b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b34:	430b      	orrs	r3, r1
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	6892      	ldr	r2, [r2, #8]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f7fe ff14 	bl	8003968 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b3f      	ldr	r3, [pc, #252]	; (8004c44 <HAL_ADC_ConfigChannel+0x7bc>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d070      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b4c:	483e      	ldr	r0, [pc, #248]	; (8004c48 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b4e:	f7fe fe0d 	bl	800376c <LL_ADC_GetCommonPathInternalCh>
 8004b52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a3c      	ldr	r2, [pc, #240]	; (8004c4c <HAL_ADC_ConfigChannel+0x7c4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_ADC_ConfigChannel+0x6e2>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <HAL_ADC_ConfigChannel+0x7c8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d126      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d120      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b7e:	d156      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b88:	4619      	mov	r1, r3
 8004b8a:	482f      	ldr	r0, [pc, #188]	; (8004c48 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b8c:	f7fe fddb 	bl	8003746 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004b90:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	4a30      	ldr	r2, [pc, #192]	; (8004c58 <HAL_ADC_ConfigChannel+0x7d0>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	099a      	lsrs	r2, r3, #6
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ba8:	e002      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f9      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bb6:	e03a      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <HAL_ADC_ConfigChannel+0x7d4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d113      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x762>
 8004bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_ADC_ConfigChannel+0x7d8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d02a      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be0:	4619      	mov	r1, r3
 8004be2:	4819      	ldr	r0, [pc, #100]	; (8004c48 <HAL_ADC_ConfigChannel+0x7c0>)
 8004be4:	f7fe fdaf 	bl	8003746 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004be8:	e021      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_ADC_ConfigChannel+0x7dc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d11c      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d116      	bne.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a16      	ldr	r2, [pc, #88]	; (8004c60 <HAL_ADC_ConfigChannel+0x7d8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d011      	beq.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c12:	4619      	mov	r1, r3
 8004c14:	480c      	ldr	r0, [pc, #48]	; (8004c48 <HAL_ADC_ConfigChannel+0x7c0>)
 8004c16:	f7fe fd96 	bl	8003746 <LL_ADC_SetCommonPathInternalCh>
 8004c1a:	e008      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	37d8      	adds	r7, #216	; 0xd8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	80080000 	.word	0x80080000
 8004c48:	50000300 	.word	0x50000300
 8004c4c:	c3210000 	.word	0xc3210000
 8004c50:	90c00010 	.word	0x90c00010
 8004c54:	20000008 	.word	0x20000008
 8004c58:	053e2d63 	.word	0x053e2d63
 8004c5c:	c7520000 	.word	0xc7520000
 8004c60:	50000100 	.word	0x50000100
 8004c64:	cb840000 	.word	0xcb840000

08004c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe ff45 	bl	8003b04 <LL_ADC_IsEnabled>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d146      	bne.n	8004d0e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <ADC_Enable+0xb0>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	f043 0210 	orr.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e032      	b.n	8004d10 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ff14 	bl	8003adc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004cb4:	f7fe fd06 	bl	80036c4 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cba:	e021      	b.n	8004d00 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe ff1f 	bl	8003b04 <LL_ADC_IsEnabled>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d104      	bne.n	8004cd6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe ff03 	bl	8003adc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cd6:	f7fe fcf5 	bl	80036c4 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d90d      	bls.n	8004d00 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	f043 0210 	orr.w	r2, r3, #16
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e007      	b.n	8004d10 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d1d6      	bne.n	8004cbc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	8000003f 	.word	0x8000003f

08004d1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d14b      	bne.n	8004dce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d021      	beq.n	8004d94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe fdb5 	bl	80038c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d032      	beq.n	8004dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d12b      	bne.n	8004dc6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11f      	bne.n	8004dc6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	f043 0201 	orr.w	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d92:	e018      	b.n	8004dc6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d111      	bne.n	8004dc6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d105      	bne.n	8004dc6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbe:	f043 0201 	orr.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7fc fad0 	bl	800136c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dcc:	e00e      	b.n	8004dec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fb4a 	bl	8004474 <HAL_ADC_ErrorCallback>
}
 8004de0:	e004      	b.n	8004dec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff fb22 	bl	800444c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2e:	f043 0204 	orr.w	r2, r3, #4
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fb1c 	bl	8004474 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <LL_ADC_IsEnabled>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <LL_ADC_IsEnabled+0x18>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <LL_ADC_IsEnabled+0x1a>
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_ADC_REG_IsConversionOngoing>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d101      	bne.n	8004e82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b0a1      	sub	sp, #132	; 0x84
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e087      	b.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f22:	d102      	bne.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004f24:	4b41      	ldr	r3, [pc, #260]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	e001      	b.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e06a      	b.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff8b 	bl	8004e6a <LL_ADC_REG_IsConversionOngoing>
 8004f54:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff85 	bl	8004e6a <LL_ADC_REG_IsConversionOngoing>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d14c      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d149      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f6c:	4b30      	ldr	r3, [pc, #192]	; (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004f6e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d028      	beq.n	8004fca <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f8a:	035b      	lsls	r3, r3, #13
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004f98:	f7ff ff54 	bl	8004e44 <LL_ADC_IsEnabled>
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	4823      	ldr	r0, [pc, #140]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004fa0:	f7ff ff50 	bl	8004e44 <LL_ADC_IsEnabled>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4323      	orrs	r3, r4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d133      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fb4:	f023 030f 	bic.w	r3, r3, #15
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	6811      	ldr	r1, [r2, #0]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	6892      	ldr	r2, [r2, #8]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc8:	e024      	b.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fd6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004fda:	f7ff ff33 	bl	8004e44 <LL_ADC_IsEnabled>
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4812      	ldr	r0, [pc, #72]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004fe2:	f7ff ff2f 	bl	8004e44 <LL_ADC_IsEnabled>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4323      	orrs	r3, r4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d112      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ff6:	f023 030f 	bic.w	r3, r3, #15
 8004ffa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ffc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ffe:	e009      	b.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005012:	e000      	b.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005014:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800501e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005022:	4618      	mov	r0, r3
 8005024:	3784      	adds	r7, #132	; 0x84
 8005026:	46bd      	mov	sp, r7
 8005028:	bd90      	pop	{r4, r7, pc}
 800502a:	bf00      	nop
 800502c:	50000100 	.word	0x50000100
 8005030:	50000300 	.word	0x50000300

08005034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800505c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <__NVIC_SetPriorityGrouping+0x44>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	60d3      	str	r3, [r2, #12]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <__NVIC_GetPriorityGrouping+0x18>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0a1b      	lsrs	r3, r3, #8
 8005086:	f003 0307 	and.w	r3, r3, #7
}
 800508a:	4618      	mov	r0, r3
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	db0b      	blt.n	80050c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	f003 021f 	and.w	r2, r3, #31
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <__NVIC_EnableIRQ+0x38>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2001      	movs	r0, #1
 80050ba:	fa00 f202 	lsl.w	r2, r0, r2
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000e100 	.word	0xe000e100

080050d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	6039      	str	r1, [r7, #0]
 80050de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db0a      	blt.n	80050fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	490c      	ldr	r1, [pc, #48]	; (8005120 <__NVIC_SetPriority+0x4c>)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	440b      	add	r3, r1
 80050f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050fc:	e00a      	b.n	8005114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <__NVIC_SetPriority+0x50>)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	3b04      	subs	r3, #4
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	440b      	add	r3, r1
 8005112:	761a      	strb	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000e100 	.word	0xe000e100
 8005124:	e000ed00 	.word	0xe000ed00

08005128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f1c3 0307 	rsb	r3, r3, #7
 8005142:	2b04      	cmp	r3, #4
 8005144:	bf28      	it	cs
 8005146:	2304      	movcs	r3, #4
 8005148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3304      	adds	r3, #4
 800514e:	2b06      	cmp	r3, #6
 8005150:	d902      	bls.n	8005158 <NVIC_EncodePriority+0x30>
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3b03      	subs	r3, #3
 8005156:	e000      	b.n	800515a <NVIC_EncodePriority+0x32>
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	401a      	ands	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005170:	f04f 31ff 	mov.w	r1, #4294967295
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	fa01 f303 	lsl.w	r3, r1, r3
 800517a:	43d9      	mvns	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005180:	4313      	orrs	r3, r2
         );
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005194:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <__NVIC_SystemReset+0x20>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80051a0:	4903      	ldr	r1, [pc, #12]	; (80051b0 <__NVIC_SystemReset+0x20>)
 80051a2:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <__NVIC_SystemReset+0x24>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60cb      	str	r3, [r1, #12]
 80051a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <__NVIC_SystemReset+0x1c>
 80051b0:	e000ed00 	.word	0xe000ed00
 80051b4:	05fa0004 	.word	0x05fa0004

080051b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c8:	d301      	bcc.n	80051ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ca:	2301      	movs	r3, #1
 80051cc:	e00f      	b.n	80051ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <SysTick_Config+0x40>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051d6:	210f      	movs	r1, #15
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	f7ff ff7a 	bl	80050d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <SysTick_Config+0x40>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051e6:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <SysTick_Config+0x40>)
 80051e8:	2207      	movs	r2, #7
 80051ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	e000e010 	.word	0xe000e010

080051fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ff15 	bl	8005034 <__NVIC_SetPriorityGrouping>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af00      	add	r7, sp, #0
 8005218:	4603      	mov	r3, r0
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005220:	f7ff ff2c 	bl	800507c <__NVIC_GetPriorityGrouping>
 8005224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	6978      	ldr	r0, [r7, #20]
 800522c:	f7ff ff7c 	bl	8005128 <NVIC_EncodePriority>
 8005230:	4602      	mov	r2, r0
 8005232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff4b 	bl	80050d4 <__NVIC_SetPriority>
}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff1f 	bl	8005098 <__NVIC_EnableIRQ>
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005266:	f7ff ff93 	bl	8005190 <__NVIC_SystemReset>

0800526a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ffa0 	bl	80051b8 <SysTick_Config>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e08d      	b.n	80053b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_DMA_Init+0x138>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d80f      	bhi.n	80052c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b45      	ldr	r3, [pc, #276]	; (80053c0 <HAL_DMA_Init+0x13c>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a45      	ldr	r2, [pc, #276]	; (80053c4 <HAL_DMA_Init+0x140>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a42      	ldr	r2, [pc, #264]	; (80053c8 <HAL_DMA_Init+0x144>)
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
 80052c0:	e00e      	b.n	80052e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b40      	ldr	r3, [pc, #256]	; (80053cc <HAL_DMA_Init+0x148>)
 80052ca:	4413      	add	r3, r2
 80052cc:	4a3d      	ldr	r2, [pc, #244]	; (80053c4 <HAL_DMA_Init+0x140>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <HAL_DMA_Init+0x14c>)
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa1e 	bl	8005774 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005340:	d102      	bne.n	8005348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800535c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_DMA_Init+0x104>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d80c      	bhi.n	8005388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa3e 	bl	80057f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e008      	b.n	800539a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40020407 	.word	0x40020407
 80053c0:	bffdfff8 	.word	0xbffdfff8
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	40020000 	.word	0x40020000
 80053cc:	bffdfbf8 	.word	0xbffdfbf8
 80053d0:	40020400 	.word	0x40020400

080053d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Start_IT+0x20>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e066      	b.n	80054c2 <HAL_DMA_Start_IT+0xee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d155      	bne.n	80054b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f962 	bl	80056f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 020e 	orr.w	r2, r2, #14
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e00f      	b.n	800546c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 020a 	orr.w	r2, r2, #10
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e005      	b.n	80054c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
 80054be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d00d      	beq.n	80054fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e047      	b.n	800558e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 020e 	bic.w	r2, r2, #14
 800550c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800552c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f003 021f 	and.w	r2, r3, #31
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f202 	lsl.w	r2, r1, r2
 8005540:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800554a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00c      	beq.n	800556e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005562:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800556c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
    }
  }
  return status;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2204      	movs	r2, #4
 80055ba:	409a      	lsls	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d026      	beq.n	8005612 <HAL_DMA_IRQHandler+0x7a>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d021      	beq.n	8005612 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d107      	bne.n	80055ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0204 	bic.w	r2, r2, #4
 80055ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f0:	f003 021f 	and.w	r2, r3, #31
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2104      	movs	r1, #4
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d071      	beq.n	80056ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005610:	e06c      	b.n	80056ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	2202      	movs	r2, #2
 800561c:	409a      	lsls	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02e      	beq.n	8005684 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d029      	beq.n	8005684 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 020a 	bic.w	r2, r2, #10
 800564c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	f003 021f 	and.w	r2, r3, #31
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2102      	movs	r1, #2
 8005664:	fa01 f202 	lsl.w	r2, r1, r2
 8005668:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d038      	beq.n	80056ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005682:	e033      	b.n	80056ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	2208      	movs	r2, #8
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02a      	beq.n	80056ee <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d025      	beq.n	80056ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 020e 	bic.w	r2, r2, #14
 80056b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	f003 021f 	and.w	r2, r3, #31
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	2101      	movs	r1, #1
 80056c0:	fa01 f202 	lsl.w	r2, r1, r2
 80056c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
}
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800570c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800571e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	f003 021f 	and.w	r2, r3, #31
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f202 	lsl.w	r2, r1, r2
 8005732:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d108      	bne.n	8005756 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005754:	e007      	b.n	8005766 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005784:	429a      	cmp	r2, r3
 8005786:	d802      	bhi.n	800578e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e001      	b.n	8005792 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005790:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	3b08      	subs	r3, #8
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	089b      	lsrs	r3, r3, #2
 80057ae:	009a      	lsls	r2, r3, #2
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2201      	movs	r2, #1
 80057c8:	409a      	lsls	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40020407 	.word	0x40020407
 80057e0:	40020800 	.word	0x40020800
 80057e4:	40020820 	.word	0x40020820
 80057e8:	cccccccd 	.word	0xcccccccd
 80057ec:	40020880 	.word	0x40020880

080057f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005812:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3b01      	subs	r3, #1
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2201      	movs	r2, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	1000823f 	.word	0x1000823f
 8005834:	40020940 	.word	0x40020940

08005838 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800584a:	4b24      	ldr	r3, [pc, #144]	; (80058dc <HAL_FLASH_Program+0xa4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_FLASH_Program+0x1e>
 8005852:	2302      	movs	r3, #2
 8005854:	e03e      	b.n	80058d4 <HAL_FLASH_Program+0x9c>
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_FLASH_Program+0xa4>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800585c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005860:	f000 f888 	bl	8005974 <FLASH_WaitForLastOperation>
 8005864:	4603      	mov	r3, r0
 8005866:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d12e      	bne.n	80058cc <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_FLASH_Program+0xa4>)
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800587a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587e:	68b8      	ldr	r0, [r7, #8]
 8005880:	f000 f8cc 	bl	8005a1c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005884:	2301      	movs	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	e010      	b.n	80058ac <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d002      	beq.n	8005896 <HAL_FLASH_Program+0x5e>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d10a      	bne.n	80058ac <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f000 f8e2 	bl	8005a64 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d102      	bne.n	80058ac <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80058a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058aa:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058b0:	f000 f860 	bl	8005974 <FLASH_WaitForLastOperation>
 80058b4:	4603      	mov	r3, r0
 80058b6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80058be:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <HAL_FLASH_Program+0xa8>)
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	4906      	ldr	r1, [pc, #24]	; (80058e0 <HAL_FLASH_Program+0xa8>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <HAL_FLASH_Program+0xa4>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000014 	.word	0x20000014
 80058e0:	40022000 	.word	0x40022000

080058e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_FLASH_Unlock+0x38>)
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da0b      	bge.n	800590e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_FLASH_Unlock+0x38>)
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <HAL_FLASH_Unlock+0x3c>)
 80058fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80058fc:	4b07      	ldr	r3, [pc, #28]	; (800591c <HAL_FLASH_Unlock+0x38>)
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <HAL_FLASH_Unlock+0x40>)
 8005900:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_FLASH_Unlock+0x38>)
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da01      	bge.n	800590e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800590e:	79fb      	ldrb	r3, [r7, #7]
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40022000 	.word	0x40022000
 8005920:	45670123 	.word	0x45670123
 8005924:	cdef89ab 	.word	0xcdef89ab

08005928 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_FLASH_Lock+0x30>)
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	4a08      	ldr	r2, [pc, #32]	; (8005958 <HAL_FLASH_Lock+0x30>)
 8005938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800593c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_FLASH_Lock+0x30>)
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	da01      	bge.n	800594a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800594a:	79fb      	ldrb	r3, [r7, #7]
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40022000 	.word	0x40022000

0800595c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <HAL_FLASH_GetError+0x14>)
 8005962:	685b      	ldr	r3, [r3, #4]
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000014 	.word	0x20000014

08005974 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800597c:	f7fd fea2 	bl	80036c4 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005982:	e009      	b.n	8005998 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8005984:	f7fd fe9e 	bl	80036c4 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d201      	bcs.n	8005998 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e038      	b.n	8005a0a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a4:	d0ee      	beq.n	8005984 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80059ae:	4013      	ands	r3, r2
 80059b0:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01e      	beq.n	80059f6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <FLASH_WaitForLastOperation+0xa4>)
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <FLASH_WaitForLastOperation+0xa4>)
 80059c2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <FLASH_WaitForLastOperation+0x6a>
 80059ce:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80059d8:	490e      	ldr	r1, [pc, #56]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	618b      	str	r3, [r1, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <FLASH_WaitForLastOperation+0x7e>
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80059f0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e009      	b.n	8005a0a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a02:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <FLASH_WaitForLastOperation+0xa0>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40022000 	.word	0x40022000
 8005a18:	20000014 	.word	0x20000014

08005a1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a1c:	b490      	push	{r4, r7}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <FLASH_Program_DoubleWord+0x44>)
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <FLASH_Program_DoubleWord+0x44>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005a3a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005a3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	f04f 0400 	mov.w	r4, #0
 8005a4a:	0013      	movs	r3, r2
 8005a4c:	2400      	movs	r4, #0
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	3204      	adds	r2, #4
 8005a52:	6013      	str	r3, [r2, #0]
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc90      	pop	{r4, r7}
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40022000 	.word	0x40022000

08005a64 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b089      	sub	sp, #36	; 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <FLASH_Program_Fast+0x64>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <FLASH_Program_Fast+0x64>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a86:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a8c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a90:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	617b      	str	r3, [r7, #20]
    row_index--;
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005aac:	7ffb      	ldrb	r3, [r7, #31]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1ef      	bne.n	8005a92 <FLASH_Program_Fast+0x2e>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005abc:	bf00      	nop
 8005abe:	3724      	adds	r7, #36	; 0x24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40022000 	.word	0x40022000

08005acc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ad6:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_FLASHEx_Erase+0x16>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e089      	b.n	8005bf6 <HAL_FLASHEx_Erase+0x12a>
 8005ae2:	4b47      	ldr	r3, [pc, #284]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005aec:	f7ff ff42 	bl	8005974 <FLASH_WaitForLastOperation>
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d179      	bne.n	8005bee <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005afa:	4b41      	ldr	r3, [pc, #260]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005b00:	4b40      	ldr	r3, [pc, #256]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d019      	beq.n	8005b40 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b0c:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a3c      	ldr	r2, [pc, #240]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b16:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b18:	4b3a      	ldr	r3, [pc, #232]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d009      	beq.n	8005b38 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b24:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a36      	ldr	r2, [pc, #216]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005b30:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005b32:	2203      	movs	r2, #3
 8005b34:	771a      	strb	r2, [r3, #28]
 8005b36:	e016      	b.n	8005b66 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005b38:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	771a      	strb	r2, [r3, #28]
 8005b3e:	e012      	b.n	8005b66 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b40:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b4c:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b56:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	771a      	strb	r2, [r3, #28]
 8005b5e:	e002      	b.n	8005b66 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d111      	bne.n	8005b92 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f848 	bl	8005c08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b7c:	f7ff fefa 	bl	8005974 <FLASH_WaitForLastOperation>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005b84:	4b1f      	ldr	r3, [pc, #124]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6153      	str	r3, [r2, #20]
 8005b90:	e02b      	b.n	8005bea <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	e01b      	b.n	8005bda <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68b8      	ldr	r0, [r7, #8]
 8005baa:	f000 f84b 	bl	8005c44 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bb2:	f7ff fedf 	bl	8005974 <FLASH_WaitForLastOperation>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	4a11      	ldr	r2, [pc, #68]	; (8005c04 <HAL_FLASHEx_Erase+0x138>)
 8005bc0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005bc4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	601a      	str	r2, [r3, #0]
          break;
 8005bd2:	e00a      	b.n	8005bea <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d3db      	bcc.n	8005ba2 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005bea:	f000 f84f 	bl	8005c8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bee:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <HAL_FLASHEx_Erase+0x134>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]

  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000014 	.word	0x20000014
 8005c04:	40022000 	.word	0x40022000

08005c08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <FLASH_MassErase+0x38>)
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <FLASH_MassErase+0x38>)
 8005c20:	f043 0304 	orr.w	r3, r3, #4
 8005c24:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <FLASH_MassErase+0x38>)
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <FLASH_MassErase+0x38>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c30:	6153      	str	r3, [r2, #20]
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40022000 	.word	0x40022000

08005c44 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	; (8005c88 <FLASH_PageErase+0x44>)
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c5e:	490a      	ldr	r1, [pc, #40]	; (8005c88 <FLASH_PageErase+0x44>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <FLASH_PageErase+0x44>)
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <FLASH_PageErase+0x44>)
 8005c6a:	f043 0302 	orr.w	r3, r3, #2
 8005c6e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <FLASH_PageErase+0x44>)
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <FLASH_PageErase+0x44>)
 8005c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7a:	6153      	str	r3, [r2, #20]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40022000 	.word	0x40022000

08005c8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <FLASH_FlushCaches+0x80>)
 8005c94:	7f1b      	ldrb	r3, [r3, #28]
 8005c96:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d002      	beq.n	8005ca4 <FLASH_FlushCaches+0x18>
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d111      	bne.n	8005cc8 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005caa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cbc:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cc6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d002      	beq.n	8005cd4 <FLASH_FlushCaches+0x48>
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d111      	bne.n	8005cf8 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <FLASH_FlushCaches+0x84>)
 8005cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <FLASH_FlushCaches+0x80>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	20000014 	.word	0x20000014
 8005d10:	40022000 	.word	0x40022000

08005d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d22:	e15a      	b.n	8005fda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	4013      	ands	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 814c 	beq.w	8005fd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d00b      	beq.n	8005d5c <HAL_GPIO_Init+0x48>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d007      	beq.n	8005d5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d50:	2b11      	cmp	r3, #17
 8005d52:	d003      	beq.n	8005d5c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b12      	cmp	r3, #18
 8005d5a:	d130      	bne.n	8005dbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	2203      	movs	r2, #3
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4013      	ands	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d92:	2201      	movs	r2, #1
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	f003 0201 	and.w	r2, r3, #1
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	2203      	movs	r2, #3
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0xea>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b12      	cmp	r3, #18
 8005dfc:	d123      	bne.n	8005e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	08da      	lsrs	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3208      	adds	r2, #8
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	08da      	lsrs	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3208      	adds	r2, #8
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	2203      	movs	r2, #3
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0203 	and.w	r2, r3, #3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80a6 	beq.w	8005fd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e88:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <HAL_GPIO_Init+0x2e4>)
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8c:	4a5a      	ldr	r2, [pc, #360]	; (8005ff8 <HAL_GPIO_Init+0x2e4>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6613      	str	r3, [r2, #96]	; 0x60
 8005e94:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <HAL_GPIO_Init+0x2e4>)
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ea0:	4a56      	ldr	r2, [pc, #344]	; (8005ffc <HAL_GPIO_Init+0x2e8>)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	220f      	movs	r2, #15
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eca:	d01f      	beq.n	8005f0c <HAL_GPIO_Init+0x1f8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a4c      	ldr	r2, [pc, #304]	; (8006000 <HAL_GPIO_Init+0x2ec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d019      	beq.n	8005f08 <HAL_GPIO_Init+0x1f4>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a4b      	ldr	r2, [pc, #300]	; (8006004 <HAL_GPIO_Init+0x2f0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_GPIO_Init+0x1f0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a4a      	ldr	r2, [pc, #296]	; (8006008 <HAL_GPIO_Init+0x2f4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00d      	beq.n	8005f00 <HAL_GPIO_Init+0x1ec>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a49      	ldr	r2, [pc, #292]	; (800600c <HAL_GPIO_Init+0x2f8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <HAL_GPIO_Init+0x1e8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a48      	ldr	r2, [pc, #288]	; (8006010 <HAL_GPIO_Init+0x2fc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_GPIO_Init+0x1e4>
 8005ef4:	2305      	movs	r3, #5
 8005ef6:	e00a      	b.n	8005f0e <HAL_GPIO_Init+0x1fa>
 8005ef8:	2306      	movs	r3, #6
 8005efa:	e008      	b.n	8005f0e <HAL_GPIO_Init+0x1fa>
 8005efc:	2304      	movs	r3, #4
 8005efe:	e006      	b.n	8005f0e <HAL_GPIO_Init+0x1fa>
 8005f00:	2303      	movs	r3, #3
 8005f02:	e004      	b.n	8005f0e <HAL_GPIO_Init+0x1fa>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e002      	b.n	8005f0e <HAL_GPIO_Init+0x1fa>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_GPIO_Init+0x1fa>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	f002 0203 	and.w	r2, r2, #3
 8005f14:	0092      	lsls	r2, r2, #2
 8005f16:	4093      	lsls	r3, r2
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f1e:	4937      	ldr	r1, [pc, #220]	; (8005ffc <HAL_GPIO_Init+0x2e8>)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	3302      	adds	r3, #2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f2c:	4b39      	ldr	r3, [pc, #228]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f50:	4a30      	ldr	r2, [pc, #192]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4013      	ands	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f7a:	4a26      	ldr	r2, [pc, #152]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f80:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005faa:	4b1a      	ldr	r3, [pc, #104]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fce:	4a11      	ldr	r2, [pc, #68]	; (8006014 <HAL_GPIO_Init+0x300>)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f ae9d 	bne.w	8005d24 <HAL_GPIO_Init+0x10>
  }
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	40010000 	.word	0x40010000
 8006000:	48000400 	.word	0x48000400
 8006004:	48000800 	.word	0x48000800
 8006008:	48000c00 	.word	0x48000c00
 800600c:	48001000 	.word	0x48001000
 8006010:	48001400 	.word	0x48001400
 8006014:	40010400 	.word	0x40010400

08006018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	887b      	ldrh	r3, [r7, #2]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	e001      	b.n	800603a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	807b      	strh	r3, [r7, #2]
 8006054:	4613      	mov	r3, r2
 8006056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006058:	787b      	ldrb	r3, [r7, #1]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006064:	e002      	b.n	800606c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d141      	bne.n	800610a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800608e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006092:	d131      	bne.n	80060f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006094:	4b47      	ldr	r3, [pc, #284]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800609a:	4a46      	ldr	r2, [pc, #280]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800609c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060a4:	4b43      	ldr	r3, [pc, #268]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060ac:	4a41      	ldr	r2, [pc, #260]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060b4:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2232      	movs	r2, #50	; 0x32
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	4a3f      	ldr	r2, [pc, #252]	; (80061bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	0c9b      	lsrs	r3, r3, #18
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ca:	e002      	b.n	80060d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060d2:	4b38      	ldr	r3, [pc, #224]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d102      	bne.n	80060e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f2      	bne.n	80060cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060e6:	4b33      	ldr	r3, [pc, #204]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f2:	d158      	bne.n	80061a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e057      	b.n	80061a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060f8:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fe:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006108:	e04d      	b.n	80061a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006110:	d141      	bne.n	8006196 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006112:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611e:	d131      	bne.n	8006184 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006120:	4b24      	ldr	r3, [pc, #144]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006126:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006130:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800613e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006140:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2232      	movs	r2, #50	; 0x32
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	0c9b      	lsrs	r3, r3, #18
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006156:	e002      	b.n	800615e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	d102      	bne.n	8006172 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f2      	bne.n	8006158 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d112      	bne.n	80061a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e011      	b.n	80061a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006194:	e007      	b.n	80061a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800619e:	4a05      	ldr	r2, [pc, #20]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40007000 	.word	0x40007000
 80061b8:	20000008 	.word	0x20000008
 80061bc:	431bde83 	.word	0x431bde83

080061c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a04      	ldr	r2, [pc, #16]	; (80061dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ce:	6093      	str	r3, [r2, #8]
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40007000 	.word	0x40007000

080061e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e308      	b.n	8006804 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d075      	beq.n	80062ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061fe:	4ba3      	ldr	r3, [pc, #652]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006208:	4ba0      	ldr	r3, [pc, #640]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b0c      	cmp	r3, #12
 8006216:	d102      	bne.n	800621e <HAL_RCC_OscConfig+0x3e>
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b03      	cmp	r3, #3
 800621c:	d002      	beq.n	8006224 <HAL_RCC_OscConfig+0x44>
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d10b      	bne.n	800623c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006224:	4b99      	ldr	r3, [pc, #612]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05b      	beq.n	80062e8 <HAL_RCC_OscConfig+0x108>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d157      	bne.n	80062e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e2e3      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d106      	bne.n	8006254 <HAL_RCC_OscConfig+0x74>
 8006246:	4b91      	ldr	r3, [pc, #580]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a90      	ldr	r2, [pc, #576]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800624c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e01d      	b.n	8006290 <HAL_RCC_OscConfig+0xb0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800625c:	d10c      	bne.n	8006278 <HAL_RCC_OscConfig+0x98>
 800625e:	4b8b      	ldr	r3, [pc, #556]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a8a      	ldr	r2, [pc, #552]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	4b88      	ldr	r3, [pc, #544]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a87      	ldr	r2, [pc, #540]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e00b      	b.n	8006290 <HAL_RCC_OscConfig+0xb0>
 8006278:	4b84      	ldr	r3, [pc, #528]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a83      	ldr	r2, [pc, #524]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800627e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	4b81      	ldr	r3, [pc, #516]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a80      	ldr	r2, [pc, #512]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800628a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800628e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d013      	beq.n	80062c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006298:	f7fd fa14 	bl	80036c4 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a0:	f7fd fa10 	bl	80036c4 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b64      	cmp	r3, #100	; 0x64
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e2a8      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062b2:	4b76      	ldr	r3, [pc, #472]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0f0      	beq.n	80062a0 <HAL_RCC_OscConfig+0xc0>
 80062be:	e014      	b.n	80062ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fd fa00 	bl	80036c4 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fd f9fc 	bl	80036c4 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	; 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e294      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062da:	4b6c      	ldr	r3, [pc, #432]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0xe8>
 80062e6:	e000      	b.n	80062ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d075      	beq.n	80063e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f6:	4b65      	ldr	r3, [pc, #404]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006300:	4b62      	ldr	r3, [pc, #392]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	d102      	bne.n	8006316 <HAL_RCC_OscConfig+0x136>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d002      	beq.n	800631c <HAL_RCC_OscConfig+0x13c>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d11f      	bne.n	800635c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800631c:	4b5b      	ldr	r3, [pc, #364]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <HAL_RCC_OscConfig+0x154>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e267      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006334:	4b55      	ldr	r3, [pc, #340]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	4952      	ldr	r1, [pc, #328]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006348:	4b51      	ldr	r3, [pc, #324]	; (8006490 <HAL_RCC_OscConfig+0x2b0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd f96d 	bl	800362c <HAL_InitTick>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d043      	beq.n	80063e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e253      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d023      	beq.n	80063ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006364:	4b49      	ldr	r3, [pc, #292]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a48      	ldr	r2, [pc, #288]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800636a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800636e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fd f9a8 	bl	80036c4 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006378:	f7fd f9a4 	bl	80036c4 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e23c      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800638a:	4b40      	ldr	r3, [pc, #256]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006396:	4b3d      	ldr	r3, [pc, #244]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	061b      	lsls	r3, r3, #24
 80063a4:	4939      	ldr	r1, [pc, #228]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	604b      	str	r3, [r1, #4]
 80063aa:	e01a      	b.n	80063e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ac:	4b37      	ldr	r3, [pc, #220]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a36      	ldr	r2, [pc, #216]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80063b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fd f984 	bl	80036c4 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fd f980 	bl	80036c4 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e218      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063d2:	4b2e      	ldr	r3, [pc, #184]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1e0>
 80063de:	e000      	b.n	80063e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03c      	beq.n	8006468 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d01c      	beq.n	8006430 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f6:	4b25      	ldr	r3, [pc, #148]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063fc:	4a23      	ldr	r2, [pc, #140]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006406:	f7fd f95d 	bl	80036c4 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800640e:	f7fd f959 	bl	80036c4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e1f1      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006420:	4b1a      	ldr	r3, [pc, #104]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0ef      	beq.n	800640e <HAL_RCC_OscConfig+0x22e>
 800642e:	e01b      	b.n	8006468 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006430:	4b16      	ldr	r3, [pc, #88]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006436:	4a15      	ldr	r2, [pc, #84]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006440:	f7fd f940 	bl	80036c4 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006448:	f7fd f93c 	bl	80036c4 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e1d4      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800645a:	4b0c      	ldr	r3, [pc, #48]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800645c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ef      	bne.n	8006448 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80ab 	beq.w	80065cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006476:	2300      	movs	r3, #0
 8006478:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <HAL_RCC_OscConfig+0x2ac>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_RCC_OscConfig+0x2b4>
 8006486:	2301      	movs	r3, #1
 8006488:	e005      	b.n	8006496 <HAL_RCC_OscConfig+0x2b6>
 800648a:	bf00      	nop
 800648c:	40021000 	.word	0x40021000
 8006490:	2000000c 	.word	0x2000000c
 8006494:	2300      	movs	r3, #0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800649a:	4baf      	ldr	r3, [pc, #700]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800649c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649e:	4aae      	ldr	r2, [pc, #696]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a4:	6593      	str	r3, [r2, #88]	; 0x58
 80064a6:	4bac      	ldr	r3, [pc, #688]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064b2:	2301      	movs	r3, #1
 80064b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064b6:	4ba9      	ldr	r3, [pc, #676]	; (800675c <HAL_RCC_OscConfig+0x57c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d118      	bne.n	80064f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064c2:	4ba6      	ldr	r3, [pc, #664]	; (800675c <HAL_RCC_OscConfig+0x57c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4aa5      	ldr	r2, [pc, #660]	; (800675c <HAL_RCC_OscConfig+0x57c>)
 80064c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ce:	f7fd f8f9 	bl	80036c4 <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d6:	f7fd f8f5 	bl	80036c4 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e18d      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e8:	4b9c      	ldr	r3, [pc, #624]	; (800675c <HAL_RCC_OscConfig+0x57c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d108      	bne.n	800650e <HAL_RCC_OscConfig+0x32e>
 80064fc:	4b96      	ldr	r3, [pc, #600]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	4a95      	ldr	r2, [pc, #596]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800650c:	e024      	b.n	8006558 <HAL_RCC_OscConfig+0x378>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b05      	cmp	r3, #5
 8006514:	d110      	bne.n	8006538 <HAL_RCC_OscConfig+0x358>
 8006516:	4b90      	ldr	r3, [pc, #576]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651c:	4a8e      	ldr	r2, [pc, #568]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006526:	4b8c      	ldr	r3, [pc, #560]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652c:	4a8a      	ldr	r2, [pc, #552]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800652e:	f043 0301 	orr.w	r3, r3, #1
 8006532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006536:	e00f      	b.n	8006558 <HAL_RCC_OscConfig+0x378>
 8006538:	4b87      	ldr	r3, [pc, #540]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	4a86      	ldr	r2, [pc, #536]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006548:	4b83      	ldr	r3, [pc, #524]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	4a82      	ldr	r2, [pc, #520]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006550:	f023 0304 	bic.w	r3, r3, #4
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d016      	beq.n	800658e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7fd f8b0 	bl	80036c4 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fd f8ac 	bl	80036c4 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	; 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e142      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800657e:	4b76      	ldr	r3, [pc, #472]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0ed      	beq.n	8006568 <HAL_RCC_OscConfig+0x388>
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7fd f899 	bl	80036c4 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006594:	e00a      	b.n	80065ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006596:	f7fd f895 	bl	80036c4 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e12b      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065ac:	4b6a      	ldr	r3, [pc, #424]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ed      	bne.n	8006596 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d105      	bne.n	80065cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c0:	4b65      	ldr	r3, [pc, #404]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80065c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c4:	4a64      	ldr	r2, [pc, #400]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80065c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d03c      	beq.n	8006652 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01c      	beq.n	800661a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065e0:	4b5d      	ldr	r3, [pc, #372]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80065e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065e6:	4a5c      	ldr	r2, [pc, #368]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fd f868 	bl	80036c4 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065f8:	f7fd f864 	bl	80036c4 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e0fc      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800660c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ef      	beq.n	80065f8 <HAL_RCC_OscConfig+0x418>
 8006618:	e01b      	b.n	8006652 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800661a:	4b4f      	ldr	r3, [pc, #316]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800661c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006620:	4a4d      	ldr	r2, [pc, #308]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fd f84b 	bl	80036c4 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006632:	f7fd f847 	bl	80036c4 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e0df      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006644:	4b44      	ldr	r3, [pc, #272]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ef      	bne.n	8006632 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80d3 	beq.w	8006802 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800665c:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b0c      	cmp	r3, #12
 8006666:	f000 808d 	beq.w	8006784 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d15a      	bne.n	8006728 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006672:	4b39      	ldr	r3, [pc, #228]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a38      	ldr	r2, [pc, #224]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800667c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7fd f821 	bl	80036c4 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006686:	f7fd f81d 	bl	80036c4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0b5      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006698:	4b2f      	ldr	r3, [pc, #188]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f0      	bne.n	8006686 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066a4:	4b2c      	ldr	r3, [pc, #176]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <HAL_RCC_OscConfig+0x580>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6a11      	ldr	r1, [r2, #32]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066b4:	3a01      	subs	r2, #1
 80066b6:	0112      	lsls	r2, r2, #4
 80066b8:	4311      	orrs	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80066be:	0212      	lsls	r2, r2, #8
 80066c0:	4311      	orrs	r1, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066c6:	0852      	lsrs	r2, r2, #1
 80066c8:	3a01      	subs	r2, #1
 80066ca:	0552      	lsls	r2, r2, #21
 80066cc:	4311      	orrs	r1, r2
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066d2:	0852      	lsrs	r2, r2, #1
 80066d4:	3a01      	subs	r2, #1
 80066d6:	0652      	lsls	r2, r2, #25
 80066d8:	4311      	orrs	r1, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066de:	06d2      	lsls	r2, r2, #27
 80066e0:	430a      	orrs	r2, r1
 80066e2:	491d      	ldr	r1, [pc, #116]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e8:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80066ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4a17      	ldr	r2, [pc, #92]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 80066fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fc ffe0 	bl	80036c4 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006708:	f7fc ffdc 	bl	80036c4 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e074      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800671a:	4b0f      	ldr	r3, [pc, #60]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x528>
 8006726:	e06c      	b.n	8006802 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a0a      	ldr	r2, [pc, #40]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800672e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006732:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006734:	4b08      	ldr	r3, [pc, #32]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a07      	ldr	r2, [pc, #28]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <HAL_RCC_OscConfig+0x578>)
 8006746:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800674a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fc ffb8 	bl	80036c4 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006756:	e00e      	b.n	8006776 <HAL_RCC_OscConfig+0x596>
 8006758:	40021000 	.word	0x40021000
 800675c:	40007000 	.word	0x40007000
 8006760:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006764:	f7fc ffae 	bl	80036c4 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e046      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006776:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x584>
 8006782:	e03e      	b.n	8006802 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e039      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006790:	4b1e      	ldr	r3, [pc, #120]	; (800680c <HAL_RCC_OscConfig+0x62c>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 0203 	and.w	r2, r3, #3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d12c      	bne.n	80067fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	3b01      	subs	r3, #1
 80067b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d123      	bne.n	80067fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d11b      	bne.n	80067fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d113      	bne.n	80067fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	3b01      	subs	r3, #1
 80067e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d109      	bne.n	80067fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d001      	beq.n	8006802 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40021000 	.word	0x40021000

08006810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e11e      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006828:	4b91      	ldr	r3, [pc, #580]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d910      	bls.n	8006858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006836:	4b8e      	ldr	r3, [pc, #568]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f023 020f 	bic.w	r2, r3, #15
 800683e:	498c      	ldr	r1, [pc, #560]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006846:	4b8a      	ldr	r3, [pc, #552]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	429a      	cmp	r2, r3
 8006852:	d001      	beq.n	8006858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e106      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d073      	beq.n	800694c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d129      	bne.n	80068c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800686c:	4b81      	ldr	r3, [pc, #516]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0f4      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800687c:	f000 f99e 	bl	8006bbc <RCC_GetSysClockFreqFromPLLSource>
 8006880:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4a7c      	ldr	r2, [pc, #496]	; (8006a78 <HAL_RCC_ClockConfig+0x268>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d93f      	bls.n	800690a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800688a:	4b7a      	ldr	r3, [pc, #488]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d033      	beq.n	800690a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d12f      	bne.n	800690a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068aa:	4b72      	ldr	r3, [pc, #456]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b2:	4a70      	ldr	r2, [pc, #448]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80068b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e024      	b.n	800690a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068c8:	4b6a      	ldr	r3, [pc, #424]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0c6      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d8:	4b66      	ldr	r3, [pc, #408]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0be      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80068e8:	f000 f8ce 	bl	8006a88 <HAL_RCC_GetSysClockFreq>
 80068ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	4a61      	ldr	r2, [pc, #388]	; (8006a78 <HAL_RCC_ClockConfig+0x268>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d909      	bls.n	800690a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068f6:	4b5f      	ldr	r3, [pc, #380]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068fe:	4a5d      	ldr	r2, [pc, #372]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006904:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006906:	2380      	movs	r3, #128	; 0x80
 8006908:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800690a:	4b5a      	ldr	r3, [pc, #360]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f023 0203 	bic.w	r2, r3, #3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4957      	ldr	r1, [pc, #348]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006918:	4313      	orrs	r3, r2
 800691a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691c:	f7fc fed2 	bl	80036c4 <HAL_GetTick>
 8006920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006922:	e00a      	b.n	800693a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006924:	f7fc fece 	bl	80036c4 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006932:	4293      	cmp	r3, r2
 8006934:	d901      	bls.n	800693a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e095      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693a:	4b4e      	ldr	r3, [pc, #312]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 020c 	and.w	r2, r3, #12
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	429a      	cmp	r2, r3
 800694a:	d1eb      	bne.n	8006924 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d023      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006964:	4b43      	ldr	r3, [pc, #268]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4a42      	ldr	r2, [pc, #264]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800696a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800696e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800697c:	4b3d      	ldr	r3, [pc, #244]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006984:	4a3b      	ldr	r2, [pc, #236]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800698a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800698c:	4b39      	ldr	r3, [pc, #228]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4936      	ldr	r1, [pc, #216]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 800699a:	4313      	orrs	r3, r2
 800699c:	608b      	str	r3, [r1, #8]
 800699e:	e008      	b.n	80069b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d105      	bne.n	80069b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069a6:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4a32      	ldr	r2, [pc, #200]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 80069ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b2:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d21d      	bcs.n	80069fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c0:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f023 020f 	bic.w	r2, r3, #15
 80069c8:	4929      	ldr	r1, [pc, #164]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069d0:	f7fc fe78 	bl	80036c4 <HAL_GetTick>
 80069d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d8:	f7fc fe74 	bl	80036c4 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e03b      	b.n	8006a66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ee:	4b20      	ldr	r3, [pc, #128]	; (8006a70 <HAL_RCC_ClockConfig+0x260>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d1ed      	bne.n	80069d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4917      	ldr	r1, [pc, #92]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a26:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	490f      	ldr	r1, [pc, #60]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a3a:	f000 f825 	bl	8006a88 <HAL_RCC_GetSysClockFreq>
 8006a3e:	4601      	mov	r1, r0
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <HAL_RCC_ClockConfig+0x264>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	4a0c      	ldr	r2, [pc, #48]	; (8006a7c <HAL_RCC_ClockConfig+0x26c>)
 8006a4c:	5cd3      	ldrb	r3, [r2, r3]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	fa21 f303 	lsr.w	r3, r1, r3
 8006a56:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <HAL_RCC_ClockConfig+0x270>)
 8006a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <HAL_RCC_ClockConfig+0x274>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fc fde4 	bl	800362c <HAL_InitTick>
 8006a64:	4603      	mov	r3, r0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40022000 	.word	0x40022000
 8006a74:	40021000 	.word	0x40021000
 8006a78:	04c4b400 	.word	0x04c4b400
 8006a7c:	0800a030 	.word	0x0800a030
 8006a80:	20000008 	.word	0x20000008
 8006a84:	2000000c 	.word	0x2000000c

08006a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a8e:	4b2c      	ldr	r3, [pc, #176]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 030c 	and.w	r3, r3, #12
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a9a:	4b2a      	ldr	r3, [pc, #168]	; (8006b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	e047      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d102      	bne.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aac:	4b26      	ldr	r3, [pc, #152]	; (8006b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e03e      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ab2:	4b23      	ldr	r3, [pc, #140]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b0c      	cmp	r3, #12
 8006abc:	d136      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006abe:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	091b      	lsrs	r3, r3, #4
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d10c      	bne.n	8006af6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae4:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae6:	68d2      	ldr	r2, [r2, #12]
 8006ae8:	0a12      	lsrs	r2, r2, #8
 8006aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006aee:	fb02 f303 	mul.w	r3, r2, r3
 8006af2:	617b      	str	r3, [r7, #20]
      break;
 8006af4:	e00c      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006af6:	4a13      	ldr	r2, [pc, #76]	; (8006b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b00:	68d2      	ldr	r2, [r2, #12]
 8006b02:	0a12      	lsrs	r2, r2, #8
 8006b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
      break;
 8006b0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	0e5b      	lsrs	r3, r3, #25
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	e001      	b.n	8006b30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b30:	693b      	ldr	r3, [r7, #16]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40021000 	.word	0x40021000
 8006b44:	00f42400 	.word	0x00f42400
 8006b48:	007a1200 	.word	0x007a1200

08006b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b52:	681b      	ldr	r3, [r3, #0]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000008 	.word	0x20000008

08006b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b68:	f7ff fff0 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b7a:	5cd3      	ldrb	r3, [r2, r3]
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	0800a040 	.word	0x0800a040

08006b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b94:	f7ff ffda 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8006b98:	4601      	mov	r1, r0
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	0adb      	lsrs	r3, r3, #11
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ba6:	5cd3      	ldrb	r3, [r2, r3]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	0800a040 	.word	0x0800a040

08006bbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bc2:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d10c      	bne.n	8006bfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006be0:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bea:	68d2      	ldr	r2, [r2, #12]
 8006bec:	0a12      	lsrs	r2, r2, #8
 8006bee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	617b      	str	r3, [r7, #20]
    break;
 8006bf8:	e00c      	b.n	8006c14 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	4a0e      	ldr	r2, [pc, #56]	; (8006c3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c04:	68d2      	ldr	r2, [r2, #12]
 8006c06:	0a12      	lsrs	r2, r2, #8
 8006c08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c0c:	fb02 f303 	mul.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]
    break;
 8006c12:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	0e5b      	lsrs	r3, r3, #25
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	3301      	adds	r3, #1
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c2e:	687b      	ldr	r3, [r7, #4]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	007a1200 	.word	0x007a1200
 8006c44:	00f42400 	.word	0x00f42400

08006c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c50:	2300      	movs	r3, #0
 8006c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c54:	2300      	movs	r3, #0
 8006c56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8098 	beq.w	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c66:	2300      	movs	r3, #0
 8006c68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c6a:	4b43      	ldr	r3, [pc, #268]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10d      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c76:	4b40      	ldr	r3, [pc, #256]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7a:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c80:	6593      	str	r3, [r2, #88]	; 0x58
 8006c82:	4b3d      	ldr	r3, [pc, #244]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c92:	4b3a      	ldr	r3, [pc, #232]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a39      	ldr	r2, [pc, #228]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c9e:	f7fc fd11 	bl	80036c4 <HAL_GetTick>
 8006ca2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ca4:	e009      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca6:	f7fc fd0d 	bl	80036c4 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d902      	bls.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	74fb      	strb	r3, [r7, #19]
        break;
 8006cb8:	e005      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cba:	4b30      	ldr	r3, [pc, #192]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0ef      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006cc6:	7cfb      	ldrb	r3, [r7, #19]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d159      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ccc:	4b2a      	ldr	r3, [pc, #168]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01e      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d019      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ce8:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cf4:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d04:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	4a1b      	ldr	r2, [pc, #108]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d14:	4a18      	ldr	r2, [pc, #96]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d016      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d26:	f7fc fccd 	bl	80036c4 <HAL_GetTick>
 8006d2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d2c:	e00b      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d2e:	f7fc fcc9 	bl	80036c4 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d902      	bls.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	74fb      	strb	r3, [r7, #19]
            break;
 8006d44:	e006      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0ec      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d5a:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	4903      	ldr	r1, [pc, #12]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d70:	e008      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	74bb      	strb	r3, [r7, #18]
 8006d76:	e005      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	7cfb      	ldrb	r3, [r7, #19]
 8006d82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d84:	7c7b      	ldrb	r3, [r7, #17]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d105      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d8a:	4ba6      	ldr	r3, [pc, #664]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8e:	4aa5      	ldr	r2, [pc, #660]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006da2:	4ba0      	ldr	r3, [pc, #640]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da8:	f023 0203 	bic.w	r2, r3, #3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	499c      	ldr	r1, [pc, #624]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dc4:	4b97      	ldr	r3, [pc, #604]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dca:	f023 020c 	bic.w	r2, r3, #12
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	4994      	ldr	r1, [pc, #592]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006de6:	4b8f      	ldr	r3, [pc, #572]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	498b      	ldr	r1, [pc, #556]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e08:	4b86      	ldr	r3, [pc, #536]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	4983      	ldr	r1, [pc, #524]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e2a:	4b7e      	ldr	r3, [pc, #504]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	497a      	ldr	r1, [pc, #488]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e4c:	4b75      	ldr	r3, [pc, #468]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	4972      	ldr	r1, [pc, #456]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e6e:	4b6d      	ldr	r3, [pc, #436]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	4969      	ldr	r1, [pc, #420]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e90:	4b64      	ldr	r3, [pc, #400]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	4961      	ldr	r1, [pc, #388]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eb2:	4b5c      	ldr	r3, [pc, #368]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	4958      	ldr	r1, [pc, #352]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d015      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ed4:	4b53      	ldr	r3, [pc, #332]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee2:	4950      	ldr	r1, [pc, #320]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef2:	d105      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ef4:	4b4b      	ldr	r3, [pc, #300]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4a4a      	ldr	r2, [pc, #296]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006efe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d015      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f0c:	4b45      	ldr	r3, [pc, #276]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	4942      	ldr	r1, [pc, #264]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f2a:	d105      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f2c:	4b3d      	ldr	r3, [pc, #244]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4a3c      	ldr	r2, [pc, #240]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f36:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d015      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f44:	4b37      	ldr	r3, [pc, #220]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	4934      	ldr	r1, [pc, #208]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f62:	d105      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f64:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a2e      	ldr	r2, [pc, #184]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d015      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	4926      	ldr	r1, [pc, #152]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f9c:	4b21      	ldr	r3, [pc, #132]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4a20      	ldr	r2, [pc, #128]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	4918      	ldr	r1, [pc, #96]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd2:	d105      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4a12      	ldr	r2, [pc, #72]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d015      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	490a      	ldr	r1, [pc, #40]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800700a:	d105      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a04      	ldr	r2, [pc, #16]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007016:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007018:	7cbb      	ldrb	r3, [r7, #18]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40021000 	.word	0x40021000

08007028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e049      	b.n	80070ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fc f8f8 	bl	8003244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 ff70 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d001      	beq.n	80070f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e042      	b.n	8007176 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a21      	ldr	r2, [pc, #132]	; (8007184 <HAL_TIM_Base_Start+0xac>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_TIM_Base_Start+0x5c>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d013      	beq.n	8007134 <HAL_TIM_Base_Start+0x5c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <HAL_TIM_Base_Start+0xb0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_TIM_Base_Start+0x5c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_Base_Start+0xb4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIM_Base_Start+0x5c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1a      	ldr	r2, [pc, #104]	; (8007190 <HAL_TIM_Base_Start+0xb8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_Base_Start+0x5c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_TIM_Base_Start+0xbc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d115      	bne.n	8007160 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <HAL_TIM_Base_Start+0xc0>)
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b06      	cmp	r3, #6
 8007144:	d015      	beq.n	8007172 <HAL_TIM_Base_Start+0x9a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714c:	d011      	beq.n	8007172 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	e008      	b.n	8007172 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e000      	b.n	8007174 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40013400 	.word	0x40013400
 8007194:	40014000 	.word	0x40014000
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e049      	b.n	8007242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f841 	bl	800724a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f000 feb6 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_TIM_PWM_Start_IT+0x24>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e03c      	b.n	80072fe <HAL_TIM_PWM_Start_IT+0x9e>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b04      	cmp	r3, #4
 8007288:	d109      	bne.n	800729e <HAL_TIM_PWM_Start_IT+0x3e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	bf14      	ite	ne
 8007296:	2301      	movne	r3, #1
 8007298:	2300      	moveq	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	e02f      	b.n	80072fe <HAL_TIM_PWM_Start_IT+0x9e>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d109      	bne.n	80072b8 <HAL_TIM_PWM_Start_IT+0x58>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	e022      	b.n	80072fe <HAL_TIM_PWM_Start_IT+0x9e>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b0c      	cmp	r3, #12
 80072bc:	d109      	bne.n	80072d2 <HAL_TIM_PWM_Start_IT+0x72>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	bf14      	ite	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	2300      	moveq	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e015      	b.n	80072fe <HAL_TIM_PWM_Start_IT+0x9e>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d109      	bne.n	80072ec <HAL_TIM_PWM_Start_IT+0x8c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e008      	b.n	80072fe <HAL_TIM_PWM_Start_IT+0x9e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e0dd      	b.n	80074c2 <HAL_TIM_PWM_Start_IT+0x262>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <HAL_TIM_PWM_Start_IT+0xb6>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007314:	e023      	b.n	800735e <HAL_TIM_PWM_Start_IT+0xfe>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b04      	cmp	r3, #4
 800731a:	d104      	bne.n	8007326 <HAL_TIM_PWM_Start_IT+0xc6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007324:	e01b      	b.n	800735e <HAL_TIM_PWM_Start_IT+0xfe>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b08      	cmp	r3, #8
 800732a:	d104      	bne.n	8007336 <HAL_TIM_PWM_Start_IT+0xd6>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007334:	e013      	b.n	800735e <HAL_TIM_PWM_Start_IT+0xfe>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b0c      	cmp	r3, #12
 800733a:	d104      	bne.n	8007346 <HAL_TIM_PWM_Start_IT+0xe6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007344:	e00b      	b.n	800735e <HAL_TIM_PWM_Start_IT+0xfe>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b10      	cmp	r3, #16
 800734a:	d104      	bne.n	8007356 <HAL_TIM_PWM_Start_IT+0xf6>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007354:	e003      	b.n	800735e <HAL_TIM_PWM_Start_IT+0xfe>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b0c      	cmp	r3, #12
 8007362:	d841      	bhi.n	80073e8 <HAL_TIM_PWM_Start_IT+0x188>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <HAL_TIM_PWM_Start_IT+0x10c>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	080073a1 	.word	0x080073a1
 8007370:	080073e9 	.word	0x080073e9
 8007374:	080073e9 	.word	0x080073e9
 8007378:	080073e9 	.word	0x080073e9
 800737c:	080073b3 	.word	0x080073b3
 8007380:	080073e9 	.word	0x080073e9
 8007384:	080073e9 	.word	0x080073e9
 8007388:	080073e9 	.word	0x080073e9
 800738c:	080073c5 	.word	0x080073c5
 8007390:	080073e9 	.word	0x080073e9
 8007394:	080073e9 	.word	0x080073e9
 8007398:	080073e9 	.word	0x080073e9
 800739c:	080073d7 	.word	0x080073d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0202 	orr.w	r2, r2, #2
 80073ae:	60da      	str	r2, [r3, #12]
      break;
 80073b0:	e01b      	b.n	80073ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0204 	orr.w	r2, r2, #4
 80073c0:	60da      	str	r2, [r3, #12]
      break;
 80073c2:	e012      	b.n	80073ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0208 	orr.w	r2, r2, #8
 80073d2:	60da      	str	r2, [r3, #12]
      break;
 80073d4:	e009      	b.n	80073ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0210 	orr.w	r2, r2, #16
 80073e4:	60da      	str	r2, [r3, #12]
      break;
 80073e6:	e000      	b.n	80073ea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80073e8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2201      	movs	r2, #1
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 f9cc 	bl	8008790 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a33      	ldr	r2, [pc, #204]	; (80074cc <HAL_TIM_PWM_Start_IT+0x26c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <HAL_TIM_PWM_Start_IT+0x1ca>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <HAL_TIM_PWM_Start_IT+0x270>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_TIM_PWM_Start_IT+0x1ca>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a30      	ldr	r2, [pc, #192]	; (80074d4 <HAL_TIM_PWM_Start_IT+0x274>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_TIM_PWM_Start_IT+0x1ca>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2f      	ldr	r2, [pc, #188]	; (80074d8 <HAL_TIM_PWM_Start_IT+0x278>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_TIM_PWM_Start_IT+0x1ca>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <HAL_TIM_PWM_Start_IT+0x27c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d101      	bne.n	800742e <HAL_TIM_PWM_Start_IT+0x1ce>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_TIM_PWM_Start_IT+0x1d0>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a20      	ldr	r2, [pc, #128]	; (80074cc <HAL_TIM_PWM_Start_IT+0x26c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d018      	beq.n	8007480 <HAL_TIM_PWM_Start_IT+0x220>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007456:	d013      	beq.n	8007480 <HAL_TIM_PWM_Start_IT+0x220>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a20      	ldr	r2, [pc, #128]	; (80074e0 <HAL_TIM_PWM_Start_IT+0x280>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <HAL_TIM_PWM_Start_IT+0x220>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1f      	ldr	r2, [pc, #124]	; (80074e4 <HAL_TIM_PWM_Start_IT+0x284>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d009      	beq.n	8007480 <HAL_TIM_PWM_Start_IT+0x220>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <HAL_TIM_PWM_Start_IT+0x270>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <HAL_TIM_PWM_Start_IT+0x220>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <HAL_TIM_PWM_Start_IT+0x274>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d115      	bne.n	80074ac <HAL_TIM_PWM_Start_IT+0x24c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <HAL_TIM_PWM_Start_IT+0x288>)
 8007488:	4013      	ands	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b06      	cmp	r3, #6
 8007490:	d015      	beq.n	80074be <HAL_TIM_PWM_Start_IT+0x25e>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007498:	d011      	beq.n	80074be <HAL_TIM_PWM_Start_IT+0x25e>
    {
      __HAL_TIM_ENABLE(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074aa:	e008      	b.n	80074be <HAL_TIM_PWM_Start_IT+0x25e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e000      	b.n	80074c0 <HAL_TIM_PWM_Start_IT+0x260>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40012c00 	.word	0x40012c00
 80074d0:	40013400 	.word	0x40013400
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40014400 	.word	0x40014400
 80074dc:	40014800 	.word	0x40014800
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	00010007 	.word	0x00010007

080074ec <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_IC_Start+0x1a>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007502:	b2db      	uxtb	r3, r3
 8007504:	e023      	b.n	800754e <HAL_TIM_IC_Start+0x62>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b04      	cmp	r3, #4
 800750a:	d104      	bne.n	8007516 <HAL_TIM_IC_Start+0x2a>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007512:	b2db      	uxtb	r3, r3
 8007514:	e01b      	b.n	800754e <HAL_TIM_IC_Start+0x62>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d104      	bne.n	8007526 <HAL_TIM_IC_Start+0x3a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007522:	b2db      	uxtb	r3, r3
 8007524:	e013      	b.n	800754e <HAL_TIM_IC_Start+0x62>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b0c      	cmp	r3, #12
 800752a:	d104      	bne.n	8007536 <HAL_TIM_IC_Start+0x4a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e00b      	b.n	800754e <HAL_TIM_IC_Start+0x62>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b10      	cmp	r3, #16
 800753a:	d104      	bne.n	8007546 <HAL_TIM_IC_Start+0x5a>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007542:	b2db      	uxtb	r3, r3
 8007544:	e003      	b.n	800754e <HAL_TIM_IC_Start+0x62>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800754c:	b2db      	uxtb	r3, r3
 800754e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <HAL_TIM_IC_Start+0x74>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800755c:	b2db      	uxtb	r3, r3
 800755e:	e013      	b.n	8007588 <HAL_TIM_IC_Start+0x9c>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b04      	cmp	r3, #4
 8007564:	d104      	bne.n	8007570 <HAL_TIM_IC_Start+0x84>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800756c:	b2db      	uxtb	r3, r3
 800756e:	e00b      	b.n	8007588 <HAL_TIM_IC_Start+0x9c>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b08      	cmp	r3, #8
 8007574:	d104      	bne.n	8007580 <HAL_TIM_IC_Start+0x94>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e003      	b.n	8007588 <HAL_TIM_IC_Start+0x9c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007586:	b2db      	uxtb	r3, r3
 8007588:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d102      	bne.n	8007596 <HAL_TIM_IC_Start+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d001      	beq.n	800759a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e08d      	b.n	80076b6 <HAL_TIM_IC_Start+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_TIM_IC_Start+0xbe>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	e023      	b.n	80075f2 <HAL_TIM_IC_Start+0x106>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_IC_Start+0xce>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b8:	e01b      	b.n	80075f2 <HAL_TIM_IC_Start+0x106>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d104      	bne.n	80075ca <HAL_TIM_IC_Start+0xde>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c8:	e013      	b.n	80075f2 <HAL_TIM_IC_Start+0x106>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	d104      	bne.n	80075da <HAL_TIM_IC_Start+0xee>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075d8:	e00b      	b.n	80075f2 <HAL_TIM_IC_Start+0x106>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d104      	bne.n	80075ea <HAL_TIM_IC_Start+0xfe>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e8:	e003      	b.n	80075f2 <HAL_TIM_IC_Start+0x106>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_IC_Start+0x116>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007600:	e013      	b.n	800762a <HAL_TIM_IC_Start+0x13e>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d104      	bne.n	8007612 <HAL_TIM_IC_Start+0x126>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007610:	e00b      	b.n	800762a <HAL_TIM_IC_Start+0x13e>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b08      	cmp	r3, #8
 8007616:	d104      	bne.n	8007622 <HAL_TIM_IC_Start+0x136>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007620:	e003      	b.n	800762a <HAL_TIM_IC_Start+0x13e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2201      	movs	r2, #1
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f8ac 	bl	8008790 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a20      	ldr	r2, [pc, #128]	; (80076c0 <HAL_TIM_IC_Start+0x1d4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_TIM_IC_Start+0x188>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764a:	d013      	beq.n	8007674 <HAL_TIM_IC_Start+0x188>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_TIM_IC_Start+0x1d8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIM_IC_Start+0x188>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_TIM_IC_Start+0x1dc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIM_IC_Start+0x188>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a19      	ldr	r2, [pc, #100]	; (80076cc <HAL_TIM_IC_Start+0x1e0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIM_IC_Start+0x188>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <HAL_TIM_IC_Start+0x1e4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d115      	bne.n	80076a0 <HAL_TIM_IC_Start+0x1b4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	4b16      	ldr	r3, [pc, #88]	; (80076d4 <HAL_TIM_IC_Start+0x1e8>)
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b06      	cmp	r3, #6
 8007684:	d015      	beq.n	80076b2 <HAL_TIM_IC_Start+0x1c6>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d011      	beq.n	80076b2 <HAL_TIM_IC_Start+0x1c6>
    {
      __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769e:	e008      	b.n	80076b2 <HAL_TIM_IC_Start+0x1c6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e000      	b.n	80076b4 <HAL_TIM_IC_Start+0x1c8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40013400 	.word	0x40013400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	00010007 	.word	0x00010007

080076d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e097      	b.n	800781c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fb fd5b 	bl	80031bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800771c:	f023 0307 	bic.w	r3, r3, #7
 8007720:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f000 fc0d 	bl	8007f4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	4313      	orrs	r3, r2
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007778:	f023 030c 	bic.w	r3, r3, #12
 800777c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	4313      	orrs	r3, r2
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	011a      	lsls	r2, r3, #4
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	031b      	lsls	r3, r3, #12
 80077a8:	4313      	orrs	r3, r2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	4313      	orrs	r3, r2
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d122      	bne.n	8007880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d11b      	bne.n	8007880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0202 	mvn.w	r2, #2
 8007850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb52 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 800786c:	e005      	b.n	800787a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb44 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fb55 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b04      	cmp	r3, #4
 800788c:	d122      	bne.n	80078d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d11b      	bne.n	80078d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0204 	mvn.w	r2, #4
 80078a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb28 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 80078c0:	e005      	b.n	80078ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fb1a 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fb2b 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d122      	bne.n	8007928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d11b      	bne.n	8007928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0208 	mvn.w	r2, #8
 80078f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2204      	movs	r2, #4
 80078fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fafe 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007914:	e005      	b.n	8007922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 faf0 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fb01 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b10      	cmp	r3, #16
 8007934:	d122      	bne.n	800797c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b10      	cmp	r3, #16
 8007942:	d11b      	bne.n	800797c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0210 	mvn.w	r2, #16
 800794c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2208      	movs	r2, #8
 8007952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fad4 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007968:	e005      	b.n	8007976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fac6 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fad7 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0201 	mvn.w	r2, #1
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 faa0 	bl	8007ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d10e      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 f830 	bl	8008a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e2:	d10e      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 f823 	bl	8008a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d10e      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1a:	2b40      	cmp	r3, #64	; 0x40
 8007a1c:	d107      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa85 	bl	8007f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d10e      	bne.n	8007a5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d107      	bne.n	8007a5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f06f 0220 	mvn.w	r2, #32
 8007a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 ffe3 	bl	8008a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a68:	d10f      	bne.n	8007a8a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a78:	d107      	bne.n	8007a8a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 ffe9 	bl	8008a5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a98:	d10f      	bne.n	8007aba <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa8:	d107      	bne.n	8007aba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 ffdb 	bl	8008a70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac8:	d10f      	bne.n	8007aea <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad8:	d107      	bne.n	8007aea <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 ffcd 	bl	8008a84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007af8:	d10f      	bne.n	8007b1a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b08:	d107      	bne.n	8007b1a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 ffbf 	bl	8008a98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0fd      	b.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x216>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b14      	cmp	r3, #20
 8007b4a:	f200 80f0 	bhi.w	8007d2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007ba9 	.word	0x08007ba9
 8007b58:	08007d2f 	.word	0x08007d2f
 8007b5c:	08007d2f 	.word	0x08007d2f
 8007b60:	08007d2f 	.word	0x08007d2f
 8007b64:	08007be9 	.word	0x08007be9
 8007b68:	08007d2f 	.word	0x08007d2f
 8007b6c:	08007d2f 	.word	0x08007d2f
 8007b70:	08007d2f 	.word	0x08007d2f
 8007b74:	08007c2b 	.word	0x08007c2b
 8007b78:	08007d2f 	.word	0x08007d2f
 8007b7c:	08007d2f 	.word	0x08007d2f
 8007b80:	08007d2f 	.word	0x08007d2f
 8007b84:	08007c6b 	.word	0x08007c6b
 8007b88:	08007d2f 	.word	0x08007d2f
 8007b8c:	08007d2f 	.word	0x08007d2f
 8007b90:	08007d2f 	.word	0x08007d2f
 8007b94:	08007cad 	.word	0x08007cad
 8007b98:	08007d2f 	.word	0x08007d2f
 8007b9c:	08007d2f 	.word	0x08007d2f
 8007ba0:	08007d2f 	.word	0x08007d2f
 8007ba4:	08007ced 	.word	0x08007ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fa5c 	bl	800806c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0208 	orr.w	r2, r2, #8
 8007bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0204 	bic.w	r2, r2, #4
 8007bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6999      	ldr	r1, [r3, #24]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	619a      	str	r2, [r3, #24]
      break;
 8007be6:	e0a3      	b.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 facc 	bl	800818c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6999      	ldr	r1, [r3, #24]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	021a      	lsls	r2, r3, #8
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	619a      	str	r2, [r3, #24]
      break;
 8007c28:	e082      	b.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fb35 	bl	80082a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0208 	orr.w	r2, r2, #8
 8007c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0204 	bic.w	r2, r2, #4
 8007c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	61da      	str	r2, [r3, #28]
      break;
 8007c68:	e062      	b.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fb9d 	bl	80083b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69d9      	ldr	r1, [r3, #28]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	021a      	lsls	r2, r3, #8
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	61da      	str	r2, [r3, #28]
      break;
 8007caa:	e041      	b.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fc06 	bl	80084c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0208 	orr.w	r2, r2, #8
 8007cc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0204 	bic.w	r2, r2, #4
 8007cd6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007cea:	e021      	b.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fc4a 	bl	800858c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	021a      	lsls	r2, r3, #8
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007d2c:	e000      	b.n	8007d30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007d2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_TIM_ConfigClockSource+0x18>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e0b9      	b.n	8007ed0 <HAL_TIM_ConfigClockSource+0x18c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b70      	cmp	r3, #112	; 0x70
 8007d96:	d02e      	beq.n	8007df6 <HAL_TIM_ConfigClockSource+0xb2>
 8007d98:	2b70      	cmp	r3, #112	; 0x70
 8007d9a:	d812      	bhi.n	8007dc2 <HAL_TIM_ConfigClockSource+0x7e>
 8007d9c:	2b30      	cmp	r3, #48	; 0x30
 8007d9e:	f000 8084 	beq.w	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007da2:	2b30      	cmp	r3, #48	; 0x30
 8007da4:	d806      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x70>
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d07f      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d07d      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d07b      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007db2:	e084      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007db4:	2b50      	cmp	r3, #80	; 0x50
 8007db6:	d048      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x106>
 8007db8:	2b60      	cmp	r3, #96	; 0x60
 8007dba:	d056      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x126>
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d064      	beq.n	8007e8a <HAL_TIM_ConfigClockSource+0x146>
      break;
 8007dc0:	e07d      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007dc2:	4a45      	ldr	r2, [pc, #276]	; (8007ed8 <HAL_TIM_ConfigClockSource+0x194>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d070      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007dc8:	4a43      	ldr	r2, [pc, #268]	; (8007ed8 <HAL_TIM_ConfigClockSource+0x194>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d809      	bhi.n	8007de2 <HAL_TIM_ConfigClockSource+0x9e>
 8007dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd2:	d027      	beq.n	8007e24 <HAL_TIM_ConfigClockSource+0xe0>
 8007dd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007dd8:	d067      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dde:	d06d      	beq.n	8007ebc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007de0:	e06d      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007de2:	4a3e      	ldr	r2, [pc, #248]	; (8007edc <HAL_TIM_ConfigClockSource+0x198>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d060      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007de8:	4a3d      	ldr	r2, [pc, #244]	; (8007ee0 <HAL_TIM_ConfigClockSource+0x19c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d05d      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
 8007dee:	4a3d      	ldr	r2, [pc, #244]	; (8007ee4 <HAL_TIM_ConfigClockSource+0x1a0>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d05a      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0x166>
      break;
 8007df4:	e063      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	6899      	ldr	r1, [r3, #8]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f000 fca3 	bl	8008750 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	609a      	str	r2, [r3, #8]
      break;
 8007e22:	e04c      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f000 fc8c 	bl	8008750 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e46:	609a      	str	r2, [r3, #8]
      break;
 8007e48:	e039      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6859      	ldr	r1, [r3, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f000 fbfe 	bl	8008658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2150      	movs	r1, #80	; 0x50
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fc57 	bl	8008716 <TIM_ITRx_SetConfig>
      break;
 8007e68:	e029      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6859      	ldr	r1, [r3, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f000 fc1d 	bl	80086b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2160      	movs	r1, #96	; 0x60
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fc47 	bl	8008716 <TIM_ITRx_SetConfig>
      break;
 8007e88:	e019      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6859      	ldr	r1, [r3, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f000 fbde 	bl	8008658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2140      	movs	r1, #64	; 0x40
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fc37 	bl	8008716 <TIM_ITRx_SetConfig>
      break;
 8007ea8:	e009      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f000 fc2e 	bl	8008716 <TIM_ITRx_SetConfig>
        break;
 8007eba:	e000      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8007ebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	00100020 	.word	0x00100020
 8007edc:	00100040 	.word	0x00100040
 8007ee0:	00100070 	.word	0x00100070
 8007ee4:	00100030 	.word	0x00100030

08007ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a3c      	ldr	r2, [pc, #240]	; (8008050 <TIM_Base_SetConfig+0x104>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00f      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d00b      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a39      	ldr	r2, [pc, #228]	; (8008054 <TIM_Base_SetConfig+0x108>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a38      	ldr	r2, [pc, #224]	; (8008058 <TIM_Base_SetConfig+0x10c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a37      	ldr	r2, [pc, #220]	; (800805c <TIM_Base_SetConfig+0x110>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d108      	bne.n	8007f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a2d      	ldr	r2, [pc, #180]	; (8008050 <TIM_Base_SetConfig+0x104>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d01b      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa4:	d017      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a2a      	ldr	r2, [pc, #168]	; (8008054 <TIM_Base_SetConfig+0x108>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d013      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a29      	ldr	r2, [pc, #164]	; (8008058 <TIM_Base_SetConfig+0x10c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00f      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a28      	ldr	r2, [pc, #160]	; (800805c <TIM_Base_SetConfig+0x110>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00b      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a27      	ldr	r2, [pc, #156]	; (8008060 <TIM_Base_SetConfig+0x114>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d007      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a26      	ldr	r2, [pc, #152]	; (8008064 <TIM_Base_SetConfig+0x118>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a25      	ldr	r2, [pc, #148]	; (8008068 <TIM_Base_SetConfig+0x11c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d108      	bne.n	8007fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a10      	ldr	r2, [pc, #64]	; (8008050 <TIM_Base_SetConfig+0x104>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00f      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a11      	ldr	r2, [pc, #68]	; (800805c <TIM_Base_SetConfig+0x110>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00b      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a10      	ldr	r2, [pc, #64]	; (8008060 <TIM_Base_SetConfig+0x114>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d007      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a0f      	ldr	r2, [pc, #60]	; (8008064 <TIM_Base_SetConfig+0x118>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <TIM_Base_SetConfig+0x11c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d103      	bne.n	800803c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	615a      	str	r2, [r3, #20]
}
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40012c00 	.word	0x40012c00
 8008054:	40000400 	.word	0x40000400
 8008058:	40000800 	.word	0x40000800
 800805c:	40013400 	.word	0x40013400
 8008060:	40014000 	.word	0x40014000
 8008064:	40014400 	.word	0x40014400
 8008068:	40014800 	.word	0x40014800

0800806c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f023 0302 	bic.w	r3, r3, #2
 80080b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a2c      	ldr	r2, [pc, #176]	; (8008178 <TIM_OC1_SetConfig+0x10c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00f      	beq.n	80080ec <TIM_OC1_SetConfig+0x80>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a2b      	ldr	r2, [pc, #172]	; (800817c <TIM_OC1_SetConfig+0x110>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00b      	beq.n	80080ec <TIM_OC1_SetConfig+0x80>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a2a      	ldr	r2, [pc, #168]	; (8008180 <TIM_OC1_SetConfig+0x114>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d007      	beq.n	80080ec <TIM_OC1_SetConfig+0x80>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a29      	ldr	r2, [pc, #164]	; (8008184 <TIM_OC1_SetConfig+0x118>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC1_SetConfig+0x80>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a28      	ldr	r2, [pc, #160]	; (8008188 <TIM_OC1_SetConfig+0x11c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d10c      	bne.n	8008106 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0308 	bic.w	r3, r3, #8
 80080f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f023 0304 	bic.w	r3, r3, #4
 8008104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a1b      	ldr	r2, [pc, #108]	; (8008178 <TIM_OC1_SetConfig+0x10c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00f      	beq.n	800812e <TIM_OC1_SetConfig+0xc2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a1a      	ldr	r2, [pc, #104]	; (800817c <TIM_OC1_SetConfig+0x110>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d00b      	beq.n	800812e <TIM_OC1_SetConfig+0xc2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a19      	ldr	r2, [pc, #100]	; (8008180 <TIM_OC1_SetConfig+0x114>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d007      	beq.n	800812e <TIM_OC1_SetConfig+0xc2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a18      	ldr	r2, [pc, #96]	; (8008184 <TIM_OC1_SetConfig+0x118>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_OC1_SetConfig+0xc2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <TIM_OC1_SetConfig+0x11c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d111      	bne.n	8008152 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800813c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4313      	orrs	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4313      	orrs	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	621a      	str	r2, [r3, #32]
}
 800816c:	bf00      	nop
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40013400 	.word	0x40013400
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800

0800818c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0210 	bic.w	r2, r3, #16
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0320 	bic.w	r3, r3, #32
 80081da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a28      	ldr	r2, [pc, #160]	; (800828c <TIM_OC2_SetConfig+0x100>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC2_SetConfig+0x6c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a27      	ldr	r2, [pc, #156]	; (8008290 <TIM_OC2_SetConfig+0x104>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d10d      	bne.n	8008214 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a1d      	ldr	r2, [pc, #116]	; (800828c <TIM_OC2_SetConfig+0x100>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00f      	beq.n	800823c <TIM_OC2_SetConfig+0xb0>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a1c      	ldr	r2, [pc, #112]	; (8008290 <TIM_OC2_SetConfig+0x104>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00b      	beq.n	800823c <TIM_OC2_SetConfig+0xb0>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <TIM_OC2_SetConfig+0x108>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d007      	beq.n	800823c <TIM_OC2_SetConfig+0xb0>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a1a      	ldr	r2, [pc, #104]	; (8008298 <TIM_OC2_SetConfig+0x10c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <TIM_OC2_SetConfig+0xb0>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a19      	ldr	r2, [pc, #100]	; (800829c <TIM_OC2_SetConfig+0x110>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d113      	bne.n	8008264 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800824a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800

080082a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a27      	ldr	r2, [pc, #156]	; (800839c <TIM_OC3_SetConfig+0xfc>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d003      	beq.n	800830a <TIM_OC3_SetConfig+0x6a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a26      	ldr	r2, [pc, #152]	; (80083a0 <TIM_OC3_SetConfig+0x100>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d10d      	bne.n	8008326 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a1c      	ldr	r2, [pc, #112]	; (800839c <TIM_OC3_SetConfig+0xfc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00f      	beq.n	800834e <TIM_OC3_SetConfig+0xae>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <TIM_OC3_SetConfig+0x100>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d00b      	beq.n	800834e <TIM_OC3_SetConfig+0xae>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a1a      	ldr	r2, [pc, #104]	; (80083a4 <TIM_OC3_SetConfig+0x104>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d007      	beq.n	800834e <TIM_OC3_SetConfig+0xae>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <TIM_OC3_SetConfig+0x108>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d003      	beq.n	800834e <TIM_OC3_SetConfig+0xae>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a18      	ldr	r2, [pc, #96]	; (80083ac <TIM_OC3_SetConfig+0x10c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d113      	bne.n	8008376 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800835c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	621a      	str	r2, [r3, #32]
}
 8008390:	bf00      	nop
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	40012c00 	.word	0x40012c00
 80083a0:	40013400 	.word	0x40013400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800

080083b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	031b      	lsls	r3, r3, #12
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a28      	ldr	r2, [pc, #160]	; (80084b0 <TIM_OC4_SetConfig+0x100>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d003      	beq.n	800841c <TIM_OC4_SetConfig+0x6c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a27      	ldr	r2, [pc, #156]	; (80084b4 <TIM_OC4_SetConfig+0x104>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d10d      	bne.n	8008438 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	031b      	lsls	r3, r3, #12
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4313      	orrs	r3, r2
 800842e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008436:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <TIM_OC4_SetConfig+0x100>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00f      	beq.n	8008460 <TIM_OC4_SetConfig+0xb0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a1c      	ldr	r2, [pc, #112]	; (80084b4 <TIM_OC4_SetConfig+0x104>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00b      	beq.n	8008460 <TIM_OC4_SetConfig+0xb0>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a1b      	ldr	r2, [pc, #108]	; (80084b8 <TIM_OC4_SetConfig+0x108>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d007      	beq.n	8008460 <TIM_OC4_SetConfig+0xb0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <TIM_OC4_SetConfig+0x10c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_OC4_SetConfig+0xb0>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a19      	ldr	r2, [pc, #100]	; (80084c0 <TIM_OC4_SetConfig+0x110>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d113      	bne.n	8008488 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008466:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800846e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	019b      	lsls	r3, r3, #6
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	621a      	str	r2, [r3, #32]
}
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40012c00 	.word	0x40012c00
 80084b4:	40013400 	.word	0x40013400
 80084b8:	40014000 	.word	0x40014000
 80084bc:	40014400 	.word	0x40014400
 80084c0:	40014800 	.word	0x40014800

080084c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008508:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	041b      	lsls	r3, r3, #16
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a17      	ldr	r2, [pc, #92]	; (8008578 <TIM_OC5_SetConfig+0xb4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00f      	beq.n	800853e <TIM_OC5_SetConfig+0x7a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a16      	ldr	r2, [pc, #88]	; (800857c <TIM_OC5_SetConfig+0xb8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00b      	beq.n	800853e <TIM_OC5_SetConfig+0x7a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a15      	ldr	r2, [pc, #84]	; (8008580 <TIM_OC5_SetConfig+0xbc>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d007      	beq.n	800853e <TIM_OC5_SetConfig+0x7a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a14      	ldr	r2, [pc, #80]	; (8008584 <TIM_OC5_SetConfig+0xc0>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <TIM_OC5_SetConfig+0x7a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a13      	ldr	r2, [pc, #76]	; (8008588 <TIM_OC5_SetConfig+0xc4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d109      	bne.n	8008552 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008544:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	621a      	str	r2, [r3, #32]
}
 800856c:	bf00      	nop
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40013400 	.word	0x40013400
 8008580:	40014000 	.word	0x40014000
 8008584:	40014400 	.word	0x40014400
 8008588:	40014800 	.word	0x40014800

0800858c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	021b      	lsls	r3, r3, #8
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	051b      	lsls	r3, r3, #20
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	4313      	orrs	r3, r2
 80085de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a18      	ldr	r2, [pc, #96]	; (8008644 <TIM_OC6_SetConfig+0xb8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00f      	beq.n	8008608 <TIM_OC6_SetConfig+0x7c>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a17      	ldr	r2, [pc, #92]	; (8008648 <TIM_OC6_SetConfig+0xbc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00b      	beq.n	8008608 <TIM_OC6_SetConfig+0x7c>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a16      	ldr	r2, [pc, #88]	; (800864c <TIM_OC6_SetConfig+0xc0>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d007      	beq.n	8008608 <TIM_OC6_SetConfig+0x7c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a15      	ldr	r2, [pc, #84]	; (8008650 <TIM_OC6_SetConfig+0xc4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <TIM_OC6_SetConfig+0x7c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a14      	ldr	r2, [pc, #80]	; (8008654 <TIM_OC6_SetConfig+0xc8>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d109      	bne.n	800861c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800860e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	029b      	lsls	r3, r3, #10
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	621a      	str	r2, [r3, #32]
}
 8008636:	bf00      	nop
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	40012c00 	.word	0x40012c00
 8008648:	40013400 	.word	0x40013400
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400
 8008654:	40014800 	.word	0x40014800

08008658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	f023 0201 	bic.w	r2, r3, #1
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f023 030a 	bic.w	r3, r3, #10
 8008694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	621a      	str	r2, [r3, #32]
}
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b087      	sub	sp, #28
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f023 0210 	bic.w	r2, r3, #16
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	031b      	lsls	r3, r3, #12
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	621a      	str	r2, [r3, #32]
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800872c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	f043 0307 	orr.w	r3, r3, #7
 800873c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	609a      	str	r2, [r3, #8]
}
 8008744:	bf00      	nop
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800876a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	021a      	lsls	r2, r3, #8
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	431a      	orrs	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	4313      	orrs	r3, r2
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	609a      	str	r2, [r3, #8]
}
 8008784:	bf00      	nop
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 031f 	and.w	r3, r3, #31
 80087a2:	2201      	movs	r2, #1
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1a      	ldr	r2, [r3, #32]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	fa01 f303 	lsl.w	r3, r1, r3
 80087c8:	431a      	orrs	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	621a      	str	r2, [r3, #32]
}
 80087ce:	bf00      	nop
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e065      	b.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a2c      	ldr	r2, [pc, #176]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d004      	beq.n	8008828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a2b      	ldr	r2, [pc, #172]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d108      	bne.n	800883a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800882e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d018      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d013      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a18      	ldr	r2, [pc, #96]	; (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00e      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d009      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a12      	ldr	r2, [pc, #72]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a13      	ldr	r2, [pc, #76]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d10c      	bne.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800889a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40013400 	.word	0x40013400
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40014000 	.word	0x40014000

080088e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e087      	b.n	8008a0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a27      	ldr	r2, [pc, #156]	; (8008a18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d004      	beq.n	800898a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d106      	bne.n	8008998 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1e      	ldr	r2, [pc, #120]	; (8008a18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d126      	bne.n	80089fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	051b      	lsls	r3, r3, #20
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a0e      	ldr	r2, [pc, #56]	; (8008a18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d004      	beq.n	80089ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a0d      	ldr	r2, [pc, #52]	; (8008a1c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d106      	bne.n	80089fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	40012c00 	.word	0x40012c00
 8008a1c:	40013400 	.word	0x40013400

08008a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e042      	b.n	8008b44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d106      	bne.n	8008ad6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fa fc29 	bl	8003328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2224      	movs	r2, #36	; 0x24
 8008ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fad2 	bl	8009098 <UART_SetConfig>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e022      	b.n	8008b44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fd6e 	bl	80095e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0201 	orr.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fdf5 	bl	800972c <UART_CheckIdleState>
 8008b42:	4603      	mov	r3, r0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d168      	bne.n	8008c36 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_UART_Transmit_DMA+0x24>
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e061      	b.n	8008c38 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d101      	bne.n	8008b82 <HAL_UART_Transmit_DMA+0x36>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	e05a      	b.n	8008c38 <HAL_UART_Transmit_DMA+0xec>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	88fa      	ldrh	r2, [r7, #6]
 8008b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2221      	movs	r2, #33	; 0x21
 8008bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d02c      	beq.n	8008c12 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bbc:	4a20      	ldr	r2, [pc, #128]	; (8008c40 <HAL_UART_Transmit_DMA+0xf4>)
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc4:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <HAL_UART_Transmit_DMA+0xf8>)
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bcc:	4a1e      	ldr	r2, [pc, #120]	; (8008c48 <HAL_UART_Transmit_DMA+0xfc>)
 8008bce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be0:	4619      	mov	r1, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3328      	adds	r3, #40	; 0x28
 8008be8:	461a      	mov	r2, r3
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	f7fc fbf2 	bl	80053d4 <HAL_DMA_Start_IT>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2210      	movs	r2, #16
 8008bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e012      	b.n	8008c38 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2240      	movs	r2, #64	; 0x40
 8008c18:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c30:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e000      	b.n	8008c38 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008c36:	2302      	movs	r3, #2
  }
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	0800993f 	.word	0x0800993f
 8008c44:	08009993 	.word	0x08009993
 8008c48:	08009a35 	.word	0x08009a35

08008c4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d170      	bne.n	8008d46 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <HAL_UART_Receive_DMA+0x24>
 8008c6a:	88fb      	ldrh	r3, [r7, #6]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e069      	b.n	8008d48 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <HAL_UART_Receive_DMA+0x36>
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e062      	b.n	8008d48 <HAL_UART_Receive_DMA+0xfc>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2222      	movs	r2, #34	; 0x22
 8008ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02c      	beq.n	8008d0a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cb4:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <HAL_UART_Receive_DMA+0x104>)
 8008cb6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cbc:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <HAL_UART_Receive_DMA+0x108>)
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cc4:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <HAL_UART_Receive_DMA+0x10c>)
 8008cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ccc:	2200      	movs	r2, #0
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3324      	adds	r3, #36	; 0x24
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	f7fc fb76 	bl	80053d4 <HAL_DMA_Start_IT>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2210      	movs	r2, #16
 8008cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e01e      	b.n	8008d48 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d20:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 0201 	orr.w	r2, r2, #1
 8008d30:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d40:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e000      	b.n	8008d48 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8008d46:	2302      	movs	r3, #2
  }
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	080099af 	.word	0x080099af
 8008d54:	08009a19 	.word	0x08009a19
 8008d58:	08009a35 	.word	0x08009a35

08008d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d7c:	69fa      	ldr	r2, [r7, #28]
 8008d7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d82:	4013      	ands	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d118      	bne.n	8008dbe <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d013      	beq.n	8008dbe <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d009      	beq.n	8008dbe <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 8145 	beq.w	800903e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
      }
      return;
 8008dbc:	e13f      	b.n	800903e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80e8 	beq.w	8008f96 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4ba1      	ldr	r3, [pc, #644]	; (8009050 <HAL_UART_IRQHandler+0x2f4>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d105      	bne.n	8008ddc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4ba0      	ldr	r3, [pc, #640]	; (8009054 <HAL_UART_IRQHandler+0x2f8>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 80dd 	beq.w	8008f96 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d010      	beq.n	8008e08 <HAL_UART_IRQHandler+0xac>
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2201      	movs	r2, #1
 8008df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dfe:	f043 0201 	orr.w	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d010      	beq.n	8008e34 <HAL_UART_IRQHandler+0xd8>
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2202      	movs	r2, #2
 8008e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d010      	beq.n	8008e60 <HAL_UART_IRQHandler+0x104>
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e56:	f043 0202 	orr.w	r2, r3, #2
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d015      	beq.n	8008e96 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4b76      	ldr	r3, [pc, #472]	; (8009050 <HAL_UART_IRQHandler+0x2f4>)
 8008e78:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2208      	movs	r2, #8
 8008e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e8c:	f043 0208 	orr.w	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d011      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x168>
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00c      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eba:	f043 0220 	orr.w	r2, r3, #32
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 80b9 	beq.w	8009042 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d011      	beq.n	8008efe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f04:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f10:	2b40      	cmp	r3, #64	; 0x40
 8008f12:	d004      	beq.n	8008f1e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d031      	beq.n	8008f82 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fcea 	bl	80098f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d123      	bne.n	8008f7a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f40:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d013      	beq.n	8008f72 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f4e:	4a42      	ldr	r2, [pc, #264]	; (8009058 <HAL_UART_IRQHandler+0x2fc>)
 8008f50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fc fab7 	bl	80054ca <HAL_DMA_Abort_IT>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d017      	beq.n	8008f92 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	e00f      	b.n	8008f92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7f9 fd74 	bl	8002a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f78:	e00b      	b.n	8008f92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7f9 fd70 	bl	8002a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f80:	e007      	b.n	8008f92 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7f9 fd6c 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008f90:	e057      	b.n	8009042 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f92:	bf00      	nop
    return;
 8008f94:	e055      	b.n	8009042 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00d      	beq.n	8008fbc <HAL_UART_IRQHandler+0x260>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fdad 	bl	8009b14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fba:	e045      	b.n	8009048 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d012      	beq.n	8008fec <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d031      	beq.n	8009046 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	4798      	blx	r3
    }
    return;
 8008fea:	e02c      	b.n	8009046 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <HAL_UART_IRQHandler+0x2ac>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fd6d 	bl	8009ae0 <UART_EndTransmit_IT>
    return;
 8009006:	e01f      	b.n	8009048 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d008      	beq.n	8009024 <HAL_UART_IRQHandler+0x2c8>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fd8d 	bl	8009b3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009022:	e011      	b.n	8009048 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00c      	beq.n	8009048 <HAL_UART_IRQHandler+0x2ec>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	da09      	bge.n	8009048 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fd77 	bl	8009b28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800903a:	bf00      	nop
 800903c:	e004      	b.n	8009048 <HAL_UART_IRQHandler+0x2ec>
      return;
 800903e:	bf00      	nop
 8009040:	e002      	b.n	8009048 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009042:	bf00      	nop
 8009044:	e000      	b.n	8009048 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009046:	bf00      	nop
  }
}
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	10000001 	.word	0x10000001
 8009054:	04000120 	.word	0x04000120
 8009058:	08009ab5 	.word	0x08009ab5

0800905c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009098:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	4bb0      	ldr	r3, [pc, #704]	; (8009390 <UART_SetConfig+0x2f8>)
 80090d0:	4013      	ands	r3, r2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6812      	ldr	r2, [r2, #0]
 80090d6:	69f9      	ldr	r1, [r7, #28]
 80090d8:	430b      	orrs	r3, r1
 80090da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4aa5      	ldr	r2, [pc, #660]	; (8009394 <UART_SetConfig+0x2fc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d004      	beq.n	800910c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	4313      	orrs	r3, r2
 800910a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009116:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6812      	ldr	r2, [r2, #0]
 800911e:	69f9      	ldr	r1, [r7, #28]
 8009120:	430b      	orrs	r3, r1
 8009122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	f023 010f 	bic.w	r1, r3, #15
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	430a      	orrs	r2, r1
 8009138:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a96      	ldr	r2, [pc, #600]	; (8009398 <UART_SetConfig+0x300>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d121      	bne.n	8009188 <UART_SetConfig+0xf0>
 8009144:	4b95      	ldr	r3, [pc, #596]	; (800939c <UART_SetConfig+0x304>)
 8009146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	2b03      	cmp	r3, #3
 8009150:	d816      	bhi.n	8009180 <UART_SetConfig+0xe8>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <UART_SetConfig+0xc0>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009169 	.word	0x08009169
 800915c:	08009175 	.word	0x08009175
 8009160:	0800916f 	.word	0x0800916f
 8009164:	0800917b 	.word	0x0800917b
 8009168:	2301      	movs	r3, #1
 800916a:	76fb      	strb	r3, [r7, #27]
 800916c:	e0be      	b.n	80092ec <UART_SetConfig+0x254>
 800916e:	2302      	movs	r3, #2
 8009170:	76fb      	strb	r3, [r7, #27]
 8009172:	e0bb      	b.n	80092ec <UART_SetConfig+0x254>
 8009174:	2304      	movs	r3, #4
 8009176:	76fb      	strb	r3, [r7, #27]
 8009178:	e0b8      	b.n	80092ec <UART_SetConfig+0x254>
 800917a:	2308      	movs	r3, #8
 800917c:	76fb      	strb	r3, [r7, #27]
 800917e:	e0b5      	b.n	80092ec <UART_SetConfig+0x254>
 8009180:	2310      	movs	r3, #16
 8009182:	76fb      	strb	r3, [r7, #27]
 8009184:	bf00      	nop
 8009186:	e0b1      	b.n	80092ec <UART_SetConfig+0x254>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a84      	ldr	r2, [pc, #528]	; (80093a0 <UART_SetConfig+0x308>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d134      	bne.n	80091fc <UART_SetConfig+0x164>
 8009192:	4b82      	ldr	r3, [pc, #520]	; (800939c <UART_SetConfig+0x304>)
 8009194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009198:	f003 030c 	and.w	r3, r3, #12
 800919c:	2b0c      	cmp	r3, #12
 800919e:	d829      	bhi.n	80091f4 <UART_SetConfig+0x15c>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <UART_SetConfig+0x110>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091dd 	.word	0x080091dd
 80091ac:	080091f5 	.word	0x080091f5
 80091b0:	080091f5 	.word	0x080091f5
 80091b4:	080091f5 	.word	0x080091f5
 80091b8:	080091e9 	.word	0x080091e9
 80091bc:	080091f5 	.word	0x080091f5
 80091c0:	080091f5 	.word	0x080091f5
 80091c4:	080091f5 	.word	0x080091f5
 80091c8:	080091e3 	.word	0x080091e3
 80091cc:	080091f5 	.word	0x080091f5
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091f5 	.word	0x080091f5
 80091d8:	080091ef 	.word	0x080091ef
 80091dc:	2300      	movs	r3, #0
 80091de:	76fb      	strb	r3, [r7, #27]
 80091e0:	e084      	b.n	80092ec <UART_SetConfig+0x254>
 80091e2:	2302      	movs	r3, #2
 80091e4:	76fb      	strb	r3, [r7, #27]
 80091e6:	e081      	b.n	80092ec <UART_SetConfig+0x254>
 80091e8:	2304      	movs	r3, #4
 80091ea:	76fb      	strb	r3, [r7, #27]
 80091ec:	e07e      	b.n	80092ec <UART_SetConfig+0x254>
 80091ee:	2308      	movs	r3, #8
 80091f0:	76fb      	strb	r3, [r7, #27]
 80091f2:	e07b      	b.n	80092ec <UART_SetConfig+0x254>
 80091f4:	2310      	movs	r3, #16
 80091f6:	76fb      	strb	r3, [r7, #27]
 80091f8:	bf00      	nop
 80091fa:	e077      	b.n	80092ec <UART_SetConfig+0x254>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a68      	ldr	r2, [pc, #416]	; (80093a4 <UART_SetConfig+0x30c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d120      	bne.n	8009248 <UART_SetConfig+0x1b0>
 8009206:	4b65      	ldr	r3, [pc, #404]	; (800939c <UART_SetConfig+0x304>)
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009210:	2b10      	cmp	r3, #16
 8009212:	d00f      	beq.n	8009234 <UART_SetConfig+0x19c>
 8009214:	2b10      	cmp	r3, #16
 8009216:	d802      	bhi.n	800921e <UART_SetConfig+0x186>
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <UART_SetConfig+0x190>
 800921c:	e010      	b.n	8009240 <UART_SetConfig+0x1a8>
 800921e:	2b20      	cmp	r3, #32
 8009220:	d005      	beq.n	800922e <UART_SetConfig+0x196>
 8009222:	2b30      	cmp	r3, #48	; 0x30
 8009224:	d009      	beq.n	800923a <UART_SetConfig+0x1a2>
 8009226:	e00b      	b.n	8009240 <UART_SetConfig+0x1a8>
 8009228:	2300      	movs	r3, #0
 800922a:	76fb      	strb	r3, [r7, #27]
 800922c:	e05e      	b.n	80092ec <UART_SetConfig+0x254>
 800922e:	2302      	movs	r3, #2
 8009230:	76fb      	strb	r3, [r7, #27]
 8009232:	e05b      	b.n	80092ec <UART_SetConfig+0x254>
 8009234:	2304      	movs	r3, #4
 8009236:	76fb      	strb	r3, [r7, #27]
 8009238:	e058      	b.n	80092ec <UART_SetConfig+0x254>
 800923a:	2308      	movs	r3, #8
 800923c:	76fb      	strb	r3, [r7, #27]
 800923e:	e055      	b.n	80092ec <UART_SetConfig+0x254>
 8009240:	2310      	movs	r3, #16
 8009242:	76fb      	strb	r3, [r7, #27]
 8009244:	bf00      	nop
 8009246:	e051      	b.n	80092ec <UART_SetConfig+0x254>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a56      	ldr	r2, [pc, #344]	; (80093a8 <UART_SetConfig+0x310>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d120      	bne.n	8009294 <UART_SetConfig+0x1fc>
 8009252:	4b52      	ldr	r3, [pc, #328]	; (800939c <UART_SetConfig+0x304>)
 8009254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009258:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800925c:	2b40      	cmp	r3, #64	; 0x40
 800925e:	d00f      	beq.n	8009280 <UART_SetConfig+0x1e8>
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d802      	bhi.n	800926a <UART_SetConfig+0x1d2>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <UART_SetConfig+0x1dc>
 8009268:	e010      	b.n	800928c <UART_SetConfig+0x1f4>
 800926a:	2b80      	cmp	r3, #128	; 0x80
 800926c:	d005      	beq.n	800927a <UART_SetConfig+0x1e2>
 800926e:	2bc0      	cmp	r3, #192	; 0xc0
 8009270:	d009      	beq.n	8009286 <UART_SetConfig+0x1ee>
 8009272:	e00b      	b.n	800928c <UART_SetConfig+0x1f4>
 8009274:	2300      	movs	r3, #0
 8009276:	76fb      	strb	r3, [r7, #27]
 8009278:	e038      	b.n	80092ec <UART_SetConfig+0x254>
 800927a:	2302      	movs	r3, #2
 800927c:	76fb      	strb	r3, [r7, #27]
 800927e:	e035      	b.n	80092ec <UART_SetConfig+0x254>
 8009280:	2304      	movs	r3, #4
 8009282:	76fb      	strb	r3, [r7, #27]
 8009284:	e032      	b.n	80092ec <UART_SetConfig+0x254>
 8009286:	2308      	movs	r3, #8
 8009288:	76fb      	strb	r3, [r7, #27]
 800928a:	e02f      	b.n	80092ec <UART_SetConfig+0x254>
 800928c:	2310      	movs	r3, #16
 800928e:	76fb      	strb	r3, [r7, #27]
 8009290:	bf00      	nop
 8009292:	e02b      	b.n	80092ec <UART_SetConfig+0x254>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a3e      	ldr	r2, [pc, #248]	; (8009394 <UART_SetConfig+0x2fc>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d124      	bne.n	80092e8 <UART_SetConfig+0x250>
 800929e:	4b3f      	ldr	r3, [pc, #252]	; (800939c <UART_SetConfig+0x304>)
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ac:	d012      	beq.n	80092d4 <UART_SetConfig+0x23c>
 80092ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b2:	d802      	bhi.n	80092ba <UART_SetConfig+0x222>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d007      	beq.n	80092c8 <UART_SetConfig+0x230>
 80092b8:	e012      	b.n	80092e0 <UART_SetConfig+0x248>
 80092ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092be:	d006      	beq.n	80092ce <UART_SetConfig+0x236>
 80092c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092c4:	d009      	beq.n	80092da <UART_SetConfig+0x242>
 80092c6:	e00b      	b.n	80092e0 <UART_SetConfig+0x248>
 80092c8:	2300      	movs	r3, #0
 80092ca:	76fb      	strb	r3, [r7, #27]
 80092cc:	e00e      	b.n	80092ec <UART_SetConfig+0x254>
 80092ce:	2302      	movs	r3, #2
 80092d0:	76fb      	strb	r3, [r7, #27]
 80092d2:	e00b      	b.n	80092ec <UART_SetConfig+0x254>
 80092d4:	2304      	movs	r3, #4
 80092d6:	76fb      	strb	r3, [r7, #27]
 80092d8:	e008      	b.n	80092ec <UART_SetConfig+0x254>
 80092da:	2308      	movs	r3, #8
 80092dc:	76fb      	strb	r3, [r7, #27]
 80092de:	e005      	b.n	80092ec <UART_SetConfig+0x254>
 80092e0:	2310      	movs	r3, #16
 80092e2:	76fb      	strb	r3, [r7, #27]
 80092e4:	bf00      	nop
 80092e6:	e001      	b.n	80092ec <UART_SetConfig+0x254>
 80092e8:	2310      	movs	r3, #16
 80092ea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a28      	ldr	r2, [pc, #160]	; (8009394 <UART_SetConfig+0x2fc>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	f040 80a1 	bne.w	800943a <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092f8:	7efb      	ldrb	r3, [r7, #27]
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d823      	bhi.n	8009346 <UART_SetConfig+0x2ae>
 80092fe:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <UART_SetConfig+0x26c>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009329 	.word	0x08009329
 8009308:	08009347 	.word	0x08009347
 800930c:	08009331 	.word	0x08009331
 8009310:	08009347 	.word	0x08009347
 8009314:	08009337 	.word	0x08009337
 8009318:	08009347 	.word	0x08009347
 800931c:	08009347 	.word	0x08009347
 8009320:	08009347 	.word	0x08009347
 8009324:	0800933f 	.word	0x0800933f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009328:	f7fd fc1c 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 800932c:	6178      	str	r0, [r7, #20]
        break;
 800932e:	e00f      	b.n	8009350 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009330:	4b1e      	ldr	r3, [pc, #120]	; (80093ac <UART_SetConfig+0x314>)
 8009332:	617b      	str	r3, [r7, #20]
        break;
 8009334:	e00c      	b.n	8009350 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009336:	f7fd fba7 	bl	8006a88 <HAL_RCC_GetSysClockFreq>
 800933a:	6178      	str	r0, [r7, #20]
        break;
 800933c:	e008      	b.n	8009350 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800933e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009342:	617b      	str	r3, [r7, #20]
        break;
 8009344:	e004      	b.n	8009350 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	76bb      	strb	r3, [r7, #26]
        break;
 800934e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 8130 	beq.w	80095b8 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <UART_SetConfig+0x318>)
 800935e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009362:	461a      	mov	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	fbb3 f3f2 	udiv	r3, r3, r2
 800936a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	4413      	add	r3, r2
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	429a      	cmp	r2, r3
 800937a:	d305      	bcc.n	8009388 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	429a      	cmp	r2, r3
 8009386:	d915      	bls.n	80093b4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	76bb      	strb	r3, [r7, #26]
 800938c:	e114      	b.n	80095b8 <UART_SetConfig+0x520>
 800938e:	bf00      	nop
 8009390:	cfff69f3 	.word	0xcfff69f3
 8009394:	40008000 	.word	0x40008000
 8009398:	40013800 	.word	0x40013800
 800939c:	40021000 	.word	0x40021000
 80093a0:	40004400 	.word	0x40004400
 80093a4:	40004800 	.word	0x40004800
 80093a8:	40004c00 	.word	0x40004c00
 80093ac:	00f42400 	.word	0x00f42400
 80093b0:	0800a048 	.word	0x0800a048
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f04f 0100 	mov.w	r1, #0
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	4a87      	ldr	r2, [pc, #540]	; (80095e0 <UART_SetConfig+0x548>)
 80093c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f04f 0400 	mov.w	r4, #0
 80093cc:	461a      	mov	r2, r3
 80093ce:	4623      	mov	r3, r4
 80093d0:	f7f6 ff22 	bl	8000218 <__aeabi_uldivmod>
 80093d4:	4603      	mov	r3, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	4619      	mov	r1, r3
 80093da:	4622      	mov	r2, r4
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	f04f 0400 	mov.w	r4, #0
 80093e4:	0214      	lsls	r4, r2, #8
 80093e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80093ea:	020b      	lsls	r3, r1, #8
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6852      	ldr	r2, [r2, #4]
 80093f0:	0852      	lsrs	r2, r2, #1
 80093f2:	4611      	mov	r1, r2
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	eb13 0b01 	adds.w	fp, r3, r1
 80093fc:	eb44 0c02 	adc.w	ip, r4, r2
 8009400:	4658      	mov	r0, fp
 8009402:	4661      	mov	r1, ip
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f04f 0400 	mov.w	r4, #0
 800940c:	461a      	mov	r2, r3
 800940e:	4623      	mov	r3, r4
 8009410:	f7f6 ff02 	bl	8000218 <__aeabi_uldivmod>
 8009414:	4603      	mov	r3, r0
 8009416:	460c      	mov	r4, r1
 8009418:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009420:	d308      	bcc.n	8009434 <UART_SetConfig+0x39c>
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009428:	d204      	bcs.n	8009434 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	60da      	str	r2, [r3, #12]
 8009432:	e0c1      	b.n	80095b8 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	76bb      	strb	r3, [r7, #26]
 8009438:	e0be      	b.n	80095b8 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009442:	d164      	bne.n	800950e <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8009444:	7efb      	ldrb	r3, [r7, #27]
 8009446:	2b08      	cmp	r3, #8
 8009448:	d827      	bhi.n	800949a <UART_SetConfig+0x402>
 800944a:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <UART_SetConfig+0x3b8>)
 800944c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009450:	08009475 	.word	0x08009475
 8009454:	0800947d 	.word	0x0800947d
 8009458:	08009485 	.word	0x08009485
 800945c:	0800949b 	.word	0x0800949b
 8009460:	0800948b 	.word	0x0800948b
 8009464:	0800949b 	.word	0x0800949b
 8009468:	0800949b 	.word	0x0800949b
 800946c:	0800949b 	.word	0x0800949b
 8009470:	08009493 	.word	0x08009493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009474:	f7fd fb76 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 8009478:	6178      	str	r0, [r7, #20]
        break;
 800947a:	e013      	b.n	80094a4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800947c:	f7fd fb88 	bl	8006b90 <HAL_RCC_GetPCLK2Freq>
 8009480:	6178      	str	r0, [r7, #20]
        break;
 8009482:	e00f      	b.n	80094a4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009484:	4b57      	ldr	r3, [pc, #348]	; (80095e4 <UART_SetConfig+0x54c>)
 8009486:	617b      	str	r3, [r7, #20]
        break;
 8009488:	e00c      	b.n	80094a4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800948a:	f7fd fafd 	bl	8006a88 <HAL_RCC_GetSysClockFreq>
 800948e:	6178      	str	r0, [r7, #20]
        break;
 8009490:	e008      	b.n	80094a4 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009496:	617b      	str	r3, [r7, #20]
        break;
 8009498:	e004      	b.n	80094a4 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	76bb      	strb	r3, [r7, #26]
        break;
 80094a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 8086 	beq.w	80095b8 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	4a4b      	ldr	r2, [pc, #300]	; (80095e0 <UART_SetConfig+0x548>)
 80094b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094b6:	461a      	mov	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80094be:	005a      	lsls	r2, r3, #1
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	085b      	lsrs	r3, r3, #1
 80094c6:	441a      	add	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	d916      	bls.n	8009508 <UART_SetConfig+0x470>
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094e0:	d212      	bcs.n	8009508 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f023 030f 	bic.w	r3, r3, #15
 80094ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	89fb      	ldrh	r3, [r7, #14]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	89fa      	ldrh	r2, [r7, #14]
 8009504:	60da      	str	r2, [r3, #12]
 8009506:	e057      	b.n	80095b8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	76bb      	strb	r3, [r7, #26]
 800950c:	e054      	b.n	80095b8 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800950e:	7efb      	ldrb	r3, [r7, #27]
 8009510:	2b08      	cmp	r3, #8
 8009512:	d828      	bhi.n	8009566 <UART_SetConfig+0x4ce>
 8009514:	a201      	add	r2, pc, #4	; (adr r2, 800951c <UART_SetConfig+0x484>)
 8009516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951a:	bf00      	nop
 800951c:	08009541 	.word	0x08009541
 8009520:	08009549 	.word	0x08009549
 8009524:	08009551 	.word	0x08009551
 8009528:	08009567 	.word	0x08009567
 800952c:	08009557 	.word	0x08009557
 8009530:	08009567 	.word	0x08009567
 8009534:	08009567 	.word	0x08009567
 8009538:	08009567 	.word	0x08009567
 800953c:	0800955f 	.word	0x0800955f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009540:	f7fd fb10 	bl	8006b64 <HAL_RCC_GetPCLK1Freq>
 8009544:	6178      	str	r0, [r7, #20]
        break;
 8009546:	e013      	b.n	8009570 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009548:	f7fd fb22 	bl	8006b90 <HAL_RCC_GetPCLK2Freq>
 800954c:	6178      	str	r0, [r7, #20]
        break;
 800954e:	e00f      	b.n	8009570 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009550:	4b24      	ldr	r3, [pc, #144]	; (80095e4 <UART_SetConfig+0x54c>)
 8009552:	617b      	str	r3, [r7, #20]
        break;
 8009554:	e00c      	b.n	8009570 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009556:	f7fd fa97 	bl	8006a88 <HAL_RCC_GetSysClockFreq>
 800955a:	6178      	str	r0, [r7, #20]
        break;
 800955c:	e008      	b.n	8009570 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800955e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009562:	617b      	str	r3, [r7, #20]
        break;
 8009564:	e004      	b.n	8009570 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	76bb      	strb	r3, [r7, #26]
        break;
 800956e:	bf00      	nop
    }

    if (pclk != 0U)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d020      	beq.n	80095b8 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	4a19      	ldr	r2, [pc, #100]	; (80095e0 <UART_SetConfig+0x548>)
 800957c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009580:	461a      	mov	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	fbb3 f2f2 	udiv	r2, r3, r2
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	441a      	add	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	b29b      	uxth	r3, r3
 800959a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b0f      	cmp	r3, #15
 80095a0:	d908      	bls.n	80095b4 <UART_SetConfig+0x51c>
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095a8:	d204      	bcs.n	80095b4 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	60da      	str	r2, [r3, #12]
 80095b2:	e001      	b.n	80095b8 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80095d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80095e0:	0800a048 	.word	0x0800a048
 80095e4:	00f42400 	.word	0x00f42400

080095e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	430a      	orrs	r2, r1
 8009676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d01a      	beq.n	80096fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096e6:	d10a      	bne.n	80096fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00a      	beq.n	8009720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	605a      	str	r2, [r3, #4]
  }
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800973c:	f7f9 ffc2 	bl	80036c4 <HAL_GetTick>
 8009740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0308 	and.w	r3, r3, #8
 800974c:	2b08      	cmp	r3, #8
 800974e:	d10e      	bne.n	800976e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f82c 	bl	80097bc <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e022      	b.n	80097b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b04      	cmp	r3, #4
 800977a:	d10e      	bne.n	800979a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800977c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f816 	bl	80097bc <UART_WaitOnFlagUntilTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e00c      	b.n	80097b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097cc:	e062      	b.n	8009894 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d05e      	beq.n	8009894 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097d6:	f7f9 ff75 	bl	80036c4 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <UART_WaitOnFlagUntilTimeout+0x30>
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d11d      	bne.n	8009828 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0201 	bic.w	r2, r2, #1
 800980a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e045      	b.n	80098b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d02e      	beq.n	8009894 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009844:	d126      	bne.n	8009894 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800984e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800985e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0201 	bic.w	r2, r2, #1
 800986e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2220      	movs	r2, #32
 800987c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2220      	movs	r2, #32
 8009884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e00f      	b.n	80098b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69da      	ldr	r2, [r3, #28]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4013      	ands	r3, r2
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	bf0c      	ite	eq
 80098a4:	2301      	moveq	r3, #1
 80098a6:	2300      	movne	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d08d      	beq.n	80097ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80098d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689a      	ldr	r2, [r3, #8]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80098e2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800990e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800991e:	f023 0301 	bic.w	r3, r3, #1
 8009922:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	d114      	bne.n	8009984 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009970:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009980:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009982:	e002      	b.n	800998a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7f9 fa79 	bl	8002e7c <HAL_UART_TxCpltCallback>
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff fb5b 	bl	800905c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d11f      	bne.n	8009a0a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a00:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f7ff fb30 	bl	8009070 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fb2c 	bl	8009084 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a2c:	bf00      	nop
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a40:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a5c:	2b80      	cmp	r3, #128	; 0x80
 8009a5e:	d109      	bne.n	8009a74 <UART_DMAError+0x40>
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b21      	cmp	r3, #33	; 0x21
 8009a64:	d106      	bne.n	8009a74 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009a6e:	6978      	ldr	r0, [r7, #20]
 8009a70:	f7ff ff24 	bl	80098bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d109      	bne.n	8009a96 <UART_DMAError+0x62>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b22      	cmp	r3, #34	; 0x22
 8009a86:	d106      	bne.n	8009a96 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009a90:	6978      	ldr	r0, [r7, #20]
 8009a92:	f7ff ff31 	bl	80098f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9c:	f043 0210 	orr.w	r2, r3, #16
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009aa6:	6978      	ldr	r0, [r7, #20]
 8009aa8:	f7f8 ffda 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aac:	bf00      	nop
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7f8 ffc4 	bl	8002a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ad8:	bf00      	nop
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009af6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7f9 f9b8 	bl	8002e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d101      	bne.n	8009b66 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e027      	b.n	8009bb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2224      	movs	r2, #36	; 0x24
 8009b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0201 	bic.w	r2, r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e02d      	b.n	8009c36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2224      	movs	r2, #36	; 0x24
 8009be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0201 	bic.w	r2, r2, #1
 8009c00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f850 	bl	8009cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d101      	bne.n	8009c56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c52:	2302      	movs	r3, #2
 8009c54:	e02d      	b.n	8009cb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2224      	movs	r2, #36	; 0x24
 8009c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f812 	bl	8009cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b089      	sub	sp, #36	; 0x24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009cc4:	4a2f      	ldr	r2, [pc, #188]	; (8009d84 <UARTEx_SetNbDataToProcess+0xc8>)
 8009cc6:	f107 0314 	add.w	r3, r7, #20
 8009cca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009cd2:	4a2d      	ldr	r2, [pc, #180]	; (8009d88 <UARTEx_SetNbDataToProcess+0xcc>)
 8009cd4:	f107 030c 	add.w	r3, r7, #12
 8009cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cdc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d108      	bne.n	8009cfa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cf8:	e03d      	b.n	8009d76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cfe:	2308      	movs	r3, #8
 8009d00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	0e5b      	lsrs	r3, r3, #25
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	0f5b      	lsrs	r3, r3, #29
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d22:	7fbb      	ldrb	r3, [r7, #30]
 8009d24:	7f3a      	ldrb	r2, [r7, #28]
 8009d26:	f107 0120 	add.w	r1, r7, #32
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d34:	7f3a      	ldrb	r2, [r7, #28]
 8009d36:	f107 0120 	add.w	r1, r7, #32
 8009d3a:	440a      	add	r2, r1
 8009d3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d4c:	7ffb      	ldrb	r3, [r7, #31]
 8009d4e:	7f7a      	ldrb	r2, [r7, #29]
 8009d50:	f107 0120 	add.w	r1, r7, #32
 8009d54:	440a      	add	r2, r1
 8009d56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d5e:	7f7a      	ldrb	r2, [r7, #29]
 8009d60:	f107 0120 	add.w	r1, r7, #32
 8009d64:	440a      	add	r2, r1
 8009d66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d76:	bf00      	nop
 8009d78:	3724      	adds	r7, #36	; 0x24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	08009e14 	.word	0x08009e14
 8009d88:	08009e1c 	.word	0x08009e1c

08009d8c <__libc_init_array>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0d      	ldr	r6, [pc, #52]	; (8009dc4 <__libc_init_array+0x38>)
 8009d90:	4c0d      	ldr	r4, [pc, #52]	; (8009dc8 <__libc_init_array+0x3c>)
 8009d92:	1ba4      	subs	r4, r4, r6
 8009d94:	10a4      	asrs	r4, r4, #2
 8009d96:	2500      	movs	r5, #0
 8009d98:	42a5      	cmp	r5, r4
 8009d9a:	d109      	bne.n	8009db0 <__libc_init_array+0x24>
 8009d9c:	4e0b      	ldr	r6, [pc, #44]	; (8009dcc <__libc_init_array+0x40>)
 8009d9e:	4c0c      	ldr	r4, [pc, #48]	; (8009dd0 <__libc_init_array+0x44>)
 8009da0:	f000 f82c 	bl	8009dfc <_init>
 8009da4:	1ba4      	subs	r4, r4, r6
 8009da6:	10a4      	asrs	r4, r4, #2
 8009da8:	2500      	movs	r5, #0
 8009daa:	42a5      	cmp	r5, r4
 8009dac:	d105      	bne.n	8009dba <__libc_init_array+0x2e>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009db4:	4798      	blx	r3
 8009db6:	3501      	adds	r5, #1
 8009db8:	e7ee      	b.n	8009d98 <__libc_init_array+0xc>
 8009dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dbe:	4798      	blx	r3
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	e7f2      	b.n	8009daa <__libc_init_array+0x1e>
 8009dc4:	0800a068 	.word	0x0800a068
 8009dc8:	0800a068 	.word	0x0800a068
 8009dcc:	0800a068 	.word	0x0800a068
 8009dd0:	0800a06c 	.word	0x0800a06c

08009dd4 <memcpy>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	1e43      	subs	r3, r0, #1
 8009dd8:	440a      	add	r2, r1
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	d100      	bne.n	8009de0 <memcpy+0xc>
 8009dde:	bd10      	pop	{r4, pc}
 8009de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009de8:	e7f7      	b.n	8009dda <memcpy+0x6>

08009dea <memset>:
 8009dea:	4402      	add	r2, r0
 8009dec:	4603      	mov	r3, r0
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d100      	bne.n	8009df4 <memset+0xa>
 8009df2:	4770      	bx	lr
 8009df4:	f803 1b01 	strb.w	r1, [r3], #1
 8009df8:	e7f9      	b.n	8009dee <memset+0x4>
	...

08009dfc <_init>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	bf00      	nop
 8009e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e02:	bc08      	pop	{r3}
 8009e04:	469e      	mov	lr, r3
 8009e06:	4770      	bx	lr

08009e08 <_fini>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr
