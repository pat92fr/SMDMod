
ControlFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaf0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800acc8  0800acc8  0001acc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af1c  0800af1c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af24  0800af24  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af28  0800af28  0001af28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800af2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003580  2000009c  0800afc8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000361c  0800afc8  0002361c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdbb  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003883  00000000  00000000  0003ce87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c0  00000000  00000000  00040710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  00041ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022060  00000000  00000000  000434d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001489b  00000000  00000000  00065538  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc5fb  00000000  00000000  00079dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001563ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006634  00000000  00000000  0015644c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000009c 	.word	0x2000009c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800acb0 	.word	0x0800acb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a0 	.word	0x200000a0
 8000214:	0800acb0 	.word	0x0800acb0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <scale_all_sensors>:
static float present_velocity_dps = 0.0f;
static float last_present_position_deg = 0.0f;
static float last_setpoint_velocity_dps = 0.0f;

void scale_all_sensors()
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
	// scale motor current sense (unit:mA) and estimated average motor current with sign (using PWM ratio and setpoint PWM sign)
	float const a = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_A_L],regs[REG_CAL_CURRENT_SENSE_A_H]));
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <scale_all_sensors+0xa4>)
 8000d5c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <scale_all_sensors+0xa4>)
 8000d64:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	edc7 7a01 	vstr	s15, [r7, #4]
	present_motor_current_ma = (motor_current_input_adc-motor_current_input_adc_offset)/4096.0f*a*pwm_sign*pwm_ratio;
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <scale_all_sensors+0xa8>)
 8000d78:	ed93 7a00 	vldr	s14, [r3]
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <scale_all_sensors+0xac>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d86:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000e04 <scale_all_sensors+0xb0>
 8000d8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <scale_all_sensors+0xb4>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <scale_all_sensors+0xb8>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <scale_all_sensors+0xbc>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]

	// scale voltage (unit:0.1V)
	present_voltage_0v1 = voltage_input_adc/4096.0f*3.3f*24.0f/2.2f*10.0f*VOLTAGE_CALIBRATION;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <scale_all_sensors+0xc0>)
 8000db2:	ed93 7a00 	vldr	s14, [r3]
 8000db6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000e04 <scale_all_sensors+0xb0>
 8000dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dbe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e18 <scale_all_sensors+0xc4>
 8000dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc6:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dce:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000e1c <scale_all_sensors+0xc8>
 8000dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dde:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e20 <scale_all_sensors+0xcc>
 8000de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <scale_all_sensors+0xd0>)
 8000de8:	edc3 7a00 	vstr	s15, [r3]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20000158 	.word	0x20000158
 8000dfc:	200000c0 	.word	0x200000c0
 8000e00:	200000c8 	.word	0x200000c8
 8000e04:	45800000 	.word	0x45800000
 8000e08:	200000cc 	.word	0x200000cc
 8000e0c:	200000d0 	.word	0x200000d0
 8000e10:	200000d4 	.word	0x200000d4
 8000e14:	200000c4 	.word	0x200000c4
 8000e18:	40533333 	.word	0x40533333
 8000e1c:	400ccccd 	.word	0x400ccccd
 8000e20:	3f8ccccd 	.word	0x3f8ccccd
 8000e24:	200000dc 	.word	0x200000dc

08000e28 <APP_Control_Reset>:

// called once after SW REBBOT or HW RESET, and every time entering a new control loop mode
void APP_Control_Reset()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	// reset
	entering_state = true;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <APP_Control_Reset+0x9c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <APP_Control_Reset+0xa0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
	pid_reset(&pid_position);
 8000e38:	4824      	ldr	r0, [pc, #144]	; (8000ecc <APP_Control_Reset+0xa4>)
 8000e3a:	f002 f98a 	bl	8003152 <pid_reset>
	pid_reset(&pid_current);
 8000e3e:	4824      	ldr	r0, [pc, #144]	; (8000ed0 <APP_Control_Reset+0xa8>)
 8000e40:	f002 f987 	bl	8003152 <pid_reset>
	setpoint_pwm = 0.0f;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <APP_Control_Reset+0xac>)
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
	setpoint_current_ma = 0.0f;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <APP_Control_Reset+0xb0>)
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
	setpoint_acceleration_dpss = 0.0f;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <APP_Control_Reset+0xb4>)
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
	setpoint_velocity_dps = 0.0f;
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <APP_Control_Reset+0xb8>)
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	last_setpoint_velocity_dps = 0.0f;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <APP_Control_Reset+0xbc>)
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
	setpoint_position_deg = present_position_deg;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <APP_Control_Reset+0xc0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <APP_Control_Reset+0xc4>)
 8000e72:	6013      	str	r3, [r2, #0]
	last_present_position_deg = present_position_deg;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <APP_Control_Reset+0xc0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <APP_Control_Reset+0xc8>)
 8000e7a:	6013      	str	r3, [r2, #0]
	// when re-entering in the control mode 'position', avoid glitch from past goal position
	regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <APP_Control_Reset+0xc0>)
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8e:	ee17 3a90 	vmov	r3, s15
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <APP_Control_Reset+0xcc>)
 8000e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <APP_Control_Reset+0xc0>)
 8000e9e:	edd3 7a00 	vldr	s15, [r3]
 8000ea2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eae:	ee17 3a90 	vmov	r3, s15
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	121b      	asrs	r3, r3, #8
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <APP_Control_Reset+0xcc>)
 8000ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	200000f4 	.word	0x200000f4
 8000ecc:	200000f8 	.word	0x200000f8
 8000ed0:	20000104 	.word	0x20000104
 8000ed4:	200000e0 	.word	0x200000e0
 8000ed8:	200000e4 	.word	0x200000e4
 8000edc:	200000e8 	.word	0x200000e8
 8000ee0:	200000ec 	.word	0x200000ec
 8000ee4:	20000118 	.word	0x20000118
 8000ee8:	200000d8 	.word	0x200000d8
 8000eec:	200000f0 	.word	0x200000f0
 8000ef0:	20000114 	.word	0x20000114
 8000ef4:	20000158 	.word	0x20000158

08000ef8 <APP_Control_Init>:

// called once after SW REBOOT or HW RESET
void APP_Control_Init()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	// reset (EWMA) filtered sensor inputs
	motor_current_input_adc = 0.0f;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <APP_Control_Init+0x80>)
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	voltage_input_adc = 0.0f; // NOTE : init by zero will delay the present voltage estimation by 1 ms at least
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <APP_Control_Init+0x84>)
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	motor_current_input_adc_offset = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_B_L],regs[REG_CAL_CURRENT_SENSE_B_H]));
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <APP_Control_Init+0x88>)
 8000f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <APP_Control_Init+0x88>)
 8000f16:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <APP_Control_Init+0x8c>)
 8000f26:	edc3 7a00 	vstr	s15, [r3]

	// force motor in coast
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <APP_Control_Init+0x90>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <APP_Control_Init+0x90>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
	// start motor PWM generation
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4812      	ldr	r0, [pc, #72]	; (8000f88 <APP_Control_Init+0x90>)
 8000f3e:	f007 f983 	bl	8008248 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 8000f42:	2104      	movs	r1, #4
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <APP_Control_Init+0x90>)
 8000f46:	f007 f97f 	bl	8008248 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim6);
 8000f4a:	4810      	ldr	r0, [pc, #64]	; (8000f8c <APP_Control_Init+0x94>)
 8000f4c:	f007 f8b8 	bl	80080c0 <HAL_TIM_Base_Start>
	// start ADC
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 8000f50:	2203      	movs	r2, #3
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <APP_Control_Init+0x98>)
 8000f54:	480f      	ldr	r0, [pc, #60]	; (8000f94 <APP_Control_Init+0x9c>)
 8000f56:	f003 ff9f 	bl	8004e98 <HAL_ADC_Start_DMA>

	// 2ms delay for filtered sensor inputs to stabilize
	HAL_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f003 fbb2 	bl	80046c4 <HAL_Delay>
	scale_all_sensors();
 8000f60:	f7ff fef8 	bl	8000d54 <scale_all_sensors>
	HAL_Delay(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f003 fbad 	bl	80046c4 <HAL_Delay>
	scale_all_sensors();
 8000f6a:	f7ff fef3 	bl	8000d54 <scale_all_sensors>

	// reset all state control loop variables
	APP_Control_Reset();
 8000f6e:	f7ff ff5b 	bl	8000e28 <APP_Control_Reset>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000c0 	.word	0x200000c0
 8000f7c:	200000c4 	.word	0x200000c4
 8000f80:	20000158 	.word	0x20000158
 8000f84:	200000c8 	.word	0x200000c8
 8000f88:	2000023c 	.word	0x2000023c
 8000f8c:	20002c5c 	.word	0x20002c5c
 8000f90:	200000b8 	.word	0x200000b8
 8000f94:	20000288 	.word	0x20000288

08000f98 <APP_Control_Process>:

// called from main loop
void APP_Control_Process()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0be      	sub	sp, #248	; 0xf8
 8000f9c:	af00      	add	r7, sp, #0
	// apply 1ms period
	uint16_t current_time_us = __HAL_TIM_GET_COUNTER(&htim6);
 8000f9e:	4bb6      	ldr	r3, [pc, #728]	; (8001278 <APP_Control_Process+0x2e0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	if(current_time_us<period_us)
 8000fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fac:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f0c1 812e 	bcc.w	8002212 <APP_Control_Process+0x127a>
		return;
	__HAL_TIM_SET_COUNTER(&htim6,(current_time_us-period_us));
 8000fb6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbe:	1a9a      	subs	r2, r3, r2
 8000fc0:	4bad      	ldr	r3, [pc, #692]	; (8001278 <APP_Control_Process+0x2e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

	// acquire motor current, position and voltage (see ADC DMA completed conversion callback)

	// scale sensor at process rate
	scale_all_sensors();
 8000fc6:	f7ff fec5 	bl	8000d54 <scale_all_sensors>

	// compute velocity from position (derivative), and filter velocity (EWMA)
	float present_speed_dps_unfiltered = (present_position_deg - last_present_position_deg)*LOOP_FREQUENCY_HZ;
 8000fca:	4bac      	ldr	r3, [pc, #688]	; (800127c <APP_Control_Process+0x2e4>)
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	4bab      	ldr	r3, [pc, #684]	; (8001280 <APP_Control_Process+0x2e8>)
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001284 <APP_Control_Process+0x2ec>
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
	last_present_position_deg =  present_position_deg;
 8000fe6:	4ba5      	ldr	r3, [pc, #660]	; (800127c <APP_Control_Process+0x2e4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4aa5      	ldr	r2, [pc, #660]	; (8001280 <APP_Control_Process+0x2e8>)
 8000fec:	6013      	str	r3, [r2, #0]
	present_velocity_dps = ALPHA_VELOCITY * present_speed_dps_unfiltered + (1.0f-ALPHA_VELOCITY)*present_velocity_dps;
 8000fee:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8000ff2:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001288 <APP_Control_Process+0x2f0>
 8000ff6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ffa:	4ba4      	ldr	r3, [pc, #656]	; (800128c <APP_Control_Process+0x2f4>)
 8000ffc:	edd3 7a00 	vldr	s15, [r3]
 8001000:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001290 <APP_Control_Process+0x2f8>
 8001004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	4b9f      	ldr	r3, [pc, #636]	; (800128c <APP_Control_Process+0x2f4>)
 800100e:	edc3 7a00 	vstr	s15, [r3]

	// torque enable logic
	bool torque_enable = (regs[REG_TORQUE_ENABLE]!=0) && (regs[REG_HARDWARE_ERROR_STATUS]==0);
 8001012:	4ba0      	ldr	r3, [pc, #640]	; (8001294 <APP_Control_Process+0x2fc>)
 8001014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <APP_Control_Process+0x92>
 800101c:	4b9d      	ldr	r3, [pc, #628]	; (8001294 <APP_Control_Process+0x2fc>)
 800101e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <APP_Control_Process+0x92>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <APP_Control_Process+0x94>
 800102a:	2300      	movs	r3, #0
 800102c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8001030:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	if(torque_enable)
 800103c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 875a 	beq.w	8001efa <APP_Control_Process+0xf62>
	{
		// modes & transitions
		// compute setpoint_pwm
		switch(current_control_mode)
 8001046:	4b94      	ldr	r3, [pc, #592]	; (8001298 <APP_Control_Process+0x300>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b04      	cmp	r3, #4
 800104c:	f200 86b9 	bhi.w	8001dc2 <APP_Control_Process+0xe2a>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <APP_Control_Process+0xc0>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	0800106d 	.word	0x0800106d
 800105c:	080012bd 	.word	0x080012bd
 8001060:	080015f5 	.word	0x080015f5
 8001064:	08001af9 	.word	0x08001af9
 8001068:	08001cb7 	.word	0x08001cb7
		{
		// Simple PID from position to pwm
		// Mg92 Kp = 400 Ki = 20 Kd = 400
		case REG_CONTROL_MODE_POSITION:
			if(entering_state)
 800106c:	4b8b      	ldr	r3, [pc, #556]	; (800129c <APP_Control_Process+0x304>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d042      	beq.n	80010fa <APP_Control_Process+0x162>
			{
				entering_state = false;
 8001074:	4b89      	ldr	r3, [pc, #548]	; (800129c <APP_Control_Process+0x304>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 800107a:	4b80      	ldr	r3, [pc, #512]	; (800127c <APP_Control_Process+0x2e4>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108c:	ee17 3a90 	vmov	r3, s15
 8001090:	b21b      	sxth	r3, r3
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <APP_Control_Process+0x2fc>)
 8001096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 800109a:	4b78      	ldr	r3, [pc, #480]	; (800127c <APP_Control_Process+0x2e4>)
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	ee17 3a90 	vmov	r3, s15
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	121b      	asrs	r3, r3, #8
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b76      	ldr	r3, [pc, #472]	; (8001294 <APP_Control_Process+0x2fc>)
 80010ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 80010be:	4b75      	ldr	r3, [pc, #468]	; (8001294 <APP_Control_Process+0x2fc>)
 80010c0:	7e9a      	ldrb	r2, [r3, #26]
 80010c2:	4b74      	ldr	r3, [pc, #464]	; (8001294 <APP_Control_Process+0x2fc>)
 80010c4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 80010c8:	4b72      	ldr	r3, [pc, #456]	; (8001294 <APP_Control_Process+0x2fc>)
 80010ca:	7eda      	ldrb	r2, [r3, #27]
 80010cc:	4b71      	ldr	r3, [pc, #452]	; (8001294 <APP_Control_Process+0x2fc>)
 80010ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 80010d2:	4b70      	ldr	r3, [pc, #448]	; (8001294 <APP_Control_Process+0x2fc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <APP_Control_Process+0x2fc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 80010e2:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <APP_Control_Process+0x2fc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 80010ea:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <APP_Control_Process+0x2fc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 80010f2:	4b62      	ldr	r3, [pc, #392]	; (800127c <APP_Control_Process+0x2e4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6a      	ldr	r2, [pc, #424]	; (80012a0 <APP_Control_Process+0x308>)
 80010f8:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <APP_Control_Process+0x2fc>)
 80010fc:	7c5b      	ldrb	r3, [r3, #17]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	4a64      	ldr	r2, [pc, #400]	; (8001294 <APP_Control_Process+0x2fc>)
 8001102:	7c12      	ldrb	r2, [r2, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 8001112:	4b60      	ldr	r3, [pc, #384]	; (8001294 <APP_Control_Process+0x2fc>)
 8001114:	7cdb      	ldrb	r3, [r3, #19]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	4a5e      	ldr	r2, [pc, #376]	; (8001294 <APP_Control_Process+0x2fc>)
 800111a:	7c92      	ldrb	r2, [r2, #18]
 800111c:	4313      	orrs	r3, r2
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 800112a:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <APP_Control_Process+0x2fc>)
 800112c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <APP_Control_Process+0x2fc>)
 8001134:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8001138:	4313      	orrs	r3, r2
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001142:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80012a4 <APP_Control_Process+0x30c>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 800114e:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8001152:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8001156:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800115a:	f001 ffd1 	bl	8003100 <fconstrain>
 800115e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <APP_Control_Process+0x308>)
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8001168:	4b4d      	ldr	r3, [pc, #308]	; (80012a0 <APP_Control_Process+0x308>)
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	4b43      	ldr	r3, [pc, #268]	; (800127c <APP_Control_Process+0x2e4>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001178:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				// compute pwm setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <APP_Control_Process+0x2fc>)
 800117e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <APP_Control_Process+0x2fc>)
 8001186:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800118a:	4313      	orrs	r3, r2
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	eddf 6a44 	vldr	s13, [pc, #272]	; 80012a8 <APP_Control_Process+0x310>
 8001198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <APP_Control_Process+0x2fc>)
 80011a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	4a3a      	ldr	r2, [pc, #232]	; (8001294 <APP_Control_Process+0x2fc>)
 80011aa:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80011ae:	4313      	orrs	r3, r2
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001284 <APP_Control_Process+0x2ec>
 80011bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <APP_Control_Process+0x2fc>)
 80011c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	4a31      	ldr	r2, [pc, #196]	; (8001294 <APP_Control_Process+0x2fc>)
 80011ce:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80011d2:	4313      	orrs	r3, r2
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011dc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80011e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <APP_Control_Process+0x2fc>)
 80011ea:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	4a28      	ldr	r2, [pc, #160]	; (8001294 <APP_Control_Process+0x2fc>)
 80011f2:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 80011f6:	4313      	orrs	r3, r2
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001200:	edc7 7a08 	vstr	s15, [r7, #32]
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp(
 8001204:	eddf 2a20 	vldr	s5, [pc, #128]	; 8001288 <APP_Control_Process+0x2f0>
 8001208:	ed97 2a08 	vldr	s4, [r7, #32]
 800120c:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 8001210:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
 8001214:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8001218:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800121c:	4823      	ldr	r0, [pc, #140]	; (80012ac <APP_Control_Process+0x314>)
 800121e:	f002 f85c 	bl	80032da <pid_process_antiwindup_clamp>
 8001222:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001226:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001288 <APP_Control_Process+0x2f0>
 800122a:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										pwm_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <APP_Control_Process+0x318>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001290 <APP_Control_Process+0x2f8>
 8001238:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <APP_Control_Process+0x318>)
 8001242:	edc3 7a00 	vstr	s15, [r3]
			}
			// unused setpoints zero
			setpoint_velocity_dps = 0.0f;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <APP_Control_Process+0x31c>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <APP_Control_Process+0x320>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <APP_Control_Process+0x2fc>)
 8001258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 85a7 	beq.w	8001db0 <APP_Control_Process+0xe18>
			{
				APP_Control_Reset();
 8001262:	f7ff fde1 	bl	8000e28 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <APP_Control_Process+0x2fc>)
 8001268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800126c:	461a      	mov	r2, r3
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <APP_Control_Process+0x300>)
 8001270:	601a      	str	r2, [r3, #0]
			}
			break;
 8001272:	f000 bd9d 	b.w	8001db0 <APP_Control_Process+0xe18>
 8001276:	bf00      	nop
 8001278:	20002c5c 	.word	0x20002c5c
 800127c:	200000d8 	.word	0x200000d8
 8001280:	20000114 	.word	0x20000114
 8001284:	447a0000 	.word	0x447a0000
 8001288:	3df5c28f 	.word	0x3df5c28f
 800128c:	20000110 	.word	0x20000110
 8001290:	3f6147ae 	.word	0x3f6147ae
 8001294:	20000158 	.word	0x20000158
 8001298:	20000004 	.word	0x20000004
 800129c:	20000000 	.word	0x20000000
 80012a0:	200000f0 	.word	0x200000f0
 80012a4:	3dcccccd 	.word	0x3dcccccd
 80012a8:	42c80000 	.word	0x42c80000
 80012ac:	200000f8 	.word	0x200000f8
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	200000ec 	.word	0x200000ec
 80012b8:	200000e4 	.word	0x200000e4


		case REG_CONTROL_MODE_POSITION_TORQUE:
			if(entering_state)
 80012bc:	4bbb      	ldr	r3, [pc, #748]	; (80015ac <APP_Control_Process+0x614>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d044      	beq.n	800134e <APP_Control_Process+0x3b6>
			{
				entering_state = false;
 80012c4:	4bb9      	ldr	r3, [pc, #740]	; (80015ac <APP_Control_Process+0x614>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 80012ca:	4bb9      	ldr	r3, [pc, #740]	; (80015b0 <APP_Control_Process+0x618>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4bb3      	ldr	r3, [pc, #716]	; (80015b4 <APP_Control_Process+0x61c>)
 80012e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 80012ea:	4bb1      	ldr	r3, [pc, #708]	; (80015b0 <APP_Control_Process+0x618>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fc:	ee17 3a90 	vmov	r3, s15
 8001300:	b21b      	sxth	r3, r3
 8001302:	121b      	asrs	r3, r3, #8
 8001304:	b21b      	sxth	r3, r3
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4baa      	ldr	r3, [pc, #680]	; (80015b4 <APP_Control_Process+0x61c>)
 800130a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 800130e:	4ba9      	ldr	r3, [pc, #676]	; (80015b4 <APP_Control_Process+0x61c>)
 8001310:	7e1a      	ldrb	r2, [r3, #24]
 8001312:	4ba8      	ldr	r3, [pc, #672]	; (80015b4 <APP_Control_Process+0x61c>)
 8001314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8001318:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <APP_Control_Process+0x61c>)
 800131a:	7e5a      	ldrb	r2, [r3, #25]
 800131c:	4ba5      	ldr	r3, [pc, #660]	; (80015b4 <APP_Control_Process+0x61c>)
 800131e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001322:	4ba4      	ldr	r3, [pc, #656]	; (80015b4 <APP_Control_Process+0x61c>)
 8001324:	7e9a      	ldrb	r2, [r3, #26]
 8001326:	4ba3      	ldr	r3, [pc, #652]	; (80015b4 <APP_Control_Process+0x61c>)
 8001328:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 800132c:	4ba1      	ldr	r3, [pc, #644]	; (80015b4 <APP_Control_Process+0x61c>)
 800132e:	7eda      	ldrb	r2, [r3, #27]
 8001330:	4ba0      	ldr	r3, [pc, #640]	; (80015b4 <APP_Control_Process+0x61c>)
 8001332:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0.0f;
 8001336:	4b9f      	ldr	r3, [pc, #636]	; (80015b4 <APP_Control_Process+0x61c>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0.0f;
 800133e:	4b9d      	ldr	r3, [pc, #628]	; (80015b4 <APP_Control_Process+0x61c>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8001346:	4b9a      	ldr	r3, [pc, #616]	; (80015b0 <APP_Control_Process+0x618>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a9b      	ldr	r2, [pc, #620]	; (80015b8 <APP_Control_Process+0x620>)
 800134c:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 800134e:	4b99      	ldr	r3, [pc, #612]	; (80015b4 <APP_Control_Process+0x61c>)
 8001350:	7c5b      	ldrb	r3, [r3, #17]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4a97      	ldr	r2, [pc, #604]	; (80015b4 <APP_Control_Process+0x61c>)
 8001356:	7c12      	ldrb	r2, [r2, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 8001366:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <APP_Control_Process+0x61c>)
 8001368:	7cdb      	ldrb	r3, [r3, #19]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	4a91      	ldr	r2, [pc, #580]	; (80015b4 <APP_Control_Process+0x61c>)
 800136e:	7c92      	ldrb	r2, [r2, #18]
 8001370:	4313      	orrs	r3, r2
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 800137e:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <APP_Control_Process+0x61c>)
 8001380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	4a8b      	ldr	r2, [pc, #556]	; (80015b4 <APP_Control_Process+0x61c>)
 8001388:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800138c:	4313      	orrs	r3, r2
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80015bc <APP_Control_Process+0x624>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 80013a2:	ed97 1a1b 	vldr	s2, [r7, #108]	; 0x6c
 80013a6:	edd7 0a1c 	vldr	s1, [r7, #112]	; 0x70
 80013aa:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 80013ae:	f001 fea7 	bl	8003100 <fconstrain>
 80013b2:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 80013b6:	4a80      	ldr	r2, [pc, #512]	; (80015b8 <APP_Control_Process+0x620>)
 80013b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ba:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 80013bc:	4b7e      	ldr	r3, [pc, #504]	; (80015b8 <APP_Control_Process+0x620>)
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <APP_Control_Process+0x618>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 80013d0:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <APP_Control_Process+0x61c>)
 80013d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4a76      	ldr	r2, [pc, #472]	; (80015b4 <APP_Control_Process+0x61c>)
 80013da:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 80013de:	4313      	orrs	r3, r2
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e8:	eddf 6a75 	vldr	s13, [pc, #468]	; 80015c0 <APP_Control_Process+0x628>
 80013ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 80013f4:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <APP_Control_Process+0x61c>)
 80013f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4a6d      	ldr	r2, [pc, #436]	; (80015b4 <APP_Control_Process+0x61c>)
 80013fe:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001402:	4313      	orrs	r3, r2
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80015c4 <APP_Control_Process+0x62c>
 8001410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001414:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <APP_Control_Process+0x61c>)
 800141a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4a64      	ldr	r2, [pc, #400]	; (80015b4 <APP_Control_Process+0x61c>)
 8001422:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8001426:	4313      	orrs	r3, r2
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001430:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001438:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 800143c:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <APP_Control_Process+0x61c>)
 800143e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4a5b      	ldr	r2, [pc, #364]	; (80015b4 <APP_Control_Process+0x61c>)
 8001446:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 800144a:	4313      	orrs	r3, r2
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp(
 8001458:	eddf 2a5b 	vldr	s5, [pc, #364]	; 80015c8 <APP_Control_Process+0x630>
 800145c:	ed97 2a15 	vldr	s4, [r7, #84]	; 0x54
 8001460:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8001464:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8001468:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 800146c:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001470:	4856      	ldr	r0, [pc, #344]	; (80015cc <APP_Control_Process+0x634>)
 8001472:	f001 ff32 	bl	80032da <pid_process_antiwindup_clamp>
 8001476:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 800147a:	eddf 7a55 	vldr	s15, [pc, #340]	; 80015d0 <APP_Control_Process+0x638>
 800147e:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										current_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <APP_Control_Process+0x63c>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	eddf 6a53 	vldr	s13, [pc, #332]	; 80015d8 <APP_Control_Process+0x640>
 800148c:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8001494:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <APP_Control_Process+0x63c>)
 8001496:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <APP_Control_Process+0x63c>)
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <APP_Control_Process+0x644>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <APP_Control_Process+0x61c>)
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	4a3f      	ldr	r2, [pc, #252]	; (80015b4 <APP_Control_Process+0x61c>)
 80014b8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80014bc:	4313      	orrs	r3, r2
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c6:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80015c4 <APP_Control_Process+0x62c>
 80014ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <APP_Control_Process+0x61c>)
 80014d4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <APP_Control_Process+0x61c>)
 80014dc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80014e0:	4313      	orrs	r3, r2
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ea:	eddf 6a35 	vldr	s13, [pc, #212]	; 80015c0 <APP_Control_Process+0x628>
 80014ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <APP_Control_Process+0x61c>)
 80014f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <APP_Control_Process+0x61c>)
 8001500:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001504:	4313      	orrs	r3, r2
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80015c0 <APP_Control_Process+0x628>
 8001512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001516:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <APP_Control_Process+0x61c>)
 800151c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <APP_Control_Process+0x61c>)
 8001524:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001528:	4313      	orrs	r3, r2
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <APP_Control_Process+0x63c>)
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	eeb0 3a67 	vmov.f32	s6, s15
 8001548:	eddf 2a25 	vldr	s5, [pc, #148]	; 80015e0 <APP_Control_Process+0x648>
 800154c:	ed97 2a10 	vldr	s4, [r7, #64]	; 0x40
 8001550:	eddf 1a23 	vldr	s3, [pc, #140]	; 80015e0 <APP_Control_Process+0x648>
 8001554:	ed97 1a12 	vldr	s2, [r7, #72]	; 0x48
 8001558:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800155c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8001560:	4820      	ldr	r0, [pc, #128]	; (80015e4 <APP_Control_Process+0x64c>)
 8001562:	f001 fe0c 	bl	800317e <pid_process_antiwindup_clamp_with_ff>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 800156a:	eddf 7a17 	vldr	s15, [pc, #92]	; 80015c8 <APP_Control_Process+0x630>
 800156e:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <APP_Control_Process+0x650>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80015ec <APP_Control_Process+0x654>
 800157c:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <APP_Control_Process+0x650>)
 8001586:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION_TORQUE)
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <APP_Control_Process+0x61c>)
 800158c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001590:	2b01      	cmp	r3, #1
 8001592:	f000 840f 	beq.w	8001db4 <APP_Control_Process+0xe1c>
			{
				APP_Control_Reset();
 8001596:	f7ff fc47 	bl	8000e28 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <APP_Control_Process+0x61c>)
 800159c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <APP_Control_Process+0x658>)
 80015a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80015a6:	f000 bc05 	b.w	8001db4 <APP_Control_Process+0xe1c>
 80015aa:	bf00      	nop
 80015ac:	20000000 	.word	0x20000000
 80015b0:	200000d8 	.word	0x200000d8
 80015b4:	20000158 	.word	0x20000158
 80015b8:	200000f0 	.word	0x200000f0
 80015bc:	3dcccccd 	.word	0x3dcccccd
 80015c0:	42c80000 	.word	0x42c80000
 80015c4:	447a0000 	.word	0x447a0000
 80015c8:	3df5c28f 	.word	0x3df5c28f
 80015cc:	200000f8 	.word	0x200000f8
 80015d0:	3f75c28f 	.word	0x3f75c28f
 80015d4:	200000e4 	.word	0x200000e4
 80015d8:	3d23d710 	.word	0x3d23d710
 80015dc:	200000d4 	.word	0x200000d4
 80015e0:	00000000 	.word	0x00000000
 80015e4:	20000104 	.word	0x20000104
 80015e8:	200000e0 	.word	0x200000e0
 80015ec:	3f6147ae 	.word	0x3f6147ae
 80015f0:	20000004 	.word	0x20000004


		case REG_CONTROL_MODE_VELOCITY_PROFIL_POSITION_TORQUE:
			if(entering_state)
 80015f4:	4b5d      	ldr	r3, [pc, #372]	; (800176c <APP_Control_Process+0x7d4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d046      	beq.n	800168a <APP_Control_Process+0x6f2>
			{
				entering_state = false;
 80015fc:	4b5b      	ldr	r3, [pc, #364]	; (800176c <APP_Control_Process+0x7d4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001602:	4b5b      	ldr	r3, [pc, #364]	; (8001770 <APP_Control_Process+0x7d8>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001614:	ee17 3a90 	vmov	r3, s15
 8001618:	b21b      	sxth	r3, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <APP_Control_Process+0x7dc>)
 800161e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001622:	4b53      	ldr	r3, [pc, #332]	; (8001770 <APP_Control_Process+0x7d8>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800162c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001634:	ee17 3a90 	vmov	r3, s15
 8001638:	b21b      	sxth	r3, r3
 800163a:	121b      	asrs	r3, r3, #8
 800163c:	b21b      	sxth	r3, r3
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <APP_Control_Process+0x7dc>)
 8001642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 8001646:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <APP_Control_Process+0x7dc>)
 8001648:	7d1a      	ldrb	r2, [r3, #20]
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <APP_Control_Process+0x7dc>)
 800164c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <APP_Control_Process+0x7dc>)
 8001652:	7d5a      	ldrb	r2, [r3, #21]
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <APP_Control_Process+0x7dc>)
 8001656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <APP_Control_Process+0x7dc>)
 800165c:	7e1a      	ldrb	r2, [r3, #24]
 800165e:	4b45      	ldr	r3, [pc, #276]	; (8001774 <APP_Control_Process+0x7dc>)
 8001660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <APP_Control_Process+0x7dc>)
 8001666:	7e5a      	ldrb	r2, [r3, #25]
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <APP_Control_Process+0x7dc>)
 800166a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <APP_Control_Process+0x7dc>)
 8001670:	7e9a      	ldrb	r2, [r3, #26]
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <APP_Control_Process+0x7dc>)
 8001674:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8001678:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <APP_Control_Process+0x7dc>)
 800167a:	7eda      	ldrb	r2, [r3, #27]
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <APP_Control_Process+0x7dc>)
 800167e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <APP_Control_Process+0x7d8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3c      	ldr	r2, [pc, #240]	; (8001778 <APP_Control_Process+0x7e0>)
 8001688:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 800168a:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <APP_Control_Process+0x7dc>)
 800168c:	7c5b      	ldrb	r3, [r3, #17]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4a38      	ldr	r2, [pc, #224]	; (8001774 <APP_Control_Process+0x7dc>)
 8001692:	7c12      	ldrb	r2, [r2, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <APP_Control_Process+0x7dc>)
 80016a4:	7cdb      	ldrb	r3, [r3, #19]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <APP_Control_Process+0x7dc>)
 80016aa:	7c92      	ldrb	r2, [r2, #18]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b6:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <APP_Control_Process+0x7dc>)
 80016bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <APP_Control_Process+0x7dc>)
 80016c4:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80016c8:	4313      	orrs	r3, r2
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800177c <APP_Control_Process+0x7e4>
 80016d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016da:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 80016de:	ed97 1a31 	vldr	s2, [r7, #196]	; 0xc4
 80016e2:	edd7 0a32 	vldr	s1, [r7, #200]	; 0xc8
 80016e6:	ed97 0a30 	vldr	s0, [r7, #192]	; 0xc0
 80016ea:	f001 fd09 	bl	8003100 <fconstrain>
 80016ee:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0
				// compute position setpoint from goal position
				float const max_velocity_dps = (float)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <APP_Control_Process+0x7dc>)
 80016f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <APP_Control_Process+0x7dc>)
 80016fc:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 8001700:	4313      	orrs	r3, r2
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				float const max_acceleration_dpss = (float)(MAKE_SHORT(regs[REG_MAX_ACCELERATION_DPSS_L],regs[REG_MAX_ACCELERATION_DPSS_H]));
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <APP_Control_Process+0x7dc>)
 8001710:	7ddb      	ldrb	r3, [r3, #23]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <APP_Control_Process+0x7dc>)
 8001716:	7d92      	ldrb	r2, [r2, #22]
 8001718:	4313      	orrs	r3, r2
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001722:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
				// trapezoidal profile for setpoint position
				// compute remaining distance between setpoint position to goal position
				float const remaining_distance_deg = goal_position_deg - setpoint_position_deg;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <APP_Control_Process+0x7e0>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				// compute maximun velocity to be able to stop at goal position
				float vmax = sqrtf( 2.0f * max_acceleration_dpss * fabsf(remaining_distance_deg) );
 8001738:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800173c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001740:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001744:	eef0 7ae7 	vabs.f32	s15, s15
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	f009 fa58 	bl	800ac04 <sqrtf>
 8001754:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
				// restore sign
				vmax = ( remaining_distance_deg>0.0f) ? vmax : -vmax;
 8001758:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800175c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	dd0c      	ble.n	8001780 <APP_Control_Process+0x7e8>
 8001766:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800176a:	e00d      	b.n	8001788 <APP_Control_Process+0x7f0>
 800176c:	20000000 	.word	0x20000000
 8001770:	200000d8 	.word	0x200000d8
 8001774:	20000158 	.word	0x20000158
 8001778:	200000f0 	.word	0x200000f0
 800177c:	3dcccccd 	.word	0x3dcccccd
 8001780:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001784:	eef1 7a67 	vneg.f32	s15, s15
 8001788:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
				// limit maximum velocity, when far from stop
				vmax = fconstrain(vmax,-max_velocity_dps,max_velocity_dps);
 800178c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001790:	eef1 7a67 	vneg.f32	s15, s15
 8001794:	ed97 1a2f 	vldr	s2, [r7, #188]	; 0xbc
 8001798:	eef0 0a67 	vmov.f32	s1, s15
 800179c:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80017a0:	f001 fcae 	bl	8003100 <fconstrain>
 80017a4:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
				// compute distance between maximun velocity and current velocity
				float delta_v = vmax - setpoint_velocity_dps;
 80017a8:	4bbf      	ldr	r3, [pc, #764]	; (8001aa8 <APP_Control_Process+0xb10>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80017b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
				// now compute new velocity according acceleration
				setpoint_velocity_dps += fconstrain(delta_v, (-max_acceleration_dpss/LOOP_FREQUENCY_HZ), (max_acceleration_dpss/LOOP_FREQUENCY_HZ));
 80017ba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80017be:	eef1 7a67 	vneg.f32	s15, s15
 80017c2:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001aac <APP_Control_Process+0xb14>
 80017c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80017ce:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001aac <APP_Control_Process+0xb14>
 80017d2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80017d6:	eeb0 1a46 	vmov.f32	s2, s12
 80017da:	eef0 0a66 	vmov.f32	s1, s13
 80017de:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 80017e2:	f001 fc8d 	bl	8003100 <fconstrain>
 80017e6:	eeb0 7a40 	vmov.f32	s14, s0
 80017ea:	4baf      	ldr	r3, [pc, #700]	; (8001aa8 <APP_Control_Process+0xb10>)
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f4:	4bac      	ldr	r3, [pc, #688]	; (8001aa8 <APP_Control_Process+0xb10>)
 80017f6:	edc3 7a00 	vstr	s15, [r3]
				// now compute new position
				setpoint_position_deg += (setpoint_velocity_dps/LOOP_FREQUENCY_HZ);
 80017fa:	4bab      	ldr	r3, [pc, #684]	; (8001aa8 <APP_Control_Process+0xb10>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001aac <APP_Control_Process+0xb14>
 8001804:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001808:	4ba9      	ldr	r3, [pc, #676]	; (8001ab0 <APP_Control_Process+0xb18>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <APP_Control_Process+0xb18>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
				// now compute acceleration
				setpoint_acceleration_dpss = (setpoint_velocity_dps - last_setpoint_velocity_dps)*LOOP_FREQUENCY_HZ;
 8001818:	4ba3      	ldr	r3, [pc, #652]	; (8001aa8 <APP_Control_Process+0xb10>)
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	4ba5      	ldr	r3, [pc, #660]	; (8001ab4 <APP_Control_Process+0xb1c>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001aac <APP_Control_Process+0xb14>
 800182c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001830:	4ba1      	ldr	r3, [pc, #644]	; (8001ab8 <APP_Control_Process+0xb20>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
				last_setpoint_velocity_dps =  setpoint_velocity_dps;
 8001836:	4b9c      	ldr	r3, [pc, #624]	; (8001aa8 <APP_Control_Process+0xb10>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a9e      	ldr	r2, [pc, #632]	; (8001ab4 <APP_Control_Process+0xb1c>)
 800183c:	6013      	str	r3, [r2, #0]
				// compute current setpoint from position setpoint using a PID position and velocity/acceleration feed forwards
				float const pid_vel_kff = (float)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H]))/1000.0f;
 800183e:	4b9f      	ldr	r3, [pc, #636]	; (8001abc <APP_Control_Process+0xb24>)
 8001840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4a9d      	ldr	r2, [pc, #628]	; (8001abc <APP_Control_Process+0xb24>)
 8001848:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800184c:	4313      	orrs	r3, r2
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001aac <APP_Control_Process+0xb14>
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
				float const pid_acc_kff = (float)(MAKE_SHORT(regs[REG_PID_ACCELERATION_KFF_L],regs[REG_PID_ACCELERATION_KFF_H]))/100000.0f;
 8001862:	4b96      	ldr	r3, [pc, #600]	; (8001abc <APP_Control_Process+0xb24>)
 8001864:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	4a94      	ldr	r2, [pc, #592]	; (8001abc <APP_Control_Process+0xb24>)
 800186c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001870:	4313      	orrs	r3, r2
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001ac0 <APP_Control_Process+0xb28>
 800187e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001882:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				float const velocity_feed_forward = pid_vel_kff * setpoint_velocity_dps;
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <APP_Control_Process+0xb10>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				float const acceleration_feed_forward = pid_acc_kff * setpoint_acceleration_dpss;
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <APP_Control_Process+0xb20>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 80018aa:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <APP_Control_Process+0xb18>)
 80018ac:	ed93 7a00 	vldr	s14, [r3]
 80018b0:	4b84      	ldr	r3, [pc, #528]	; (8001ac4 <APP_Control_Process+0xb2c>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 80018be:	4b7f      	ldr	r3, [pc, #508]	; (8001abc <APP_Control_Process+0xb24>)
 80018c0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	4a7d      	ldr	r2, [pc, #500]	; (8001abc <APP_Control_Process+0xb24>)
 80018c8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 80018cc:	4313      	orrs	r3, r2
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d6:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001ac8 <APP_Control_Process+0xb30>
 80018da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018de:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <APP_Control_Process+0xb24>)
 80018e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	4a74      	ldr	r2, [pc, #464]	; (8001abc <APP_Control_Process+0xb24>)
 80018ec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80018f0:	4313      	orrs	r3, r2
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fa:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001aac <APP_Control_Process+0xb14>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8001906:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <APP_Control_Process+0xb24>)
 8001908:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	4a6b      	ldr	r2, [pc, #428]	; (8001abc <APP_Control_Process+0xb24>)
 8001910:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8001914:	4313      	orrs	r3, r2
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001926:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <APP_Control_Process+0xb24>)
 800192c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4a62      	ldr	r2, [pc, #392]	; (8001abc <APP_Control_Process+0xb24>)
 8001934:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8001938:	4313      	orrs	r3, r2
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001942:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001946:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800194a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800194e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001952:	eeb0 3a67 	vmov.f32	s6, s15
 8001956:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8001acc <APP_Control_Process+0xb34>
 800195a:	ed97 2a22 	vldr	s4, [r7, #136]	; 0x88
 800195e:	edd7 1a23 	vldr	s3, [r7, #140]	; 0x8c
 8001962:	ed97 1a24 	vldr	s2, [r7, #144]	; 0x90
 8001966:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 800196a:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800196e:	4858      	ldr	r0, [pc, #352]	; (8001ad0 <APP_Control_Process+0xb38>)
 8001970:	f001 fc05 	bl	800317e <pid_process_antiwindup_clamp_with_ff>
 8001974:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8001978:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001ad4 <APP_Control_Process+0xb3c>
 800197c:	ee27 7a27 	vmul.f32	s14, s14, s15
										current_limit,
										ALPHA_VELOCITY,
										velocity_feed_forward+acceleration_feed_forward
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <APP_Control_Process+0xb40>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001adc <APP_Control_Process+0xb44>
 800198a:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8001992:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <APP_Control_Process+0xb40>)
 8001994:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001998:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <APP_Control_Process+0xb40>)
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <APP_Control_Process+0xb48>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <APP_Control_Process+0xb24>)
 80019ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4a41      	ldr	r2, [pc, #260]	; (8001abc <APP_Control_Process+0xb24>)
 80019b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80019ba:	4313      	orrs	r3, r2
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001aac <APP_Control_Process+0xb14>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <APP_Control_Process+0xb24>)
 80019d2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	4a38      	ldr	r2, [pc, #224]	; (8001abc <APP_Control_Process+0xb24>)
 80019da:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80019de:	4313      	orrs	r3, r2
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ac8 <APP_Control_Process+0xb30>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 80019f4:	4b31      	ldr	r3, [pc, #196]	; (8001abc <APP_Control_Process+0xb24>)
 80019f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <APP_Control_Process+0xb24>)
 80019fe:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001a02:	4313      	orrs	r3, r2
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a0c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001ac8 <APP_Control_Process+0xb30>
 8001a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a14:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <APP_Control_Process+0xb24>)
 8001a1a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <APP_Control_Process+0xb24>)
 8001a22:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001a26:	4313      	orrs	r3, r2
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <APP_Control_Process+0xb40>)
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	eeb0 3a67 	vmov.f32	s6, s15
 8001a46:	eddf 2a27 	vldr	s5, [pc, #156]	; 8001ae4 <APP_Control_Process+0xb4c>
 8001a4a:	ed97 2a1d 	vldr	s4, [r7, #116]	; 0x74
 8001a4e:	eddf 1a25 	vldr	s3, [pc, #148]	; 8001ae4 <APP_Control_Process+0xb4c>
 8001a52:	ed97 1a1f 	vldr	s2, [r7, #124]	; 0x7c
 8001a56:	edd7 0a20 	vldr	s1, [r7, #128]	; 0x80
 8001a5a:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 8001a5e:	4822      	ldr	r0, [pc, #136]	; (8001ae8 <APP_Control_Process+0xb50>)
 8001a60:	f001 fb8d 	bl	800317e <pid_process_antiwindup_clamp_with_ff>
 8001a64:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001a68:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001acc <APP_Control_Process+0xb34>
 8001a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <APP_Control_Process+0xb54>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001af0 <APP_Control_Process+0xb58>
 8001a7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <APP_Control_Process+0xb54>)
 8001a84:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_VELOCITY_PROFIL_POSITION_TORQUE)
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <APP_Control_Process+0xb24>)
 8001a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	f000 8192 	beq.w	8001db8 <APP_Control_Process+0xe20>
			{
				APP_Control_Reset();
 8001a94:	f7ff f9c8 	bl	8000e28 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <APP_Control_Process+0xb24>)
 8001a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <APP_Control_Process+0xb5c>)
 8001aa2:	601a      	str	r2, [r3, #0]
			}
			break;
 8001aa4:	e188      	b.n	8001db8 <APP_Control_Process+0xe20>
 8001aa6:	bf00      	nop
 8001aa8:	200000ec 	.word	0x200000ec
 8001aac:	447a0000 	.word	0x447a0000
 8001ab0:	200000f0 	.word	0x200000f0
 8001ab4:	20000118 	.word	0x20000118
 8001ab8:	200000e8 	.word	0x200000e8
 8001abc:	20000158 	.word	0x20000158
 8001ac0:	47c35000 	.word	0x47c35000
 8001ac4:	200000d8 	.word	0x200000d8
 8001ac8:	42c80000 	.word	0x42c80000
 8001acc:	3df5c28f 	.word	0x3df5c28f
 8001ad0:	200000f8 	.word	0x200000f8
 8001ad4:	3f75c28f 	.word	0x3f75c28f
 8001ad8:	200000e4 	.word	0x200000e4
 8001adc:	3d23d710 	.word	0x3d23d710
 8001ae0:	200000d4 	.word	0x200000d4
 8001ae4:	00000000 	.word	0x00000000
 8001ae8:	20000104 	.word	0x20000104
 8001aec:	200000e0 	.word	0x200000e0
 8001af0:	3f6147ae 	.word	0x3f6147ae
 8001af4:	20000004 	.word	0x20000004

		case REG_CONTROL_MODE_CURRENT:
			if(entering_state)
 8001af8:	4bb5      	ldr	r3, [pc, #724]	; (8001dd0 <APP_Control_Process+0xe38>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d03e      	beq.n	8001b7e <APP_Control_Process+0xbe6>
			{
				entering_state = false;
 8001b00:	4bb3      	ldr	r3, [pc, #716]	; (8001dd0 <APP_Control_Process+0xe38>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001b06:	4bb3      	ldr	r3, [pc, #716]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001b0e:	4bb1      	ldr	r3, [pc, #708]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001b16:	4baf      	ldr	r3, [pc, #700]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b18:	7e9a      	ldrb	r2, [r3, #26]
 8001b1a:	4bae      	ldr	r3, [pc, #696]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b1c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8001b20:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b22:	7eda      	ldrb	r2, [r3, #27]
 8001b24:	4bab      	ldr	r3, [pc, #684]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b26:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001b2a:	4bab      	ldr	r3, [pc, #684]	; (8001dd8 <APP_Control_Process+0xe40>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4ba3      	ldr	r3, [pc, #652]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001b4a:	4ba3      	ldr	r3, [pc, #652]	; (8001dd8 <APP_Control_Process+0xe40>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5c:	ee17 3a90 	vmov	r3, s15
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	121b      	asrs	r3, r3, #8
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b9a      	ldr	r3, [pc, #616]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001b6e:	4b99      	ldr	r3, [pc, #612]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001b76:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			{
				float const goal_current = (int16_t)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8001b7e:	4b95      	ldr	r3, [pc, #596]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b21a      	sxth	r2, r3
 8001b88:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001b8a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				//float const current_limit = (float)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
				//setpoint_current_ma = fconstrain(goal_current,-current_limit,current_limit);
				setpoint_current_ma = goal_current;
 8001ba0:	4a8e      	ldr	r2, [pc, #568]	; (8001ddc <APP_Control_Process+0xe44>)
 8001ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ba6:	6013      	str	r3, [r2, #0]
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001ba8:	4b8c      	ldr	r3, [pc, #560]	; (8001ddc <APP_Control_Process+0xe44>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <APP_Control_Process+0xe48>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/100.0f;
 8001bbc:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	4a83      	ldr	r2, [pc, #524]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001bc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd4:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001de4 <APP_Control_Process+0xe4c>
 8001bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bdc:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/1000.0f;
 8001be0:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001be2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4a7a      	ldr	r2, [pc, #488]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001bea:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf8:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001de8 <APP_Control_Process+0xe50>
 8001bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c00:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8001c04:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001c06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4a71      	ldr	r2, [pc, #452]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001c0e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001c12:	4313      	orrs	r3, r2
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001de4 <APP_Control_Process+0xe4c>
 8001c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c24:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001c2a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	4a68      	ldr	r2, [pc, #416]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001c32:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001c36:	4313      	orrs	r3, r2
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001c44:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <APP_Control_Process+0xe44>)
 8001c46:	ed93 7a00 	vldr	s14, [r3]
 8001c4a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	eeb0 3a67 	vmov.f32	s6, s15
 8001c56:	eddf 2a65 	vldr	s5, [pc, #404]	; 8001dec <APP_Control_Process+0xe54>
 8001c5a:	ed97 2a33 	vldr	s4, [r7, #204]	; 0xcc
 8001c5e:	eddf 1a63 	vldr	s3, [pc, #396]	; 8001dec <APP_Control_Process+0xe54>
 8001c62:	ed97 1a35 	vldr	s2, [r7, #212]	; 0xd4
 8001c66:	edd7 0a36 	vldr	s1, [r7, #216]	; 0xd8
 8001c6a:	ed97 0a37 	vldr	s0, [r7, #220]	; 0xdc
 8001c6e:	4860      	ldr	r0, [pc, #384]	; (8001df0 <APP_Control_Process+0xe58>)
 8001c70:	f001 fa85 	bl	800317e <pid_process_antiwindup_clamp_with_ff>
 8001c74:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001c78:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001df4 <APP_Control_Process+0xe5c>
 8001c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001c80:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <APP_Control_Process+0xe60>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001dfc <APP_Control_Process+0xe64>
 8001c8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001c92:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <APP_Control_Process+0xe60>)
 8001c94:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_CURRENT)
 8001c98:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	f000 808c 	beq.w	8001dbc <APP_Control_Process+0xe24>
			{
				APP_Control_Reset();
 8001ca4:	f7ff f8c0 	bl	8000e28 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <APP_Control_Process+0xe68>)
 8001cb2:	601a      	str	r2, [r3, #0]
			}
			break;
 8001cb4:	e082      	b.n	8001dbc <APP_Control_Process+0xe24>


		case REG_CONTROL_MODE_PWM:
			if(entering_state)
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <APP_Control_Process+0xe38>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03c      	beq.n	8001d38 <APP_Control_Process+0xda0>
			{
				entering_state = false;
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <APP_Control_Process+0xe38>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = 0;
 8001cc4:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = 0;
 8001ccc:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001cd4:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <APP_Control_Process+0xe40>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce6:	ee17 3a90 	vmov	r3, s15
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <APP_Control_Process+0xe40>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d06:	ee17 3a90 	vmov	r3, s15
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	121b      	asrs	r3, r3, #8
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			// compute pwm setpoint from goal pwm
			{
				float const goal_pwm = (int16_t)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d3a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d44:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d56:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_MAX_PWM_100_L],regs[REG_MAX_PWM_100_H]));
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d5c:	7edb      	ldrb	r3, [r3, #27]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d62:	7e92      	ldrb	r2, [r2, #26]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
				setpoint_pwm = fconstrain(goal_pwm,-pwm_limit,pwm_limit);
 8001d72:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001d76:	eef1 7a67 	vneg.f32	s15, s15
 8001d7a:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 8001d7e:	eef0 0a67 	vmov.f32	s1, s15
 8001d82:	ed97 0a3a 	vldr	s0, [r7, #232]	; 0xe8
 8001d86:	f001 f9bb 	bl	8003100 <fconstrain>
 8001d8a:	eef0 7a40 	vmov.f32	s15, s0
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <APP_Control_Process+0xe60>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_PWM)
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d010      	beq.n	8001dc0 <APP_Control_Process+0xe28>
			{
				APP_Control_Reset();
 8001d9e:	f7ff f843 	bl	8000e28 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001da4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <APP_Control_Process+0xe68>)
 8001dac:	601a      	str	r2, [r3, #0]
			}
			break;
 8001dae:	e007      	b.n	8001dc0 <APP_Control_Process+0xe28>
			break;
 8001db0:	bf00      	nop
 8001db2:	e006      	b.n	8001dc2 <APP_Control_Process+0xe2a>
			break;
 8001db4:	bf00      	nop
 8001db6:	e004      	b.n	8001dc2 <APP_Control_Process+0xe2a>
			break;
 8001db8:	bf00      	nop
 8001dba:	e002      	b.n	8001dc2 <APP_Control_Process+0xe2a>
			break;
 8001dbc:	bf00      	nop
 8001dbe:	e000      	b.n	8001dc2 <APP_Control_Process+0xe2a>
			break;
 8001dc0:	bf00      	nop
		}

		// motor leads maybe inverted, user can reverse polarity of motor (EEPROM parameter)
		float const pwm_inv = regs[REG_INV_ROTATION_MOTOR] > 0 ? -1.0f : 1.0f;
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <APP_Control_Process+0xe3c>)
 8001dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01d      	beq.n	8001e08 <APP_Control_Process+0xe70>
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <APP_Control_Process+0xe6c>)
 8001dce:	e01d      	b.n	8001e0c <APP_Control_Process+0xe74>
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000158 	.word	0x20000158
 8001dd8:	200000d8 	.word	0x200000d8
 8001ddc:	200000e4 	.word	0x200000e4
 8001de0:	200000d4 	.word	0x200000d4
 8001de4:	42c80000 	.word	0x42c80000
 8001de8:	447a0000 	.word	0x447a0000
 8001dec:	00000000 	.word	0x00000000
 8001df0:	20000104 	.word	0x20000104
 8001df4:	3df5c28f 	.word	0x3df5c28f
 8001df8:	200000e0 	.word	0x200000e0
 8001dfc:	3f6147ae 	.word	0x3f6147ae
 8001e00:	20000004 	.word	0x20000004
 8001e04:	bf800000 	.word	0xbf800000
 8001e08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e0c:	61fb      	str	r3, [r7, #28]
		float pwm = pwm_inv * setpoint_pwm; // [-100 100]
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <APP_Control_Process+0xfb0>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	edc7 7a06 	vstr	s15, [r7, #24]

		// apply pwm
		if(pwm>=0.0f)
 8001e20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	db32      	blt.n	8001e94 <APP_Control_Process+0xefc>
		{
			// scale PWM from [-100,+100] to CCRx
			uint16_t const CCR1 = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	3301      	adds	r3, #1
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e42:	ee17 3a90 	vmov	r3, s15
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	827b      	strh	r3, [r7, #18]
			uint16_t const CCR2 = (uint16_t)((1.0f-pwm/100.0f)*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001e4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e50:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001f50 <APP_Control_Process+0xfb8>
 8001e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	3301      	adds	r3, #1
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e78:	ee17 3a90 	vmov	r3, s15
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	823b      	strh	r3, [r7, #16]
			// apply
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR1);
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	8a7a      	ldrh	r2, [r7, #18]
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCR2);
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	8a3a      	ldrh	r2, [r7, #16]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
 8001e92:	e04e      	b.n	8001f32 <APP_Control_Process+0xf9a>

		}
		else
		{
			// scale PWM from [-100,+100] to CCRx
			uint16_t const CCR1 = (uint16_t)((1.0f+pwm/100.0f)*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001e94:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e98:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001f50 <APP_Control_Process+0xfb8>
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	3301      	adds	r3, #1
 8001eb0:	ee07 3a90 	vmov	s15, r3
 8001eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec0:	ee17 3a90 	vmov	r3, s15
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	82fb      	strh	r3, [r7, #22]
			uint16_t const CCR2 = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ede:	ee17 3a90 	vmov	r3, s15
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	82bb      	strh	r3, [r7, #20]
			// apply
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCR1);
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	8afa      	ldrh	r2, [r7, #22]
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCR2);
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	8aba      	ldrh	r2, [r7, #20]
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ef8:	e01b      	b.n	8001f32 <APP_Control_Process+0xf9a>
		}
	}
	else
	{
		APP_Control_Reset();
 8001efa:	f7fe ff95 	bl	8000e28 <APP_Control_Reset>
		// motor brake
		uint16_t const CCRx = (uint16_t)(1.0f*(float)(__HAL_TIM_GET_AUTORELOAD(&htim4)+1))+1;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	3301      	adds	r3, #1
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f12:	ee17 3a90 	vmov	r3, s15
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,CCRx);
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,CCRx);
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <APP_Control_Process+0xfb4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	; 0xec
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// Note : This is an unipolar current sensing architecture,
	// then motor current is always positive in FORWARD and REVERSE drive phase,
	// and zero in BRAKE phases. So, the sign of the current, is build from the sign of the PWM setpoint
	pwm_sign = ( setpoint_pwm < 0.0f ) ? -1.0f : 1.0f;
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <APP_Control_Process+0xfb0>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	d50a      	bpl.n	8001f58 <APP_Control_Process+0xfc0>
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <APP_Control_Process+0xfbc>)
 8001f44:	e00a      	b.n	8001f5c <APP_Control_Process+0xfc4>
 8001f46:	bf00      	nop
 8001f48:	200000e0 	.word	0x200000e0
 8001f4c:	2000023c 	.word	0x2000023c
 8001f50:	42c80000 	.word	0x42c80000
 8001f54:	bf800000 	.word	0xbf800000
 8001f58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f5c:	4aaf      	ldr	r2, [pc, #700]	; (800221c <APP_Control_Process+0x1284>)
 8001f5e:	6013      	str	r3, [r2, #0]
	pwm_ratio = fabsf(setpoint_pwm)/100.0f;
 8001f60:	4baf      	ldr	r3, [pc, #700]	; (8002220 <APP_Control_Process+0x1288>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f6a:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002224 <APP_Control_Process+0x128c>
 8001f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f72:	4bad      	ldr	r3, [pc, #692]	; (8002228 <APP_Control_Process+0x1290>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]

	// live update of RAM regs
	regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(present_position_deg*10.0f));
 8001f78:	4bac      	ldr	r3, [pc, #688]	; (800222c <APP_Control_Process+0x1294>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f8a:	ee17 3a90 	vmov	r3, s15
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4ba7      	ldr	r3, [pc, #668]	; (8002230 <APP_Control_Process+0x1298>)
 8001f94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(present_position_deg*10.0f));
 8001f98:	4ba4      	ldr	r3, [pc, #656]	; (800222c <APP_Control_Process+0x1294>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001faa:	ee17 3a90 	vmov	r3, s15
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b9e      	ldr	r3, [pc, #632]	; (8002230 <APP_Control_Process+0x1298>)
 8001fb8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)present_velocity_dps);
 8001fbc:	4b9d      	ldr	r3, [pc, #628]	; (8002234 <APP_Control_Process+0x129c>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b98      	ldr	r3, [pc, #608]	; (8002230 <APP_Control_Process+0x1298>)
 8001fd0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)present_velocity_dps);
 8001fd4:	4b97      	ldr	r3, [pc, #604]	; (8002234 <APP_Control_Process+0x129c>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fde:	ee17 3a90 	vmov	r3, s15
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	121b      	asrs	r3, r3, #8
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b91      	ldr	r3, [pc, #580]	; (8002230 <APP_Control_Process+0x1298>)
 8001fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	regs[REG_PRESENT_CURRENT_MA_L] = LOW_BYTE((int16_t)present_motor_current_ma);
 8001ff0:	4b91      	ldr	r3, [pc, #580]	; (8002238 <APP_Control_Process+0x12a0>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ffa:	ee17 3a90 	vmov	r3, s15
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <APP_Control_Process+0x1298>)
 8002004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = HIGH_BYTE((int16_t)present_motor_current_ma);
 8002008:	4b8b      	ldr	r3, [pc, #556]	; (8002238 <APP_Control_Process+0x12a0>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002012:	ee17 3a90 	vmov	r3, s15
 8002016:	b21b      	sxth	r3, r3
 8002018:	121b      	asrs	r3, r3, #8
 800201a:	b21b      	sxth	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b84      	ldr	r3, [pc, #528]	; (8002230 <APP_Control_Process+0x1298>)
 8002020:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	regs[REG_PRESENT_VOLTAGE] = (uint8_t)(present_voltage_0v1);
 8002024:	4b85      	ldr	r3, [pc, #532]	; (800223c <APP_Control_Process+0x12a4>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002032:	793b      	ldrb	r3, [r7, #4]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b7e      	ldr	r3, [pc, #504]	; (8002230 <APP_Control_Process+0x1298>)
 8002038:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 800203c:	4b7c      	ldr	r3, [pc, #496]	; (8002230 <APP_Control_Process+0x1298>)
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	float moving_threshold = regs[REG_MOVING_THRESHOLD_DPS];
 8002044:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <APP_Control_Process+0x1298>)
 8002046:	7fdb      	ldrb	r3, [r3, #31]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002050:	edc7 7a03 	vstr	s15, [r7, #12]
	regs[REG_MOVING] = ( fabs(present_velocity_dps) > moving_threshold ) ? 1 : 0;
 8002054:	4b77      	ldr	r3, [pc, #476]	; (8002234 <APP_Control_Process+0x129c>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eef0 7ae7 	vabs.f32	s15, s15
 800205e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	bf4c      	ite	mi
 800206c:	2301      	movmi	r3, #1
 800206e:	2300      	movpl	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <APP_Control_Process+0x1298>)
 8002076:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800207a:	4b71      	ldr	r3, [pc, #452]	; (8002240 <APP_Control_Process+0x12a8>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208c:	ee17 3a90 	vmov	r3, s15
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b66      	ldr	r3, [pc, #408]	; (8002230 <APP_Control_Process+0x1298>)
 8002096:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800209a:	4b69      	ldr	r3, [pc, #420]	; (8002240 <APP_Control_Process+0x12a8>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ac:	ee17 3a90 	vmov	r3, s15
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <APP_Control_Process+0x1298>)
 80020ba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)setpoint_velocity_dps);
 80020be:	4b61      	ldr	r3, [pc, #388]	; (8002244 <APP_Control_Process+0x12ac>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c8:	ee17 3a90 	vmov	r3, s15
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b57      	ldr	r3, [pc, #348]	; (8002230 <APP_Control_Process+0x1298>)
 80020d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)setpoint_velocity_dps);
 80020d6:	4b5b      	ldr	r3, [pc, #364]	; (8002244 <APP_Control_Process+0x12ac>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e0:	ee17 3a90 	vmov	r3, s15
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	121b      	asrs	r3, r3, #8
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b50      	ldr	r3, [pc, #320]	; (8002230 <APP_Control_Process+0x1298>)
 80020ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)pid_position.err_integral); // DEBUG
	//regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)pid_position.err_integral); // DEBUG

	regs[REG_SETPOINT_CURRENT_MA_L] = LOW_BYTE((int16_t)setpoint_current_ma);
 80020f2:	4b55      	ldr	r3, [pc, #340]	; (8002248 <APP_Control_Process+0x12b0>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 3a90 	vmov	r3, s15
 8002100:	b21b      	sxth	r3, r3
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <APP_Control_Process+0x1298>)
 8002106:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = HIGH_BYTE((int16_t)setpoint_current_ma);
 800210a:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <APP_Control_Process+0x12b0>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 3a90 	vmov	r3, s15
 8002118:	b21b      	sxth	r3, r3
 800211a:	121b      	asrs	r3, r3, #8
 800211c:	b21b      	sxth	r3, r3
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <APP_Control_Process+0x1298>)
 8002122:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	regs[REG_SETPOINT_PWM_100_L] = LOW_BYTE((int16_t)setpoint_pwm);
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <APP_Control_Process+0x1288>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002130:	ee17 3a90 	vmov	r3, s15
 8002134:	b21b      	sxth	r3, r3
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <APP_Control_Process+0x1298>)
 800213a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = HIGH_BYTE((int16_t)setpoint_pwm);
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <APP_Control_Process+0x1288>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002148:	ee17 3a90 	vmov	r3, s15
 800214c:	b21b      	sxth	r3, r3
 800214e:	121b      	asrs	r3, r3, #8
 8002150:	b21b      	sxth	r3, r3
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b36      	ldr	r3, [pc, #216]	; (8002230 <APP_Control_Process+0x1298>)
 8002156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = LOW_BYTE((uint16_t)motor_current_input_adc);
 800215a:	4b3c      	ldr	r3, [pc, #240]	; (800224c <APP_Control_Process+0x12b4>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002164:	ee17 3a90 	vmov	r3, s15
 8002168:	b29b      	uxth	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <APP_Control_Process+0x1298>)
 800216e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = HIGH_BYTE((uint16_t)motor_current_input_adc);
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <APP_Control_Process+0x12b4>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800217c:	ee17 3a90 	vmov	r3, s15
 8002180:	b29b      	uxth	r3, r3
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b29b      	uxth	r3, r3
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <APP_Control_Process+0x1298>)
 800218a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = LOW_BYTE((uint16_t)motor_current_input_adc_offset);
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <APP_Control_Process+0x12b8>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002198:	ee17 3a90 	vmov	r3, s15
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b23      	ldr	r3, [pc, #140]	; (8002230 <APP_Control_Process+0x1298>)
 80021a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = HIGH_BYTE((uint16_t)motor_current_input_adc_offset);
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <APP_Control_Process+0x12b8>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b0:	ee17 3a90 	vmov	r3, s15
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <APP_Control_Process+0x1298>)
 80021be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_POSITION_INPUT_ADC_L] = LOW_BYTE((uint16_t)0);
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <APP_Control_Process+0x1298>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = HIGH_BYTE((uint16_t)0);
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <APP_Control_Process+0x1298>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	regs[REG_VOLTAGE_INPUT_ADC_L] = LOW_BYTE((uint16_t)voltage_input_adc);
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <APP_Control_Process+0x12bc>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021dc:	ee17 3a90 	vmov	r3, s15
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <APP_Control_Process+0x1298>)
 80021e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = HIGH_BYTE((uint16_t)voltage_input_adc);
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <APP_Control_Process+0x12bc>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <APP_Control_Process+0x1298>)
 8002202:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// steps
	++counter;
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <APP_Control_Process+0x12c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <APP_Control_Process+0x12c0>)
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e000      	b.n	8002214 <APP_Control_Process+0x127c>
		return;
 8002212:	bf00      	nop
}
 8002214:	37f8      	adds	r7, #248	; 0xf8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000cc 	.word	0x200000cc
 8002220:	200000e0 	.word	0x200000e0
 8002224:	42c80000 	.word	0x42c80000
 8002228:	200000d0 	.word	0x200000d0
 800222c:	200000d8 	.word	0x200000d8
 8002230:	20000158 	.word	0x20000158
 8002234:	20000110 	.word	0x20000110
 8002238:	200000d4 	.word	0x200000d4
 800223c:	200000dc 	.word	0x200000dc
 8002240:	200000f0 	.word	0x200000f0
 8002244:	200000ec 	.word	0x200000ec
 8002248:	200000e4 	.word	0x200000e4
 800224c:	200000c0 	.word	0x200000c0
 8002250:	200000c8 	.word	0x200000c8
 8002254:	200000c4 	.word	0x200000c4
 8002258:	200000f4 	.word	0x200000f4

0800225c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d159      	bne.n	8002320 <HAL_ADC_ConvCpltCallback+0xc4>
	{
		// Filter (EWMA) position and voltage ADC samples
		voltage_input_adc = ALPHA_VOLTAGE * (float)(ADC_DMA[2]) + (1.0f-ALPHA_VOLTAGE) * voltage_input_adc;
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <HAL_ADC_ConvCpltCallback+0xd0>)
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b29b      	uxth	r3, r3
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002330 <HAL_ADC_ConvCpltCallback+0xd4>
 800227e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002338 <HAL_ADC_ConvCpltCallback+0xdc>
 800228c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002296:	edc3 7a00 	vstr	s15, [r3]
		// TIM4 is 40KHz, motor PWM is 20KHz
		// So ADC is triggered twice per motor PWM period by TIM4
		// We will measure ON and OFF instant motor current

		// In FORWARD or REVERSE DRIVE phases, PWM is ON, counter decreases
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_ADC_ConvCpltCallback+0xe0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d117      	bne.n	80022d8 <HAL_ADC_ConvCpltCallback+0x7c>
		{
			// filter motor current
			motor_current_input_adc = ALPHA_CURRENT_SENSE*(float)(ADC_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE)*motor_current_input_adc;
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_ADC_ConvCpltCallback+0xd0>)
 80022aa:	885b      	ldrh	r3, [r3, #2]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002330 <HAL_ADC_ConvCpltCallback+0xd4>
 80022ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_ADC_ConvCpltCallback+0xe4>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002338 <HAL_ADC_ConvCpltCallback+0xdc>
 80022c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_ADC_ConvCpltCallback+0xe4>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
 80022d6:	e01e      	b.n	8002316 <HAL_ADC_ConvCpltCallback+0xba>
		}
		// In BRAKE phase, PWM is OFF, counter increases
		else
		{
			// self-calibrate ADC offset (b) when motor is stopped
			if(setpoint_pwm==0.0f)
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_ADC_ConvCpltCallback+0xe8>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e6:	d116      	bne.n	8002316 <HAL_ADC_ConvCpltCallback+0xba>
			{
				motor_current_input_adc_offset = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC_DMA[1]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_ADC_ConvCpltCallback+0xd0>)
 80022ea:	885b      	ldrh	r3, [r3, #2]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002348 <HAL_ADC_ConvCpltCallback+0xec>
 80022fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_ADC_ConvCpltCallback+0xf0>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002350 <HAL_ADC_ConvCpltCallback+0xf4>
 8002308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800230c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_ADC_ConvCpltCallback+0xf0>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		// restart ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 8002316:	2203      	movs	r2, #3
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_ADC_ConvCpltCallback+0xd0>)
 800231a:	4803      	ldr	r0, [pc, #12]	; (8002328 <HAL_ADC_ConvCpltCallback+0xcc>)
 800231c:	f002 fdbc 	bl	8004e98 <HAL_ADC_Start_DMA>
	}
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000288 	.word	0x20000288
 800232c:	200000b8 	.word	0x200000b8
 8002330:	3d4ccccd 	.word	0x3d4ccccd
 8002334:	200000c4 	.word	0x200000c4
 8002338:	3f733333 	.word	0x3f733333
 800233c:	2000023c 	.word	0x2000023c
 8002340:	200000c0 	.word	0x200000c0
 8002344:	200000e0 	.word	0x200000e0
 8002348:	3a83126f 	.word	0x3a83126f
 800234c:	200000c8 	.word	0x200000c8
 8002350:	3f7fbe77 	.word	0x3f7fbe77

08002354 <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 8002358:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800235a:	225c      	movs	r2, #92	; 0x5c
 800235c:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 800235e:	4b5e      	ldr	r3, [pc, #376]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002360:	2200      	movs	r2, #0
 8002362:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 8002364:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002366:	2200      	movs	r2, #0
 8002368:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800236c:	2201      	movs	r2, #1
 800236e:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002372:	2203      	movs	r2, #3
 8002374:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 8002376:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002378:	2200      	movs	r2, #0
 800237a:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 800237c:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800237e:	221e      	movs	r2, #30
 8002380:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 8002382:	4b55      	ldr	r3, [pc, #340]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002384:	2200      	movs	r2, #0
 8002386:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800238a:	2296      	movs	r2, #150	; 0x96
 800238c:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 800238e:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002390:	2200      	movs	r2, #0
 8002392:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002396:	2220      	movs	r2, #32
 8002398:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 800239a:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800239c:	2203      	movs	r2, #3
 800239e:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 80023a0:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023a8:	221f      	movs	r2, #31
 80023aa:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023ae:	22fa      	movs	r2, #250	; 0xfa
 80023b0:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023ba:	2232      	movs	r2, #50	; 0x32
 80023bc:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 80023c4:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023c6:	223c      	movs	r2, #60	; 0x3c
 80023c8:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023cc:	222d      	movs	r2, #45	; 0x2d
 80023ce:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023d2:	225f      	movs	r2, #95	; 0x5f
 80023d4:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 80023d6:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023d8:	2205      	movs	r2, #5
 80023da:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 80023dc:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023e6:	2224      	movs	r2, #36	; 0x24
 80023e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023ee:	2224      	movs	r2, #36	; 0x24
 80023f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023f6:	2232      	movs	r2, #50	; 0x32
 80023f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 8002404:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002406:	226e      	movs	r2, #110	; 0x6e
 8002408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800240e:	220f      	movs	r2, #15
 8002410:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002416:	22b4      	movs	r2, #180	; 0xb4
 8002418:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800242e:	22d0      	movs	r2, #208	; 0xd0
 8002430:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002436:	2207      	movs	r2, #7
 8002438:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800243e:	2200      	movs	r2, #0
 8002440:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002446:	2200      	movs	r2, #0
 8002448:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800244e:	2210      	movs	r2, #16
 8002450:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002456:	220e      	movs	r2, #14
 8002458:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800245e:	220a      	movs	r2, #10
 8002460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800246e:	220a      	movs	r2, #10
 8002470:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800247e:	22f4      	movs	r2, #244	; 0xf4
 8002480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 800249e:	2214      	movs	r2, #20
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80024ae:	22b8      	movs	r2, #184	; 0xb8
 80024b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80024b6:	220b      	movs	r2, #11
 80024b8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <factory_reset_eeprom_regs+0x184>)
 80024d0:	f000 f8de 	bl	8002690 <eeprom_store>
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000158 	.word	0x20000158

080024dc <load_eeprom_regs>:


void load_eeprom_regs()
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	4802      	ldr	r0, [pc, #8]	; (80024ec <load_eeprom_regs+0x10>)
 80024e4:	f000 f8c2 	bl	800266c <eeprom_restore>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000158 	.word	0x20000158

080024f0 <store_eeprom_regs>:

void store_eeprom_regs()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	4802      	ldr	r0, [pc, #8]	; (8002500 <store_eeprom_regs+0x10>)
 80024f8:	f000 f8ca 	bl	8002690 <eeprom_store>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000158 	.word	0x20000158

08002504 <reset_ram_regs>:

void reset_ram_regs()
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 8002508:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <reset_ram_regs+0x140>)
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 8002510:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <reset_ram_regs+0x140>)
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = REG_CONTROL_MODE_PWM;
 8002518:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <reset_ram_regs+0x140>)
 800251a:	2204      	movs	r2, #4
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 8002520:	4b48      	ldr	r3, [pc, #288]	; (8002644 <reset_ram_regs+0x140>)
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 8002528:	4b46      	ldr	r3, [pc, #280]	; (8002644 <reset_ram_regs+0x140>)
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <reset_ram_regs+0x140>)
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8002538:	4b42      	ldr	r3, [pc, #264]	; (8002644 <reset_ram_regs+0x140>)
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <reset_ram_regs+0x140>)
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <reset_ram_regs+0x140>)
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 8002550:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <reset_ram_regs+0x140>)
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <reset_ram_regs+0x140>)
 800255a:	2200      	movs	r2, #0
 800255c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <reset_ram_regs+0x140>)
 8002562:	2200      	movs	r2, #0
 8002564:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <reset_ram_regs+0x140>)
 800256a:	2200      	movs	r2, #0
 800256c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <reset_ram_regs+0x140>)
 8002572:	2200      	movs	r2, #0
 8002574:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <reset_ram_regs+0x140>)
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <reset_ram_regs+0x140>)
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <reset_ram_regs+0x140>)
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <reset_ram_regs+0x140>)
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <reset_ram_regs+0x140>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <reset_ram_regs+0x140>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 80025a8:	4b26      	ldr	r3, [pc, #152]	; (8002644 <reset_ram_regs+0x140>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <reset_ram_regs+0x140>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <reset_ram_regs+0x140>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <reset_ram_regs+0x140>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <reset_ram_regs+0x140>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <reset_ram_regs+0x140>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <reset_ram_regs+0x140>)
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <reset_ram_regs+0x140>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = 0;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <reset_ram_regs+0x140>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = 0;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <reset_ram_regs+0x140>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = 0;
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <reset_ram_regs+0x140>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = 0;
 8002600:	4b10      	ldr	r3, [pc, #64]	; (8002644 <reset_ram_regs+0x140>)
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	regs[REG_POSITION_INPUT_ADC_L] = 0;
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <reset_ram_regs+0x140>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = 0;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <reset_ram_regs+0x140>)
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	regs[REG_VOLTAGE_INPUT_ADC_L] = 0;
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <reset_ram_regs+0x140>)
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = 0;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <reset_ram_regs+0x140>)
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <reset_ram_regs+0x140>)
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <reset_ram_regs+0x140>)
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000158 	.word	0x20000158

08002648 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <eeprom_empty+0x20>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	bf0c      	ite	eq
 8002656:	2301      	moveq	r3, #1
 8002658:	2300      	movne	r3, #0
 800265a:	b2db      	uxtb	r3, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	0801f800 	.word	0x0801f800

0800266c <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <eeprom_restore+0x20>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f008 faad 	bl	800abdc <memcpy>
	return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	0801f800 	.word	0x0801f800

08002690 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b08d      	sub	sp, #52	; 0x34
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800269a:	f004 f917 	bl	80068cc <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	233f      	movs	r3, #63	; 0x3f
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	2301      	movs	r3, #1
 80026ac:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 80026b2:	f107 0210 	add.w	r2, r7, #16
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f004 f9f9 	bl	8006ab4 <HAL_FLASHEx_Erase>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 80026c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 80026d0:	f004 f91e 	bl	8006910 <HAL_FLASH_Lock>
			return result;
 80026d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026d8:	e03b      	b.n	8002752 <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 80026da:	a422      	add	r4, pc, #136	; (adr r4, 8002764 <eeprom_store+0xd4>)
 80026dc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80026e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	e02c      	b.n	8002744 <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	18d1      	adds	r1, r2, r3
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	2208      	movs	r2, #8
 80026f6:	4618      	mov	r0, r3
 80026f8:	f008 fa70 	bl	800abdc <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 80026fc:	4a18      	ldr	r2, [pc, #96]	; (8002760 <eeprom_store+0xd0>)
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002706:	461a      	mov	r2, r3
 8002708:	4623      	mov	r3, r4
 800270a:	2000      	movs	r0, #0
 800270c:	f004 f888 	bl	8006820 <HAL_FLASH_Program>
 8002710:	4603      	mov	r3, r0
 8002712:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 8002716:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00f      	beq.n	800273e <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 800271e:	f004 f911 	bl	8006944 <HAL_FLASH_GetError>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 800272a:	f004 f8f1 	bl	8006910 <HAL_FLASH_Lock>
					return error;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e00e      	b.n	8002752 <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 8002734:	f004 f8ec 	bl	8006910 <HAL_FLASH_Lock>
				return result;
 8002738:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800273c:	e009      	b.n	8002752 <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	3308      	adds	r3, #8
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d3ce      	bcc.n	80026ea <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 800274c:	f004 f8e0 	bl	8006910 <HAL_FLASH_Lock>
	return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3734      	adds	r7, #52	; 0x34
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	bf00      	nop
 800275c:	f3af 8000 	nop.w
 8002760:	0801f800 	.word	0x0801f800
 8002764:	deadbeef 	.word	0xdeadbeef
 8002768:	00000000 	.word	0x00000000

0800276c <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 8002774:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <stop_blinking+0x3c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2100      	movs	r1, #0
 800277a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <stop_blinking+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2100      	movs	r1, #0
 8002784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 8002788:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <stop_blinking+0x44>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 8002792:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <stop_blinking+0x48>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2100      	movs	r1, #0
 8002798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	2000011c 	.word	0x2000011c
 80027ac:	20000124 	.word	0x20000124
 80027b0:	2000012c 	.word	0x2000012c
 80027b4:	20000130 	.word	0x20000130

080027b8 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	e011      	b.n	80027ec <HAL_Led_Init+0x34>
    {
        stop_blinking(id);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ffcf 	bl	800276c <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <HAL_Led_Init+0x44>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_Led_Init+0x48>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027de:	2201      	movs	r2, #1
 80027e0:	4619      	mov	r1, r3
 80027e2:	f004 fc25 	bl	8007030 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3301      	adds	r3, #1
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	ddea      	ble.n	80027c8 <HAL_Led_Init+0x10>
    }
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	0800acdc 	.word	0x0800acdc
 8002800:	0800acd8 	.word	0x0800acd8

08002804 <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 800280a:	f001 ff4f 	bl	80046ac <HAL_GetTick>
 800280e:	6038      	str	r0, [r7, #0]
    int id = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	e063      	b.n	80028e2 <HAL_Led_Process+0xde>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 800281a:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <HAL_Led_Process+0xec>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d05a      	beq.n	80028dc <HAL_Led_Process+0xd8>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <HAL_Led_Process+0xf0>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	4930      	ldr	r1, [pc, #192]	; (80028f0 <HAL_Led_Process+0xec>)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002836:	4413      	add	r3, r2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d34e      	bcc.n	80028dc <HAL_Led_Process+0xd8>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 800283e:	4a2e      	ldr	r2, [pc, #184]	; (80028f8 <HAL_Led_Process+0xf4>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002846:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_Led_Process+0xf8>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800284e:	4619      	mov	r1, r3
 8002850:	f004 fbd6 	bl	8007000 <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_Led_Process+0x70>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 800285a:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <HAL_Led_Process+0xf4>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002862:	4a26      	ldr	r2, [pc, #152]	; (80028fc <HAL_Led_Process+0xf8>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800286a:	2201      	movs	r2, #1
 800286c:	4619      	mov	r1, r3
 800286e:	f004 fbdf 	bl	8007030 <HAL_GPIO_WritePin>
 8002872:	e00b      	b.n	800288c <HAL_Led_Process+0x88>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_Led_Process+0xf4>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800287c:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_Led_Process+0xf8>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002884:	2200      	movs	r2, #0
 8002886:	4619      	mov	r1, r3
 8002888:	f004 fbd2 	bl	8007030 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_Led_Process+0xf0>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_Led_Process+0xec>)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800289c:	441a      	add	r2, r3
 800289e:	4915      	ldr	r1, [pc, #84]	; (80028f4 <HAL_Led_Process+0xf0>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_Led_Process+0xfc>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f083 0301 	eor.w	r3, r3, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d011      	beq.n	80028dc <HAL_Led_Process+0xd8>
                {
                    --blinkin_counter[id];
 80028b8:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_Led_Process+0x100>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	4910      	ldr	r1, [pc, #64]	; (8002904 <HAL_Led_Process+0x100>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_Led_Process+0x100>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_Led_Process+0xd8>
                    {
                        stop_blinking(id);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff48 	bl	800276c <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3301      	adds	r3, #1
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	dd98      	ble.n	800281a <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000011c 	.word	0x2000011c
 80028f4:	20000130 	.word	0x20000130
 80028f8:	0800acdc 	.word	0x0800acdc
 80028fc:	0800acd8 	.word	0x0800acd8
 8002900:	2000012c 	.word	0x2000012c
 8002904:	20000124 	.word	0x20000124

08002908 <HAL_Led_Reset>:
    stop_blinking(id);
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
}

void HAL_Led_Reset(int id)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff2b 	bl	800276c <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <HAL_Led_Reset+0x30>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_Led_Reset+0x34>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002926:	2201      	movs	r2, #1
 8002928:	4619      	mov	r1, r3
 800292a:	f004 fb81 	bl	8007030 <HAL_GPIO_WritePin>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	0800acdc 	.word	0x0800acdc
 800293c:	0800acd8 	.word	0x0800acd8

08002940 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 800294c:	4919      	ldr	r1, [pc, #100]	; (80029b4 <HAL_Led_Blink+0x74>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_Led_Blink+0x24>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_Led_Blink+0x26>
 8002964:	2300      	movs	r3, #0
 8002966:	4914      	ldr	r1, [pc, #80]	; (80029b8 <HAL_Led_Blink+0x78>)
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2d9      	uxtb	r1, r3
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_Led_Blink+0x7c>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	460a      	mov	r2, r1
 8002982:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 8002984:	f001 fe92 	bl	80046ac <HAL_GetTick>
 8002988:	4601      	mov	r1, r0
 800298a:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_Led_Blink+0x80>)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_Led_Blink+0x84>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HAL_Led_Blink+0x88>)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a2:	2200      	movs	r2, #0
 80029a4:	4619      	mov	r1, r3
 80029a6:	f004 fb43 	bl	8007030 <HAL_GPIO_WritePin>
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000011c 	.word	0x2000011c
 80029b8:	20000124 	.word	0x20000124
 80029bc:	2000012c 	.word	0x2000012c
 80029c0:	20000130 	.word	0x20000130
 80029c4:	0800acdc 	.word	0x0800acdc
 80029c8:	0800acd8 	.word	0x0800acd8

080029cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d2:	f001 fe06 	bl	80045e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d6:	f000 f861 	bl	8002a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029da:	f000 fb0f 	bl	8002ffc <MX_GPIO_Init>
  MX_DMA_Init();
 80029de:	f000 fad3 	bl	8002f88 <MX_DMA_Init>
  MX_ADC1_Init();
 80029e2:	f000 f8c5 	bl	8002b70 <MX_ADC1_Init>
  MX_TIM1_Init();
 80029e6:	f000 f959 	bl	8002c9c <MX_TIM1_Init>
  MX_TIM4_Init();
 80029ea:	f000 f9c7 	bl	8002d7c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80029ee:	f000 fa7f 	bl	8002ef0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80029f2:	f000 fa47 	bl	8002e84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_Led_Init();
 80029f6:	f7ff fedf 	bl	80027b8 <HAL_Led_Init>
	HAL_Led_Blink(LED0,10,150);
 80029fa:	2296      	movs	r2, #150	; 0x96
 80029fc:	210a      	movs	r1, #10
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7ff ff9e 	bl	8002940 <HAL_Led_Blink>
	HAL_Led_Blink(LED1,10,150);
 8002a04:	2296      	movs	r2, #150	; 0x96
 8002a06:	210a      	movs	r1, #10
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7ff ff99 	bl	8002940 <HAL_Led_Blink>
	HAL_Serial_Init_Half_Duplex(
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9303      	str	r3, [sp, #12]
 8002a12:	2310      	movs	r3, #16
 8002a14:	9302      	str	r3, [sp, #8]
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <main+0xc4>)
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a26:	491b      	ldr	r1, [pc, #108]	; (8002a94 <main+0xc8>)
 8002a28:	481b      	ldr	r0, [pc, #108]	; (8002a98 <main+0xcc>)
 8002a2a:	f001 f859 	bl	8003ae0 <HAL_Serial_Init_Half_Duplex>
		GPIO_PIN_RESET,
		UART2_RX_DIR_GPIO_Port,
		UART2_RX_DIR_Pin,
		GPIO_PIN_RESET
	);
	if(eeprom_empty())
 8002a2e:	f7ff fe0b 	bl	8002648 <eeprom_empty>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <main+0x70>
		factory_reset_eeprom_regs();
 8002a38:	f7ff fc8c 	bl	8002354 <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8002a3c:	f7ff fd4e 	bl	80024dc <load_eeprom_regs>
	reset_ram_regs();
 8002a40:	f7ff fd60 	bl	8002504 <reset_ram_regs>
	APP_Control_Init();
 8002a44:	f7fe fa58 	bl	8000ef8 <APP_Control_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t start_time = HAL_GetTick();
 8002a48:	f001 fe30 	bl	80046ac <HAL_GetTick>
 8002a4c:	6078      	str	r0, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8002a4e:	f001 fe2d 	bl	80046ac <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d902      	bls.n	8002a64 <main+0x98>
	{
		//if(regs[REG_LED]==0)
		if(1)
		{
			HAL_Led_Reset(LED0);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7ff ff52 	bl	8002908 <HAL_Led_Reset>
		else
		{
			HAL_Led_Set(LED0);
		}
	}
	HAL_Led_Process();
 8002a64:	f7ff fece 	bl	8002804 <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8002a68:	e008      	b.n	8002a7c <main+0xb0>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8002a6a:	480a      	ldr	r0, [pc, #40]	; (8002a94 <main+0xc8>)
 8002a6c:	f001 f8fe 	bl	8003c6c <HAL_Serial_GetChar>
 8002a70:	4603      	mov	r3, r0
 8002a72:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fec8 	bl	800380c <packet_handler>
	while(HAL_Serial_Available(&serial))
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <main+0xc8>)
 8002a7e:	f001 f8c5 	bl	8003c0c <HAL_Serial_Available>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <main+0x9e>
	}

	// regulation
	APP_Control_Process();
 8002a88:	f7fe fa86 	bl	8000f98 <APP_Control_Process>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8002a8c:	e7df      	b.n	8002a4e <main+0x82>
 8002a8e:	bf00      	nop
 8002a90:	48000400 	.word	0x48000400
 8002a94:	20000354 	.word	0x20000354
 8002a98:	20002cf4 	.word	0x20002cf4

08002a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0a4      	sub	sp, #144	; 0x90
 8002aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aa6:	2238      	movs	r2, #56	; 0x38
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f008 f8a1 	bl	800abf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	2244      	movs	r2, #68	; 0x44
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f008 f893 	bl	800abf2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002acc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ad0:	f004 fac6 	bl	8007060 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ade:	2340      	movs	r3, #64	; 0x40
 8002ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002aea:	2304      	movs	r3, #4
 8002aec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8002aee:	234b      	movs	r3, #75	; 0x4b
 8002af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fb5c 	bl	80071c8 <HAL_RCC_OscConfig>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002b16:	f000 faef 	bl	80030f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1a:	230f      	movs	r3, #15
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b26:	2300      	movs	r3, #0
 8002b28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b32:	2104      	movs	r1, #4
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fe5f 	bl	80077f8 <HAL_RCC_ClockConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002b40:	f000 fada 	bl	80030f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8002b44:	f248 0302 	movw	r3, #32770	; 0x8002
 8002b48:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b54:	463b      	mov	r3, r7
 8002b56:	4618      	mov	r0, r3
 8002b58:	f005 f86a 	bl	8007c30 <HAL_RCCEx_PeriphCLKConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002b62:	f000 fac9 	bl	80030f8 <Error_Handler>
  }
}
 8002b66:	bf00      	nop
 8002b68:	3790      	adds	r7, #144	; 0x90
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	2220      	movs	r2, #32
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f008 f832 	bl	800abf2 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b8e:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b96:	4b3e      	ldr	r3, [pc, #248]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002b98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bb8:	2208      	movs	r2, #8
 8002bba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bc2:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bca:	2203      	movs	r2, #3
 8002bcc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bce:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bd8:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002be0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002be6:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002bf4:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bfc:	4824      	ldr	r0, [pc, #144]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002bfe:	f001 ffc3 	bl	8004b88 <HAL_ADC_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8002c08:	f000 fa76 	bl	80030f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c14:	4619      	mov	r1, r3
 8002c16:	481e      	ldr	r0, [pc, #120]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002c18:	f003 f960 	bl	8005edc <HAL_ADCEx_MultiModeConfigChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002c22:	f000 fa69 	bl	80030f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <MX_ADC1_Init+0x124>)
 8002c28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c32:	237f      	movs	r3, #127	; 0x7f
 8002c34:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c36:	2304      	movs	r3, #4
 8002c38:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4813      	ldr	r0, [pc, #76]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002c44:	f002 fc14 	bl	8005470 <HAL_ADC_ConfigChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002c4e:	f000 fa53 	bl	80030f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c52:	230c      	movs	r3, #12
 8002c54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480d      	ldr	r0, [pc, #52]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002c5c:	f002 fc08 	bl	8005470 <HAL_ADC_ConfigChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002c66:	f000 fa47 	bl	80030f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <MX_ADC1_Init+0x128>)
 8002c6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c6e:	2312      	movs	r3, #18
 8002c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4806      	ldr	r0, [pc, #24]	; (8002c90 <MX_ADC1_Init+0x120>)
 8002c78:	f002 fbfa 	bl	8005470 <HAL_ADC_ConfigChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002c82:	f000 fa39 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c86:	bf00      	nop
 8002c88:	3730      	adds	r7, #48	; 0x30
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000288 	.word	0x20000288
 8002c94:	04300002 	.word	0x04300002
 8002c98:	2a000400 	.word	0x2a000400

08002c9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b09a      	sub	sp, #104	; 0x68
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ca2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ca6:	2224      	movs	r2, #36	; 0x24
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f007 ffa1 	bl	800abf2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2234      	movs	r2, #52	; 0x34
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f007 ff95 	bl	800abf2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002cca:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <MX_TIM1_Init+0xdc>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d10:	2300      	movs	r3, #0
 8002d12:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4815      	ldr	r0, [pc, #84]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002d20:	f005 fbd8 	bl	80084d4 <HAL_TIM_Encoder_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002d2a:	f000 f9e5 	bl	80030f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002d42:	f006 fc49 	bl	80095d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002d4c:	f000 f9d4 	bl	80030f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002d54:	2300      	movs	r3, #0
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_TIM1_Init+0xd8>)
 8002d5e:	f006 fcbd 	bl	80096dc <HAL_TIMEx_ConfigBreakDeadTime>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002d68:	f000 f9c6 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	3768      	adds	r7, #104	; 0x68
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20002ca8 	.word	0x20002ca8
 8002d78:	40012c00 	.word	0x40012c00

08002d7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002db0:	4a33      	ldr	r2, [pc, #204]	; (8002e80 <MX_TIM4_Init+0x104>)
 8002db2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3749;
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002dc2:	f640 62a5 	movw	r2, #3749	; 0xea5
 8002dc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dce:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dd4:	4829      	ldr	r0, [pc, #164]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002dd6:	f005 f91b 	bl	8008010 <HAL_TIM_Base_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002de0:	f000 f98a 	bl	80030f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dee:	4619      	mov	r1, r3
 8002df0:	4822      	ldr	r0, [pc, #136]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002df2:	f005 fea5 	bl	8008b40 <HAL_TIM_ConfigClockSource>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002dfc:	f000 f97c 	bl	80030f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e00:	481e      	ldr	r0, [pc, #120]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002e02:	f005 f9bf 	bl	8008184 <HAL_TIM_PWM_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002e0c:	f000 f974 	bl	80030f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e10:	2320      	movs	r3, #32
 8002e12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4817      	ldr	r0, [pc, #92]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002e20:	f006 fbda 	bl	80095d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002e2a:	f000 f965 	bl	80030f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2e:	2360      	movs	r3, #96	; 0x60
 8002e30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	4619      	mov	r1, r3
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002e46:	f005 fd6b 	bl	8008920 <HAL_TIM_PWM_ConfigChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002e50:	f000 f952 	bl	80030f8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002e60:	f005 fd5e 	bl	8008920 <HAL_TIM_PWM_ConfigChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8002e6a:	f000 f945 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e6e:	4803      	ldr	r0, [pc, #12]	; (8002e7c <MX_TIM4_Init+0x100>)
 8002e70:	f001 fa16 	bl	80042a0 <HAL_TIM_MspPostInit>

}
 8002e74:	bf00      	nop
 8002e76:	3738      	adds	r7, #56	; 0x38
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	2000023c 	.word	0x2000023c
 8002e80:	40000800 	.word	0x40000800

08002e84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <MX_TIM6_Init+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 149;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002e9c:	2295      	movs	r2, #149	; 0x95
 8002e9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002eb6:	f005 f8ab 	bl	8008010 <HAL_TIM_Base_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002ec0:	f000 f91a 	bl	80030f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_TIM6_Init+0x64>)
 8002ed2:	f006 fb81 	bl	80095d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002edc:	f000 f90c 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20002c5c 	.word	0x20002c5c
 8002eec:	40001000 	.word	0x40001000

08002ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002ef6:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <MX_USART2_UART_Init+0x94>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f38:	4811      	ldr	r0, [pc, #68]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f3a:	f006 fcb5 	bl	80098a8 <HAL_UART_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f44:	f000 f8d8 	bl	80030f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f48:	2100      	movs	r1, #0
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f4c:	f007 fd37 	bl	800a9be <HAL_UARTEx_SetTxFifoThreshold>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f56:	f000 f8cf 	bl	80030f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4808      	ldr	r0, [pc, #32]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f5e:	f007 fd6c 	bl	800aa3a <HAL_UARTEx_SetRxFifoThreshold>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f68:	f000 f8c6 	bl	80030f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f6c:	4804      	ldr	r0, [pc, #16]	; (8002f80 <MX_USART2_UART_Init+0x90>)
 8002f6e:	f007 fced 	bl	800a94c <HAL_UARTEx_DisableFifoMode>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002f78:	f000 f8be 	bl	80030f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20002cf4 	.word	0x20002cf4
 8002f84:	40004400 	.word	0x40004400

08002f88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <MX_DMA_Init+0x70>)
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <MX_DMA_Init+0x70>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6493      	str	r3, [r2, #72]	; 0x48
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <MX_DMA_Init+0x70>)
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <MX_DMA_Init+0x70>)
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <MX_DMA_Init+0x70>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6493      	str	r3, [r2, #72]	; 0x48
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_DMA_Init+0x70>)
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	200b      	movs	r0, #11
 8002fc4:	f003 f919 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fc8:	200b      	movs	r0, #11
 8002fca:	f003 f930 	bl	800622e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	200c      	movs	r0, #12
 8002fd4:	f003 f911 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002fd8:	200c      	movs	r0, #12
 8002fda:	f003 f928 	bl	800622e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	200d      	movs	r0, #13
 8002fe4:	f003 f909 	bl	80061fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fe8:	200d      	movs	r0, #13
 8002fea:	f003 f920 	bl	800622e <HAL_NVIC_EnableIRQ>

}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000

08002ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	609a      	str	r2, [r3, #8]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <MX_GPIO_Init+0xf4>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <MX_GPIO_Init+0xf4>)
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED0_Pin|UART2_TX_DIR_Pin, GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003064:	f003 ffe4 	bl	8007030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_RX_DIR_GPIO_Port, UART2_RX_DIR_Pin, GPIO_PIN_RESET);
 8003068:	2200      	movs	r2, #0
 800306a:	2110      	movs	r1, #16
 800306c:	4821      	ldr	r0, [pc, #132]	; (80030f4 <MX_GPIO_Init+0xf8>)
 800306e:	f003 ffdf 	bl	8007030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_FAULT_Pin */
  GPIO_InitStruct.Pin = GPIO_FAULT_Pin;
 8003072:	2302      	movs	r3, #2
 8003074:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800307a:	2301      	movs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_FAULT_GPIO_Port, &GPIO_InitStruct);
 800307e:	f107 030c 	add.w	r3, r7, #12
 8003082:	4619      	mov	r1, r3
 8003084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003088:	f003 fe38 	bl	8006cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 800308c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003092:	2311      	movs	r3, #17
 8003094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	4619      	mov	r1, r3
 80030a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030a8:	f003 fe28 	bl	8006cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_TX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_TX_DIR_Pin;
 80030ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b2:	2301      	movs	r3, #1
 80030b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_TX_DIR_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	4619      	mov	r1, r3
 80030c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030c8:	f003 fe18 	bl	8006cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_RX_DIR_Pin */
  GPIO_InitStruct.Pin = UART2_RX_DIR_Pin;
 80030cc:	2310      	movs	r3, #16
 80030ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_RX_DIR_GPIO_Port, &GPIO_InitStruct);
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4619      	mov	r1, r3
 80030e2:	4804      	ldr	r0, [pc, #16]	; (80030f4 <MX_GPIO_Init+0xf8>)
 80030e4:	f003 fe0a 	bl	8006cfc <HAL_GPIO_Init>

}
 80030e8:	bf00      	nop
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	48000400 	.word	0x48000400

080030f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030fe:	e7fe      	b.n	80030fe <Error_Handler+0x6>

08003100 <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	ed87 0a03 	vstr	s0, [r7, #12]
 800310a:	edc7 0a02 	vstr	s1, [r7, #8]
 800310e:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 8003112:	ed97 7a03 	vldr	s14, [r7, #12]
 8003116:	edd7 7a02 	vldr	s15, [r7, #8]
 800311a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	d501      	bpl.n	8003128 <fconstrain+0x28>
        return min;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	e00b      	b.n	8003140 <fconstrain+0x40>
    else if(x>max)
 8003128:	ed97 7a03 	vldr	s14, [r7, #12]
 800312c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003138:	dd01      	ble.n	800313e <fconstrain+0x3e>
        return max;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	e000      	b.n	8003140 <fconstrain+0x40>
    else
        return x;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	ee07 3a90 	vmov	s15, r3
}
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b08e      	sub	sp, #56	; 0x38
 8003182:	af00      	add	r7, sp, #0
 8003184:	61f8      	str	r0, [r7, #28]
 8003186:	ed87 0a06 	vstr	s0, [r7, #24]
 800318a:	edc7 0a05 	vstr	s1, [r7, #20]
 800318e:	ed87 1a04 	vstr	s2, [r7, #16]
 8003192:	edc7 1a03 	vstr	s3, [r7, #12]
 8003196:	ed87 2a02 	vstr	s4, [r7, #8]
 800319a:	edc7 2a01 	vstr	s5, [r7, #4]
 800319e:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80031ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80031c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80031ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 80031de:	ed97 7a05 	vldr	s14, [r7, #20]
 80031e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80031fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 8003206:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800320a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321a:	ed97 7a00 	vldr	s14, [r7]
 800321e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003222:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 8003226:	edd7 7a02 	vldr	s15, [r7, #8]
 800322a:	eef1 7a67 	vneg.f32	s15, s15
 800322e:	ed97 1a02 	vldr	s2, [r7, #8]
 8003232:	eef0 0a67 	vmov.f32	s1, s15
 8003236:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800323a:	f7ff ff61 	bl	8003100 <fconstrain>
 800323e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 8003242:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003246:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800324a:	eeb4 7a67 	vcmp.f32	s14, s15
 800324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 800325c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003260:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	bfac      	ite	ge
 8003272:	2301      	movge	r3, #1
 8003274:	2300      	movlt	r3, #0
 8003276:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 800327a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <pid_process_antiwindup_clamp_with_ff+0x110>
 8003282:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <pid_process_antiwindup_clamp_with_ff+0x110>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <pid_process_antiwindup_clamp_with_ff+0x112>
 800328e:	2300      	movs	r3, #0
 8003290:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003294:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 80032a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80032b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80032b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	ee07 3a90 	vmov	s15, r3
}
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	3738      	adds	r7, #56	; 0x38
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <pid_process_antiwindup_clamp>:
		float ki,
		float kd,
		float output_limit,
		float alpha_derivative
)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b08e      	sub	sp, #56	; 0x38
 80032de:	af00      	add	r7, sp, #0
 80032e0:	61f8      	str	r0, [r7, #28]
 80032e2:	ed87 0a06 	vstr	s0, [r7, #24]
 80032e6:	edc7 0a05 	vstr	s1, [r7, #20]
 80032ea:	ed87 1a04 	vstr	s2, [r7, #16]
 80032ee:	edc7 1a03 	vstr	s3, [r7, #12]
 80032f2:	ed87 2a02 	vstr	s4, [r7, #8]
 80032f6:	edc7 2a01 	vstr	s5, [r7, #4]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	ed97 7a06 	vldr	s14, [r7, #24]
 8003304:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003308:	edd7 7a01 	vldr	s15, [r7, #4]
 800330c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003314:	edd7 7a01 	vldr	s15, [r7, #4]
 8003318:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 8003336:	ed97 7a05 	vldr	s14, [r7, #20]
 800333a:	edd7 7a06 	vldr	s15, [r7, #24]
 800333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003342:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003352:	ed97 7a03 	vldr	s14, [r7, #12]
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term;
 800335e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003362:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800336e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003372:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 8003376:	edd7 7a02 	vldr	s15, [r7, #8]
 800337a:	eef1 7a67 	vneg.f32	s15, s15
 800337e:	ed97 1a02 	vldr	s2, [r7, #8]
 8003382:	eef0 0a67 	vmov.f32	s1, s15
 8003386:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800338a:	f7ff feb9 	bl	8003100 <fconstrain>
 800338e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 8003392:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800339a:	eeb4 7a67 	vcmp.f32	s14, s15
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 80033ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80033b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	bfac      	ite	ge
 80033c2:	2301      	movge	r3, #1
 80033c4:	2300      	movlt	r3, #0
 80033c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 80033ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <pid_process_antiwindup_clamp+0x104>
 80033d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <pid_process_antiwindup_clamp+0x104>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <pid_process_antiwindup_clamp+0x106>
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80033e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 80033f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033f4:	f083 0301 	eor.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <pid_process_antiwindup_clamp+0x140>
		ctx->err_integral = ctx->err_integral + ki*error;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	ed93 7a01 	vldr	s14, [r3, #4]
 8003404:	edd7 6a04 	vldr	s13, [r7, #16]
 8003408:	edd7 7a06 	vldr	s15, [r7, #24]
 800340c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	ee07 3a90 	vmov	s15, r3
}
 8003420:	eeb0 0a67 	vmov.f32	s0, s15
 8003424:	3738      	adds	r7, #56	; 0x38
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	80fb      	strh	r3, [r7, #6]
 8003438:	4613      	mov	r3, r2
 800343a:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 800343c:	2300      	movs	r3, #0
 800343e:	81fb      	strh	r3, [r7, #14]
 8003440:	e019      	b.n	8003476 <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	b29a      	uxth	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	1c59      	adds	r1, r3, #1
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4053      	eors	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b21a      	sxth	r2, r3
 8003460:	89bb      	ldrh	r3, [r7, #12]
 8003462:	490a      	ldr	r1, [pc, #40]	; (800348c <updateCRC+0x60>)
 8003464:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003468:	b21b      	sxth	r3, r3
 800346a:	4053      	eors	r3, r2
 800346c:	b21b      	sxth	r3, r3
 800346e:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8003470:	89fb      	ldrh	r3, [r7, #14]
 8003472:	3301      	adds	r3, #1
 8003474:	81fb      	strh	r3, [r7, #14]
 8003476:	89fa      	ldrh	r2, [r7, #14]
 8003478:	88bb      	ldrh	r3, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3e1      	bcc.n	8003442 <updateCRC+0x16>
  }

  return crc_accum;
 800347e:	88fb      	ldrh	r3, [r7, #6]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	0800ace4 	.word	0x0800ace4

08003490 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <packet_encapsulate+0x84>)
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <packet_encapsulate+0x84>)
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <packet_encapsulate+0x84>)
 80034a6:	22fd      	movs	r2, #253	; 0xfd
 80034a8:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <packet_encapsulate+0x84>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <packet_encapsulate+0x88>)
 80034b2:	78da      	ldrb	r2, [r3, #3]
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <packet_encapsulate+0x84>)
 80034b6:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3302      	adds	r3, #2
 80034be:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <packet_encapsulate+0x84>)
 80034c6:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <packet_encapsulate+0x84>)
 80034d2:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	3305      	adds	r3, #5
 80034d8:	b29b      	uxth	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	490d      	ldr	r1, [pc, #52]	; (8003514 <packet_encapsulate+0x84>)
 80034de:	2000      	movs	r0, #0
 80034e0:	f7ff ffa4 	bl	800342c <updateCRC>
 80034e4:	4603      	mov	r3, r0
 80034e6:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3307      	adds	r3, #7
 80034ec:	89ba      	ldrh	r2, [r7, #12]
 80034ee:	b2d1      	uxtb	r1, r2
 80034f0:	4a08      	ldr	r2, [pc, #32]	; (8003514 <packet_encapsulate+0x84>)
 80034f2:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 80034f4:	89bb      	ldrh	r3, [r7, #12]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3308      	adds	r3, #8
 80034fe:	b2d1      	uxtb	r1, r2
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <packet_encapsulate+0x84>)
 8003502:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3309      	adds	r3, #9
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <packet_encapsulate+0x8c>)
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200031cc 	.word	0x200031cc
 8003518:	20000158 	.word	0x20000158
 800351c:	20000140 	.word	0x20000140

08003520 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 8003526:	4b9b      	ldr	r3, [pc, #620]	; (8003794 <instruction_handler+0x274>)
 8003528:	79db      	ldrb	r3, [r3, #7]
 800352a:	2b06      	cmp	r3, #6
 800352c:	f000 811a 	beq.w	8003764 <instruction_handler+0x244>
 8003530:	2b06      	cmp	r3, #6
 8003532:	dc06      	bgt.n	8003542 <instruction_handler+0x22>
 8003534:	2b02      	cmp	r3, #2
 8003536:	d02b      	beq.n	8003590 <instruction_handler+0x70>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d070      	beq.n	800361e <instruction_handler+0xfe>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d00a      	beq.n	8003556 <instruction_handler+0x36>
 8003540:	e148      	b.n	80037d4 <instruction_handler+0x2b4>
 8003542:	2b82      	cmp	r3, #130	; 0x82
 8003544:	f000 8157 	beq.w	80037f6 <instruction_handler+0x2d6>
 8003548:	2b83      	cmp	r3, #131	; 0x83
 800354a:	f000 80b5 	beq.w	80036b8 <instruction_handler+0x198>
 800354e:	2b08      	cmp	r3, #8
 8003550:	f000 812a 	beq.w	80037a8 <instruction_handler+0x288>
 8003554:	e13e      	b.n	80037d4 <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003556:	4b90      	ldr	r3, [pc, #576]	; (8003798 <instruction_handler+0x278>)
 8003558:	2255      	movs	r2, #85	; 0x55
 800355a:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 800355c:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <instruction_handler+0x278>)
 800355e:	2200      	movs	r2, #0
 8003560:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 8003562:	4b8e      	ldr	r3, [pc, #568]	; (800379c <instruction_handler+0x27c>)
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <instruction_handler+0x278>)
 8003568:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 800356a:	4b8c      	ldr	r3, [pc, #560]	; (800379c <instruction_handler+0x27c>)
 800356c:	785a      	ldrb	r2, [r3, #1]
 800356e:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <instruction_handler+0x278>)
 8003570:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 8003572:	4b8a      	ldr	r3, [pc, #552]	; (800379c <instruction_handler+0x27c>)
 8003574:	789a      	ldrb	r2, [r3, #2]
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <instruction_handler+0x278>)
 8003578:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 800357a:	2005      	movs	r0, #5
 800357c:	f7ff ff88 	bl	8003490 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003580:	4b87      	ldr	r3, [pc, #540]	; (80037a0 <instruction_handler+0x280>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4984      	ldr	r1, [pc, #528]	; (8003798 <instruction_handler+0x278>)
 8003588:	4886      	ldr	r0, [pc, #536]	; (80037a4 <instruction_handler+0x284>)
 800358a:	f000 fbbf 	bl	8003d0c <HAL_Serial_Write>
		}
		break;
 800358e:	e133      	b.n	80037f8 <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <instruction_handler+0x274>)
 8003592:	7a5b      	ldrb	r3, [r3, #9]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	b21a      	sxth	r2, r3
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <instruction_handler+0x274>)
 800359a:	7a1b      	ldrb	r3, [r3, #8]
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <instruction_handler+0x274>)
 80035a6:	7adb      	ldrb	r3, [r3, #11]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	b21a      	sxth	r2, r3
 80035ac:	4b79      	ldr	r3, [pc, #484]	; (8003794 <instruction_handler+0x274>)
 80035ae:	7a9b      	ldrb	r3, [r3, #10]
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	2b81      	cmp	r3, #129	; 0x81
 80035bc:	d81e      	bhi.n	80035fc <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80035be:	4b76      	ldr	r3, [pc, #472]	; (8003798 <instruction_handler+0x278>)
 80035c0:	2255      	movs	r2, #85	; 0x55
 80035c2:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 80035c4:	4b74      	ldr	r3, [pc, #464]	; (8003798 <instruction_handler+0x278>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 80035ca:	2300      	movs	r3, #0
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ce:	e00b      	b.n	80035e8 <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	441a      	add	r2, r3
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	3309      	adds	r3, #9
 80035da:	4970      	ldr	r1, [pc, #448]	; (800379c <instruction_handler+0x27c>)
 80035dc:	5c89      	ldrb	r1, [r1, r2]
 80035de:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <instruction_handler+0x278>)
 80035e0:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	3301      	adds	r3, #1
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e8:	883b      	ldrh	r3, [r7, #0]
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3ef      	bcc.n	80035d0 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 80035f0:	883b      	ldrh	r3, [r7, #0]
 80035f2:	3302      	adds	r3, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff4b 	bl	8003490 <packet_encapsulate>
 80035fa:	e008      	b.n	800360e <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <instruction_handler+0x278>)
 80035fe:	2255      	movs	r2, #85	; 0x55
 8003600:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8003602:	4b65      	ldr	r3, [pc, #404]	; (8003798 <instruction_handler+0x278>)
 8003604:	2207      	movs	r2, #7
 8003606:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8003608:	2002      	movs	r0, #2
 800360a:	f7ff ff41 	bl	8003490 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 800360e:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <instruction_handler+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	4960      	ldr	r1, [pc, #384]	; (8003798 <instruction_handler+0x278>)
 8003616:	4863      	ldr	r0, [pc, #396]	; (80037a4 <instruction_handler+0x284>)
 8003618:	f000 fb78 	bl	8003d0c <HAL_Serial_Write>
		}
		break;
 800361c:	e0ec      	b.n	80037f8 <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <instruction_handler+0x274>)
 8003620:	7a5b      	ldrb	r3, [r3, #9]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	b21a      	sxth	r2, r3
 8003626:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <instruction_handler+0x274>)
 8003628:	7a1b      	ldrb	r3, [r3, #8]
 800362a:	b21b      	sxth	r3, r3
 800362c:	4313      	orrs	r3, r2
 800362e:	b21b      	sxth	r3, r3
 8003630:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 8003632:	4b58      	ldr	r3, [pc, #352]	; (8003794 <instruction_handler+0x274>)
 8003634:	799b      	ldrb	r3, [r3, #6]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	b21a      	sxth	r2, r3
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <instruction_handler+0x274>)
 800363c:	795b      	ldrb	r3, [r3, #5]
 800363e:	b21b      	sxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b05      	subs	r3, #5
 8003648:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b81      	cmp	r3, #129	; 0x81
 800364e:	d822      	bhi.n	8003696 <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 8003650:	2300      	movs	r3, #0
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
 8003654:	e00c      	b.n	8003670 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	f103 020a 	add.w	r2, r3, #10
 800365c:	88f9      	ldrh	r1, [r7, #6]
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	440b      	add	r3, r1
 8003662:	494c      	ldr	r1, [pc, #304]	; (8003794 <instruction_handler+0x274>)
 8003664:	5c89      	ldrb	r1, [r1, r2]
 8003666:	4a4d      	ldr	r2, [pc, #308]	; (800379c <instruction_handler+0x27c>)
 8003668:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	3301      	adds	r3, #1
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003670:	88bb      	ldrh	r3, [r7, #4]
 8003672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003674:	429a      	cmp	r2, r3
 8003676:	d3ee      	bcc.n	8003656 <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2b3f      	cmp	r3, #63	; 0x3f
 800367c:	d801      	bhi.n	8003682 <instruction_handler+0x162>
				{
					store_eeprom_regs();
 800367e:	f7fe ff37 	bl	80024f0 <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003682:	4b45      	ldr	r3, [pc, #276]	; (8003798 <instruction_handler+0x278>)
 8003684:	2255      	movs	r2, #85	; 0x55
 8003686:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8003688:	4b43      	ldr	r3, [pc, #268]	; (8003798 <instruction_handler+0x278>)
 800368a:	2200      	movs	r2, #0
 800368c:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 800368e:	2002      	movs	r0, #2
 8003690:	f7ff fefe 	bl	8003490 <packet_encapsulate>
 8003694:	e008      	b.n	80036a8 <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003696:	4b40      	ldr	r3, [pc, #256]	; (8003798 <instruction_handler+0x278>)
 8003698:	2255      	movs	r2, #85	; 0x55
 800369a:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 800369c:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <instruction_handler+0x278>)
 800369e:	2207      	movs	r2, #7
 80036a0:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80036a2:	2002      	movs	r0, #2
 80036a4:	f7ff fef4 	bl	8003490 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80036a8:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <instruction_handler+0x280>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	493a      	ldr	r1, [pc, #232]	; (8003798 <instruction_handler+0x278>)
 80036b0:	483c      	ldr	r0, [pc, #240]	; (80037a4 <instruction_handler+0x284>)
 80036b2:	f000 fb2b 	bl	8003d0c <HAL_Serial_Write>
		}
		break;
 80036b6:	e09f      	b.n	80037f8 <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 80036b8:	4b36      	ldr	r3, [pc, #216]	; (8003794 <instruction_handler+0x274>)
 80036ba:	799b      	ldrb	r3, [r3, #6]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	b21a      	sxth	r2, r3
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <instruction_handler+0x274>)
 80036c2:	795b      	ldrb	r3, [r3, #5]
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b07      	subs	r3, #7
 80036ce:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <instruction_handler+0x274>)
 80036d2:	7a5b      	ldrb	r3, [r3, #9]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	b21a      	sxth	r2, r3
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <instruction_handler+0x274>)
 80036da:	7a1b      	ldrb	r3, [r3, #8]
 80036dc:	b21b      	sxth	r3, r3
 80036de:	4313      	orrs	r3, r2
 80036e0:	b21b      	sxth	r3, r3
 80036e2:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <instruction_handler+0x274>)
 80036e6:	7adb      	ldrb	r3, [r3, #11]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <instruction_handler+0x274>)
 80036ec:	7a92      	ldrb	r2, [r2, #10]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 80036f2:	8bfa      	ldrh	r2, [r7, #30]
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	3301      	adds	r3, #1
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <instruction_handler+0x27c>)
 8003700:	78db      	ldrb	r3, [r3, #3]
 8003702:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	e027      	b.n	800375a <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3301      	adds	r3, #1
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	330c      	adds	r3, #12
 8003716:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <instruction_handler+0x274>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4413      	add	r3, r2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	429a      	cmp	r2, r3
 8003728:	d114      	bne.n	8003754 <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	e00d      	b.n	800374c <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	4413      	add	r3, r2
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	8bb9      	ldrh	r1, [r7, #28]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	440b      	add	r3, r1
 800373e:	4915      	ldr	r1, [pc, #84]	; (8003794 <instruction_handler+0x274>)
 8003740:	5c89      	ldrb	r1, [r1, r2]
 8003742:	4a16      	ldr	r2, [pc, #88]	; (800379c <instruction_handler+0x27c>)
 8003744:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	3301      	adds	r3, #1
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	429a      	cmp	r2, r3
 8003752:	d3ed      	bcc.n	8003730 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	3301      	adds	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	8afb      	ldrh	r3, [r7, #22]
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	429a      	cmp	r2, r3
 8003760:	d3d3      	bcc.n	800370a <instruction_handler+0x1ea>
				}
			}
		}
		break;
 8003762:	e049      	b.n	80037f8 <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 8003764:	f7fe fdf6 	bl	8002354 <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <instruction_handler+0x278>)
 800376a:	2255      	movs	r2, #85	; 0x55
 800376c:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <instruction_handler+0x278>)
 8003770:	2200      	movs	r2, #0
 8003772:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8003774:	2002      	movs	r0, #2
 8003776:	f7ff fe8b 	bl	8003490 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <instruction_handler+0x280>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	4905      	ldr	r1, [pc, #20]	; (8003798 <instruction_handler+0x278>)
 8003782:	4808      	ldr	r0, [pc, #32]	; (80037a4 <instruction_handler+0x284>)
 8003784:	f000 fac2 	bl	8003d0c <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8003788:	2064      	movs	r0, #100	; 0x64
 800378a:	f000 ff9b 	bl	80046c4 <HAL_Delay>
			HAL_NVIC_SystemReset();
 800378e:	f002 fd5c 	bl	800624a <HAL_NVIC_SystemReset>
		}
		break;
 8003792:	e031      	b.n	80037f8 <instruction_handler+0x2d8>
 8003794:	20002d80 	.word	0x20002d80
 8003798:	200031cc 	.word	0x200031cc
 800379c:	20000158 	.word	0x20000158
 80037a0:	20000140 	.word	0x20000140
 80037a4:	20000354 	.word	0x20000354
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <instruction_handler+0x2e0>)
 80037aa:	2255      	movs	r2, #85	; 0x55
 80037ac:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <instruction_handler+0x2e0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7ff fe6b 	bl	8003490 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <instruction_handler+0x2e4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	490f      	ldr	r1, [pc, #60]	; (8003800 <instruction_handler+0x2e0>)
 80037c2:	4811      	ldr	r0, [pc, #68]	; (8003808 <instruction_handler+0x2e8>)
 80037c4:	f000 faa2 	bl	8003d0c <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 80037c8:	2064      	movs	r0, #100	; 0x64
 80037ca:	f000 ff7b 	bl	80046c4 <HAL_Delay>
			HAL_NVIC_SystemReset();
 80037ce:	f002 fd3c 	bl	800624a <HAL_NVIC_SystemReset>
		}
		break;
 80037d2:	e011      	b.n	80037f8 <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <instruction_handler+0x2e0>)
 80037d6:	2255      	movs	r2, #85	; 0x55
 80037d8:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <instruction_handler+0x2e0>)
 80037dc:	2202      	movs	r2, #2
 80037de:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 80037e0:	2002      	movs	r0, #2
 80037e2:	f7ff fe55 	bl	8003490 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <instruction_handler+0x2e4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4904      	ldr	r1, [pc, #16]	; (8003800 <instruction_handler+0x2e0>)
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <instruction_handler+0x2e8>)
 80037f0:	f000 fa8c 	bl	8003d0c <HAL_Serial_Write>
		break;
 80037f4:	e000      	b.n	80037f8 <instruction_handler+0x2d8>
		break;
 80037f6:	bf00      	nop
		// nope
	}
}
 80037f8:	bf00      	nop
 80037fa:	3730      	adds	r7, #48	; 0x30
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200031cc 	.word	0x200031cc
 8003804:	20000140 	.word	0x20000140
 8003808:	20000354 	.word	0x20000354

0800380c <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 8003816:	4b84      	ldr	r3, [pc, #528]	; (8003a28 <packet_handler+0x21c>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b09      	cmp	r3, #9
 800381c:	f200 8100 	bhi.w	8003a20 <packet_handler+0x214>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <packet_handler+0x1c>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003851 	.word	0x08003851
 800382c:	08003867 	.word	0x08003867
 8003830:	08003897 	.word	0x08003897
 8003834:	080038b3 	.word	0x080038b3
 8003838:	080038cf 	.word	0x080038cf
 800383c:	080038f1 	.word	0x080038f1
 8003840:	080038ff 	.word	0x080038ff
 8003844:	08003937 	.word	0x08003937
 8003848:	08003965 	.word	0x08003965
 800384c:	08003981 	.word	0x08003981
	{
	case HEADER1:
		if(c==0xFF)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	2bff      	cmp	r3, #255	; 0xff
 8003854:	f040 80e1 	bne.w	8003a1a <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8003858:	4a74      	ldr	r2, [pc, #464]	; (8003a2c <packet_handler+0x220>)
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 800385e:	4b72      	ldr	r3, [pc, #456]	; (8003a28 <packet_handler+0x21c>)
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003864:	e0d9      	b.n	8003a1a <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	2bff      	cmp	r3, #255	; 0xff
 800386a:	d106      	bne.n	800387a <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 800386c:	4a6f      	ldr	r2, [pc, #444]	; (8003a2c <packet_handler+0x220>)
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 8003872:	4b6d      	ldr	r3, [pc, #436]	; (8003a28 <packet_handler+0x21c>)
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8003878:	e0d2      	b.n	8003a20 <packet_handler+0x214>
		else if(c==0xFD)
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	2bfd      	cmp	r3, #253	; 0xfd
 800387e:	d106      	bne.n	800388e <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8003880:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <packet_handler+0x220>)
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 8003886:	4b68      	ldr	r3, [pc, #416]	; (8003a28 <packet_handler+0x21c>)
 8003888:	2203      	movs	r2, #3
 800388a:	701a      	strb	r2, [r3, #0]
		break;
 800388c:	e0c8      	b.n	8003a20 <packet_handler+0x214>
			packet_state = HEADER1;
 800388e:	4b66      	ldr	r3, [pc, #408]	; (8003a28 <packet_handler+0x21c>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
		break;
 8003894:	e0c4      	b.n	8003a20 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2bfd      	cmp	r3, #253	; 0xfd
 800389a:	d106      	bne.n	80038aa <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 800389c:	4a63      	ldr	r2, [pc, #396]	; (8003a2c <packet_handler+0x220>)
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 80038a2:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <packet_handler+0x21c>)
 80038a4:	2203      	movs	r2, #3
 80038a6:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80038a8:	e0ba      	b.n	8003a20 <packet_handler+0x214>
			packet_state = HEADER1;
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <packet_handler+0x21c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
		break;
 80038b0:	e0b6      	b.n	8003a20 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 80038b8:	4a5c      	ldr	r2, [pc, #368]	; (8003a2c <packet_handler+0x220>)
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 80038be:	4b5a      	ldr	r3, [pc, #360]	; (8003a28 <packet_handler+0x21c>)
 80038c0:	2204      	movs	r2, #4
 80038c2:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80038c4:	e0ac      	b.n	8003a20 <packet_handler+0x214>
			packet_state = HEADER1;
 80038c6:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <packet_handler+0x21c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
		break;
 80038cc:	e0a8      	b.n	8003a20 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2bfc      	cmp	r3, #252	; 0xfc
 80038d2:	d902      	bls.n	80038da <packet_handler+0xce>
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2bfe      	cmp	r3, #254	; 0xfe
 80038d8:	d106      	bne.n	80038e8 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 80038da:	4a54      	ldr	r2, [pc, #336]	; (8003a2c <packet_handler+0x220>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 80038e0:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <packet_handler+0x21c>)
 80038e2:	2205      	movs	r2, #5
 80038e4:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80038e6:	e09b      	b.n	8003a20 <packet_handler+0x214>
			packet_state = HEADER1;
 80038e8:	4b4f      	ldr	r3, [pc, #316]	; (8003a28 <packet_handler+0x21c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
		break;
 80038ee:	e097      	b.n	8003a20 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 80038f0:	4a4e      	ldr	r2, [pc, #312]	; (8003a2c <packet_handler+0x220>)
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 80038f6:	4b4c      	ldr	r3, [pc, #304]	; (8003a28 <packet_handler+0x21c>)
 80038f8:	2206      	movs	r2, #6
 80038fa:	701a      	strb	r2, [r3, #0]
		break;
 80038fc:	e090      	b.n	8003a20 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 80038fe:	4a4b      	ldr	r2, [pc, #300]	; (8003a2c <packet_handler+0x220>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 8003904:	4b49      	ldr	r3, [pc, #292]	; (8003a2c <packet_handler+0x220>)
 8003906:	799b      	ldrb	r3, [r3, #6]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	4a48      	ldr	r2, [pc, #288]	; (8003a2c <packet_handler+0x220>)
 800390c:	7952      	ldrb	r2, [r2, #5]
 800390e:	4313      	orrs	r3, r2
 8003910:	3b02      	subs	r3, #2
 8003912:	4a47      	ldr	r2, [pc, #284]	; (8003a30 <packet_handler+0x224>)
 8003914:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <packet_handler+0x224>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d806      	bhi.n	800392e <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 8003920:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <packet_handler+0x21c>)
 8003922:	2207      	movs	r2, #7
 8003924:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 8003926:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <packet_handler+0x228>)
 8003928:	2207      	movs	r2, #7
 800392a:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 800392c:	e078      	b.n	8003a20 <packet_handler+0x214>
			packet_state = HEADER1;
 800392e:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <packet_handler+0x21c>)
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
		break;
 8003934:	e074      	b.n	8003a20 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <packet_handler+0x228>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	493c      	ldr	r1, [pc, #240]	; (8003a2c <packet_handler+0x220>)
 800393c:	79fa      	ldrb	r2, [r7, #7]
 800393e:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <packet_handler+0x228>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <packet_handler+0x228>)
 8003948:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <packet_handler+0x224>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3b01      	subs	r3, #1
 8003950:	4a37      	ldr	r2, [pc, #220]	; (8003a30 <packet_handler+0x224>)
 8003952:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 8003954:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <packet_handler+0x224>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d160      	bne.n	8003a1e <packet_handler+0x212>
			packet_state = CRC1;
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <packet_handler+0x21c>)
 800395e:	2208      	movs	r2, #8
 8003960:	701a      	strb	r2, [r3, #0]
		break;
 8003962:	e05c      	b.n	8003a1e <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003964:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <packet_handler+0x228>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4930      	ldr	r1, [pc, #192]	; (8003a2c <packet_handler+0x220>)
 800396a:	79fa      	ldrb	r2, [r7, #7]
 800396c:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <packet_handler+0x228>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <packet_handler+0x228>)
 8003976:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8003978:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <packet_handler+0x21c>)
 800397a:	2209      	movs	r2, #9
 800397c:	701a      	strb	r2, [r3, #0]
		break;
 800397e:	e04f      	b.n	8003a20 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003980:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <packet_handler+0x228>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4929      	ldr	r1, [pc, #164]	; (8003a2c <packet_handler+0x220>)
 8003986:	79fa      	ldrb	r2, [r7, #7]
 8003988:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <packet_handler+0x228>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a27      	ldr	r2, [pc, #156]	; (8003a2c <packet_handler+0x220>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	b21a      	sxth	r2, r3
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <packet_handler+0x228>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3b01      	subs	r3, #1
 800399c:	4923      	ldr	r1, [pc, #140]	; (8003a2c <packet_handler+0x220>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	b21b      	sxth	r3, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b21b      	sxth	r3, r3
 80039a6:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 80039a8:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <packet_handler+0x228>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	491d      	ldr	r1, [pc, #116]	; (8003a2c <packet_handler+0x220>)
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7ff fd38 	bl	800342c <updateCRC>
 80039bc:	4603      	mov	r3, r0
 80039be:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 80039c0:	89ba      	ldrh	r2, [r7, #12]
 80039c2:	89fb      	ldrh	r3, [r7, #14]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d10c      	bne.n	80039e2 <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 80039c8:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <packet_handler+0x220>)
 80039ca:	791a      	ldrb	r2, [r3, #4]
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <packet_handler+0x22c>)
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d003      	beq.n	80039dc <packet_handler+0x1d0>
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <packet_handler+0x220>)
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	2bfe      	cmp	r3, #254	; 0xfe
 80039da:	d11a      	bne.n	8003a12 <packet_handler+0x206>
				instruction_handler();
 80039dc:	f7ff fda0 	bl	8003520 <instruction_handler>
 80039e0:	e017      	b.n	8003a12 <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <packet_handler+0x22c>)
 80039e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039e8:	3301      	adds	r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <packet_handler+0x22c>)
 80039ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <packet_handler+0x230>)
 80039f4:	2255      	movs	r2, #85	; 0x55
 80039f6:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <packet_handler+0x230>)
 80039fa:	2203      	movs	r2, #3
 80039fc:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 80039fe:	2002      	movs	r0, #2
 8003a00:	f7ff fd46 	bl	8003490 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <packet_handler+0x234>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	490c      	ldr	r1, [pc, #48]	; (8003a3c <packet_handler+0x230>)
 8003a0c:	480d      	ldr	r0, [pc, #52]	; (8003a44 <packet_handler+0x238>)
 8003a0e:	f000 f97d 	bl	8003d0c <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <packet_handler+0x21c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
		break;
 8003a18:	e002      	b.n	8003a20 <packet_handler+0x214>
		break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <packet_handler+0x214>
		break;
 8003a1e:	bf00      	nop
	}
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000144 	.word	0x20000144
 8003a2c:	20002d80 	.word	0x20002d80
 8003a30:	2000013c 	.word	0x2000013c
 8003a34:	20000138 	.word	0x20000138
 8003a38:	20000158 	.word	0x20000158
 8003a3c:	200031cc 	.word	0x200031cc
 8003a40:	20000140 	.word	0x20000140
 8003a44:	20000354 	.word	0x20000354

08003a48 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8003a50:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e032      	b.n	8003abe <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_UART_ErrorCallback+0x90>)
 8003a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d124      	bne.n	8003ab4 <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <HAL_UART_ErrorCallback+0x90>)
 8003a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4917      	ldr	r1, [pc, #92]	; (8003ad8 <HAL_UART_ErrorCallback+0x90>)
 8003a7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a7e:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8003a82:	3210      	adds	r2, #16
 8003a84:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003a88:	3310      	adds	r3, #16
 8003a8a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a11      	ldr	r2, [pc, #68]	; (8003ad8 <HAL_UART_ErrorCallback+0x90>)
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <HAL_UART_ErrorCallback+0x90>)
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aac:	4619      	mov	r1, r3
 8003aae:	f005 ffcb 	bl	8009a48 <HAL_UART_Receive_DMA>
		   break;
 8003ab2:	e00b      	b.n	8003acc <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	4a06      	ldr	r2, [pc, #24]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_UART_ErrorCallback+0x8c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_UART_ErrorCallback+0x94>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1c5      	bne.n	8003a58 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000150 	.word	0x20000150
 8003ad8:	20000148 	.word	0x20000148
 8003adc:	2000014c 	.word	0x2000014c

08003ae0 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8003aee:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <HAL_Serial_Init_Half_Duplex+0x124>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	4943      	ldr	r1, [pc, #268]	; (8003c04 <HAL_Serial_Init_Half_Duplex+0x124>)
 8003af6:	600a      	str	r2, [r1, #0]
 8003af8:	4943      	ldr	r1, [pc, #268]	; (8003c08 <HAL_Serial_Init_Half_Duplex+0x128>)
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003b18:	3308      	adds	r3, #8
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003b24:	330c      	adds	r3, #12
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8003b30:	3210      	adds	r2, #16
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b38:	3310      	adds	r3, #16
 8003b3a:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003b46:	3310      	adds	r3, #16
 8003b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f005 ff7b 	bl	8009a48 <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b58:	3314      	adds	r3, #20
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b64:	3318      	adds	r3, #24
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b70:	331c      	adds	r3, #28
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b7c:	331e      	adds	r3, #30
 8003b7e:	7e3a      	ldrb	r2, [r7, #24]
 8003b80:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b88:	3320      	adds	r3, #32
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b94:	3324      	adds	r3, #36	; 0x24
 8003b96:	8c3a      	ldrh	r2, [r7, #32]
 8003b98:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003ba0:	3326      	adds	r3, #38	; 0x26
 8003ba2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ba6:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003bae:	3318      	adds	r3, #24
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003bb8:	331c      	adds	r3, #28
 8003bba:	8819      	ldrh	r1, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003bc2:	331e      	adds	r3, #30
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f003 fa2d 	bl	8007030 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003bdc:	3320      	adds	r3, #32
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	8819      	ldrh	r1, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003bf0:	3326      	adds	r3, #38	; 0x26
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f003 fa1b 	bl	8007030 <HAL_GPIO_WritePin>
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000014c 	.word	0x2000014c
 8003c08:	20000148 	.word	0x20000148

08003c0c <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_Serial_Available+0x14>
        return 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e01f      	b.n	8003c60 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003c26:	3310      	adds	r3, #16
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	6852      	ldr	r2, [r2, #4]
 8003c32:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8003c36:	4413      	add	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c40:	3310      	adds	r3, #16
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d303      	bcc.n	8003c56 <HAL_Serial_Available+0x4a>
        return head-tail;
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	e004      	b.n	8003c60 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_Serial_GetChar+0x14>
        return 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e03f      	b.n	8003d00 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003c86:	3310      	adds	r3, #16
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	6852      	ldr	r2, [r2, #4]
 8003c92:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8003c96:	4413      	add	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003ca0:	3310      	adds	r3, #16
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d027      	beq.n	8003cfe <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	1c51      	adds	r1, r2, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	6019      	str	r1, [r3, #0]
 8003cc4:	7813      	ldrb	r3, [r2, #0]
 8003cc6:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cce:	3310      	adds	r3, #16
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003cd8:	3310      	adds	r3, #16
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d30b      	bcc.n	8003cfa <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003ce8:	3310      	adds	r3, #16
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	601a      	str	r2, [r3, #0]
        return c;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	e000      	b.n	8003d00 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_Serial_Write+0x18>
        return 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e09a      	b.n	8003e5a <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	4613      	mov	r3, r2
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4403      	add	r3, r0
 8003d3c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003d40:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d48:	3304      	adds	r3, #4
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	019b      	lsls	r3, r3, #6
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f006 ff3a 	bl	800abdc <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d6e:	3304      	adds	r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	f003 021f 	and.w	r2, r3, #31
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d7e:	3304      	adds	r3, #4
 8003d80:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d88:	330c      	adds	r3, #12
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d163      	bne.n	8003e58 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d96:	330c      	adds	r3, #12
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003da2:	3314      	adds	r3, #20
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d028      	beq.n	8003dfc <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003db0:	3318      	adds	r3, #24
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003dba:	331c      	adds	r3, #28
 8003dbc:	8819      	ldrh	r1, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003dc4:	331e      	adds	r3, #30
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f003 f931 	bl	8007030 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003dd4:	3320      	adds	r3, #32
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003dde:	3324      	adds	r3, #36	; 0x24
 8003de0:	8819      	ldrh	r1, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003de8:	3326      	adds	r3, #38	; 0x26
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	f003 f91a 	bl	8007030 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e06:	3308      	adds	r3, #8
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e1e:	3308      	adds	r3, #8
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	019b      	lsls	r3, r3, #6
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003e32:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	4621      	mov	r1, r4
 8003e3a:	f005 fd85 	bl	8009948 <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e44:	3308      	adds	r3, #8
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f003 021f 	and.w	r2, r3, #31
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e54:	3308      	adds	r3, #8
 8003e56:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd90      	pop	{r4, r7, pc}
	...

08003e64 <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8003e6c:	4b71      	ldr	r3, [pc, #452]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e0d0      	b.n	8004016 <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8003e74:	4b6f      	ldr	r3, [pc, #444]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	f040 80c2 	bne.w	800400c <HAL_UART_TxCpltCallback+0x1a8>
 8003e88:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6a      	ldr	r2, [pc, #424]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e96:	330c      	adds	r3, #12
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	f040 80b6 	bne.w	800400c <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8003ea0:	4b64      	ldr	r3, [pc, #400]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a64      	ldr	r2, [pc, #400]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eaa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003eae:	3304      	adds	r3, #4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b60      	ldr	r3, [pc, #384]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4960      	ldr	r1, [pc, #384]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003eb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ebc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d04a      	beq.n	8003f5e <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8003ec8:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5a      	ldr	r2, [pc, #360]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8003ed2:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8003ed4:	4b57      	ldr	r3, [pc, #348]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a57      	ldr	r2, [pc, #348]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003eda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ede:	4b55      	ldr	r3, [pc, #340]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a55      	ldr	r2, [pc, #340]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003eec:	3308      	adds	r3, #8
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	019b      	lsls	r3, r3, #6
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8003efc:	4b4d      	ldr	r3, [pc, #308]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f06:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4b      	ldr	r2, [pc, #300]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f14:	3308      	adds	r3, #8
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	019b      	lsls	r3, r3, #6
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003f26:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	f005 fd0b 	bl	8009948 <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 8003f32:	4b40      	ldr	r3, [pc, #256]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f40:	3308      	adds	r3, #8
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	493b      	ldr	r1, [pc, #236]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f50:	f002 021f 	and.w	r2, r2, #31
 8003f54:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f58:	3308      	adds	r3, #8
 8003f5a:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 8003f5c:	e064      	b.n	8004028 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 8003f5e:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a35      	ldr	r2, [pc, #212]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 8003f72:	4b30      	ldr	r3, [pc, #192]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a30      	ldr	r2, [pc, #192]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003f80:	3314      	adds	r3, #20
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d04f      	beq.n	8004028 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003f96:	3318      	adds	r3, #24
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a26      	ldr	r2, [pc, #152]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003fa8:	331c      	adds	r3, #28
 8003faa:	8819      	ldrh	r1, [r3, #0]
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a21      	ldr	r2, [pc, #132]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003fba:	331e      	adds	r3, #30
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f003 f831 	bl	8007030 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd8:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003fdc:	3320      	adds	r3, #32
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003fee:	3324      	adds	r3, #36	; 0x24
 8003ff0:	8819      	ldrh	r1, [r3, #0]
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <HAL_UART_TxCpltCallback+0x1d4>)
 8003ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004000:	3326      	adds	r3, #38	; 0x26
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	f003 f813 	bl	8007030 <HAL_GPIO_WritePin>
           break;
 800400a:	e00d      	b.n	8004028 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	4a08      	ldr	r2, [pc, #32]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_UART_TxCpltCallback+0x1d0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <HAL_UART_TxCpltCallback+0x1d8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	f47f af27 	bne.w	8003e74 <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 8004026:	e000      	b.n	800402a <HAL_UART_TxCpltCallback+0x1c6>
           break;
 8004028:	bf00      	nop
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}
 8004032:	bf00      	nop
 8004034:	20000154 	.word	0x20000154
 8004038:	20000148 	.word	0x20000148
 800403c:	2000014c 	.word	0x2000014c

08004040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <HAL_MspInit+0x44>)
 8004048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <HAL_MspInit+0x44>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6613      	str	r3, [r2, #96]	; 0x60
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <HAL_MspInit+0x44>)
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_MspInit+0x44>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <HAL_MspInit+0x44>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6593      	str	r3, [r2, #88]	; 0x58
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_MspInit+0x44>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004076:	f003 f897 	bl	80071a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000

08004088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a8:	d16f      	bne.n	800418a <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80040aa:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	4a39      	ldr	r2, [pc, #228]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040c2:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	4a33      	ldr	r2, [pc, #204]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040c8:	f043 0320 	orr.w	r3, r3, #32
 80040cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040de:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040e6:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_ADC_MspInit+0x10c>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040f2:	2301      	movs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f6:	2303      	movs	r3, #3
 80040f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4619      	mov	r1, r3
 8004104:	4824      	ldr	r0, [pc, #144]	; (8004198 <HAL_ADC_MspInit+0x110>)
 8004106:	f002 fdf9 	bl	8006cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800410a:	2301      	movs	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800410e:	2303      	movs	r3, #3
 8004110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4619      	mov	r1, r3
 800411c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004120:	f002 fdec 	bl	8006cfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_ADC_MspInit+0x118>)
 8004128:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800412a:	4b1c      	ldr	r3, [pc, #112]	; (800419c <HAL_ADC_MspInit+0x114>)
 800412c:	2205      	movs	r2, #5
 800412e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004138:	2200      	movs	r2, #0
 800413a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_ADC_MspInit+0x114>)
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004142:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <HAL_ADC_MspInit+0x114>)
 800414c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004154:	2220      	movs	r2, #32
 8004156:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_ADC_MspInit+0x114>)
 800415a:	2200      	movs	r2, #0
 800415c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800415e:	480f      	ldr	r0, [pc, #60]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004160:	f002 f884 	bl	800626c <HAL_DMA_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800416a:	f7fe ffc5 	bl	80030f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_ADC_MspInit+0x114>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2012      	movs	r0, #18
 8004180:	f002 f83b 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004184:	2012      	movs	r0, #18
 8004186:	f002 f852 	bl	800622e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800418a:	bf00      	nop
 800418c:	3728      	adds	r7, #40	; 0x28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	48001400 	.word	0x48001400
 800419c:	20002bfc 	.word	0x20002bfc
 80041a0:	40020030 	.word	0x40020030

080041a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <HAL_TIM_Encoder_MspInit+0x80>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d129      	bne.n	800421a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_TIM_Encoder_MspInit+0x84>)
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <HAL_TIM_Encoder_MspInit+0x84>)
 80041cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041d0:	6613      	str	r3, [r2, #96]	; 0x60
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_TIM_Encoder_MspInit+0x84>)
 80041d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_TIM_Encoder_MspInit+0x84>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	4a11      	ldr	r2, [pc, #68]	; (8004228 <HAL_TIM_Encoder_MspInit+0x84>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <HAL_TIM_Encoder_MspInit+0x84>)
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004204:	2300      	movs	r3, #0
 8004206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004208:	2306      	movs	r3, #6
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	4619      	mov	r1, r3
 8004212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004216:	f002 fd71 	bl	8006cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800421a:	bf00      	nop
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a16      	ldr	r2, [pc, #88]	; (8004294 <HAL_TIM_Base_MspInit+0x68>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d114      	bne.n	8004268 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800423e:	4b16      	ldr	r3, [pc, #88]	; (8004298 <HAL_TIM_Base_MspInit+0x6c>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_TIM_Base_MspInit+0x6c>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6593      	str	r3, [r2, #88]	; 0x58
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_TIM_Base_MspInit+0x6c>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004256:	2200      	movs	r2, #0
 8004258:	2100      	movs	r1, #0
 800425a:	201e      	movs	r0, #30
 800425c:	f001 ffcd 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004260:	201e      	movs	r0, #30
 8004262:	f001 ffe4 	bl	800622e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004266:	e010      	b.n	800428a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0b      	ldr	r2, [pc, #44]	; (800429c <HAL_TIM_Base_MspInit+0x70>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d10b      	bne.n	800428a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004272:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_TIM_Base_MspInit+0x6c>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <HAL_TIM_Base_MspInit+0x6c>)
 8004278:	f043 0310 	orr.w	r3, r3, #16
 800427c:	6593      	str	r3, [r2, #88]	; 0x58
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_TIM_Base_MspInit+0x6c>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40000800 	.word	0x40000800
 8004298:	40021000 	.word	0x40021000
 800429c:	40001000 	.word	0x40001000

080042a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a11      	ldr	r2, [pc, #68]	; (8004304 <HAL_TIM_MspPostInit+0x64>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d11b      	bne.n	80042fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_TIM_MspPostInit+0x68>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	4a10      	ldr	r2, [pc, #64]	; (8004308 <HAL_TIM_MspPostInit+0x68>)
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_TIM_MspPostInit+0x68>)
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042da:	23c0      	movs	r3, #192	; 0xc0
 80042dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042de:	2302      	movs	r3, #2
 80042e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042ea:	2302      	movs	r3, #2
 80042ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ee:	f107 030c 	add.w	r3, r7, #12
 80042f2:	4619      	mov	r1, r3
 80042f4:	4805      	ldr	r0, [pc, #20]	; (800430c <HAL_TIM_MspPostInit+0x6c>)
 80042f6:	f002 fd01 	bl	8006cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80042fa:	bf00      	nop
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40000800 	.word	0x40000800
 8004308:	40021000 	.word	0x40021000
 800430c:	48000400 	.word	0x48000400

08004310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a53      	ldr	r2, [pc, #332]	; (800447c <HAL_UART_MspInit+0x16c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	f040 80a0 	bne.w	8004474 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004334:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_UART_MspInit+0x170>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	4a51      	ldr	r2, [pc, #324]	; (8004480 <HAL_UART_MspInit+0x170>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433e:	6593      	str	r3, [r2, #88]	; 0x58
 8004340:	4b4f      	ldr	r3, [pc, #316]	; (8004480 <HAL_UART_MspInit+0x170>)
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434c:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_UART_MspInit+0x170>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	4a4b      	ldr	r2, [pc, #300]	; (8004480 <HAL_UART_MspInit+0x170>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004358:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_UART_MspInit+0x170>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004364:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_UART_MspInit+0x170>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	4a45      	ldr	r2, [pc, #276]	; (8004480 <HAL_UART_MspInit+0x170>)
 800436a:	f043 0302 	orr.w	r3, r3, #2
 800436e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004370:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_UART_MspInit+0x170>)
 8004372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800437c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004382:	2302      	movs	r3, #2
 8004384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800438e:	2307      	movs	r3, #7
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004392:	f107 0314 	add.w	r3, r7, #20
 8004396:	4619      	mov	r1, r3
 8004398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800439c:	f002 fcae 	bl	8006cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043a0:	2308      	movs	r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a4:	2302      	movs	r3, #2
 80043a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043b0:	2307      	movs	r3, #7
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b4:	f107 0314 	add.w	r3, r7, #20
 80043b8:	4619      	mov	r1, r3
 80043ba:	4832      	ldr	r0, [pc, #200]	; (8004484 <HAL_UART_MspInit+0x174>)
 80043bc:	f002 fc9e 	bl	8006cfc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043c2:	4a32      	ldr	r2, [pc, #200]	; (800448c <HAL_UART_MspInit+0x17c>)
 80043c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80043c6:	4b30      	ldr	r3, [pc, #192]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043c8:	221a      	movs	r2, #26
 80043ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043cc:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d2:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d8:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043de:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043ec:	2220      	movs	r2, #32
 80043ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043f6:	4824      	ldr	r0, [pc, #144]	; (8004488 <HAL_UART_MspInit+0x178>)
 80043f8:	f001 ff38 	bl	800626c <HAL_DMA_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8004402:	f7fe fe79 	bl	80030f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_UART_MspInit+0x178>)
 800440a:	679a      	str	r2, [r3, #120]	; 0x78
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_UART_MspInit+0x178>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004412:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004414:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <HAL_UART_MspInit+0x184>)
 8004416:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_UART_MspInit+0x180>)
 800441a:	221b      	movs	r2, #27
 800441c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800441e:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004420:	2210      	movs	r2, #16
 8004422:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004426:	2200      	movs	r2, #0
 8004428:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_UART_MspInit+0x180>)
 800442c:	2280      	movs	r2, #128	; 0x80
 800442e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004432:	2200      	movs	r2, #0
 8004434:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004438:	2200      	movs	r2, #0
 800443a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_UART_MspInit+0x180>)
 800443e:	2200      	movs	r2, #0
 8004440:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004444:	2200      	movs	r2, #0
 8004446:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004448:	4811      	ldr	r0, [pc, #68]	; (8004490 <HAL_UART_MspInit+0x180>)
 800444a:	f001 ff0f 	bl	800626c <HAL_DMA_Init>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8004454:	f7fe fe50 	bl	80030f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <HAL_UART_MspInit+0x180>)
 800445c:	675a      	str	r2, [r3, #116]	; 0x74
 800445e:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <HAL_UART_MspInit+0x180>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004464:	2200      	movs	r2, #0
 8004466:	2100      	movs	r1, #0
 8004468:	2026      	movs	r0, #38	; 0x26
 800446a:	f001 fec6 	bl	80061fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800446e:	2026      	movs	r0, #38	; 0x26
 8004470:	f001 fedd 	bl	800622e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004474:	bf00      	nop
 8004476:	3728      	adds	r7, #40	; 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40004400 	.word	0x40004400
 8004480:	40021000 	.word	0x40021000
 8004484:	48000400 	.word	0x48000400
 8004488:	200001dc 	.word	0x200001dc
 800448c:	40020008 	.word	0x40020008
 8004490:	200002f4 	.word	0x200002f4
 8004494:	4002001c 	.word	0x4002001c

08004498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800449c:	e7fe      	b.n	800449c <NMI_Handler+0x4>

0800449e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a2:	e7fe      	b.n	80044a2 <HardFault_Handler+0x4>

080044a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a8:	e7fe      	b.n	80044a8 <MemManage_Handler+0x4>

080044aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ae:	e7fe      	b.n	80044ae <BusFault_Handler+0x4>

080044b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b4:	e7fe      	b.n	80044b4 <UsageFault_Handler+0x4>

080044b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d2:	b480      	push	{r7}
 80044d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e4:	f000 f8d0 	bl	8004688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044e8:	bf00      	nop
 80044ea:	bd80      	pop	{r7, pc}

080044ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80044f0:	4802      	ldr	r0, [pc, #8]	; (80044fc <DMA1_Channel1_IRQHandler+0x10>)
 80044f2:	f002 f845 	bl	8006580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	200001dc 	.word	0x200001dc

08004500 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004504:	4802      	ldr	r0, [pc, #8]	; (8004510 <DMA1_Channel2_IRQHandler+0x10>)
 8004506:	f002 f83b 	bl	8006580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	200002f4 	.word	0x200002f4

08004514 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004518:	4802      	ldr	r0, [pc, #8]	; (8004524 <DMA1_Channel3_IRQHandler+0x10>)
 800451a:	f002 f831 	bl	8006580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20002bfc 	.word	0x20002bfc

08004528 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800452c:	4802      	ldr	r0, [pc, #8]	; (8004538 <ADC1_2_IRQHandler+0x10>)
 800452e:	f000 fd67 	bl	8005000 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000288 	.word	0x20000288

0800453c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <TIM4_IRQHandler+0x10>)
 8004542:	f004 f86d 	bl	8008620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2000023c 	.word	0x2000023c

08004550 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004554:	4802      	ldr	r0, [pc, #8]	; (8004560 <USART2_IRQHandler+0x10>)
 8004556:	f005 faff 	bl	8009b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20002cf4 	.word	0x20002cf4

08004564 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <SystemInit+0x28>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	4a07      	ldr	r2, [pc, #28]	; (800458c <SystemInit+0x28>)
 8004570:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004574:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <SystemInit+0x28>)
 800457a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800457e:	609a      	str	r2, [r3, #8]
#endif
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004590:	480d      	ldr	r0, [pc, #52]	; (80045c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004592:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004594:	480d      	ldr	r0, [pc, #52]	; (80045cc <LoopForever+0x6>)
  ldr r1, =_edata
 8004596:	490e      	ldr	r1, [pc, #56]	; (80045d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <LoopForever+0xe>)
  movs r3, #0
 800459a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800459c:	e002      	b.n	80045a4 <LoopCopyDataInit>

0800459e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800459e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045a2:	3304      	adds	r3, #4

080045a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045a8:	d3f9      	bcc.n	800459e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045aa:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045ac:	4c0b      	ldr	r4, [pc, #44]	; (80045dc <LoopForever+0x16>)
  movs r3, #0
 80045ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045b0:	e001      	b.n	80045b6 <LoopFillZerobss>

080045b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b4:	3204      	adds	r2, #4

080045b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045b8:	d3fb      	bcc.n	80045b2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045ba:	f7ff ffd3 	bl	8004564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045be:	f006 fae9 	bl	800ab94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045c2:	f7fe fa03 	bl	80029cc <main>

080045c6 <LoopForever>:

LoopForever:
    b LoopForever
 80045c6:	e7fe      	b.n	80045c6 <LoopForever>
  ldr   r0, =_estack
 80045c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80045cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045d0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80045d4:	0800af2c 	.word	0x0800af2c
  ldr r2, =_sbss
 80045d8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80045dc:	2000361c 	.word	0x2000361c

080045e0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045e0:	e7fe      	b.n	80045e0 <COMP1_2_3_IRQHandler>

080045e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ec:	2003      	movs	r0, #3
 80045ee:	f001 fdf9 	bl	80061e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045f2:	2000      	movs	r0, #0
 80045f4:	f000 f80e 	bl	8004614 <HAL_InitTick>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	71fb      	strb	r3, [r7, #7]
 8004602:	e001      	b.n	8004608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004604:	f7ff fd1c 	bl	8004040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004608:	79fb      	ldrb	r3, [r7, #7]

}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <HAL_InitTick+0x68>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d022      	beq.n	800466e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <HAL_InitTick+0x6c>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b13      	ldr	r3, [pc, #76]	; (800467c <HAL_InitTick+0x68>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004634:	fbb1 f3f3 	udiv	r3, r1, r3
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	4618      	mov	r0, r3
 800463e:	f001 fe08 	bl	8006252 <HAL_SYSTICK_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10f      	bne.n	8004668 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d809      	bhi.n	8004662 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800464e:	2200      	movs	r2, #0
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	f001 fdd0 	bl	80061fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_InitTick+0x70>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e007      	b.n	8004672 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	e004      	b.n	8004672 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e001      	b.n	8004672 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000010 	.word	0x20000010
 8004680:	20000008 	.word	0x20000008
 8004684:	2000000c 	.word	0x2000000c

08004688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_IncTick+0x1c>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_IncTick+0x20>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4413      	add	r3, r2
 8004696:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <HAL_IncTick+0x1c>)
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20003618 	.word	0x20003618
 80046a8:	20000010 	.word	0x20000010

080046ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return uwTick;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_GetTick+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20003618 	.word	0x20003618

080046c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046cc:	f7ff ffee 	bl	80046ac <HAL_GetTick>
 80046d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d004      	beq.n	80046e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <HAL_Delay+0x40>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046e8:	bf00      	nop
 80046ea:	f7ff ffdf 	bl	80046ac <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d8f7      	bhi.n	80046ea <HAL_Delay+0x26>
  {
  }
}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000010 	.word	0x20000010

08004708 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3360      	adds	r3, #96	; 0x60
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <LL_ADC_SetOffset+0x44>)
 8004792:	4013      	ands	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	03fff000 	.word	0x03fff000

080047b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3360      	adds	r3, #96	; 0x60
 80047c6:	461a      	mov	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3360      	adds	r3, #96	; 0x60
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	431a      	orrs	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800481a:	b480      	push	{r7}
 800481c:	b087      	sub	sp, #28
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3360      	adds	r3, #96	; 0x60
 800482a:	461a      	mov	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	431a      	orrs	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3360      	adds	r3, #96	; 0x60
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	615a      	str	r2, [r3, #20]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b087      	sub	sp, #28
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3330      	adds	r3, #48	; 0x30
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	4413      	add	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	211f      	movs	r1, #31
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	401a      	ands	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	f003 011f 	and.w	r1, r3, #31
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	431a      	orrs	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3314      	adds	r3, #20
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	0e5b      	lsrs	r3, r3, #25
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	4413      	add	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	0d1b      	lsrs	r3, r3, #20
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2107      	movs	r1, #7
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	401a      	ands	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	0d1b      	lsrs	r3, r3, #20
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	431a      	orrs	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0318 	and.w	r3, r3, #24
 80049ca:	4908      	ldr	r1, [pc, #32]	; (80049ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80049cc:	40d9      	lsrs	r1, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	400b      	ands	r3, r1
 80049d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	0007ffff 	.word	0x0007ffff

080049f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 031f 	and.w	r3, r3, #31
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6093      	str	r3, [r2, #8]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a60:	d101      	bne.n	8004a66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab0:	d101      	bne.n	8004ab6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ad8:	f043 0201 	orr.w	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <LL_ADC_IsEnabled+0x18>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <LL_ADC_IsEnabled+0x1a>
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d101      	bne.n	8004b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d101      	bne.n	8004b78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e16b      	b.n	8004e7a <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fa69 	bl	8004088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff ff3f 	bl	8004a4c <LL_ADC_IsDeepPowerDownEnabled>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff25 	bl	8004a28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ff5a 	bl	8004a9c <LL_ADC_IsInternalRegulatorEnabled>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d113      	bne.n	8004c16 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff3e 	bl	8004a74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004bf8:	4ba2      	ldr	r3, [pc, #648]	; (8004e84 <HAL_ADC_Init+0x2fc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	4aa2      	ldr	r2, [pc, #648]	; (8004e88 <HAL_ADC_Init+0x300>)
 8004c00:	fba2 2303 	umull	r2, r3, r2, r3
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c08:	e002      	b.n	8004c10 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f9      	bne.n	8004c0a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff3e 	bl	8004a9c <LL_ADC_IsInternalRegulatorEnabled>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	f043 0210 	orr.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff77 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8004c4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f040 8106 	bne.w	8004e68 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 8102 	bne.w	8004e68 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c6c:	f043 0202 	orr.w	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ff37 	bl	8004aec <LL_ADC_IsEnabled>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004c88:	f7ff ff30 	bl	8004aec <LL_ADC_IsEnabled>
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	487f      	ldr	r0, [pc, #508]	; (8004e8c <HAL_ADC_Init+0x304>)
 8004c90:	f7ff ff2c 	bl	8004aec <LL_ADC_IsEnabled>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4323      	orrs	r3, r4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	487b      	ldr	r0, [pc, #492]	; (8004e90 <HAL_ADC_Init+0x308>)
 8004ca4:	f7ff fd30 	bl	8004708 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7f5b      	ldrb	r3, [r3, #29]
 8004cac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004cb8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004cbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d106      	bne.n	8004ce4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	045b      	lsls	r3, r3, #17
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_ADC_Init+0x30c>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	69b9      	ldr	r1, [r7, #24]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ff03 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8004d34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff10 	bl	8004b60 <LL_ADC_INJ_IsConversionOngoing>
 8004d40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d16d      	bne.n	8004e24 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d16a      	bne.n	8004e24 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6a:	f023 0302 	bic.w	r3, r3, #2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6911      	ldr	r1, [r2, #16]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004dae:	e013      	b.n	8004dd8 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004dbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dd4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d118      	bne.n	8004e14 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e04:	430a      	orrs	r2, r1
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
 8004e12:	e007      	b.n	8004e24 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10c      	bne.n	8004e46 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f023 010f 	bic.w	r1, r3, #15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	1e5a      	subs	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
 8004e44:	e007      	b.n	8004e56 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 020f 	bic.w	r2, r2, #15
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	f023 0303 	bic.w	r3, r3, #3
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e66:	e007      	b.n	8004e78 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3724      	adds	r7, #36	; 0x24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd90      	pop	{r4, r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000008 	.word	0x20000008
 8004e88:	053e2d63 	.word	0x053e2d63
 8004e8c:	50000100 	.word	0x50000100
 8004e90:	50000300 	.word	0x50000300
 8004e94:	fff04007 	.word	0xfff04007

08004e98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea4:	4851      	ldr	r0, [pc, #324]	; (8004fec <HAL_ADC_Start_DMA+0x154>)
 8004ea6:	f7ff fda3 	bl	80049f0 <LL_ADC_GetMultimode>
 8004eaa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fe42 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 808f 	bne.w	8004fdc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x34>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e08a      	b.n	8004fe2 <HAL_ADC_Start_DMA+0x14a>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	d002      	beq.n	8004ee6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b09      	cmp	r3, #9
 8004ee4:	d173      	bne.n	8004fce <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 feb2 	bl	8005c50 <ADC_Enable>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d166      	bne.n	8004fc4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <HAL_ADC_Start_DMA+0x158>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d002      	beq.n	8004f1a <HAL_ADC_Start_DMA+0x82>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	e001      	b.n	8004f1e <HAL_ADC_Start_DMA+0x86>
 8004f1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d002      	beq.n	8004f2c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f48:	f023 0206 	bic.w	r2, r3, #6
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60
 8004f50:	e002      	b.n	8004f58 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	4a25      	ldr	r2, [pc, #148]	; (8004ff4 <HAL_ADC_Start_DMA+0x15c>)
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <HAL_ADC_Start_DMA+0x160>)
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <HAL_ADC_Start_DMA+0x164>)
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	221c      	movs	r2, #28
 8004f76:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0210 	orr.w	r2, r2, #16
 8004f8e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3340      	adds	r3, #64	; 0x40
 8004faa:	4619      	mov	r1, r3
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f001 fa04 	bl	80063bc <HAL_DMA_Start_IT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fda8 	bl	8004b12 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004fc2:	e00d      	b.n	8004fe0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004fcc:	e008      	b.n	8004fe0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004fda:	e001      	b.n	8004fe0 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	50000300 	.word	0x50000300
 8004ff0:	50000100 	.word	0x50000100
 8004ff4:	08005d05 	.word	0x08005d05
 8004ff8:	08005ddd 	.word	0x08005ddd
 8004ffc:	08005df9 	.word	0x08005df9

08005000 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005008:	2300      	movs	r3, #0
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800501c:	4883      	ldr	r0, [pc, #524]	; (800522c <HAL_ADC_IRQHandler+0x22c>)
 800501e:	f7ff fce7 	bl	80049f0 <LL_ADC_GetMultimode>
 8005022:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <HAL_ADC_IRQHandler+0x5e>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d012      	beq.n	800505e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005048:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 ff39 	bl	8005ec8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2202      	movs	r2, #2
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <HAL_ADC_IRQHandler+0x72>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10a      	bne.n	8005088 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8085 	beq.w	8005188 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d07f      	beq.n	8005188 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fc01 	bl	80048ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d064      	beq.n	800517a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5e      	ldr	r2, [pc, #376]	; (8005230 <HAL_ADC_IRQHandler+0x230>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d002      	beq.n	80050c0 <HAL_ADC_IRQHandler+0xc0>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	e001      	b.n	80050c4 <HAL_ADC_IRQHandler+0xc4>
 80050c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d008      	beq.n	80050de <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d002      	beq.n	80050de <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b09      	cmp	r3, #9
 80050dc:	d104      	bne.n	80050e8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	e00d      	b.n	8005104 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a50      	ldr	r2, [pc, #320]	; (8005230 <HAL_ADC_IRQHandler+0x230>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d002      	beq.n	80050f8 <HAL_ADC_IRQHandler+0xf8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	e001      	b.n	80050fc <HAL_ADC_IRQHandler+0xfc>
 80050f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80050fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d135      	bne.n	800517a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b08      	cmp	r3, #8
 800511a:	d12e      	bne.n	800517a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fd0a 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d11a      	bne.n	8005162 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 020c 	bic.w	r2, r2, #12
 800513a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d112      	bne.n	800517a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005158:	f043 0201 	orr.w	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005160:	e00b      	b.n	800517a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	f043 0210 	orr.w	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd f86e 	bl	800225c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	220c      	movs	r2, #12
 8005186:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_ADC_IRQHandler+0x19c>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 809e 	beq.w	80052e4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8098 	beq.w	80052e4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fbaa 	bl	800492a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80051d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fb65 	bl	80048ac <LL_ADC_REG_IsTriggerSourceSWStart>
 80051e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a11      	ldr	r2, [pc, #68]	; (8005230 <HAL_ADC_IRQHandler+0x230>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d002      	beq.n	80051f4 <HAL_ADC_IRQHandler+0x1f4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	e001      	b.n	80051f8 <HAL_ADC_IRQHandler+0x1f8>
 80051f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d008      	beq.n	8005212 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b06      	cmp	r3, #6
 800520a:	d002      	beq.n	8005212 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b07      	cmp	r3, #7
 8005210:	d104      	bne.n	800521c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	e011      	b.n	8005240 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a03      	ldr	r2, [pc, #12]	; (8005230 <HAL_ADC_IRQHandler+0x230>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d006      	beq.n	8005234 <HAL_ADC_IRQHandler+0x234>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	e005      	b.n	8005238 <HAL_ADC_IRQHandler+0x238>
 800522c:	50000300 	.word	0x50000300
 8005230:	50000100 	.word	0x50000100
 8005234:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005238:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10c      	bne.n	8005260 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800524c:	2b00      	cmp	r3, #0
 800524e:	d142      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d03f      	beq.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800525c:	2b00      	cmp	r3, #0
 800525e:	d13a      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d133      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d12e      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fc6f 	bl	8004b60 <LL_ADC_INJ_IsConversionOngoing>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11a      	bne.n	80052be <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005296:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d112      	bne.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	f043 0201 	orr.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80052bc:	e00b      	b.n	80052d6 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c2:	f043 0210 	orr.w	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ce:	f043 0201 	orr.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fdce 	bl	8005e78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2260      	movs	r2, #96	; 0x60
 80052e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <HAL_ADC_IRQHandler+0x312>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f89f 	bl	8005448 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d012      	beq.n	8005342 <HAL_ADC_IRQHandler+0x342>
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fdb4 	bl	8005ea0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	2b00      	cmp	r3, #0
 800534a:	d012      	beq.n	8005372 <HAL_ADC_IRQHandler+0x372>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fda6 	bl	8005eb4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d036      	beq.n	80053ea <HAL_ADC_IRQHandler+0x3ea>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b00      	cmp	r3, #0
 8005384:	d031      	beq.n	80053ea <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800538e:	2301      	movs	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
 8005392:	e014      	b.n	80053be <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800539a:	4825      	ldr	r0, [pc, #148]	; (8005430 <HAL_ADC_IRQHandler+0x430>)
 800539c:	f7ff fb36 	bl	8004a0c <LL_ADC_GetMultiDMATransfer>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80053a6:	2301      	movs	r3, #1
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e008      	b.n	80053be <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80053ba:	2301      	movs	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10e      	bne.n	80053e2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f043 0202 	orr.w	r2, r3, #2
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f83d 	bl	800545c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2210      	movs	r2, #16
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d018      	beq.n	8005426 <HAL_ADC_IRQHandler+0x426>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d013      	beq.n	8005426 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	f043 0208 	orr.w	r2, r3, #8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800541e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fd33 	bl	8005e8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005426:	bf00      	nop
 8005428:	3728      	adds	r7, #40	; 0x28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	50000300 	.word	0x50000300

08005434 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b0b6      	sub	sp, #216	; 0xd8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x22>
 800548e:	2302      	movs	r3, #2
 8005490:	e3c7      	b.n	8005c22 <HAL_ADC_ConfigChannel+0x7b2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fb4b 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 83ac 	bne.w	8005c04 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	f7ff fa0a 	bl	80048d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fb39 	bl	8004b3a <LL_ADC_REG_IsConversionOngoing>
 80054c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fb45 	bl	8004b60 <LL_ADC_INJ_IsConversionOngoing>
 80054d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f040 81d9 	bne.w	8005896 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 81d4 	bne.w	8005896 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f6:	d10f      	bne.n	8005518 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2200      	movs	r2, #0
 8005502:	4619      	mov	r1, r3
 8005504:	f7ff fa24 	bl	8004950 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff f9b8 	bl	8004886 <LL_ADC_SetSamplingTimeCommonConfig>
 8005516:	e00e      	b.n	8005536 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	461a      	mov	r2, r3
 8005526:	f7ff fa13 	bl	8004950 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff f9a8 	bl	8004886 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	08db      	lsrs	r3, r3, #3
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b04      	cmp	r3, #4
 8005556:	d022      	beq.n	800559e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6919      	ldr	r1, [r3, #16]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005568:	f7ff f902 	bl	8004770 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6919      	ldr	r1, [r3, #16]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	461a      	mov	r2, r3
 800557a:	f7ff f94e 	bl	800481a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6919      	ldr	r1, [r3, #16]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	7f1b      	ldrb	r3, [r3, #28]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <HAL_ADC_ConfigChannel+0x124>
 800558e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005592:	e000      	b.n	8005596 <HAL_ADC_ConfigChannel+0x126>
 8005594:	2300      	movs	r3, #0
 8005596:	461a      	mov	r2, r3
 8005598:	f7ff f95a 	bl	8004850 <LL_ADC_SetOffsetSaturation>
 800559c:	e17b      	b.n	8005896 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff f907 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x15a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f8fc 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 80055c0:	4603      	mov	r3, r0
 80055c2:	0e9b      	lsrs	r3, r3, #26
 80055c4:	f003 021f 	and.w	r2, r3, #31
 80055c8:	e01e      	b.n	8005608 <HAL_ADC_ConfigChannel+0x198>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff f8f1 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055e0:	fa93 f3a3 	rbit	r3, r3
 80055e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80055f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	e004      	b.n	8005606 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80055fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005600:	fab3 f383 	clz	r3, r3
 8005604:	b2db      	uxtb	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x1b0>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0e9b      	lsrs	r3, r3, #26
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	e018      	b.n	8005652 <HAL_ADC_ConfigChannel+0x1e2>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800562c:	fa93 f3a3 	rbit	r3, r3
 8005630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800563c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005644:	2320      	movs	r3, #32
 8005646:	e004      	b.n	8005652 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	429a      	cmp	r2, r3
 8005654:	d106      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff f8c0 	bl	80047e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f8a4 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005670:	4603      	mov	r3, r0
 8005672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x220>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2101      	movs	r1, #1
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff f899 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005686:	4603      	mov	r3, r0
 8005688:	0e9b      	lsrs	r3, r3, #26
 800568a:	f003 021f 	and.w	r2, r3, #31
 800568e:	e01e      	b.n	80056ce <HAL_ADC_ConfigChannel+0x25e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2101      	movs	r1, #1
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff f88e 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 800569c:	4603      	mov	r3, r0
 800569e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056a6:	fa93 f3a3 	rbit	r3, r3
 80056aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80056ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80056b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e004      	b.n	80056cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80056c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056c6:	fab3 f383 	clz	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <HAL_ADC_ConfigChannel+0x276>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	0e9b      	lsrs	r3, r3, #26
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	e018      	b.n	8005718 <HAL_ADC_ConfigChannel+0x2a8>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056f2:	fa93 f3a3 	rbit	r3, r3
 80056f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80056fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800570a:	2320      	movs	r3, #32
 800570c:	e004      	b.n	8005718 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800570e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	429a      	cmp	r2, r3
 800571a:	d106      	bne.n	800572a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2200      	movs	r2, #0
 8005722:	2101      	movs	r1, #1
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff f85d 	bl	80047e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2102      	movs	r1, #2
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff f841 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005736:	4603      	mov	r3, r0
 8005738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <HAL_ADC_ConfigChannel+0x2e6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2102      	movs	r1, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff f836 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 800574c:	4603      	mov	r3, r0
 800574e:	0e9b      	lsrs	r3, r3, #26
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	e01e      	b.n	8005794 <HAL_ADC_ConfigChannel+0x324>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2102      	movs	r1, #2
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff f82b 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005762:	4603      	mov	r3, r0
 8005764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800576c:	fa93 f3a3 	rbit	r3, r3
 8005770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800577c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005784:	2320      	movs	r3, #32
 8005786:	e004      	b.n	8005792 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800578c:	fab3 f383 	clz	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x33c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0e9b      	lsrs	r3, r3, #26
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	e016      	b.n	80057da <HAL_ADC_ConfigChannel+0x36a>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057b8:	fa93 f3a3 	rbit	r3, r3
 80057bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80057be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80057c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80057cc:	2320      	movs	r3, #32
 80057ce:	e004      	b.n	80057da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80057d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d4:	fab3 f383 	clz	r3, r3
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	429a      	cmp	r2, r3
 80057dc:	d106      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	2102      	movs	r1, #2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fffc 	bl	80047e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2103      	movs	r1, #3
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe ffe0 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x3a8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2103      	movs	r1, #3
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe ffd5 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 800580e:	4603      	mov	r3, r0
 8005810:	0e9b      	lsrs	r3, r3, #26
 8005812:	f003 021f 	and.w	r2, r3, #31
 8005816:	e017      	b.n	8005848 <HAL_ADC_ConfigChannel+0x3d8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2103      	movs	r1, #3
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe ffca 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005824:	4603      	mov	r3, r0
 8005826:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582a:	fa93 f3a3 	rbit	r3, r3
 800582e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005832:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800583a:	2320      	movs	r3, #32
 800583c:	e003      	b.n	8005846 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800583e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005840:	fab3 f383 	clz	r3, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x3f0>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	0e9b      	lsrs	r3, r3, #26
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	e011      	b.n	8005884 <HAL_ADC_ConfigChannel+0x414>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005866:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005868:	fa93 f3a3 	rbit	r3, r3
 800586c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800586e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005870:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005878:	2320      	movs	r3, #32
 800587a:	e003      	b.n	8005884 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800587c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	429a      	cmp	r2, r3
 8005886:	d106      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2200      	movs	r2, #0
 800588e:	2103      	movs	r1, #3
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe ffa7 	bl	80047e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff f926 	bl	8004aec <LL_ADC_IsEnabled>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 8140 	bne.w	8005b28 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	461a      	mov	r2, r3
 80058b6:	f7ff f877 	bl	80049a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4a8f      	ldr	r2, [pc, #572]	; (8005afc <HAL_ADC_ConfigChannel+0x68c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	f040 8131 	bne.w	8005b28 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <HAL_ADC_ConfigChannel+0x47e>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	0e9b      	lsrs	r3, r3, #26
 80058dc:	3301      	adds	r3, #1
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2b09      	cmp	r3, #9
 80058e4:	bf94      	ite	ls
 80058e6:	2301      	movls	r3, #1
 80058e8:	2300      	movhi	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	e019      	b.n	8005922 <HAL_ADC_ConfigChannel+0x4b2>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f6:	fa93 f3a3 	rbit	r3, r3
 80058fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80058fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005906:	2320      	movs	r3, #32
 8005908:	e003      	b.n	8005912 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800590a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	3301      	adds	r3, #1
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2b09      	cmp	r3, #9
 800591a:	bf94      	ite	ls
 800591c:	2301      	movls	r3, #1
 800591e:	2300      	movhi	r3, #0
 8005920:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005922:	2b00      	cmp	r3, #0
 8005924:	d079      	beq.n	8005a1a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x4d2>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	0e9b      	lsrs	r3, r3, #26
 8005938:	3301      	adds	r3, #1
 800593a:	069b      	lsls	r3, r3, #26
 800593c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005940:	e015      	b.n	800596e <HAL_ADC_ConfigChannel+0x4fe>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005952:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800595a:	2320      	movs	r3, #32
 800595c:	e003      	b.n	8005966 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800595e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	3301      	adds	r3, #1
 8005968:	069b      	lsls	r3, r3, #26
 800596a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_ADC_ConfigChannel+0x51e>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	0e9b      	lsrs	r3, r3, #26
 8005980:	3301      	adds	r3, #1
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2101      	movs	r1, #1
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	e017      	b.n	80059be <HAL_ADC_ConfigChannel+0x54e>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800599c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80059a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80059a6:	2320      	movs	r3, #32
 80059a8:	e003      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80059aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ac:	fab3 f383 	clz	r3, r3
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2101      	movs	r1, #1
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	ea42 0103 	orr.w	r1, r2, r3
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <HAL_ADC_ConfigChannel+0x574>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	0e9b      	lsrs	r3, r3, #26
 80059d4:	3301      	adds	r3, #1
 80059d6:	f003 021f 	and.w	r2, r3, #31
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	051b      	lsls	r3, r3, #20
 80059e2:	e018      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x5a6>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80059f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80059f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80059fc:	2320      	movs	r3, #32
 80059fe:	e003      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	fab3 f383 	clz	r3, r3
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	3301      	adds	r3, #1
 8005a0a:	f003 021f 	and.w	r2, r3, #31
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a16:	430b      	orrs	r3, r1
 8005a18:	e081      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x5c6>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	0e9b      	lsrs	r3, r3, #26
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	069b      	lsls	r3, r3, #26
 8005a30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a34:	e015      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x5f2>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005a4e:	2320      	movs	r3, #32
 8005a50:	e003      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	fab3 f383 	clz	r3, r3
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	069b      	lsls	r3, r3, #26
 8005a5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x612>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	0e9b      	lsrs	r3, r3, #26
 8005a74:	3301      	adds	r3, #1
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	e017      	b.n	8005ab2 <HAL_ADC_ConfigChannel+0x642>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	fa93 f3a3 	rbit	r3, r3
 8005a8e:	61fb      	str	r3, [r7, #28]
  return result;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	e003      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2101      	movs	r1, #1
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	ea42 0103 	orr.w	r1, r2, r3
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x66e>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	0e9b      	lsrs	r3, r3, #26
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f003 021f 	and.w	r2, r3, #31
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3b1e      	subs	r3, #30
 8005ad6:	051b      	lsls	r3, r3, #20
 8005ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005adc:	e01e      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x6ac>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	fa93 f3a3 	rbit	r3, r3
 8005aea:	613b      	str	r3, [r7, #16]
  return result;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005af6:	2320      	movs	r3, #32
 8005af8:	e006      	b.n	8005b08 <HAL_ADC_ConfigChannel+0x698>
 8005afa:	bf00      	nop
 8005afc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	fab3 f383 	clz	r3, r3
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	f003 021f 	and.w	r2, r3, #31
 8005b0e:	4613      	mov	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	3b1e      	subs	r3, #30
 8005b16:	051b      	lsls	r3, r3, #20
 8005b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	6892      	ldr	r2, [r2, #8]
 8005b22:	4619      	mov	r1, r3
 8005b24:	f7fe ff14 	bl	8004950 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <HAL_ADC_ConfigChannel+0x7bc>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d070      	beq.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b34:	483e      	ldr	r0, [pc, #248]	; (8005c30 <HAL_ADC_ConfigChannel+0x7c0>)
 8005b36:	f7fe fe0d 	bl	8004754 <LL_ADC_GetCommonPathInternalCh>
 8005b3a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a3c      	ldr	r2, [pc, #240]	; (8005c34 <HAL_ADC_ConfigChannel+0x7c4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_ADC_ConfigChannel+0x6e2>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <HAL_ADC_ConfigChannel+0x7c8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d126      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d120      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b66:	d156      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b70:	4619      	mov	r1, r3
 8005b72:	482f      	ldr	r0, [pc, #188]	; (8005c30 <HAL_ADC_ConfigChannel+0x7c0>)
 8005b74:	f7fe fddb 	bl	800472e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005b78:	4b30      	ldr	r3, [pc, #192]	; (8005c3c <HAL_ADC_ConfigChannel+0x7cc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	099b      	lsrs	r3, r3, #6
 8005b7e:	4a30      	ldr	r2, [pc, #192]	; (8005c40 <HAL_ADC_ConfigChannel+0x7d0>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	099a      	lsrs	r2, r3, #6
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b90:	e002      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f9      	bne.n	8005b92 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b9e:	e03a      	b.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a27      	ldr	r2, [pc, #156]	; (8005c44 <HAL_ADC_ConfigChannel+0x7d4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d113      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x762>
 8005baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <HAL_ADC_ConfigChannel+0x7d8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d02a      	beq.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4819      	ldr	r0, [pc, #100]	; (8005c30 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bcc:	f7fe fdaf 	bl	800472e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005bd0:	e021      	b.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_ADC_ConfigChannel+0x7dc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d11c      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d116      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_ADC_ConfigChannel+0x7d8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d011      	beq.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	480c      	ldr	r0, [pc, #48]	; (8005c30 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bfe:	f7fe fd96 	bl	800472e <LL_ADC_SetCommonPathInternalCh>
 8005c02:	e008      	b.n	8005c16 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	37d8      	adds	r7, #216	; 0xd8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	80080000 	.word	0x80080000
 8005c30:	50000300 	.word	0x50000300
 8005c34:	c3210000 	.word	0xc3210000
 8005c38:	90c00010 	.word	0x90c00010
 8005c3c:	20000008 	.word	0x20000008
 8005c40:	053e2d63 	.word	0x053e2d63
 8005c44:	c7520000 	.word	0xc7520000
 8005c48:	50000100 	.word	0x50000100
 8005c4c:	cb840000 	.word	0xcb840000

08005c50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe ff45 	bl	8004aec <LL_ADC_IsEnabled>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d146      	bne.n	8005cf6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <ADC_Enable+0xb0>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	f043 0210 	orr.w	r2, r3, #16
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	f043 0201 	orr.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e032      	b.n	8005cf8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe ff14 	bl	8004ac4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c9c:	f7fe fd06 	bl	80046ac <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ca2:	e021      	b.n	8005ce8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe ff1f 	bl	8004aec <LL_ADC_IsEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe ff03 	bl	8004ac4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cbe:	f7fe fcf5 	bl	80046ac <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d90d      	bls.n	8005ce8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	f043 0210 	orr.w	r2, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cdc:	f043 0201 	orr.w	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e007      	b.n	8005cf8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d1d6      	bne.n	8005ca4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	8000003f 	.word	0x8000003f

08005d04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d14b      	bne.n	8005db6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d021      	beq.n	8005d7c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe fdb5 	bl	80048ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d032      	beq.n	8005dae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12b      	bne.n	8005dae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11f      	bne.n	8005dae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	f043 0201 	orr.w	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d7a:	e018      	b.n	8005dae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d111      	bne.n	8005dae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da6:	f043 0201 	orr.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7fc fa54 	bl	800225c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005db4:	e00e      	b.n	8005dd4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f7ff fb4a 	bl	800545c <HAL_ADC_ErrorCallback>
}
 8005dc8:	e004      	b.n	8005dd4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff fb22 	bl	8005434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e16:	f043 0204 	orr.w	r2, r3, #4
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7ff fb1c 	bl	800545c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <LL_ADC_IsEnabled>:
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <LL_ADC_IsEnabled+0x18>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <LL_ADC_IsEnabled+0x1a>
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_ADC_REG_IsConversionOngoing>:
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d101      	bne.n	8005e6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b0a1      	sub	sp, #132	; 0x84
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e087      	b.n	800600a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f0a:	d102      	bne.n	8005f12 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005f0c:	4b41      	ldr	r3, [pc, #260]	; (8006014 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005f0e:	60bb      	str	r3, [r7, #8]
 8005f10:	e001      	b.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e06a      	b.n	800600a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff ff8b 	bl	8005e52 <LL_ADC_REG_IsConversionOngoing>
 8005f3c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ff85 	bl	8005e52 <LL_ADC_REG_IsConversionOngoing>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d14c      	bne.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d149      	bne.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f54:	4b30      	ldr	r3, [pc, #192]	; (8006018 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005f56:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d028      	beq.n	8005fb2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f72:	035b      	lsls	r3, r3, #13
 8005f74:	430b      	orrs	r3, r1
 8005f76:	431a      	orrs	r2, r3
 8005f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005f80:	f7ff ff54 	bl	8005e2c <LL_ADC_IsEnabled>
 8005f84:	4604      	mov	r4, r0
 8005f86:	4823      	ldr	r0, [pc, #140]	; (8006014 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005f88:	f7ff ff50 	bl	8005e2c <LL_ADC_IsEnabled>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4323      	orrs	r3, r4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d133      	bne.n	8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f9c:	f023 030f 	bic.w	r3, r3, #15
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	6811      	ldr	r1, [r2, #0]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	6892      	ldr	r2, [r2, #8]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	431a      	orrs	r2, r3
 8005fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb0:	e024      	b.n	8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fbc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fbe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005fc2:	f7ff ff33 	bl	8005e2c <LL_ADC_IsEnabled>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4812      	ldr	r0, [pc, #72]	; (8006014 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005fca:	f7ff ff2f 	bl	8005e2c <LL_ADC_IsEnabled>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4323      	orrs	r3, r4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d112      	bne.n	8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005fde:	f023 030f 	bic.w	r3, r3, #15
 8005fe2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005fe4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fe6:	e009      	b.n	8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005ffa:	e000      	b.n	8005ffe <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ffc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006006:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800600a:	4618      	mov	r0, r3
 800600c:	3784      	adds	r7, #132	; 0x84
 800600e:	46bd      	mov	sp, r7
 8006010:	bd90      	pop	{r4, r7, pc}
 8006012:	bf00      	nop
 8006014:	50000100 	.word	0x50000100
 8006018:	50000300 	.word	0x50000300

0800601c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <__NVIC_SetPriorityGrouping+0x44>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006038:	4013      	ands	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800604c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800604e:	4a04      	ldr	r2, [pc, #16]	; (8006060 <__NVIC_SetPriorityGrouping+0x44>)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	60d3      	str	r3, [r2, #12]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	e000ed00 	.word	0xe000ed00

08006064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <__NVIC_GetPriorityGrouping+0x18>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	f003 0307 	and.w	r3, r3, #7
}
 8006072:	4618      	mov	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	e000ed00 	.word	0xe000ed00

08006080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800608a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608e:	2b00      	cmp	r3, #0
 8006090:	db0b      	blt.n	80060aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	f003 021f 	and.w	r2, r3, #31
 8006098:	4907      	ldr	r1, [pc, #28]	; (80060b8 <__NVIC_EnableIRQ+0x38>)
 800609a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	2001      	movs	r0, #1
 80060a2:	fa00 f202 	lsl.w	r2, r0, r2
 80060a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	e000e100 	.word	0xe000e100

080060bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	4603      	mov	r3, r0
 80060c4:	6039      	str	r1, [r7, #0]
 80060c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	db0a      	blt.n	80060e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	490c      	ldr	r1, [pc, #48]	; (8006108 <__NVIC_SetPriority+0x4c>)
 80060d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060da:	0112      	lsls	r2, r2, #4
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	440b      	add	r3, r1
 80060e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060e4:	e00a      	b.n	80060fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4908      	ldr	r1, [pc, #32]	; (800610c <__NVIC_SetPriority+0x50>)
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	3b04      	subs	r3, #4
 80060f4:	0112      	lsls	r2, r2, #4
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	440b      	add	r3, r1
 80060fa:	761a      	strb	r2, [r3, #24]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	e000e100 	.word	0xe000e100
 800610c:	e000ed00 	.word	0xe000ed00

08006110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006110:	b480      	push	{r7}
 8006112:	b089      	sub	sp, #36	; 0x24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f1c3 0307 	rsb	r3, r3, #7
 800612a:	2b04      	cmp	r3, #4
 800612c:	bf28      	it	cs
 800612e:	2304      	movcs	r3, #4
 8006130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3304      	adds	r3, #4
 8006136:	2b06      	cmp	r3, #6
 8006138:	d902      	bls.n	8006140 <NVIC_EncodePriority+0x30>
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3b03      	subs	r3, #3
 800613e:	e000      	b.n	8006142 <NVIC_EncodePriority+0x32>
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	401a      	ands	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006158:	f04f 31ff 	mov.w	r1, #4294967295
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	fa01 f303 	lsl.w	r3, r1, r3
 8006162:	43d9      	mvns	r1, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006168:	4313      	orrs	r3, r2
         );
}
 800616a:	4618      	mov	r0, r3
 800616c:	3724      	adds	r7, #36	; 0x24
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800617c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <__NVIC_SystemReset+0x20>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006188:	4903      	ldr	r1, [pc, #12]	; (8006198 <__NVIC_SystemReset+0x20>)
 800618a:	4b04      	ldr	r3, [pc, #16]	; (800619c <__NVIC_SystemReset+0x24>)
 800618c:	4313      	orrs	r3, r2
 800618e:	60cb      	str	r3, [r1, #12]
 8006190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <__NVIC_SystemReset+0x1c>
 8006198:	e000ed00 	.word	0xe000ed00
 800619c:	05fa0004 	.word	0x05fa0004

080061a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061b0:	d301      	bcc.n	80061b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00f      	b.n	80061d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <SysTick_Config+0x40>)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061be:	210f      	movs	r1, #15
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	f7ff ff7a 	bl	80060bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <SysTick_Config+0x40>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <SysTick_Config+0x40>)
 80061d0:	2207      	movs	r2, #7
 80061d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000e010 	.word	0xe000e010

080061e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff ff15 	bl	800601c <__NVIC_SetPriorityGrouping>
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b086      	sub	sp, #24
 80061fe:	af00      	add	r7, sp, #0
 8006200:	4603      	mov	r3, r0
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006208:	f7ff ff2c 	bl	8006064 <__NVIC_GetPriorityGrouping>
 800620c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f7ff ff7c 	bl	8006110 <NVIC_EncodePriority>
 8006218:	4602      	mov	r2, r0
 800621a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff ff4b 	bl	80060bc <__NVIC_SetPriority>
}
 8006226:	bf00      	nop
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	4603      	mov	r3, r0
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff1f 	bl	8006080 <__NVIC_EnableIRQ>
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800624e:	f7ff ff93 	bl	8006178 <__NVIC_SystemReset>

08006252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ffa0 	bl	80061a0 <SysTick_Config>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e08d      	b.n	800639a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	4b47      	ldr	r3, [pc, #284]	; (80063a4 <HAL_DMA_Init+0x138>)
 8006286:	429a      	cmp	r2, r3
 8006288:	d80f      	bhi.n	80062aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	4b45      	ldr	r3, [pc, #276]	; (80063a8 <HAL_DMA_Init+0x13c>)
 8006292:	4413      	add	r3, r2
 8006294:	4a45      	ldr	r2, [pc, #276]	; (80063ac <HAL_DMA_Init+0x140>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	091b      	lsrs	r3, r3, #4
 800629c:	009a      	lsls	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a42      	ldr	r2, [pc, #264]	; (80063b0 <HAL_DMA_Init+0x144>)
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40
 80062a8:	e00e      	b.n	80062c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	4b40      	ldr	r3, [pc, #256]	; (80063b4 <HAL_DMA_Init+0x148>)
 80062b2:	4413      	add	r3, r2
 80062b4:	4a3d      	ldr	r2, [pc, #244]	; (80063ac <HAL_DMA_Init+0x140>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	009a      	lsls	r2, r3, #2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a3c      	ldr	r2, [pc, #240]	; (80063b8 <HAL_DMA_Init+0x14c>)
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80062ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa1e 	bl	800675c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006328:	d102      	bne.n	8006330 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006344:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d010      	beq.n	8006370 <HAL_DMA_Init+0x104>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d80c      	bhi.n	8006370 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa3e 	bl	80067d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	e008      	b.n	8006382 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40020407 	.word	0x40020407
 80063a8:	bffdfff8 	.word	0xbffdfff8
 80063ac:	cccccccd 	.word	0xcccccccd
 80063b0:	40020000 	.word	0x40020000
 80063b4:	bffdfbf8 	.word	0xbffdfbf8
 80063b8:	40020400 	.word	0x40020400

080063bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_Start_IT+0x20>
 80063d8:	2302      	movs	r3, #2
 80063da:	e066      	b.n	80064aa <HAL_DMA_Start_IT+0xee>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d155      	bne.n	800649c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f962 	bl	80066de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f042 020e 	orr.w	r2, r2, #14
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e00f      	b.n	8006454 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0204 	bic.w	r2, r2, #4
 8006442:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 020a 	orr.w	r2, r2, #10
 8006452:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006470:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006488:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e005      	b.n	80064a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
 80064a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b084      	sub	sp, #16
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d00d      	beq.n	80064e6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	e047      	b.n	8006576 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 020e 	bic.w	r2, r2, #14
 80064f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651a:	f003 021f 	and.w	r2, r3, #31
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	2101      	movs	r1, #1
 8006524:	fa01 f202 	lsl.w	r2, r1, r2
 8006528:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006532:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800654a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006554:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
    }
  }
  return status;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	2204      	movs	r2, #4
 80065a2:	409a      	lsls	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d026      	beq.n	80065fa <HAL_DMA_IRQHandler+0x7a>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d021      	beq.n	80065fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d107      	bne.n	80065d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0204 	bic.w	r2, r2, #4
 80065d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	f003 021f 	and.w	r2, r3, #31
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	2104      	movs	r1, #4
 80065e2:	fa01 f202 	lsl.w	r2, r1, r2
 80065e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d071      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80065f8:	e06c      	b.n	80066d4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2202      	movs	r2, #2
 8006604:	409a      	lsls	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d02e      	beq.n	800666c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d029      	beq.n	800666c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 020a 	bic.w	r2, r2, #10
 8006634:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	f003 021f 	and.w	r2, r3, #31
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	2102      	movs	r1, #2
 800664c:	fa01 f202 	lsl.w	r2, r1, r2
 8006650:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d038      	beq.n	80066d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800666a:	e033      	b.n	80066d4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2208      	movs	r2, #8
 8006676:	409a      	lsls	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d02a      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d025      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 020e 	bic.w	r2, r2, #14
 8006698:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f003 021f 	and.w	r2, r3, #31
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2101      	movs	r1, #1
 80066a8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
}
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066f4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670c:	f003 021f 	and.w	r2, r3, #31
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	2101      	movs	r1, #1
 8006716:	fa01 f202 	lsl.w	r2, r1, r2
 800671a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b10      	cmp	r3, #16
 800672a:	d108      	bne.n	800673e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800673c:	e007      	b.n	800674e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	4b16      	ldr	r3, [pc, #88]	; (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800676c:	429a      	cmp	r2, r3
 800676e:	d802      	bhi.n	8006776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006770:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e001      	b.n	800677a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006778:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	3b08      	subs	r3, #8
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	089b      	lsrs	r3, r3, #2
 8006796:	009a      	lsls	r2, r3, #2
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	461a      	mov	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a0b      	ldr	r2, [pc, #44]	; (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2201      	movs	r2, #1
 80067b0:	409a      	lsls	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40020407 	.word	0x40020407
 80067c8:	40020800 	.word	0x40020800
 80067cc:	40020820 	.word	0x40020820
 80067d0:	cccccccd 	.word	0xcccccccd
 80067d4:	40020880 	.word	0x40020880

080067d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	461a      	mov	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80067fa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3b01      	subs	r3, #1
 8006800:	f003 031f 	and.w	r3, r3, #31
 8006804:	2201      	movs	r2, #1
 8006806:	409a      	lsls	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	1000823f 	.word	0x1000823f
 800681c:	40020940 	.word	0x40020940

08006820 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <HAL_FLASH_Program+0xa4>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_FLASH_Program+0x1e>
 800683a:	2302      	movs	r3, #2
 800683c:	e03e      	b.n	80068bc <HAL_FLASH_Program+0x9c>
 800683e:	4b21      	ldr	r3, [pc, #132]	; (80068c4 <HAL_FLASH_Program+0xa4>)
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006848:	f000 f888 	bl	800695c <FLASH_WaitForLastOperation>
 800684c:	4603      	mov	r3, r0
 800684e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d12e      	bne.n	80068b4 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006856:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <HAL_FLASH_Program+0xa4>)
 8006858:	2200      	movs	r2, #0
 800685a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006866:	68b8      	ldr	r0, [r7, #8]
 8006868:	f000 f8cc 	bl	8006a04 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800686c:	2301      	movs	r3, #1
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	e010      	b.n	8006894 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d002      	beq.n	800687e <HAL_FLASH_Program+0x5e>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d10a      	bne.n	8006894 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	4619      	mov	r1, r3
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f000 f8e2 	bl	8006a4c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d102      	bne.n	8006894 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800688e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006892:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006898:	f000 f860 	bl	800695c <FLASH_WaitForLastOperation>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80068a6:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <HAL_FLASH_Program+0xa8>)
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	4906      	ldr	r1, [pc, #24]	; (80068c8 <HAL_FLASH_Program+0xa8>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <HAL_FLASH_Program+0xa4>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000014 	.word	0x20000014
 80068c8:	40022000 	.word	0x40022000

080068cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <HAL_FLASH_Unlock+0x38>)
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da0b      	bge.n	80068f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068de:	4b09      	ldr	r3, [pc, #36]	; (8006904 <HAL_FLASH_Unlock+0x38>)
 80068e0:	4a09      	ldr	r2, [pc, #36]	; (8006908 <HAL_FLASH_Unlock+0x3c>)
 80068e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <HAL_FLASH_Unlock+0x38>)
 80068e6:	4a09      	ldr	r2, [pc, #36]	; (800690c <HAL_FLASH_Unlock+0x40>)
 80068e8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_FLASH_Unlock+0x38>)
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da01      	bge.n	80068f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80068f6:	79fb      	ldrb	r3, [r7, #7]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40022000 	.word	0x40022000
 8006908:	45670123 	.word	0x45670123
 800690c:	cdef89ab 	.word	0xcdef89ab

08006910 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <HAL_FLASH_Lock+0x30>)
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	4a08      	ldr	r2, [pc, #32]	; (8006940 <HAL_FLASH_Lock+0x30>)
 8006920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006924:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <HAL_FLASH_Lock+0x30>)
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da01      	bge.n	8006932 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006932:	79fb      	ldrb	r3, [r7, #7]
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40022000 	.word	0x40022000

08006944 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8006948:	4b03      	ldr	r3, [pc, #12]	; (8006958 <HAL_FLASH_GetError+0x14>)
 800694a:	685b      	ldr	r3, [r3, #4]
}
 800694c:	4618      	mov	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000014 	.word	0x20000014

0800695c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006964:	f7fd fea2 	bl	80046ac <HAL_GetTick>
 8006968:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800696a:	e009      	b.n	8006980 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800696c:	f7fd fe9e 	bl	80046ac <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d201      	bcs.n	8006980 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e038      	b.n	80069f2 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006980:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698c:	d0ee      	beq.n	800696c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800698e:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006996:	4013      	ands	r3, r2
 8006998:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01e      	beq.n	80069de <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80069a0:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <FLASH_WaitForLastOperation+0xa4>)
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	4a15      	ldr	r2, [pc, #84]	; (8006a00 <FLASH_WaitForLastOperation+0xa4>)
 80069aa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <FLASH_WaitForLastOperation+0x6a>
 80069b6:	4b11      	ldr	r3, [pc, #68]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069c0:	490e      	ldr	r1, [pc, #56]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	618b      	str	r3, [r1, #24]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <FLASH_WaitForLastOperation+0x7e>
 80069d0:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069d8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e009      	b.n	80069f2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d102      	bne.n	80069f0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80069ea:	4b04      	ldr	r3, [pc, #16]	; (80069fc <FLASH_WaitForLastOperation+0xa0>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40022000 	.word	0x40022000
 8006a00:	20000014 	.word	0x20000014

08006a04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a04:	b490      	push	{r4, r7}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a10:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <FLASH_Program_DoubleWord+0x44>)
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <FLASH_Program_DoubleWord+0x44>)
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006a22:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006a26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	f04f 0400 	mov.w	r4, #0
 8006a32:	0013      	movs	r3, r2
 8006a34:	2400      	movs	r4, #0
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	3204      	adds	r2, #4
 8006a3a:	6013      	str	r3, [r2, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc90      	pop	{r4, r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40022000 	.word	0x40022000

08006a4c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	; 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006a56:	2340      	movs	r3, #64	; 0x40
 8006a58:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <FLASH_Program_Fast+0x64>)
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	4a12      	ldr	r2, [pc, #72]	; (8006ab0 <FLASH_Program_Fast+0x64>)
 8006a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a74:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a78:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	3304      	adds	r3, #4
 8006a86:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	617b      	str	r3, [r7, #20]
    row_index--;
 8006a8e:	7ffb      	ldrb	r3, [r7, #31]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006a94:	7ffb      	ldrb	r3, [r7, #31]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1ef      	bne.n	8006a7a <FLASH_Program_Fast+0x2e>
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006aa4:	bf00      	nop
 8006aa6:	3724      	adds	r7, #36	; 0x24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40022000 	.word	0x40022000

08006ab4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006abe:	4b4a      	ldr	r3, [pc, #296]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_FLASHEx_Erase+0x16>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e089      	b.n	8006bde <HAL_FLASHEx_Erase+0x12a>
 8006aca:	4b47      	ldr	r3, [pc, #284]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ad4:	f7ff ff42 	bl	800695c <FLASH_WaitForLastOperation>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d179      	bne.n	8006bd6 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ae2:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006ae8:	4b40      	ldr	r3, [pc, #256]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006af4:	4b3d      	ldr	r3, [pc, #244]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a3c      	ldr	r2, [pc, #240]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006afa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006afe:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b00:	4b3a      	ldr	r3, [pc, #232]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b0c:	4b37      	ldr	r3, [pc, #220]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a36      	ldr	r2, [pc, #216]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b16:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006b18:	4b33      	ldr	r3, [pc, #204]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	771a      	strb	r2, [r3, #28]
 8006b1e:	e016      	b.n	8006b4e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006b20:	4b31      	ldr	r3, [pc, #196]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	771a      	strb	r2, [r3, #28]
 8006b26:	e012      	b.n	8006b4e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b28:	4b30      	ldr	r3, [pc, #192]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b34:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b3e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006b40:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006b42:	2202      	movs	r2, #2
 8006b44:	771a      	strb	r2, [r3, #28]
 8006b46:	e002      	b.n	8006b4e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006b48:	4b27      	ldr	r3, [pc, #156]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d111      	bne.n	8006b7a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f848 	bl	8006bf0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b64:	f7ff fefa 	bl	800695c <FLASH_WaitForLastOperation>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006b6c:	4b1f      	ldr	r3, [pc, #124]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006b72:	f023 0304 	bic.w	r3, r3, #4
 8006b76:	6153      	str	r3, [r2, #20]
 8006b78:	e02b      	b.n	8006bd2 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b80:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	e01b      	b.n	8006bc2 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	68b8      	ldr	r0, [r7, #8]
 8006b92:	f000 f84b 	bl	8006c2c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b9a:	f7ff fedf 	bl	800695c <FLASH_WaitForLastOperation>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4a11      	ldr	r2, [pc, #68]	; (8006bec <HAL_FLASHEx_Erase+0x138>)
 8006ba8:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8006bac:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	601a      	str	r2, [r3, #0]
          break;
 8006bba:	e00a      	b.n	8006bd2 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60bb      	str	r3, [r7, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d3db      	bcc.n	8006b8a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006bd2:	f000 f84f 	bl	8006c74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006bd6:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <HAL_FLASHEx_Erase+0x134>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]

  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000014 	.word	0x20000014
 8006bec:	40022000 	.word	0x40022000

08006bf0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <FLASH_MassErase+0x38>)
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	4a08      	ldr	r2, [pc, #32]	; (8006c28 <FLASH_MassErase+0x38>)
 8006c08:	f043 0304 	orr.w	r3, r3, #4
 8006c0c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <FLASH_MassErase+0x38>)
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <FLASH_MassErase+0x38>)
 8006c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c18:	6153      	str	r3, [r2, #20]
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40022000 	.word	0x40022000

08006c2c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006c36:	4b0e      	ldr	r3, [pc, #56]	; (8006c70 <FLASH_PageErase+0x44>)
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006c46:	490a      	ldr	r1, [pc, #40]	; (8006c70 <FLASH_PageErase+0x44>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006c4c:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <FLASH_PageErase+0x44>)
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <FLASH_PageErase+0x44>)
 8006c52:	f043 0302 	orr.w	r3, r3, #2
 8006c56:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <FLASH_PageErase+0x44>)
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <FLASH_PageErase+0x44>)
 8006c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c62:	6153      	str	r3, [r2, #20]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40022000 	.word	0x40022000

08006c74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <FLASH_FlushCaches+0x80>)
 8006c7c:	7f1b      	ldrb	r3, [r3, #28]
 8006c7e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d002      	beq.n	8006c8c <FLASH_FlushCaches+0x18>
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d111      	bne.n	8006cb0 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006c8c:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006c92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ca4:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d002      	beq.n	8006cbc <FLASH_FlushCaches+0x48>
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d111      	bne.n	8006ce0 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0d      	ldr	r2, [pc, #52]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a07      	ldr	r2, [pc, #28]	; (8006cf8 <FLASH_FlushCaches+0x84>)
 8006cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cde:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <FLASH_FlushCaches+0x80>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	771a      	strb	r2, [r3, #28]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20000014 	.word	0x20000014
 8006cf8:	40022000 	.word	0x40022000

08006cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d0a:	e15a      	b.n	8006fc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2101      	movs	r1, #1
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 814c 	beq.w	8006fbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d00b      	beq.n	8006d44 <HAL_GPIO_Init+0x48>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d007      	beq.n	8006d44 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006d38:	2b11      	cmp	r3, #17
 8006d3a:	d003      	beq.n	8006d44 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b12      	cmp	r3, #18
 8006d42:	d130      	bne.n	8006da6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	2203      	movs	r2, #3
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	43db      	mvns	r3, r3
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	43db      	mvns	r3, r3
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4013      	ands	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	091b      	lsrs	r3, r3, #4
 8006d90:	f003 0201 	and.w	r2, r3, #1
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	2203      	movs	r2, #3
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43db      	mvns	r3, r3
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_Init+0xea>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b12      	cmp	r3, #18
 8006de4:	d123      	bne.n	8006e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	08da      	lsrs	r2, r3, #3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3208      	adds	r2, #8
 8006dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	220f      	movs	r2, #15
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4013      	ands	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	08da      	lsrs	r2, r3, #3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3208      	adds	r2, #8
 8006e28:	6939      	ldr	r1, [r7, #16]
 8006e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	2203      	movs	r2, #3
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4013      	ands	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f003 0203 	and.w	r2, r3, #3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 80a6 	beq.w	8006fbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e70:	4b5b      	ldr	r3, [pc, #364]	; (8006fe0 <HAL_GPIO_Init+0x2e4>)
 8006e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e74:	4a5a      	ldr	r2, [pc, #360]	; (8006fe0 <HAL_GPIO_Init+0x2e4>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8006e7c:	4b58      	ldr	r3, [pc, #352]	; (8006fe0 <HAL_GPIO_Init+0x2e4>)
 8006e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e88:	4a56      	ldr	r2, [pc, #344]	; (8006fe4 <HAL_GPIO_Init+0x2e8>)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	089b      	lsrs	r3, r3, #2
 8006e8e:	3302      	adds	r3, #2
 8006e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	220f      	movs	r2, #15
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006eb2:	d01f      	beq.n	8006ef4 <HAL_GPIO_Init+0x1f8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a4c      	ldr	r2, [pc, #304]	; (8006fe8 <HAL_GPIO_Init+0x2ec>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d019      	beq.n	8006ef0 <HAL_GPIO_Init+0x1f4>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a4b      	ldr	r2, [pc, #300]	; (8006fec <HAL_GPIO_Init+0x2f0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d013      	beq.n	8006eec <HAL_GPIO_Init+0x1f0>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a4a      	ldr	r2, [pc, #296]	; (8006ff0 <HAL_GPIO_Init+0x2f4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00d      	beq.n	8006ee8 <HAL_GPIO_Init+0x1ec>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a49      	ldr	r2, [pc, #292]	; (8006ff4 <HAL_GPIO_Init+0x2f8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d007      	beq.n	8006ee4 <HAL_GPIO_Init+0x1e8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a48      	ldr	r2, [pc, #288]	; (8006ff8 <HAL_GPIO_Init+0x2fc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_GPIO_Init+0x1e4>
 8006edc:	2305      	movs	r3, #5
 8006ede:	e00a      	b.n	8006ef6 <HAL_GPIO_Init+0x1fa>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	e008      	b.n	8006ef6 <HAL_GPIO_Init+0x1fa>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	e006      	b.n	8006ef6 <HAL_GPIO_Init+0x1fa>
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e004      	b.n	8006ef6 <HAL_GPIO_Init+0x1fa>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e002      	b.n	8006ef6 <HAL_GPIO_Init+0x1fa>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <HAL_GPIO_Init+0x1fa>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	f002 0203 	and.w	r2, r2, #3
 8006efc:	0092      	lsls	r2, r2, #2
 8006efe:	4093      	lsls	r3, r2
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f06:	4937      	ldr	r1, [pc, #220]	; (8006fe4 <HAL_GPIO_Init+0x2e8>)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	089b      	lsrs	r3, r3, #2
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4013      	ands	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f38:	4a30      	ldr	r2, [pc, #192]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006f3e:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f62:	4a26      	ldr	r2, [pc, #152]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f68:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4013      	ands	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f8c:	4a1b      	ldr	r2, [pc, #108]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fb6:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <HAL_GPIO_Init+0x300>)
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f47f ae9d 	bne.w	8006d0c <HAL_GPIO_Init+0x10>
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	48000400 	.word	0x48000400
 8006fec:	48000800 	.word	0x48000800
 8006ff0:	48000c00 	.word	0x48000c00
 8006ff4:	48001000 	.word	0x48001000
 8006ff8:	48001400 	.word	0x48001400
 8006ffc:	40010400 	.word	0x40010400

08007000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	887b      	ldrh	r3, [r7, #2]
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	e001      	b.n	8007022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
 800703c:	4613      	mov	r3, r2
 800703e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007040:	787b      	ldrb	r3, [r7, #1]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007046:	887a      	ldrh	r2, [r7, #2]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800704c:	e002      	b.n	8007054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800704e:	887a      	ldrh	r2, [r7, #2]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d141      	bne.n	80070f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800706e:	4b4b      	ldr	r3, [pc, #300]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707a:	d131      	bne.n	80070e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800707c:	4b47      	ldr	r3, [pc, #284]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007082:	4a46      	ldr	r2, [pc, #280]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800708c:	4b43      	ldr	r3, [pc, #268]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007094:	4a41      	ldr	r2, [pc, #260]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800709a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800709c:	4b40      	ldr	r3, [pc, #256]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2232      	movs	r2, #50	; 0x32
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	4a3f      	ldr	r2, [pc, #252]	; (80071a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070a8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ac:	0c9b      	lsrs	r3, r3, #18
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070b2:	e002      	b.n	80070ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070ba:	4b38      	ldr	r3, [pc, #224]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c6:	d102      	bne.n	80070ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f2      	bne.n	80070b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070ce:	4b33      	ldr	r3, [pc, #204]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070da:	d158      	bne.n	800718e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e057      	b.n	8007190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070e0:	4b2e      	ldr	r3, [pc, #184]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e6:	4a2d      	ldr	r2, [pc, #180]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070f0:	e04d      	b.n	800718e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f8:	d141      	bne.n	800717e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070fa:	4b28      	ldr	r3, [pc, #160]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007106:	d131      	bne.n	800716c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007108:	4b24      	ldr	r3, [pc, #144]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800710a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800710e:	4a23      	ldr	r2, [pc, #140]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007118:	4b20      	ldr	r3, [pc, #128]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007120:	4a1e      	ldr	r2, [pc, #120]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007126:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007128:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2232      	movs	r2, #50	; 0x32
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	0c9b      	lsrs	r3, r3, #18
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800713e:	e002      	b.n	8007146 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3b01      	subs	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007146:	4b15      	ldr	r3, [pc, #84]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007152:	d102      	bne.n	800715a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f2      	bne.n	8007140 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800715a:	4b10      	ldr	r3, [pc, #64]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007166:	d112      	bne.n	800718e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e011      	b.n	8007190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800716e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007172:	4a0a      	ldr	r2, [pc, #40]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800717c:	e007      	b.n	800718e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007186:	4a05      	ldr	r2, [pc, #20]	; (800719c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800718c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	40007000 	.word	0x40007000
 80071a0:	20000008 	.word	0x20000008
 80071a4:	431bde83 	.word	0x431bde83

080071a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80071a8:	b480      	push	{r7}
 80071aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	4a04      	ldr	r2, [pc, #16]	; (80071c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071b6:	6093      	str	r3, [r2, #8]
}
 80071b8:	bf00      	nop
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40007000 	.word	0x40007000

080071c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e308      	b.n	80077ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d075      	beq.n	80072d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e6:	4ba3      	ldr	r3, [pc, #652]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 030c 	and.w	r3, r3, #12
 80071ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071f0:	4ba0      	ldr	r3, [pc, #640]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d102      	bne.n	8007206 <HAL_RCC_OscConfig+0x3e>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d002      	beq.n	800720c <HAL_RCC_OscConfig+0x44>
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d10b      	bne.n	8007224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800720c:	4b99      	ldr	r3, [pc, #612]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d05b      	beq.n	80072d0 <HAL_RCC_OscConfig+0x108>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d157      	bne.n	80072d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e2e3      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722c:	d106      	bne.n	800723c <HAL_RCC_OscConfig+0x74>
 800722e:	4b91      	ldr	r3, [pc, #580]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a90      	ldr	r2, [pc, #576]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e01d      	b.n	8007278 <HAL_RCC_OscConfig+0xb0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007244:	d10c      	bne.n	8007260 <HAL_RCC_OscConfig+0x98>
 8007246:	4b8b      	ldr	r3, [pc, #556]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a8a      	ldr	r2, [pc, #552]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800724c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	4b88      	ldr	r3, [pc, #544]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a87      	ldr	r2, [pc, #540]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e00b      	b.n	8007278 <HAL_RCC_OscConfig+0xb0>
 8007260:	4b84      	ldr	r3, [pc, #528]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a83      	ldr	r2, [pc, #524]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	4b81      	ldr	r3, [pc, #516]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a80      	ldr	r2, [pc, #512]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d013      	beq.n	80072a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007280:	f7fd fa14 	bl	80046ac <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007288:	f7fd fa10 	bl	80046ac <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b64      	cmp	r3, #100	; 0x64
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e2a8      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800729a:	4b76      	ldr	r3, [pc, #472]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0f0      	beq.n	8007288 <HAL_RCC_OscConfig+0xc0>
 80072a6:	e014      	b.n	80072d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a8:	f7fd fa00 	bl	80046ac <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b0:	f7fd f9fc 	bl	80046ac <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b64      	cmp	r3, #100	; 0x64
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e294      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072c2:	4b6c      	ldr	r3, [pc, #432]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f0      	bne.n	80072b0 <HAL_RCC_OscConfig+0xe8>
 80072ce:	e000      	b.n	80072d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d075      	beq.n	80073ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072de:	4b65      	ldr	r3, [pc, #404]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 030c 	and.w	r3, r3, #12
 80072e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072e8:	4b62      	ldr	r3, [pc, #392]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d102      	bne.n	80072fe <HAL_RCC_OscConfig+0x136>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d002      	beq.n	8007304 <HAL_RCC_OscConfig+0x13c>
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b04      	cmp	r3, #4
 8007302:	d11f      	bne.n	8007344 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007304:	4b5b      	ldr	r3, [pc, #364]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_RCC_OscConfig+0x154>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e267      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731c:	4b55      	ldr	r3, [pc, #340]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	4952      	ldr	r1, [pc, #328]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800732c:	4313      	orrs	r3, r2
 800732e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007330:	4b51      	ldr	r3, [pc, #324]	; (8007478 <HAL_RCC_OscConfig+0x2b0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f7fd f96d 	bl	8004614 <HAL_InitTick>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d043      	beq.n	80073c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e253      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d023      	beq.n	8007394 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800734c:	4b49      	ldr	r3, [pc, #292]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a48      	ldr	r2, [pc, #288]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fd f9a8 	bl	80046ac <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007360:	f7fd f9a4 	bl	80046ac <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b02      	cmp	r3, #2
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e23c      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007372:	4b40      	ldr	r3, [pc, #256]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800737e:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	061b      	lsls	r3, r3, #24
 800738c:	4939      	ldr	r1, [pc, #228]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800738e:	4313      	orrs	r3, r2
 8007390:	604b      	str	r3, [r1, #4]
 8007392:	e01a      	b.n	80073ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007394:	4b37      	ldr	r3, [pc, #220]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a36      	ldr	r2, [pc, #216]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800739a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800739e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a0:	f7fd f984 	bl	80046ac <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073a8:	f7fd f980 	bl	80046ac <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e218      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073ba:	4b2e      	ldr	r3, [pc, #184]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x1e0>
 80073c6:	e000      	b.n	80073ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d03c      	beq.n	8007450 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01c      	beq.n	8007418 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073de:	4b25      	ldr	r3, [pc, #148]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073e4:	4a23      	ldr	r2, [pc, #140]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ee:	f7fd f95d 	bl	80046ac <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073f4:	e008      	b.n	8007408 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073f6:	f7fd f959 	bl	80046ac <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e1f1      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007408:	4b1a      	ldr	r3, [pc, #104]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800740a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0ef      	beq.n	80073f6 <HAL_RCC_OscConfig+0x22e>
 8007416:	e01b      	b.n	8007450 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007418:	4b16      	ldr	r3, [pc, #88]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 800741a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800741e:	4a15      	ldr	r2, [pc, #84]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007428:	f7fd f940 	bl	80046ac <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007430:	f7fd f93c 	bl	80046ac <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e1d4      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007442:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1ef      	bne.n	8007430 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80ab 	beq.w	80075b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800745e:	2300      	movs	r3, #0
 8007460:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007462:	4b04      	ldr	r3, [pc, #16]	; (8007474 <HAL_RCC_OscConfig+0x2ac>)
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_RCC_OscConfig+0x2b4>
 800746e:	2301      	movs	r3, #1
 8007470:	e005      	b.n	800747e <HAL_RCC_OscConfig+0x2b6>
 8007472:	bf00      	nop
 8007474:	40021000 	.word	0x40021000
 8007478:	2000000c 	.word	0x2000000c
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00d      	beq.n	800749e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007482:	4baf      	ldr	r3, [pc, #700]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007486:	4aae      	ldr	r2, [pc, #696]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800748c:	6593      	str	r3, [r2, #88]	; 0x58
 800748e:	4bac      	ldr	r3, [pc, #688]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800749a:	2301      	movs	r3, #1
 800749c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800749e:	4ba9      	ldr	r3, [pc, #676]	; (8007744 <HAL_RCC_OscConfig+0x57c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d118      	bne.n	80074dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074aa:	4ba6      	ldr	r3, [pc, #664]	; (8007744 <HAL_RCC_OscConfig+0x57c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4aa5      	ldr	r2, [pc, #660]	; (8007744 <HAL_RCC_OscConfig+0x57c>)
 80074b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074b6:	f7fd f8f9 	bl	80046ac <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074bc:	e008      	b.n	80074d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074be:	f7fd f8f5 	bl	80046ac <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e18d      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d0:	4b9c      	ldr	r3, [pc, #624]	; (8007744 <HAL_RCC_OscConfig+0x57c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0f0      	beq.n	80074be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d108      	bne.n	80074f6 <HAL_RCC_OscConfig+0x32e>
 80074e4:	4b96      	ldr	r3, [pc, #600]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	4a95      	ldr	r2, [pc, #596]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80074ec:	f043 0301 	orr.w	r3, r3, #1
 80074f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80074f4:	e024      	b.n	8007540 <HAL_RCC_OscConfig+0x378>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d110      	bne.n	8007520 <HAL_RCC_OscConfig+0x358>
 80074fe:	4b90      	ldr	r3, [pc, #576]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007504:	4a8e      	ldr	r2, [pc, #568]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007506:	f043 0304 	orr.w	r3, r3, #4
 800750a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800750e:	4b8c      	ldr	r3, [pc, #560]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	4a8a      	ldr	r2, [pc, #552]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800751e:	e00f      	b.n	8007540 <HAL_RCC_OscConfig+0x378>
 8007520:	4b87      	ldr	r3, [pc, #540]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007526:	4a86      	ldr	r2, [pc, #536]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007530:	4b83      	ldr	r3, [pc, #524]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	4a82      	ldr	r2, [pc, #520]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007538:	f023 0304 	bic.w	r3, r3, #4
 800753c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d016      	beq.n	8007576 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007548:	f7fd f8b0 	bl	80046ac <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800754e:	e00a      	b.n	8007566 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007550:	f7fd f8ac 	bl	80046ac <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f241 3288 	movw	r2, #5000	; 0x1388
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e142      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007566:	4b76      	ldr	r3, [pc, #472]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0ed      	beq.n	8007550 <HAL_RCC_OscConfig+0x388>
 8007574:	e015      	b.n	80075a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007576:	f7fd f899 	bl	80046ac <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800757c:	e00a      	b.n	8007594 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800757e:	f7fd f895 	bl	80046ac <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f241 3288 	movw	r2, #5000	; 0x1388
 800758c:	4293      	cmp	r3, r2
 800758e:	d901      	bls.n	8007594 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e12b      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007594:	4b6a      	ldr	r3, [pc, #424]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1ed      	bne.n	800757e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075a2:	7ffb      	ldrb	r3, [r7, #31]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d105      	bne.n	80075b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075a8:	4b65      	ldr	r3, [pc, #404]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ac:	4a64      	ldr	r2, [pc, #400]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80075ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d03c      	beq.n	800763a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01c      	beq.n	8007602 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075c8:	4b5d      	ldr	r3, [pc, #372]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80075ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075ce:	4a5c      	ldr	r2, [pc, #368]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80075d0:	f043 0301 	orr.w	r3, r3, #1
 80075d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d8:	f7fd f868 	bl	80046ac <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075e0:	f7fd f864 	bl	80046ac <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e0fc      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80075f2:	4b53      	ldr	r3, [pc, #332]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80075f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0ef      	beq.n	80075e0 <HAL_RCC_OscConfig+0x418>
 8007600:	e01b      	b.n	800763a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007602:	4b4f      	ldr	r3, [pc, #316]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007608:	4a4d      	ldr	r2, [pc, #308]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800760a:	f023 0301 	bic.w	r3, r3, #1
 800760e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7fd f84b 	bl	80046ac <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800761a:	f7fd f847 	bl	80046ac <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e0df      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800762c:	4b44      	ldr	r3, [pc, #272]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800762e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1ef      	bne.n	800761a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80d3 	beq.w	80077ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 030c 	and.w	r3, r3, #12
 800764c:	2b0c      	cmp	r3, #12
 800764e:	f000 808d 	beq.w	800776c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d15a      	bne.n	8007710 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765a:	4b39      	ldr	r3, [pc, #228]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a38      	ldr	r2, [pc, #224]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007666:	f7fd f821 	bl	80046ac <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800766e:	f7fd f81d 	bl	80046ac <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e0b5      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007680:	4b2f      	ldr	r3, [pc, #188]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f0      	bne.n	800766e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800768c:	4b2c      	ldr	r3, [pc, #176]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <HAL_RCC_OscConfig+0x580>)
 8007692:	4013      	ands	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6a11      	ldr	r1, [r2, #32]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800769c:	3a01      	subs	r2, #1
 800769e:	0112      	lsls	r2, r2, #4
 80076a0:	4311      	orrs	r1, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80076a6:	0212      	lsls	r2, r2, #8
 80076a8:	4311      	orrs	r1, r2
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076ae:	0852      	lsrs	r2, r2, #1
 80076b0:	3a01      	subs	r2, #1
 80076b2:	0552      	lsls	r2, r2, #21
 80076b4:	4311      	orrs	r1, r2
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80076ba:	0852      	lsrs	r2, r2, #1
 80076bc:	3a01      	subs	r2, #1
 80076be:	0652      	lsls	r2, r2, #25
 80076c0:	4311      	orrs	r1, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076c6:	06d2      	lsls	r2, r2, #27
 80076c8:	430a      	orrs	r2, r1
 80076ca:	491d      	ldr	r1, [pc, #116]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d0:	4b1b      	ldr	r3, [pc, #108]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1a      	ldr	r2, [pc, #104]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80076d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076dc:	4b18      	ldr	r3, [pc, #96]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a17      	ldr	r2, [pc, #92]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 80076e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fc ffe0 	bl	80046ac <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f0:	f7fc ffdc 	bl	80046ac <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e074      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0x528>
 800770e:	e06c      	b.n	80077ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800771a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	4a07      	ldr	r2, [pc, #28]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4a04      	ldr	r2, [pc, #16]	; (8007740 <HAL_RCC_OscConfig+0x578>)
 800772e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fc ffb8 	bl	80046ac <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800773e:	e00e      	b.n	800775e <HAL_RCC_OscConfig+0x596>
 8007740:	40021000 	.word	0x40021000
 8007744:	40007000 	.word	0x40007000
 8007748:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800774c:	f7fc ffae 	bl	80046ac <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e046      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800775e:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <HAL_RCC_OscConfig+0x62c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0x584>
 800776a:	e03e      	b.n	80077ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e039      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007778:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <HAL_RCC_OscConfig+0x62c>)
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f003 0203 	and.w	r2, r3, #3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	429a      	cmp	r2, r3
 800778a:	d12c      	bne.n	80077e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	3b01      	subs	r3, #1
 8007798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800779a:	429a      	cmp	r2, r3
 800779c:	d123      	bne.n	80077e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d11b      	bne.n	80077e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d113      	bne.n	80077e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	3b01      	subs	r3, #1
 80077cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d109      	bne.n	80077e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077dc:	085b      	lsrs	r3, r3, #1
 80077de:	3b01      	subs	r3, #1
 80077e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d001      	beq.n	80077ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40021000 	.word	0x40021000

080077f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e11e      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007810:	4b91      	ldr	r3, [pc, #580]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d910      	bls.n	8007840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800781e:	4b8e      	ldr	r3, [pc, #568]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f023 020f 	bic.w	r2, r3, #15
 8007826:	498c      	ldr	r1, [pc, #560]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	4313      	orrs	r3, r2
 800782c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800782e:	4b8a      	ldr	r3, [pc, #552]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d001      	beq.n	8007840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e106      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d073      	beq.n	8007934 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b03      	cmp	r3, #3
 8007852:	d129      	bne.n	80078a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007854:	4b81      	ldr	r3, [pc, #516]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e0f4      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007864:	f000 f99e 	bl	8007ba4 <RCC_GetSysClockFreqFromPLLSource>
 8007868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4a7c      	ldr	r2, [pc, #496]	; (8007a60 <HAL_RCC_ClockConfig+0x268>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d93f      	bls.n	80078f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007872:	4b7a      	ldr	r3, [pc, #488]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007886:	2b00      	cmp	r3, #0
 8007888:	d033      	beq.n	80078f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800788e:	2b00      	cmp	r3, #0
 8007890:	d12f      	bne.n	80078f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007892:	4b72      	ldr	r3, [pc, #456]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800789a:	4a70      	ldr	r2, [pc, #448]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e024      	b.n	80078f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d107      	bne.n	80078c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078b0:	4b6a      	ldr	r3, [pc, #424]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0c6      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078c0:	4b66      	ldr	r3, [pc, #408]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0be      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078d0:	f000 f8ce 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 80078d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	4a61      	ldr	r2, [pc, #388]	; (8007a60 <HAL_RCC_ClockConfig+0x268>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d909      	bls.n	80078f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078de:	4b5f      	ldr	r3, [pc, #380]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078e6:	4a5d      	ldr	r2, [pc, #372]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80078e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078ee:	2380      	movs	r3, #128	; 0x80
 80078f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078f2:	4b5a      	ldr	r3, [pc, #360]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f023 0203 	bic.w	r2, r3, #3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4957      	ldr	r1, [pc, #348]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007900:	4313      	orrs	r3, r2
 8007902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007904:	f7fc fed2 	bl	80046ac <HAL_GetTick>
 8007908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800790a:	e00a      	b.n	8007922 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800790c:	f7fc fece 	bl	80046ac <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	f241 3288 	movw	r2, #5000	; 0x1388
 800791a:	4293      	cmp	r3, r2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e095      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007922:	4b4e      	ldr	r3, [pc, #312]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 020c 	and.w	r2, r3, #12
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	429a      	cmp	r2, r3
 8007932:	d1eb      	bne.n	800790c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d023      	beq.n	8007988 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800794c:	4b43      	ldr	r3, [pc, #268]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	4a42      	ldr	r2, [pc, #264]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007956:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0308 	and.w	r3, r3, #8
 8007960:	2b00      	cmp	r3, #0
 8007962:	d007      	beq.n	8007974 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007964:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800796c:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 800796e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007974:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	4936      	ldr	r1, [pc, #216]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007982:	4313      	orrs	r3, r2
 8007984:	608b      	str	r3, [r1, #8]
 8007986:	e008      	b.n	800799a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d105      	bne.n	800799a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800798e:	4b33      	ldr	r3, [pc, #204]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	4a32      	ldr	r2, [pc, #200]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007998:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800799a:	4b2f      	ldr	r3, [pc, #188]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d21d      	bcs.n	80079e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a8:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f023 020f 	bic.w	r2, r3, #15
 80079b0:	4929      	ldr	r1, [pc, #164]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80079b8:	f7fc fe78 	bl	80046ac <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c0:	f7fc fe74 	bl	80046ac <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e03b      	b.n	8007a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <HAL_RCC_ClockConfig+0x260>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d1ed      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079f0:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4917      	ldr	r1, [pc, #92]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a0e:	4b13      	ldr	r3, [pc, #76]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	490f      	ldr	r1, [pc, #60]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a22:	f000 f825 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 8007a26:	4601      	mov	r1, r0
 8007a28:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <HAL_RCC_ClockConfig+0x264>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	091b      	lsrs	r3, r3, #4
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <HAL_RCC_ClockConfig+0x26c>)
 8007a34:	5cd3      	ldrb	r3, [r2, r3]
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <HAL_RCC_ClockConfig+0x270>)
 8007a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a42:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <HAL_RCC_ClockConfig+0x274>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fc fde4 	bl	8004614 <HAL_InitTick>
 8007a4c:	4603      	mov	r3, r0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40022000 	.word	0x40022000
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	04c4b400 	.word	0x04c4b400
 8007a64:	0800aee4 	.word	0x0800aee4
 8007a68:	20000008 	.word	0x20000008
 8007a6c:	2000000c 	.word	0x2000000c

08007a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007a76:	4b2c      	ldr	r3, [pc, #176]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d102      	bne.n	8007a88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a82:	4b2a      	ldr	r3, [pc, #168]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	e047      	b.n	8007b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007a88:	4b27      	ldr	r3, [pc, #156]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 030c 	and.w	r3, r3, #12
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d102      	bne.n	8007a9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a94:	4b26      	ldr	r3, [pc, #152]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	e03e      	b.n	8007b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007a9a:	4b23      	ldr	r3, [pc, #140]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 030c 	and.w	r3, r3, #12
 8007aa2:	2b0c      	cmp	r3, #12
 8007aa4:	d136      	bne.n	8007b14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aa6:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ab0:	4b1d      	ldr	r3, [pc, #116]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	091b      	lsrs	r3, r3, #4
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	3301      	adds	r3, #1
 8007abc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d10c      	bne.n	8007ade <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ac4:	4a1a      	ldr	r2, [pc, #104]	; (8007b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	4a16      	ldr	r2, [pc, #88]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ace:	68d2      	ldr	r2, [r2, #12]
 8007ad0:	0a12      	lsrs	r2, r2, #8
 8007ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
 8007ada:	617b      	str	r3, [r7, #20]
      break;
 8007adc:	e00c      	b.n	8007af8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ade:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ae8:	68d2      	ldr	r2, [r2, #12]
 8007aea:	0a12      	lsrs	r2, r2, #8
 8007aec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007af0:	fb02 f303 	mul.w	r3, r2, r3
 8007af4:	617b      	str	r3, [r7, #20]
      break;
 8007af6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007af8:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	0e5b      	lsrs	r3, r3, #25
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	3301      	adds	r3, #1
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	e001      	b.n	8007b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b18:	693b      	ldr	r3, [r7, #16]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	00f42400 	.word	0x00f42400
 8007b30:	007a1200 	.word	0x007a1200

08007b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000008 	.word	0x20000008

08007b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007b50:	f7ff fff0 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b54:	4601      	mov	r1, r0
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	4a04      	ldr	r2, [pc, #16]	; (8007b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007b62:	5cd3      	ldrb	r3, [r2, r3]
 8007b64:	f003 031f 	and.w	r3, r3, #31
 8007b68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40021000 	.word	0x40021000
 8007b74:	0800aef4 	.word	0x0800aef4

08007b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007b7c:	f7ff ffda 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b80:	4601      	mov	r1, r0
 8007b82:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	0adb      	lsrs	r3, r3, #11
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4a04      	ldr	r2, [pc, #16]	; (8007ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007b8e:	5cd3      	ldrb	r3, [r2, r3]
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40021000 	.word	0x40021000
 8007ba0:	0800aef4 	.word	0x0800aef4

08007ba4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007baa:	4b1e      	ldr	r3, [pc, #120]	; (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007bb4:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	091b      	lsrs	r3, r3, #4
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d10c      	bne.n	8007be2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd0:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bd2:	68d2      	ldr	r2, [r2, #12]
 8007bd4:	0a12      	lsrs	r2, r2, #8
 8007bd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	617b      	str	r3, [r7, #20]
    break;
 8007be0:	e00c      	b.n	8007bfc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007be2:	4a12      	ldr	r2, [pc, #72]	; (8007c2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bea:	4a0e      	ldr	r2, [pc, #56]	; (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bec:	68d2      	ldr	r2, [r2, #12]
 8007bee:	0a12      	lsrs	r2, r2, #8
 8007bf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bf4:	fb02 f303 	mul.w	r3, r2, r3
 8007bf8:	617b      	str	r3, [r7, #20]
    break;
 8007bfa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	0e5b      	lsrs	r3, r3, #25
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	3301      	adds	r3, #1
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007c16:	687b      	ldr	r3, [r7, #4]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	40021000 	.word	0x40021000
 8007c28:	007a1200 	.word	0x007a1200
 8007c2c:	00f42400 	.word	0x00f42400

08007c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c38:	2300      	movs	r3, #0
 8007c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8098 	beq.w	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c52:	4b43      	ldr	r3, [pc, #268]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10d      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c5e:	4b40      	ldr	r3, [pc, #256]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c62:	4a3f      	ldr	r2, [pc, #252]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c68:	6593      	str	r3, [r2, #88]	; 0x58
 8007c6a:	4b3d      	ldr	r3, [pc, #244]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c72:	60bb      	str	r3, [r7, #8]
 8007c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c76:	2301      	movs	r3, #1
 8007c78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c7a:	4b3a      	ldr	r3, [pc, #232]	; (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a39      	ldr	r2, [pc, #228]	; (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c86:	f7fc fd11 	bl	80046ac <HAL_GetTick>
 8007c8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c8c:	e009      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8e:	f7fc fd0d 	bl	80046ac <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d902      	bls.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	74fb      	strb	r3, [r7, #19]
        break;
 8007ca0:	e005      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ca2:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0ef      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007cae:	7cfb      	ldrb	r3, [r7, #19]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d159      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007cb4:	4b2a      	ldr	r3, [pc, #168]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01e      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d019      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cdc:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cec:	4b1c      	ldr	r3, [pc, #112]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cfc:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d016      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0e:	f7fc fccd 	bl	80046ac <HAL_GetTick>
 8007d12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d14:	e00b      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d16:	f7fc fcc9 	bl	80046ac <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d902      	bls.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	74fb      	strb	r3, [r7, #19]
            break;
 8007d2c:	e006      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0ec      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d3c:	7cfb      	ldrb	r3, [r7, #19]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10b      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	4903      	ldr	r1, [pc, #12]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d58:	e008      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d5a:	7cfb      	ldrb	r3, [r7, #19]
 8007d5c:	74bb      	strb	r3, [r7, #18]
 8007d5e:	e005      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d60:	40021000 	.word	0x40021000
 8007d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	7cfb      	ldrb	r3, [r7, #19]
 8007d6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d6c:	7c7b      	ldrb	r3, [r7, #17]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d105      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d72:	4ba6      	ldr	r3, [pc, #664]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	4aa5      	ldr	r2, [pc, #660]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d8a:	4ba0      	ldr	r3, [pc, #640]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d90:	f023 0203 	bic.w	r2, r3, #3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	499c      	ldr	r1, [pc, #624]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dac:	4b97      	ldr	r3, [pc, #604]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db2:	f023 020c 	bic.w	r2, r3, #12
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	4994      	ldr	r1, [pc, #592]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dce:	4b8f      	ldr	r3, [pc, #572]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	498b      	ldr	r1, [pc, #556]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007df0:	4b86      	ldr	r3, [pc, #536]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	4983      	ldr	r1, [pc, #524]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e12:	4b7e      	ldr	r3, [pc, #504]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	497a      	ldr	r1, [pc, #488]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e34:	4b75      	ldr	r3, [pc, #468]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	4972      	ldr	r1, [pc, #456]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e56:	4b6d      	ldr	r3, [pc, #436]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	4969      	ldr	r1, [pc, #420]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e78:	4b64      	ldr	r3, [pc, #400]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	4961      	ldr	r1, [pc, #388]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e9a:	4b5c      	ldr	r3, [pc, #368]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	4958      	ldr	r1, [pc, #352]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d015      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ebc:	4b53      	ldr	r3, [pc, #332]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	4950      	ldr	r1, [pc, #320]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d105      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007edc:	4b4b      	ldr	r3, [pc, #300]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4a4a      	ldr	r2, [pc, #296]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ee6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d015      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ef4:	4b45      	ldr	r3, [pc, #276]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	4942      	ldr	r1, [pc, #264]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f12:	d105      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f14:	4b3d      	ldr	r3, [pc, #244]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	4a3c      	ldr	r2, [pc, #240]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d015      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f2c:	4b37      	ldr	r3, [pc, #220]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	4934      	ldr	r1, [pc, #208]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f4a:	d105      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f4c:	4b2f      	ldr	r3, [pc, #188]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4a2e      	ldr	r2, [pc, #184]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d015      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f64:	4b29      	ldr	r3, [pc, #164]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	4926      	ldr	r1, [pc, #152]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f82:	d105      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f84:	4b21      	ldr	r3, [pc, #132]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4a20      	ldr	r2, [pc, #128]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d015      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	4918      	ldr	r1, [pc, #96]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fba:	d105      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fbc:	4b13      	ldr	r3, [pc, #76]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4a12      	ldr	r2, [pc, #72]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d015      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	490a      	ldr	r1, [pc, #40]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff2:	d105      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4a04      	ldr	r2, [pc, #16]	; (800800c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ffe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008000:	7cbb      	ldrb	r3, [r7, #18]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40021000 	.word	0x40021000

08008010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e049      	b.n	80080b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fc f8f8 	bl	800422c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	4610      	mov	r0, r2
 8008050:	f000 fe7a 	bl	8008d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d001      	beq.n	80080d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e042      	b.n	800815e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2202      	movs	r2, #2
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a21      	ldr	r2, [pc, #132]	; (800816c <HAL_TIM_Base_Start+0xac>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d018      	beq.n	800811c <HAL_TIM_Base_Start+0x5c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f2:	d013      	beq.n	800811c <HAL_TIM_Base_Start+0x5c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1d      	ldr	r2, [pc, #116]	; (8008170 <HAL_TIM_Base_Start+0xb0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00e      	beq.n	800811c <HAL_TIM_Base_Start+0x5c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1c      	ldr	r2, [pc, #112]	; (8008174 <HAL_TIM_Base_Start+0xb4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <HAL_TIM_Base_Start+0x5c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a1a      	ldr	r2, [pc, #104]	; (8008178 <HAL_TIM_Base_Start+0xb8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <HAL_TIM_Base_Start+0x5c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a19      	ldr	r2, [pc, #100]	; (800817c <HAL_TIM_Base_Start+0xbc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d115      	bne.n	8008148 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689a      	ldr	r2, [r3, #8]
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <HAL_TIM_Base_Start+0xc0>)
 8008124:	4013      	ands	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b06      	cmp	r3, #6
 800812c:	d015      	beq.n	800815a <HAL_TIM_Base_Start+0x9a>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008134:	d011      	beq.n	800815a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0201 	orr.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008146:	e008      	b.n	800815a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e000      	b.n	800815c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40012c00 	.word	0x40012c00
 8008170:	40000400 	.word	0x40000400
 8008174:	40000800 	.word	0x40000800
 8008178:	40013400 	.word	0x40013400
 800817c:	40014000 	.word	0x40014000
 8008180:	00010007 	.word	0x00010007

08008184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e049      	b.n	800822a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f841 	bl	8008232 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f000 fdc0 	bl	8008d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <HAL_TIM_PWM_Start_IT+0x24>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e03c      	b.n	80082e6 <HAL_TIM_PWM_Start_IT+0x9e>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b04      	cmp	r3, #4
 8008270:	d109      	bne.n	8008286 <HAL_TIM_PWM_Start_IT+0x3e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b01      	cmp	r3, #1
 800827c:	bf14      	ite	ne
 800827e:	2301      	movne	r3, #1
 8008280:	2300      	moveq	r3, #0
 8008282:	b2db      	uxtb	r3, r3
 8008284:	e02f      	b.n	80082e6 <HAL_TIM_PWM_Start_IT+0x9e>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d109      	bne.n	80082a0 <HAL_TIM_PWM_Start_IT+0x58>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	bf14      	ite	ne
 8008298:	2301      	movne	r3, #1
 800829a:	2300      	moveq	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e022      	b.n	80082e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b0c      	cmp	r3, #12
 80082a4:	d109      	bne.n	80082ba <HAL_TIM_PWM_Start_IT+0x72>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	bf14      	ite	ne
 80082b2:	2301      	movne	r3, #1
 80082b4:	2300      	moveq	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	e015      	b.n	80082e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d109      	bne.n	80082d4 <HAL_TIM_PWM_Start_IT+0x8c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	bf14      	ite	ne
 80082cc:	2301      	movne	r3, #1
 80082ce:	2300      	moveq	r3, #0
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	e008      	b.n	80082e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	bf14      	ite	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	2300      	moveq	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e0dd      	b.n	80084aa <HAL_TIM_PWM_Start_IT+0x262>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <HAL_TIM_PWM_Start_IT+0xb6>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082fc:	e023      	b.n	8008346 <HAL_TIM_PWM_Start_IT+0xfe>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b04      	cmp	r3, #4
 8008302:	d104      	bne.n	800830e <HAL_TIM_PWM_Start_IT+0xc6>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800830c:	e01b      	b.n	8008346 <HAL_TIM_PWM_Start_IT+0xfe>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b08      	cmp	r3, #8
 8008312:	d104      	bne.n	800831e <HAL_TIM_PWM_Start_IT+0xd6>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800831c:	e013      	b.n	8008346 <HAL_TIM_PWM_Start_IT+0xfe>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b0c      	cmp	r3, #12
 8008322:	d104      	bne.n	800832e <HAL_TIM_PWM_Start_IT+0xe6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800832c:	e00b      	b.n	8008346 <HAL_TIM_PWM_Start_IT+0xfe>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b10      	cmp	r3, #16
 8008332:	d104      	bne.n	800833e <HAL_TIM_PWM_Start_IT+0xf6>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800833c:	e003      	b.n	8008346 <HAL_TIM_PWM_Start_IT+0xfe>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b0c      	cmp	r3, #12
 800834a:	d841      	bhi.n	80083d0 <HAL_TIM_PWM_Start_IT+0x188>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <HAL_TIM_PWM_Start_IT+0x10c>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008389 	.word	0x08008389
 8008358:	080083d1 	.word	0x080083d1
 800835c:	080083d1 	.word	0x080083d1
 8008360:	080083d1 	.word	0x080083d1
 8008364:	0800839b 	.word	0x0800839b
 8008368:	080083d1 	.word	0x080083d1
 800836c:	080083d1 	.word	0x080083d1
 8008370:	080083d1 	.word	0x080083d1
 8008374:	080083ad 	.word	0x080083ad
 8008378:	080083d1 	.word	0x080083d1
 800837c:	080083d1 	.word	0x080083d1
 8008380:	080083d1 	.word	0x080083d1
 8008384:	080083bf 	.word	0x080083bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0202 	orr.w	r2, r2, #2
 8008396:	60da      	str	r2, [r3, #12]
      break;
 8008398:	e01b      	b.n	80083d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0204 	orr.w	r2, r2, #4
 80083a8:	60da      	str	r2, [r3, #12]
      break;
 80083aa:	e012      	b.n	80083d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0208 	orr.w	r2, r2, #8
 80083ba:	60da      	str	r2, [r3, #12]
      break;
 80083bc:	e009      	b.n	80083d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0210 	orr.w	r2, r2, #16
 80083cc:	60da      	str	r2, [r3, #12]
      break;
 80083ce:	e000      	b.n	80083d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80083d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2201      	movs	r2, #1
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 f8d6 	bl	800958c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a33      	ldr	r2, [pc, #204]	; (80084b4 <HAL_TIM_PWM_Start_IT+0x26c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <HAL_TIM_PWM_Start_IT+0x1ca>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a32      	ldr	r2, [pc, #200]	; (80084b8 <HAL_TIM_PWM_Start_IT+0x270>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00e      	beq.n	8008412 <HAL_TIM_PWM_Start_IT+0x1ca>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a30      	ldr	r2, [pc, #192]	; (80084bc <HAL_TIM_PWM_Start_IT+0x274>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d009      	beq.n	8008412 <HAL_TIM_PWM_Start_IT+0x1ca>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a2f      	ldr	r2, [pc, #188]	; (80084c0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d004      	beq.n	8008412 <HAL_TIM_PWM_Start_IT+0x1ca>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a2d      	ldr	r2, [pc, #180]	; (80084c4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d101      	bne.n	8008416 <HAL_TIM_PWM_Start_IT+0x1ce>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800842a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a20      	ldr	r2, [pc, #128]	; (80084b4 <HAL_TIM_PWM_Start_IT+0x26c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d018      	beq.n	8008468 <HAL_TIM_PWM_Start_IT+0x220>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843e:	d013      	beq.n	8008468 <HAL_TIM_PWM_Start_IT+0x220>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a20      	ldr	r2, [pc, #128]	; (80084c8 <HAL_TIM_PWM_Start_IT+0x280>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00e      	beq.n	8008468 <HAL_TIM_PWM_Start_IT+0x220>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a1f      	ldr	r2, [pc, #124]	; (80084cc <HAL_TIM_PWM_Start_IT+0x284>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d009      	beq.n	8008468 <HAL_TIM_PWM_Start_IT+0x220>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <HAL_TIM_PWM_Start_IT+0x270>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <HAL_TIM_PWM_Start_IT+0x220>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <HAL_TIM_PWM_Start_IT+0x274>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d115      	bne.n	8008494 <HAL_TIM_PWM_Start_IT+0x24c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	4b18      	ldr	r3, [pc, #96]	; (80084d0 <HAL_TIM_PWM_Start_IT+0x288>)
 8008470:	4013      	ands	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b06      	cmp	r3, #6
 8008478:	d015      	beq.n	80084a6 <HAL_TIM_PWM_Start_IT+0x25e>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008480:	d011      	beq.n	80084a6 <HAL_TIM_PWM_Start_IT+0x25e>
    {
      __HAL_TIM_ENABLE(htim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0201 	orr.w	r2, r2, #1
 8008490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008492:	e008      	b.n	80084a6 <HAL_TIM_PWM_Start_IT+0x25e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0201 	orr.w	r2, r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e000      	b.n	80084a8 <HAL_TIM_PWM_Start_IT+0x260>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40012c00 	.word	0x40012c00
 80084b8:	40013400 	.word	0x40013400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40000800 	.word	0x40000800
 80084d0:	00010007 	.word	0x00010007

080084d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e097      	b.n	8008618 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fb fe51 	bl	80041a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008518:	f023 0307 	bic.w	r3, r3, #7
 800851c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3304      	adds	r3, #4
 8008526:	4619      	mov	r1, r3
 8008528:	4610      	mov	r0, r2
 800852a:	f000 fc0d 	bl	8008d48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	4313      	orrs	r3, r2
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008574:	f023 030c 	bic.w	r3, r3, #12
 8008578:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	4313      	orrs	r3, r2
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	011a      	lsls	r2, r3, #4
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	031b      	lsls	r3, r3, #12
 80085a4:	4313      	orrs	r3, r2
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80085ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	4313      	orrs	r3, r2
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b02      	cmp	r3, #2
 8008634:	d122      	bne.n	800867c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b02      	cmp	r3, #2
 8008642:	d11b      	bne.n	800867c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0202 	mvn.w	r2, #2
 800864c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fb52 	bl	8008d0c <HAL_TIM_IC_CaptureCallback>
 8008668:	e005      	b.n	8008676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fb44 	bl	8008cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fb55 	bl	8008d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0304 	and.w	r3, r3, #4
 8008686:	2b04      	cmp	r3, #4
 8008688:	d122      	bne.n	80086d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b04      	cmp	r3, #4
 8008696:	d11b      	bne.n	80086d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0204 	mvn.w	r2, #4
 80086a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2202      	movs	r2, #2
 80086a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fb28 	bl	8008d0c <HAL_TIM_IC_CaptureCallback>
 80086bc:	e005      	b.n	80086ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fb1a 	bl	8008cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fb2b 	bl	8008d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	2b08      	cmp	r3, #8
 80086dc:	d122      	bne.n	8008724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0308 	and.w	r3, r3, #8
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d11b      	bne.n	8008724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0208 	mvn.w	r2, #8
 80086f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2204      	movs	r2, #4
 80086fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fafe 	bl	8008d0c <HAL_TIM_IC_CaptureCallback>
 8008710:	e005      	b.n	800871e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 faf0 	bl	8008cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fb01 	bl	8008d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b10      	cmp	r3, #16
 8008730:	d122      	bne.n	8008778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	2b10      	cmp	r3, #16
 800873e:	d11b      	bne.n	8008778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 0210 	mvn.w	r2, #16
 8008748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2208      	movs	r2, #8
 800874e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fad4 	bl	8008d0c <HAL_TIM_IC_CaptureCallback>
 8008764:	e005      	b.n	8008772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fac6 	bl	8008cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fad7 	bl	8008d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b01      	cmp	r3, #1
 8008784:	d10e      	bne.n	80087a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b01      	cmp	r3, #1
 8008792:	d107      	bne.n	80087a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0201 	mvn.w	r2, #1
 800879c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 faa0 	bl	8008ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d10e      	bne.n	80087d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087bc:	2b80      	cmp	r3, #128	; 0x80
 80087be:	d107      	bne.n	80087d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 f830 	bl	8009830 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087de:	d10e      	bne.n	80087fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d107      	bne.n	80087fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f823 	bl	8009844 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d10e      	bne.n	800882a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d107      	bne.n	800882a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa85 	bl	8008d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f003 0320 	and.w	r3, r3, #32
 8008834:	2b20      	cmp	r3, #32
 8008836:	d10e      	bne.n	8008856 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b20      	cmp	r3, #32
 8008844:	d107      	bne.n	8008856 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f06f 0220 	mvn.w	r2, #32
 800884e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 ffe3 	bl	800981c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008864:	d10f      	bne.n	8008886 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008874:	d107      	bne.n	8008886 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800887e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 ffe9 	bl	8009858 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008894:	d10f      	bne.n	80088b6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088a4:	d107      	bne.n	80088b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80088ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 ffdb 	bl	800986c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088c4:	d10f      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088d4:	d107      	bne.n	80088e6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80088de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 ffcd 	bl	8009880 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088f4:	d10f      	bne.n	8008916 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008904:	d107      	bne.n	8008916 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800890e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 ffbf 	bl	8009894 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008936:	2302      	movs	r3, #2
 8008938:	e0fd      	b.n	8008b36 <HAL_TIM_PWM_ConfigChannel+0x216>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b14      	cmp	r3, #20
 8008946:	f200 80f0 	bhi.w	8008b2a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	080089a5 	.word	0x080089a5
 8008954:	08008b2b 	.word	0x08008b2b
 8008958:	08008b2b 	.word	0x08008b2b
 800895c:	08008b2b 	.word	0x08008b2b
 8008960:	080089e5 	.word	0x080089e5
 8008964:	08008b2b 	.word	0x08008b2b
 8008968:	08008b2b 	.word	0x08008b2b
 800896c:	08008b2b 	.word	0x08008b2b
 8008970:	08008a27 	.word	0x08008a27
 8008974:	08008b2b 	.word	0x08008b2b
 8008978:	08008b2b 	.word	0x08008b2b
 800897c:	08008b2b 	.word	0x08008b2b
 8008980:	08008a67 	.word	0x08008a67
 8008984:	08008b2b 	.word	0x08008b2b
 8008988:	08008b2b 	.word	0x08008b2b
 800898c:	08008b2b 	.word	0x08008b2b
 8008990:	08008aa9 	.word	0x08008aa9
 8008994:	08008b2b 	.word	0x08008b2b
 8008998:	08008b2b 	.word	0x08008b2b
 800899c:	08008b2b 	.word	0x08008b2b
 80089a0:	08008ae9 	.word	0x08008ae9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68b9      	ldr	r1, [r7, #8]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fa5c 	bl	8008e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0208 	orr.w	r2, r2, #8
 80089be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0204 	bic.w	r2, r2, #4
 80089ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6999      	ldr	r1, [r3, #24]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	619a      	str	r2, [r3, #24]
      break;
 80089e2:	e0a3      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 facc 	bl	8008f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6999      	ldr	r1, [r3, #24]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	021a      	lsls	r2, r3, #8
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	619a      	str	r2, [r3, #24]
      break;
 8008a24:	e082      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68b9      	ldr	r1, [r7, #8]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fb35 	bl	800909c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69da      	ldr	r2, [r3, #28]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0208 	orr.w	r2, r2, #8
 8008a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f022 0204 	bic.w	r2, r2, #4
 8008a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69d9      	ldr	r1, [r3, #28]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	691a      	ldr	r2, [r3, #16]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	61da      	str	r2, [r3, #28]
      break;
 8008a64:	e062      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fb9d 	bl	80091ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69da      	ldr	r2, [r3, #28]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69d9      	ldr	r1, [r3, #28]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	021a      	lsls	r2, r3, #8
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	61da      	str	r2, [r3, #28]
      break;
 8008aa6:	e041      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 fc06 	bl	80092c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0208 	orr.w	r2, r2, #8
 8008ac2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0204 	bic.w	r2, r2, #4
 8008ad2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008ae6:	e021      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fc4a 	bl	8009388 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	021a      	lsls	r2, r3, #8
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008b2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop

08008b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <HAL_TIM_ConfigClockSource+0x18>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e0b9      	b.n	8008ccc <HAL_TIM_ConfigClockSource+0x18c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b70      	cmp	r3, #112	; 0x70
 8008b92:	d02e      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0xb2>
 8008b94:	2b70      	cmp	r3, #112	; 0x70
 8008b96:	d812      	bhi.n	8008bbe <HAL_TIM_ConfigClockSource+0x7e>
 8008b98:	2b30      	cmp	r3, #48	; 0x30
 8008b9a:	f000 8084 	beq.w	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008b9e:	2b30      	cmp	r3, #48	; 0x30
 8008ba0:	d806      	bhi.n	8008bb0 <HAL_TIM_ConfigClockSource+0x70>
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d07f      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	d07d      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d07b      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008bae:	e084      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008bb0:	2b50      	cmp	r3, #80	; 0x50
 8008bb2:	d048      	beq.n	8008c46 <HAL_TIM_ConfigClockSource+0x106>
 8008bb4:	2b60      	cmp	r3, #96	; 0x60
 8008bb6:	d056      	beq.n	8008c66 <HAL_TIM_ConfigClockSource+0x126>
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d064      	beq.n	8008c86 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8008bbc:	e07d      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008bbe:	4a45      	ldr	r2, [pc, #276]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x194>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d070      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008bc4:	4a43      	ldr	r2, [pc, #268]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x194>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d809      	bhi.n	8008bde <HAL_TIM_ConfigClockSource+0x9e>
 8008bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bce:	d027      	beq.n	8008c20 <HAL_TIM_ConfigClockSource+0xe0>
 8008bd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bd4:	d067      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bda:	d06d      	beq.n	8008cb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008bdc:	e06d      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008bde:	4a3e      	ldr	r2, [pc, #248]	; (8008cd8 <HAL_TIM_ConfigClockSource+0x198>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d060      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008be4:	4a3d      	ldr	r2, [pc, #244]	; (8008cdc <HAL_TIM_ConfigClockSource+0x19c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d05d      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
 8008bea:	4a3d      	ldr	r2, [pc, #244]	; (8008ce0 <HAL_TIM_ConfigClockSource+0x1a0>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d05a      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8008bf0:	e063      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6899      	ldr	r1, [r3, #8]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f000 fca3 	bl	800954c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	609a      	str	r2, [r3, #8]
      break;
 8008c1e:	e04c      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6818      	ldr	r0, [r3, #0]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	6899      	ldr	r1, [r3, #8]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f000 fc8c 	bl	800954c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c42:	609a      	str	r2, [r3, #8]
      break;
 8008c44:	e039      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6818      	ldr	r0, [r3, #0]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	6859      	ldr	r1, [r3, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f000 fbfe 	bl	8009454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2150      	movs	r1, #80	; 0x50
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fc57 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 8008c64:	e029      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	6859      	ldr	r1, [r3, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	461a      	mov	r2, r3
 8008c74:	f000 fc1d 	bl	80094b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2160      	movs	r1, #96	; 0x60
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fc47 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 8008c84:	e019      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	6859      	ldr	r1, [r3, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f000 fbde 	bl	8009454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2140      	movs	r1, #64	; 0x40
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fc37 	bl	8009512 <TIM_ITRx_SetConfig>
      break;
 8008ca4:	e009      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f000 fc2e 	bl	8009512 <TIM_ITRx_SetConfig>
        break;
 8008cb6:	e000      	b.n	8008cba <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8008cb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	00100020 	.word	0x00100020
 8008cd8:	00100040 	.word	0x00100040
 8008cdc:	00100070 	.word	0x00100070
 8008ce0:	00100030 	.word	0x00100030

08008ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a3c      	ldr	r2, [pc, #240]	; (8008e4c <TIM_Base_SetConfig+0x104>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00f      	beq.n	8008d80 <TIM_Base_SetConfig+0x38>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d66:	d00b      	beq.n	8008d80 <TIM_Base_SetConfig+0x38>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a39      	ldr	r2, [pc, #228]	; (8008e50 <TIM_Base_SetConfig+0x108>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <TIM_Base_SetConfig+0x38>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a38      	ldr	r2, [pc, #224]	; (8008e54 <TIM_Base_SetConfig+0x10c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0x38>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a37      	ldr	r2, [pc, #220]	; (8008e58 <TIM_Base_SetConfig+0x110>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d108      	bne.n	8008d92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a2d      	ldr	r2, [pc, #180]	; (8008e4c <TIM_Base_SetConfig+0x104>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01b      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da0:	d017      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a2a      	ldr	r2, [pc, #168]	; (8008e50 <TIM_Base_SetConfig+0x108>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d013      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a29      	ldr	r2, [pc, #164]	; (8008e54 <TIM_Base_SetConfig+0x10c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00f      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a28      	ldr	r2, [pc, #160]	; (8008e58 <TIM_Base_SetConfig+0x110>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d00b      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a27      	ldr	r2, [pc, #156]	; (8008e5c <TIM_Base_SetConfig+0x114>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d007      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a26      	ldr	r2, [pc, #152]	; (8008e60 <TIM_Base_SetConfig+0x118>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <TIM_Base_SetConfig+0x8a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a25      	ldr	r2, [pc, #148]	; (8008e64 <TIM_Base_SetConfig+0x11c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d108      	bne.n	8008de4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a10      	ldr	r2, [pc, #64]	; (8008e4c <TIM_Base_SetConfig+0x104>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00f      	beq.n	8008e30 <TIM_Base_SetConfig+0xe8>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a11      	ldr	r2, [pc, #68]	; (8008e58 <TIM_Base_SetConfig+0x110>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00b      	beq.n	8008e30 <TIM_Base_SetConfig+0xe8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a10      	ldr	r2, [pc, #64]	; (8008e5c <TIM_Base_SetConfig+0x114>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d007      	beq.n	8008e30 <TIM_Base_SetConfig+0xe8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a0f      	ldr	r2, [pc, #60]	; (8008e60 <TIM_Base_SetConfig+0x118>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d003      	beq.n	8008e30 <TIM_Base_SetConfig+0xe8>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a0e      	ldr	r2, [pc, #56]	; (8008e64 <TIM_Base_SetConfig+0x11c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d103      	bne.n	8008e38 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	615a      	str	r2, [r3, #20]
}
 8008e3e:	bf00      	nop
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	40012c00 	.word	0x40012c00
 8008e50:	40000400 	.word	0x40000400
 8008e54:	40000800 	.word	0x40000800
 8008e58:	40013400 	.word	0x40013400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0201 	bic.w	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f023 0302 	bic.w	r3, r3, #2
 8008eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a2c      	ldr	r2, [pc, #176]	; (8008f74 <TIM_OC1_SetConfig+0x10c>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00f      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x80>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a2b      	ldr	r2, [pc, #172]	; (8008f78 <TIM_OC1_SetConfig+0x110>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00b      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x80>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a2a      	ldr	r2, [pc, #168]	; (8008f7c <TIM_OC1_SetConfig+0x114>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d007      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x80>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a29      	ldr	r2, [pc, #164]	; (8008f80 <TIM_OC1_SetConfig+0x118>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d003      	beq.n	8008ee8 <TIM_OC1_SetConfig+0x80>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a28      	ldr	r2, [pc, #160]	; (8008f84 <TIM_OC1_SetConfig+0x11c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d10c      	bne.n	8008f02 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f023 0308 	bic.w	r3, r3, #8
 8008eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f023 0304 	bic.w	r3, r3, #4
 8008f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <TIM_OC1_SetConfig+0x10c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d00f      	beq.n	8008f2a <TIM_OC1_SetConfig+0xc2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a1a      	ldr	r2, [pc, #104]	; (8008f78 <TIM_OC1_SetConfig+0x110>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d00b      	beq.n	8008f2a <TIM_OC1_SetConfig+0xc2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a19      	ldr	r2, [pc, #100]	; (8008f7c <TIM_OC1_SetConfig+0x114>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d007      	beq.n	8008f2a <TIM_OC1_SetConfig+0xc2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a18      	ldr	r2, [pc, #96]	; (8008f80 <TIM_OC1_SetConfig+0x118>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d003      	beq.n	8008f2a <TIM_OC1_SetConfig+0xc2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <TIM_OC1_SetConfig+0x11c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d111      	bne.n	8008f4e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	621a      	str	r2, [r3, #32]
}
 8008f68:	bf00      	nop
 8008f6a:	371c      	adds	r7, #28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	40012c00 	.word	0x40012c00
 8008f78:	40013400 	.word	0x40013400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40014400 	.word	0x40014400
 8008f84:	40014800 	.word	0x40014800

08008f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	f023 0210 	bic.w	r2, r3, #16
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f023 0320 	bic.w	r3, r3, #32
 8008fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a28      	ldr	r2, [pc, #160]	; (8009088 <TIM_OC2_SetConfig+0x100>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d003      	beq.n	8008ff4 <TIM_OC2_SetConfig+0x6c>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a27      	ldr	r2, [pc, #156]	; (800908c <TIM_OC2_SetConfig+0x104>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d10d      	bne.n	8009010 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	011b      	lsls	r3, r3, #4
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a1d      	ldr	r2, [pc, #116]	; (8009088 <TIM_OC2_SetConfig+0x100>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00f      	beq.n	8009038 <TIM_OC2_SetConfig+0xb0>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a1c      	ldr	r2, [pc, #112]	; (800908c <TIM_OC2_SetConfig+0x104>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00b      	beq.n	8009038 <TIM_OC2_SetConfig+0xb0>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <TIM_OC2_SetConfig+0x108>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d007      	beq.n	8009038 <TIM_OC2_SetConfig+0xb0>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a1a      	ldr	r2, [pc, #104]	; (8009094 <TIM_OC2_SetConfig+0x10c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d003      	beq.n	8009038 <TIM_OC2_SetConfig+0xb0>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a19      	ldr	r2, [pc, #100]	; (8009098 <TIM_OC2_SetConfig+0x110>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d113      	bne.n	8009060 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800903e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	4313      	orrs	r3, r2
 800905e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	bf00      	nop
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40012c00 	.word	0x40012c00
 800908c:	40013400 	.word	0x40013400
 8009090:	40014000 	.word	0x40014000
 8009094:	40014400 	.word	0x40014400
 8009098:	40014800 	.word	0x40014800

0800909c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0303 	bic.w	r3, r3, #3
 80090d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	021b      	lsls	r3, r3, #8
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a27      	ldr	r2, [pc, #156]	; (8009198 <TIM_OC3_SetConfig+0xfc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_OC3_SetConfig+0x6a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a26      	ldr	r2, [pc, #152]	; (800919c <TIM_OC3_SetConfig+0x100>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d10d      	bne.n	8009122 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800910c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a1c      	ldr	r2, [pc, #112]	; (8009198 <TIM_OC3_SetConfig+0xfc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00f      	beq.n	800914a <TIM_OC3_SetConfig+0xae>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a1b      	ldr	r2, [pc, #108]	; (800919c <TIM_OC3_SetConfig+0x100>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d00b      	beq.n	800914a <TIM_OC3_SetConfig+0xae>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a1a      	ldr	r2, [pc, #104]	; (80091a0 <TIM_OC3_SetConfig+0x104>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d007      	beq.n	800914a <TIM_OC3_SetConfig+0xae>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a19      	ldr	r2, [pc, #100]	; (80091a4 <TIM_OC3_SetConfig+0x108>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d003      	beq.n	800914a <TIM_OC3_SetConfig+0xae>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <TIM_OC3_SetConfig+0x10c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d113      	bne.n	8009172 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	621a      	str	r2, [r3, #32]
}
 800918c:	bf00      	nop
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	40012c00 	.word	0x40012c00
 800919c:	40013400 	.word	0x40013400
 80091a0:	40014000 	.word	0x40014000
 80091a4:	40014400 	.word	0x40014400
 80091a8:	40014800 	.word	0x40014800

080091ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	031b      	lsls	r3, r3, #12
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	4313      	orrs	r3, r2
 8009206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a28      	ldr	r2, [pc, #160]	; (80092ac <TIM_OC4_SetConfig+0x100>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d003      	beq.n	8009218 <TIM_OC4_SetConfig+0x6c>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a27      	ldr	r2, [pc, #156]	; (80092b0 <TIM_OC4_SetConfig+0x104>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d10d      	bne.n	8009234 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800921e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	031b      	lsls	r3, r3, #12
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	4313      	orrs	r3, r2
 800922a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009232:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a1d      	ldr	r2, [pc, #116]	; (80092ac <TIM_OC4_SetConfig+0x100>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00f      	beq.n	800925c <TIM_OC4_SetConfig+0xb0>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a1c      	ldr	r2, [pc, #112]	; (80092b0 <TIM_OC4_SetConfig+0x104>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d00b      	beq.n	800925c <TIM_OC4_SetConfig+0xb0>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a1b      	ldr	r2, [pc, #108]	; (80092b4 <TIM_OC4_SetConfig+0x108>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d007      	beq.n	800925c <TIM_OC4_SetConfig+0xb0>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a1a      	ldr	r2, [pc, #104]	; (80092b8 <TIM_OC4_SetConfig+0x10c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d003      	beq.n	800925c <TIM_OC4_SetConfig+0xb0>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a19      	ldr	r2, [pc, #100]	; (80092bc <TIM_OC4_SetConfig+0x110>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d113      	bne.n	8009284 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009262:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800926a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	019b      	lsls	r3, r3, #6
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4313      	orrs	r3, r2
 8009276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	019b      	lsls	r3, r3, #6
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	621a      	str	r2, [r3, #32]
}
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40012c00 	.word	0x40012c00
 80092b0:	40013400 	.word	0x40013400
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40014400 	.word	0x40014400
 80092bc:	40014800 	.word	0x40014800

080092c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009304:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	041b      	lsls	r3, r3, #16
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a17      	ldr	r2, [pc, #92]	; (8009374 <TIM_OC5_SetConfig+0xb4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_OC5_SetConfig+0x7a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a16      	ldr	r2, [pc, #88]	; (8009378 <TIM_OC5_SetConfig+0xb8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00b      	beq.n	800933a <TIM_OC5_SetConfig+0x7a>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a15      	ldr	r2, [pc, #84]	; (800937c <TIM_OC5_SetConfig+0xbc>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_OC5_SetConfig+0x7a>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a14      	ldr	r2, [pc, #80]	; (8009380 <TIM_OC5_SetConfig+0xc0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_OC5_SetConfig+0x7a>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a13      	ldr	r2, [pc, #76]	; (8009384 <TIM_OC5_SetConfig+0xc4>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d109      	bne.n	800934e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009340:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	021b      	lsls	r3, r3, #8
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	4313      	orrs	r3, r2
 800934c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	621a      	str	r2, [r3, #32]
}
 8009368:	bf00      	nop
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	40012c00 	.word	0x40012c00
 8009378:	40013400 	.word	0x40013400
 800937c:	40014000 	.word	0x40014000
 8009380:	40014400 	.word	0x40014400
 8009384:	40014800 	.word	0x40014800

08009388 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a18      	ldr	r2, [pc, #96]	; (8009440 <TIM_OC6_SetConfig+0xb8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00f      	beq.n	8009404 <TIM_OC6_SetConfig+0x7c>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a17      	ldr	r2, [pc, #92]	; (8009444 <TIM_OC6_SetConfig+0xbc>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00b      	beq.n	8009404 <TIM_OC6_SetConfig+0x7c>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a16      	ldr	r2, [pc, #88]	; (8009448 <TIM_OC6_SetConfig+0xc0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d007      	beq.n	8009404 <TIM_OC6_SetConfig+0x7c>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a15      	ldr	r2, [pc, #84]	; (800944c <TIM_OC6_SetConfig+0xc4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_OC6_SetConfig+0x7c>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a14      	ldr	r2, [pc, #80]	; (8009450 <TIM_OC6_SetConfig+0xc8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d109      	bne.n	8009418 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800940a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	029b      	lsls	r3, r3, #10
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	621a      	str	r2, [r3, #32]
}
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40013400 	.word	0x40013400
 8009448:	40014000 	.word	0x40014000
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	f023 0201 	bic.w	r2, r3, #1
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800947e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	4313      	orrs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f023 030a 	bic.w	r3, r3, #10
 8009490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4313      	orrs	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b087      	sub	sp, #28
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	f023 0210 	bic.w	r2, r3, #16
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	031b      	lsls	r3, r3, #12
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	621a      	str	r2, [r3, #32]
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	f043 0307 	orr.w	r3, r3, #7
 8009538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	609a      	str	r2, [r3, #8]
}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	021a      	lsls	r2, r3, #8
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	431a      	orrs	r2, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4313      	orrs	r3, r2
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	4313      	orrs	r3, r2
 8009578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	609a      	str	r2, [r3, #8]
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f003 031f 	and.w	r3, r3, #31
 800959e:	2201      	movs	r2, #1
 80095a0:	fa02 f303 	lsl.w	r3, r2, r3
 80095a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a1a      	ldr	r2, [r3, #32]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	43db      	mvns	r3, r3
 80095ae:	401a      	ands	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a1a      	ldr	r2, [r3, #32]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	fa01 f303 	lsl.w	r3, r1, r3
 80095c4:	431a      	orrs	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	621a      	str	r2, [r3, #32]
}
 80095ca:	bf00      	nop
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e065      	b.n	80096bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a2c      	ldr	r2, [pc, #176]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d004      	beq.n	8009624 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a2b      	ldr	r2, [pc, #172]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d108      	bne.n	8009636 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800962a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800963c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009640:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d018      	beq.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009666:	d013      	beq.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00e      	beq.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d009      	beq.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a12      	ldr	r2, [pc, #72]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d004      	beq.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a13      	ldr	r2, [pc, #76]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10c      	bne.n	80096aa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009696:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	4313      	orrs	r3, r2
 80096a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	40013400 	.word	0x40013400
 80096d0:	40000400 	.word	0x40000400
 80096d4:	40000800 	.word	0x40000800
 80096d8:	40014000 	.word	0x40014000

080096dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e087      	b.n	8009808 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	041b      	lsls	r3, r3, #16
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a27      	ldr	r2, [pc, #156]	; (8009814 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d004      	beq.n	8009786 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a25      	ldr	r2, [pc, #148]	; (8009818 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d106      	bne.n	8009794 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d004      	beq.n	80097a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a1d      	ldr	r2, [pc, #116]	; (8009818 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d126      	bne.n	80097f6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	051b      	lsls	r3, r3, #20
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	4313      	orrs	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a0e      	ldr	r2, [pc, #56]	; (8009814 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d004      	beq.n	80097e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a0d      	ldr	r2, [pc, #52]	; (8009818 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d106      	bne.n	80097f6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	4313      	orrs	r3, r2
 80097f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	40012c00 	.word	0x40012c00
 8009818:	40013400 	.word	0x40013400

0800981c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d101      	bne.n	80098ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e042      	b.n	8009940 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fa fd1f 	bl	8004310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2224      	movs	r2, #36	; 0x24
 80098d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0201 	bic.w	r2, r2, #1
 80098e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fad2 	bl	8009e94 <UART_SetConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e022      	b.n	8009940 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fd6e 	bl	800a3e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fdf5 	bl	800a528 <UART_CheckIdleState>
 800993e:	4603      	mov	r3, r0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800995c:	2b20      	cmp	r3, #32
 800995e:	d168      	bne.n	8009a32 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <HAL_UART_Transmit_DMA+0x24>
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e061      	b.n	8009a34 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_UART_Transmit_DMA+0x36>
 800997a:	2302      	movs	r3, #2
 800997c:	e05a      	b.n	8009a34 <HAL_UART_Transmit_DMA+0xec>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	88fa      	ldrh	r2, [r7, #6]
 8009998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2221      	movs	r2, #33	; 0x21
 80099a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d02c      	beq.n	8009a0e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b8:	4a20      	ldr	r2, [pc, #128]	; (8009a3c <HAL_UART_Transmit_DMA+0xf4>)
 80099ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c0:	4a1f      	ldr	r2, [pc, #124]	; (8009a40 <HAL_UART_Transmit_DMA+0xf8>)
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c8:	4a1e      	ldr	r2, [pc, #120]	; (8009a44 <HAL_UART_Transmit_DMA+0xfc>)
 80099ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099d0:	2200      	movs	r2, #0
 80099d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099dc:	4619      	mov	r1, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3328      	adds	r3, #40	; 0x28
 80099e4:	461a      	mov	r2, r3
 80099e6:	88fb      	ldrh	r3, [r7, #6]
 80099e8:	f7fc fce8 	bl	80063bc <HAL_DMA_Start_IT>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00d      	beq.n	8009a0e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2210      	movs	r2, #16
 80099f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e012      	b.n	8009a34 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2240      	movs	r2, #64	; 0x40
 8009a14:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a2c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e000      	b.n	8009a34 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009a32:	2302      	movs	r3, #2
  }
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	0800a73b 	.word	0x0800a73b
 8009a40:	0800a78f 	.word	0x0800a78f
 8009a44:	0800a831 	.word	0x0800a831

08009a48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d170      	bne.n	8009b42 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_UART_Receive_DMA+0x24>
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e069      	b.n	8009b44 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_UART_Receive_DMA+0x36>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e062      	b.n	8009b44 <HAL_UART_Receive_DMA+0xfc>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2222      	movs	r2, #34	; 0x22
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d02c      	beq.n	8009b06 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab0:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <HAL_UART_Receive_DMA+0x104>)
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab8:	4a25      	ldr	r2, [pc, #148]	; (8009b50 <HAL_UART_Receive_DMA+0x108>)
 8009aba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac0:	4a24      	ldr	r2, [pc, #144]	; (8009b54 <HAL_UART_Receive_DMA+0x10c>)
 8009ac2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac8:	2200      	movs	r2, #0
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3324      	adds	r3, #36	; 0x24
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009adc:	461a      	mov	r2, r3
 8009ade:	88fb      	ldrh	r3, [r7, #6]
 8009ae0:	f7fc fc6c 	bl	80063bc <HAL_DMA_Start_IT>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00d      	beq.n	8009b06 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2210      	movs	r2, #16
 8009aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e01e      	b.n	8009b44 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b1c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689a      	ldr	r2, [r3, #8]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b3c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e000      	b.n	8009b44 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009b42:	2302      	movs	r3, #2
  }
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	0800a7ab 	.word	0x0800a7ab
 8009b50:	0800a815 	.word	0x0800a815
 8009b54:	0800a831 	.word	0x0800a831

08009b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b7e:	4013      	ands	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d118      	bne.n	8009bba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d013      	beq.n	8009bba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 8145 	beq.w	8009e3a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	4798      	blx	r3
      }
      return;
 8009bb8:	e13f      	b.n	8009e3a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80e8 	beq.w	8009d92 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	4ba1      	ldr	r3, [pc, #644]	; (8009e4c <HAL_UART_IRQHandler+0x2f4>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d105      	bne.n	8009bd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	4ba0      	ldr	r3, [pc, #640]	; (8009e50 <HAL_UART_IRQHandler+0x2f8>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80dd 	beq.w	8009d92 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d010      	beq.n	8009c04 <HAL_UART_IRQHandler+0xac>
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bfa:	f043 0201 	orr.w	r2, r3, #1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d010      	beq.n	8009c30 <HAL_UART_IRQHandler+0xd8>
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c26:	f043 0204 	orr.w	r2, r3, #4
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d010      	beq.n	8009c5c <HAL_UART_IRQHandler+0x104>
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00b      	beq.n	8009c5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c52:	f043 0202 	orr.w	r2, r3, #2
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d015      	beq.n	8009c92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f003 0320 	and.w	r3, r3, #32
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d104      	bne.n	8009c7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	4b76      	ldr	r3, [pc, #472]	; (8009e4c <HAL_UART_IRQHandler+0x2f4>)
 8009c74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2208      	movs	r2, #8
 8009c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c88:	f043 0208 	orr.w	r2, r3, #8
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d011      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x168>
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb6:	f043 0220 	orr.w	r2, r3, #32
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80b9 	beq.w	8009e3e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d011      	beq.n	8009cfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f003 0320 	and.w	r3, r3, #32
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d007      	beq.n	8009cfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0c:	2b40      	cmp	r3, #64	; 0x40
 8009d0e:	d004      	beq.n	8009d1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d031      	beq.n	8009d7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fcea 	bl	800a6f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2a:	2b40      	cmp	r3, #64	; 0x40
 8009d2c:	d123      	bne.n	8009d76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d013      	beq.n	8009d6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d4a:	4a42      	ldr	r2, [pc, #264]	; (8009e54 <HAL_UART_IRQHandler+0x2fc>)
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fc fbad 	bl	80064b2 <HAL_DMA_Abort_IT>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d017      	beq.n	8009d8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d6c:	e00f      	b.n	8009d8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7f9 fe6a 	bl	8003a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d74:	e00b      	b.n	8009d8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f9 fe66 	bl	8003a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7c:	e007      	b.n	8009d8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f9 fe62 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009d8c:	e057      	b.n	8009e3e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8e:	bf00      	nop
    return;
 8009d90:	e055      	b.n	8009e3e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00d      	beq.n	8009db8 <HAL_UART_IRQHandler+0x260>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d008      	beq.n	8009db8 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fdad 	bl	800a910 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009db6:	e045      	b.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d012      	beq.n	8009de8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d008      	beq.n	8009de8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d031      	beq.n	8009e42 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	4798      	blx	r3
    }
    return;
 8009de6:	e02c      	b.n	8009e42 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d008      	beq.n	8009e04 <HAL_UART_IRQHandler+0x2ac>
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fd6d 	bl	800a8dc <UART_EndTransmit_IT>
    return;
 8009e02:	e01f      	b.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d008      	beq.n	8009e20 <HAL_UART_IRQHandler+0x2c8>
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fd8d 	bl	800a938 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e1e:	e011      	b.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00c      	beq.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	da09      	bge.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fd77 	bl	800a924 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e36:	bf00      	nop
 8009e38:	e004      	b.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009e3a:	bf00      	nop
 8009e3c:	e002      	b.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009e3e:	bf00      	nop
 8009e40:	e000      	b.n	8009e44 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009e42:	bf00      	nop
  }
}
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	10000001 	.word	0x10000001
 8009e50:	04000120 	.word	0x04000120
 8009e54:	0800a8b1 	.word	0x0800a8b1

08009e58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009e98:	b088      	sub	sp, #32
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	431a      	orrs	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	4bb0      	ldr	r3, [pc, #704]	; (800a18c <UART_SetConfig+0x2f8>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6812      	ldr	r2, [r2, #0]
 8009ed2:	69f9      	ldr	r1, [r7, #28]
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4aa5      	ldr	r2, [pc, #660]	; (800a190 <UART_SetConfig+0x2fc>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d004      	beq.n	8009f08 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	69fa      	ldr	r2, [r7, #28]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009f12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	6812      	ldr	r2, [r2, #0]
 8009f1a:	69f9      	ldr	r1, [r7, #28]
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	f023 010f 	bic.w	r1, r3, #15
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a96      	ldr	r2, [pc, #600]	; (800a194 <UART_SetConfig+0x300>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d121      	bne.n	8009f84 <UART_SetConfig+0xf0>
 8009f40:	4b95      	ldr	r3, [pc, #596]	; (800a198 <UART_SetConfig+0x304>)
 8009f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d816      	bhi.n	8009f7c <UART_SetConfig+0xe8>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <UART_SetConfig+0xc0>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009f71 	.word	0x08009f71
 8009f5c:	08009f6b 	.word	0x08009f6b
 8009f60:	08009f77 	.word	0x08009f77
 8009f64:	2301      	movs	r3, #1
 8009f66:	76fb      	strb	r3, [r7, #27]
 8009f68:	e0be      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	76fb      	strb	r3, [r7, #27]
 8009f6e:	e0bb      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009f70:	2304      	movs	r3, #4
 8009f72:	76fb      	strb	r3, [r7, #27]
 8009f74:	e0b8      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009f76:	2308      	movs	r3, #8
 8009f78:	76fb      	strb	r3, [r7, #27]
 8009f7a:	e0b5      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	76fb      	strb	r3, [r7, #27]
 8009f80:	bf00      	nop
 8009f82:	e0b1      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a84      	ldr	r2, [pc, #528]	; (800a19c <UART_SetConfig+0x308>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d134      	bne.n	8009ff8 <UART_SetConfig+0x164>
 8009f8e:	4b82      	ldr	r3, [pc, #520]	; (800a198 <UART_SetConfig+0x304>)
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f94:	f003 030c 	and.w	r3, r3, #12
 8009f98:	2b0c      	cmp	r3, #12
 8009f9a:	d829      	bhi.n	8009ff0 <UART_SetConfig+0x15c>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0x110>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fd9 	.word	0x08009fd9
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009ff1 	.word	0x08009ff1
 8009fb0:	08009ff1 	.word	0x08009ff1
 8009fb4:	08009fe5 	.word	0x08009fe5
 8009fb8:	08009ff1 	.word	0x08009ff1
 8009fbc:	08009ff1 	.word	0x08009ff1
 8009fc0:	08009ff1 	.word	0x08009ff1
 8009fc4:	08009fdf 	.word	0x08009fdf
 8009fc8:	08009ff1 	.word	0x08009ff1
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	08009ff1 	.word	0x08009ff1
 8009fd4:	08009feb 	.word	0x08009feb
 8009fd8:	2300      	movs	r3, #0
 8009fda:	76fb      	strb	r3, [r7, #27]
 8009fdc:	e084      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	76fb      	strb	r3, [r7, #27]
 8009fe2:	e081      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009fe4:	2304      	movs	r3, #4
 8009fe6:	76fb      	strb	r3, [r7, #27]
 8009fe8:	e07e      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009fea:	2308      	movs	r3, #8
 8009fec:	76fb      	strb	r3, [r7, #27]
 8009fee:	e07b      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	76fb      	strb	r3, [r7, #27]
 8009ff4:	bf00      	nop
 8009ff6:	e077      	b.n	800a0e8 <UART_SetConfig+0x254>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a68      	ldr	r2, [pc, #416]	; (800a1a0 <UART_SetConfig+0x30c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d120      	bne.n	800a044 <UART_SetConfig+0x1b0>
 800a002:	4b65      	ldr	r3, [pc, #404]	; (800a198 <UART_SetConfig+0x304>)
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a008:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a00c:	2b10      	cmp	r3, #16
 800a00e:	d00f      	beq.n	800a030 <UART_SetConfig+0x19c>
 800a010:	2b10      	cmp	r3, #16
 800a012:	d802      	bhi.n	800a01a <UART_SetConfig+0x186>
 800a014:	2b00      	cmp	r3, #0
 800a016:	d005      	beq.n	800a024 <UART_SetConfig+0x190>
 800a018:	e010      	b.n	800a03c <UART_SetConfig+0x1a8>
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d005      	beq.n	800a02a <UART_SetConfig+0x196>
 800a01e:	2b30      	cmp	r3, #48	; 0x30
 800a020:	d009      	beq.n	800a036 <UART_SetConfig+0x1a2>
 800a022:	e00b      	b.n	800a03c <UART_SetConfig+0x1a8>
 800a024:	2300      	movs	r3, #0
 800a026:	76fb      	strb	r3, [r7, #27]
 800a028:	e05e      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a02a:	2302      	movs	r3, #2
 800a02c:	76fb      	strb	r3, [r7, #27]
 800a02e:	e05b      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a030:	2304      	movs	r3, #4
 800a032:	76fb      	strb	r3, [r7, #27]
 800a034:	e058      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a036:	2308      	movs	r3, #8
 800a038:	76fb      	strb	r3, [r7, #27]
 800a03a:	e055      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a03c:	2310      	movs	r3, #16
 800a03e:	76fb      	strb	r3, [r7, #27]
 800a040:	bf00      	nop
 800a042:	e051      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a56      	ldr	r2, [pc, #344]	; (800a1a4 <UART_SetConfig+0x310>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d120      	bne.n	800a090 <UART_SetConfig+0x1fc>
 800a04e:	4b52      	ldr	r3, [pc, #328]	; (800a198 <UART_SetConfig+0x304>)
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a054:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d00f      	beq.n	800a07c <UART_SetConfig+0x1e8>
 800a05c:	2b40      	cmp	r3, #64	; 0x40
 800a05e:	d802      	bhi.n	800a066 <UART_SetConfig+0x1d2>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <UART_SetConfig+0x1dc>
 800a064:	e010      	b.n	800a088 <UART_SetConfig+0x1f4>
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	d005      	beq.n	800a076 <UART_SetConfig+0x1e2>
 800a06a:	2bc0      	cmp	r3, #192	; 0xc0
 800a06c:	d009      	beq.n	800a082 <UART_SetConfig+0x1ee>
 800a06e:	e00b      	b.n	800a088 <UART_SetConfig+0x1f4>
 800a070:	2300      	movs	r3, #0
 800a072:	76fb      	strb	r3, [r7, #27]
 800a074:	e038      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a076:	2302      	movs	r3, #2
 800a078:	76fb      	strb	r3, [r7, #27]
 800a07a:	e035      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a07c:	2304      	movs	r3, #4
 800a07e:	76fb      	strb	r3, [r7, #27]
 800a080:	e032      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a082:	2308      	movs	r3, #8
 800a084:	76fb      	strb	r3, [r7, #27]
 800a086:	e02f      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a088:	2310      	movs	r3, #16
 800a08a:	76fb      	strb	r3, [r7, #27]
 800a08c:	bf00      	nop
 800a08e:	e02b      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a3e      	ldr	r2, [pc, #248]	; (800a190 <UART_SetConfig+0x2fc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d124      	bne.n	800a0e4 <UART_SetConfig+0x250>
 800a09a:	4b3f      	ldr	r3, [pc, #252]	; (800a198 <UART_SetConfig+0x304>)
 800a09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a8:	d012      	beq.n	800a0d0 <UART_SetConfig+0x23c>
 800a0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ae:	d802      	bhi.n	800a0b6 <UART_SetConfig+0x222>
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d007      	beq.n	800a0c4 <UART_SetConfig+0x230>
 800a0b4:	e012      	b.n	800a0dc <UART_SetConfig+0x248>
 800a0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0ba:	d006      	beq.n	800a0ca <UART_SetConfig+0x236>
 800a0bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0c0:	d009      	beq.n	800a0d6 <UART_SetConfig+0x242>
 800a0c2:	e00b      	b.n	800a0dc <UART_SetConfig+0x248>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	76fb      	strb	r3, [r7, #27]
 800a0c8:	e00e      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	76fb      	strb	r3, [r7, #27]
 800a0ce:	e00b      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a0d0:	2304      	movs	r3, #4
 800a0d2:	76fb      	strb	r3, [r7, #27]
 800a0d4:	e008      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	76fb      	strb	r3, [r7, #27]
 800a0da:	e005      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a0dc:	2310      	movs	r3, #16
 800a0de:	76fb      	strb	r3, [r7, #27]
 800a0e0:	bf00      	nop
 800a0e2:	e001      	b.n	800a0e8 <UART_SetConfig+0x254>
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a28      	ldr	r2, [pc, #160]	; (800a190 <UART_SetConfig+0x2fc>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	f040 80a1 	bne.w	800a236 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0f4:	7efb      	ldrb	r3, [r7, #27]
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d823      	bhi.n	800a142 <UART_SetConfig+0x2ae>
 800a0fa:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <UART_SetConfig+0x26c>)
 800a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a100:	0800a125 	.word	0x0800a125
 800a104:	0800a143 	.word	0x0800a143
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a143 	.word	0x0800a143
 800a110:	0800a133 	.word	0x0800a133
 800a114:	0800a143 	.word	0x0800a143
 800a118:	0800a143 	.word	0x0800a143
 800a11c:	0800a143 	.word	0x0800a143
 800a120:	0800a13b 	.word	0x0800a13b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a124:	f7fd fd12 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 800a128:	6178      	str	r0, [r7, #20]
        break;
 800a12a:	e00f      	b.n	800a14c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a12c:	4b1e      	ldr	r3, [pc, #120]	; (800a1a8 <UART_SetConfig+0x314>)
 800a12e:	617b      	str	r3, [r7, #20]
        break;
 800a130:	e00c      	b.n	800a14c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a132:	f7fd fc9d 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 800a136:	6178      	str	r0, [r7, #20]
        break;
 800a138:	e008      	b.n	800a14c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a13a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a13e:	617b      	str	r3, [r7, #20]
        break;
 800a140:	e004      	b.n	800a14c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	76bb      	strb	r3, [r7, #26]
        break;
 800a14a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8130 	beq.w	800a3b4 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	4a14      	ldr	r2, [pc, #80]	; (800a1ac <UART_SetConfig+0x318>)
 800a15a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a15e:	461a      	mov	r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	fbb3 f3f2 	udiv	r3, r3, r2
 800a166:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	4613      	mov	r3, r2
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	4413      	add	r3, r2
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	429a      	cmp	r2, r3
 800a176:	d305      	bcc.n	800a184 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	429a      	cmp	r2, r3
 800a182:	d915      	bls.n	800a1b0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	76bb      	strb	r3, [r7, #26]
 800a188:	e114      	b.n	800a3b4 <UART_SetConfig+0x520>
 800a18a:	bf00      	nop
 800a18c:	cfff69f3 	.word	0xcfff69f3
 800a190:	40008000 	.word	0x40008000
 800a194:	40013800 	.word	0x40013800
 800a198:	40021000 	.word	0x40021000
 800a19c:	40004400 	.word	0x40004400
 800a1a0:	40004800 	.word	0x40004800
 800a1a4:	40004c00 	.word	0x40004c00
 800a1a8:	00f42400 	.word	0x00f42400
 800a1ac:	0800aefc 	.word	0x0800aefc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f04f 0100 	mov.w	r1, #0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	4a87      	ldr	r2, [pc, #540]	; (800a3dc <UART_SetConfig+0x548>)
 800a1be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f04f 0400 	mov.w	r4, #0
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	f7f6 fc42 	bl	8000a54 <__aeabi_uldivmod>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	f04f 0300 	mov.w	r3, #0
 800a1dc:	f04f 0400 	mov.w	r4, #0
 800a1e0:	0214      	lsls	r4, r2, #8
 800a1e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1e6:	020b      	lsls	r3, r1, #8
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6852      	ldr	r2, [r2, #4]
 800a1ec:	0852      	lsrs	r2, r2, #1
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	f04f 0200 	mov.w	r2, #0
 800a1f4:	eb13 0b01 	adds.w	fp, r3, r1
 800a1f8:	eb44 0c02 	adc.w	ip, r4, r2
 800a1fc:	4658      	mov	r0, fp
 800a1fe:	4661      	mov	r1, ip
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f04f 0400 	mov.w	r4, #0
 800a208:	461a      	mov	r2, r3
 800a20a:	4623      	mov	r3, r4
 800a20c:	f7f6 fc22 	bl	8000a54 <__aeabi_uldivmod>
 800a210:	4603      	mov	r3, r0
 800a212:	460c      	mov	r4, r1
 800a214:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a21c:	d308      	bcc.n	800a230 <UART_SetConfig+0x39c>
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a224:	d204      	bcs.n	800a230 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	60da      	str	r2, [r3, #12]
 800a22e:	e0c1      	b.n	800a3b4 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	76bb      	strb	r3, [r7, #26]
 800a234:	e0be      	b.n	800a3b4 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a23e:	d164      	bne.n	800a30a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 800a240:	7efb      	ldrb	r3, [r7, #27]
 800a242:	2b08      	cmp	r3, #8
 800a244:	d827      	bhi.n	800a296 <UART_SetConfig+0x402>
 800a246:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <UART_SetConfig+0x3b8>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a271 	.word	0x0800a271
 800a250:	0800a279 	.word	0x0800a279
 800a254:	0800a281 	.word	0x0800a281
 800a258:	0800a297 	.word	0x0800a297
 800a25c:	0800a287 	.word	0x0800a287
 800a260:	0800a297 	.word	0x0800a297
 800a264:	0800a297 	.word	0x0800a297
 800a268:	0800a297 	.word	0x0800a297
 800a26c:	0800a28f 	.word	0x0800a28f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a270:	f7fd fc6c 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 800a274:	6178      	str	r0, [r7, #20]
        break;
 800a276:	e013      	b.n	800a2a0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a278:	f7fd fc7e 	bl	8007b78 <HAL_RCC_GetPCLK2Freq>
 800a27c:	6178      	str	r0, [r7, #20]
        break;
 800a27e:	e00f      	b.n	800a2a0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a280:	4b57      	ldr	r3, [pc, #348]	; (800a3e0 <UART_SetConfig+0x54c>)
 800a282:	617b      	str	r3, [r7, #20]
        break;
 800a284:	e00c      	b.n	800a2a0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a286:	f7fd fbf3 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 800a28a:	6178      	str	r0, [r7, #20]
        break;
 800a28c:	e008      	b.n	800a2a0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a28e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a292:	617b      	str	r3, [r7, #20]
        break;
 800a294:	e004      	b.n	800a2a0 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	76bb      	strb	r3, [r7, #26]
        break;
 800a29e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 8086 	beq.w	800a3b4 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	4a4b      	ldr	r2, [pc, #300]	; (800a3dc <UART_SetConfig+0x548>)
 800a2ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ba:	005a      	lsls	r2, r3, #1
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	085b      	lsrs	r3, r3, #1
 800a2c2:	441a      	add	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	2b0f      	cmp	r3, #15
 800a2d4:	d916      	bls.n	800a304 <UART_SetConfig+0x470>
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2dc:	d212      	bcs.n	800a304 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	f023 030f 	bic.w	r3, r3, #15
 800a2e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	085b      	lsrs	r3, r3, #1
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	89fa      	ldrh	r2, [r7, #14]
 800a300:	60da      	str	r2, [r3, #12]
 800a302:	e057      	b.n	800a3b4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	76bb      	strb	r3, [r7, #26]
 800a308:	e054      	b.n	800a3b4 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a30a:	7efb      	ldrb	r3, [r7, #27]
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d828      	bhi.n	800a362 <UART_SetConfig+0x4ce>
 800a310:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <UART_SetConfig+0x484>)
 800a312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a316:	bf00      	nop
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a345 	.word	0x0800a345
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	0800a363 	.word	0x0800a363
 800a328:	0800a353 	.word	0x0800a353
 800a32c:	0800a363 	.word	0x0800a363
 800a330:	0800a363 	.word	0x0800a363
 800a334:	0800a363 	.word	0x0800a363
 800a338:	0800a35b 	.word	0x0800a35b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a33c:	f7fd fc06 	bl	8007b4c <HAL_RCC_GetPCLK1Freq>
 800a340:	6178      	str	r0, [r7, #20]
        break;
 800a342:	e013      	b.n	800a36c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a344:	f7fd fc18 	bl	8007b78 <HAL_RCC_GetPCLK2Freq>
 800a348:	6178      	str	r0, [r7, #20]
        break;
 800a34a:	e00f      	b.n	800a36c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a34c:	4b24      	ldr	r3, [pc, #144]	; (800a3e0 <UART_SetConfig+0x54c>)
 800a34e:	617b      	str	r3, [r7, #20]
        break;
 800a350:	e00c      	b.n	800a36c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a352:	f7fd fb8d 	bl	8007a70 <HAL_RCC_GetSysClockFreq>
 800a356:	6178      	str	r0, [r7, #20]
        break;
 800a358:	e008      	b.n	800a36c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a35e:	617b      	str	r3, [r7, #20]
        break;
 800a360:	e004      	b.n	800a36c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	76bb      	strb	r3, [r7, #26]
        break;
 800a36a:	bf00      	nop
    }

    if (pclk != 0U)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d020      	beq.n	800a3b4 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	4a19      	ldr	r2, [pc, #100]	; (800a3dc <UART_SetConfig+0x548>)
 800a378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a37c:	461a      	mov	r2, r3
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	fbb3 f2f2 	udiv	r2, r3, r2
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	085b      	lsrs	r3, r3, #1
 800a38a:	441a      	add	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	fbb2 f3f3 	udiv	r3, r2, r3
 800a394:	b29b      	uxth	r3, r3
 800a396:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b0f      	cmp	r3, #15
 800a39c:	d908      	bls.n	800a3b0 <UART_SetConfig+0x51c>
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a4:	d204      	bcs.n	800a3b0 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	60da      	str	r2, [r3, #12]
 800a3ae:	e001      	b.n	800a3b4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a3d0:	7ebb      	ldrb	r3, [r7, #26]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a3dc:	0800aefc 	.word	0x0800aefc
 800a3e0:	00f42400 	.word	0x00f42400

0800a3e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a412:	f003 0302 	and.w	r3, r3, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	f003 0308 	and.w	r3, r3, #8
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a478:	f003 0310 	and.w	r3, r3, #16
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00a      	beq.n	800a496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49a:	f003 0320 	and.w	r3, r3, #32
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01a      	beq.n	800a4fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4e2:	d10a      	bne.n	800a4fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	605a      	str	r2, [r3, #4]
  }
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a538:	f7fa f8b8 	bl	80046ac <HAL_GetTick>
 800a53c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d10e      	bne.n	800a56a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a54c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f82c 	bl	800a5b8 <UART_WaitOnFlagUntilTimeout>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e022      	b.n	800a5b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b04      	cmp	r3, #4
 800a576:	d10e      	bne.n	800a596 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f816 	bl	800a5b8 <UART_WaitOnFlagUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e00c      	b.n	800a5b0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2220      	movs	r2, #32
 800a59a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2220      	movs	r2, #32
 800a5a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c8:	e062      	b.n	800a690 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d0:	d05e      	beq.n	800a690 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5d2:	f7fa f86b 	bl	80046ac <HAL_GetTick>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d302      	bcc.n	800a5e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11d      	bne.n	800a624 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f022 0201 	bic.w	r2, r2, #1
 800a606:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2220      	movs	r2, #32
 800a614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a620:	2303      	movs	r3, #3
 800a622:	e045      	b.n	800a6b0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0304 	and.w	r3, r3, #4
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d02e      	beq.n	800a690 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a63c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a640:	d126      	bne.n	800a690 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a64a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a65a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689a      	ldr	r2, [r3, #8]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0201 	bic.w	r2, r2, #1
 800a66a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2220      	movs	r2, #32
 800a670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e00f      	b.n	800a6b0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	69da      	ldr	r2, [r3, #28]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4013      	ands	r3, r2
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bf0c      	ite	eq
 800a6a0:	2301      	moveq	r3, #1
 800a6a2:	2300      	movne	r3, #0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	79fb      	ldrb	r3, [r7, #7]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d08d      	beq.n	800a5ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a6ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a6de:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a70a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	6812      	ldr	r2, [r2, #0]
 800a716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a746:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d114      	bne.n	800a780 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a76c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a77c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a77e:	e002      	b.n	800a786 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7f9 fb6f 	bl	8003e64 <HAL_UART_TxCpltCallback>
}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a79a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fb5b 	bl	8009e58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d11f      	bne.n	800a806 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7dc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689a      	ldr	r2, [r3, #8]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0201 	bic.w	r2, r2, #1
 800a7ec:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7fc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fb30 	bl	8009e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a820:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f7ff fb2c 	bl	8009e80 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a828:	bf00      	nop
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a844:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a84c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a858:	2b80      	cmp	r3, #128	; 0x80
 800a85a:	d109      	bne.n	800a870 <UART_DMAError+0x40>
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b21      	cmp	r3, #33	; 0x21
 800a860:	d106      	bne.n	800a870 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2200      	movs	r2, #0
 800a866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a86a:	6978      	ldr	r0, [r7, #20]
 800a86c:	f7ff ff24 	bl	800a6b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87a:	2b40      	cmp	r3, #64	; 0x40
 800a87c:	d109      	bne.n	800a892 <UART_DMAError+0x62>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b22      	cmp	r3, #34	; 0x22
 800a882:	d106      	bne.n	800a892 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	2200      	movs	r2, #0
 800a888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a88c:	6978      	ldr	r0, [r7, #20]
 800a88e:	f7ff ff31 	bl	800a6f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a898:	f043 0210 	orr.w	r2, r3, #16
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8a2:	6978      	ldr	r0, [r7, #20]
 800a8a4:	f7f9 f8d0 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8a8:	bf00      	nop
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f7f9 f8ba 	bl	8003a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d4:	bf00      	nop
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7f9 faae 	bl	8003e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <HAL_UARTEx_DisableFifoMode+0x16>
 800a95e:	2302      	movs	r3, #2
 800a960:	e027      	b.n	800a9b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2224      	movs	r2, #36	; 0x24
 800a96e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0201 	bic.w	r2, r2, #1
 800a988:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e02d      	b.n	800aa32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2224      	movs	r2, #36	; 0x24
 800a9e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f850 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e02d      	b.n	800aaae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2224      	movs	r2, #36	; 0x24
 800aa5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0201 	bic.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f812 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b089      	sub	sp, #36	; 0x24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aac0:	4a2f      	ldr	r2, [pc, #188]	; (800ab80 <UARTEx_SetNbDataToProcess+0xc8>)
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aaca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aace:	4a2d      	ldr	r2, [pc, #180]	; (800ab84 <UARTEx_SetNbDataToProcess+0xcc>)
 800aad0:	f107 030c 	add.w	r3, r7, #12
 800aad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aad8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d108      	bne.n	800aaf6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aaf4:	e03d      	b.n	800ab72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aaf6:	2308      	movs	r3, #8
 800aaf8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aafa:	2308      	movs	r3, #8
 800aafc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	0e5b      	lsrs	r3, r3, #25
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	0f5b      	lsrs	r3, r3, #29
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab1e:	7fbb      	ldrb	r3, [r7, #30]
 800ab20:	7f3a      	ldrb	r2, [r7, #28]
 800ab22:	f107 0120 	add.w	r1, r7, #32
 800ab26:	440a      	add	r2, r1
 800ab28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab30:	7f3a      	ldrb	r2, [r7, #28]
 800ab32:	f107 0120 	add.w	r1, r7, #32
 800ab36:	440a      	add	r2, r1
 800ab38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab48:	7ffb      	ldrb	r3, [r7, #31]
 800ab4a:	7f7a      	ldrb	r2, [r7, #29]
 800ab4c:	f107 0120 	add.w	r1, r7, #32
 800ab50:	440a      	add	r2, r1
 800ab52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab5a:	7f7a      	ldrb	r2, [r7, #29]
 800ab5c:	f107 0120 	add.w	r1, r7, #32
 800ab60:	440a      	add	r2, r1
 800ab62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab72:	bf00      	nop
 800ab74:	3724      	adds	r7, #36	; 0x24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	0800acc8 	.word	0x0800acc8
 800ab84:	0800acd0 	.word	0x0800acd0

0800ab88 <__errno>:
 800ab88:	4b01      	ldr	r3, [pc, #4]	; (800ab90 <__errno+0x8>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000034 	.word	0x20000034

0800ab94 <__libc_init_array>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	4e0d      	ldr	r6, [pc, #52]	; (800abcc <__libc_init_array+0x38>)
 800ab98:	4c0d      	ldr	r4, [pc, #52]	; (800abd0 <__libc_init_array+0x3c>)
 800ab9a:	1ba4      	subs	r4, r4, r6
 800ab9c:	10a4      	asrs	r4, r4, #2
 800ab9e:	2500      	movs	r5, #0
 800aba0:	42a5      	cmp	r5, r4
 800aba2:	d109      	bne.n	800abb8 <__libc_init_array+0x24>
 800aba4:	4e0b      	ldr	r6, [pc, #44]	; (800abd4 <__libc_init_array+0x40>)
 800aba6:	4c0c      	ldr	r4, [pc, #48]	; (800abd8 <__libc_init_array+0x44>)
 800aba8:	f000 f882 	bl	800acb0 <_init>
 800abac:	1ba4      	subs	r4, r4, r6
 800abae:	10a4      	asrs	r4, r4, #2
 800abb0:	2500      	movs	r5, #0
 800abb2:	42a5      	cmp	r5, r4
 800abb4:	d105      	bne.n	800abc2 <__libc_init_array+0x2e>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abbc:	4798      	blx	r3
 800abbe:	3501      	adds	r5, #1
 800abc0:	e7ee      	b.n	800aba0 <__libc_init_array+0xc>
 800abc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abc6:	4798      	blx	r3
 800abc8:	3501      	adds	r5, #1
 800abca:	e7f2      	b.n	800abb2 <__libc_init_array+0x1e>
 800abcc:	0800af24 	.word	0x0800af24
 800abd0:	0800af24 	.word	0x0800af24
 800abd4:	0800af24 	.word	0x0800af24
 800abd8:	0800af28 	.word	0x0800af28

0800abdc <memcpy>:
 800abdc:	b510      	push	{r4, lr}
 800abde:	1e43      	subs	r3, r0, #1
 800abe0:	440a      	add	r2, r1
 800abe2:	4291      	cmp	r1, r2
 800abe4:	d100      	bne.n	800abe8 <memcpy+0xc>
 800abe6:	bd10      	pop	{r4, pc}
 800abe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abf0:	e7f7      	b.n	800abe2 <memcpy+0x6>

0800abf2 <memset>:
 800abf2:	4402      	add	r2, r0
 800abf4:	4603      	mov	r3, r0
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d100      	bne.n	800abfc <memset+0xa>
 800abfa:	4770      	bx	lr
 800abfc:	f803 1b01 	strb.w	r1, [r3], #1
 800ac00:	e7f9      	b.n	800abf6 <memset+0x4>
	...

0800ac04 <sqrtf>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	ed2d 8b02 	vpush	{d8}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	eeb0 8a40 	vmov.f32	s16, s0
 800ac10:	f000 f848 	bl	800aca4 <__ieee754_sqrtf>
 800ac14:	4b21      	ldr	r3, [pc, #132]	; (800ac9c <sqrtf+0x98>)
 800ac16:	f993 4000 	ldrsb.w	r4, [r3]
 800ac1a:	1c63      	adds	r3, r4, #1
 800ac1c:	d02c      	beq.n	800ac78 <sqrtf+0x74>
 800ac1e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac26:	d627      	bvs.n	800ac78 <sqrtf+0x74>
 800ac28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac30:	d522      	bpl.n	800ac78 <sqrtf+0x74>
 800ac32:	2301      	movs	r3, #1
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	4b1a      	ldr	r3, [pc, #104]	; (800aca0 <sqrtf+0x9c>)
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	ee18 0a10 	vmov	r0, s16
 800ac3e:	2300      	movs	r3, #0
 800ac40:	9308      	str	r3, [sp, #32]
 800ac42:	f7f5 fc4d 	bl	80004e0 <__aeabi_f2d>
 800ac46:	2200      	movs	r2, #0
 800ac48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac50:	2300      	movs	r3, #0
 800ac52:	b9ac      	cbnz	r4, 800ac80 <sqrtf+0x7c>
 800ac54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac58:	4668      	mov	r0, sp
 800ac5a:	f000 f826 	bl	800acaa <matherr>
 800ac5e:	b1b8      	cbz	r0, 800ac90 <sqrtf+0x8c>
 800ac60:	9b08      	ldr	r3, [sp, #32]
 800ac62:	b11b      	cbz	r3, 800ac6c <sqrtf+0x68>
 800ac64:	f7ff ff90 	bl	800ab88 <__errno>
 800ac68:	9b08      	ldr	r3, [sp, #32]
 800ac6a:	6003      	str	r3, [r0, #0]
 800ac6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac70:	f7f5 fea0 	bl	80009b4 <__aeabi_d2f>
 800ac74:	ee00 0a10 	vmov	s0, r0
 800ac78:	b00a      	add	sp, #40	; 0x28
 800ac7a:	ecbd 8b02 	vpop	{d8}
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	4610      	mov	r0, r2
 800ac82:	4619      	mov	r1, r3
 800ac84:	f7f5 fdae 	bl	80007e4 <__aeabi_ddiv>
 800ac88:	2c02      	cmp	r4, #2
 800ac8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac8e:	d1e3      	bne.n	800ac58 <sqrtf+0x54>
 800ac90:	f7ff ff7a 	bl	800ab88 <__errno>
 800ac94:	2321      	movs	r3, #33	; 0x21
 800ac96:	6003      	str	r3, [r0, #0]
 800ac98:	e7e2      	b.n	800ac60 <sqrtf+0x5c>
 800ac9a:	bf00      	nop
 800ac9c:	20000098 	.word	0x20000098
 800aca0:	0800af14 	.word	0x0800af14

0800aca4 <__ieee754_sqrtf>:
 800aca4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aca8:	4770      	bx	lr

0800acaa <matherr>:
 800acaa:	2000      	movs	r0, #0
 800acac:	4770      	bx	lr
	...

0800acb0 <_init>:
 800acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb2:	bf00      	nop
 800acb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb6:	bc08      	pop	{r3}
 800acb8:	469e      	mov	lr, r3
 800acba:	4770      	bx	lr

0800acbc <_fini>:
 800acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbe:	bf00      	nop
 800acc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc2:	bc08      	pop	{r3}
 800acc4:	469e      	mov	lr, r3
 800acc6:	4770      	bx	lr
