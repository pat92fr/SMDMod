
STM32G431KBx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaec  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af0c  0800af0c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af14  0800af14  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af14  0800af14  0001af14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800af1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003568  2000009c  0800afb8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003604  0800afb8  00023604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da77  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a09  00000000  00000000  0003db43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001830  00000000  00000000  00041550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  00042d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022668  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015714  00000000  00000000  00066a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ddcf2  00000000  00000000  0007c164  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159e56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  00159ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000009c 	.word	0x2000009c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800acac 	.word	0x0800acac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a0 	.word	0x200000a0
 8000214:	0800acac 	.word	0x0800acac

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <scale_all_sensors>:
static float present_velocity_dps = 0.0f;
static float last_present_position_deg = 0.0f;
static float last_setpoint_velocity_dps = 0.0f;

void scale_all_sensors()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
	// scale motor current sense (unit:mA) and estimated average motor current with sign (using PWM ratio and setpoint PWM sign)
	float const a = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_A_L],regs[REG_CAL_CURRENT_SENSE_A_H]));
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <scale_all_sensors+0x130>)
 8000d5c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	4a48      	ldr	r2, [pc, #288]	; (8000e84 <scale_all_sensors+0x130>)
 8000d64:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	ee07 3a90 	vmov	s15, r3
 8000d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d72:	edc7 7a03 	vstr	s15, [r7, #12]
	present_motor_current_ma = (motor_current_input_adc-motor_current_input_adc_offset)/a*1000.0f*pwm_sign*pwm_ratio;
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <scale_all_sensors+0x134>)
 8000d78:	ed93 7a00 	vldr	s14, [r3]
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <scale_all_sensors+0x138>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d86:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000e90 <scale_all_sensors+0x13c>
 8000d92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <scale_all_sensors+0x140>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <scale_all_sensors+0x144>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <scale_all_sensors+0x148>)
 8000dac:	edc3 7a00 	vstr	s15, [r3]

	// scale position (unit:degrees)
	float const min_position_adc = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_ADC_L],regs[REG_MIN_POSITION_ADC_H]));
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <scale_all_sensors+0x130>)
 8000db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <scale_all_sensors+0x130>)
 8000dba:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc8:	edc7 7a02 	vstr	s15, [r7, #8]
	float const max_position_adc = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_ADC_L],regs[REG_MAX_POSITION_ADC_H]));
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <scale_all_sensors+0x130>)
 8000dce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <scale_all_sensors+0x130>)
 8000dd6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de4:	edc7 7a01 	vstr	s15, [r7, #4]
	float const max_rotation_deg = (float)(regs[REG_MAX_ROTATION_DEG]);
 8000de8:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <scale_all_sensors+0x130>)
 8000dea:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df6:	edc7 7a00 	vstr	s15, [r7]
	present_position_deg = fmap(position_input_adc,min_position_adc,max_position_adc,0.0f,max_rotation_deg);
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <scale_all_sensors+0x14c>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ed97 2a00 	vldr	s4, [r7]
 8000e04:	eddf 1a27 	vldr	s3, [pc, #156]	; 8000ea4 <scale_all_sensors+0x150>
 8000e08:	ed97 1a01 	vldr	s2, [r7, #4]
 8000e0c:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	f002 f9ab 	bl	800316e <fmap>
 8000e18:	eef0 7a40 	vmov.f32	s15, s0
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <scale_all_sensors+0x154>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
	// potentiometer leads maybe inverted, user can reverse polarity of potentiometer (EEPROM parameter)
	if(regs[REG_INV_ROTATION_SENSOR] > 0)
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <scale_all_sensors+0x130>)
 8000e24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <scale_all_sensors+0xec>
		present_position_deg =  max_rotation_deg-present_position_deg;
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <scale_all_sensors+0x154>)
 8000e2e:	edd3 7a00 	vldr	s15, [r3]
 8000e32:	ed97 7a00 	vldr	s14, [r7]
 8000e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <scale_all_sensors+0x154>)
 8000e3c:	edc3 7a00 	vstr	s15, [r3]

	// scale voltage (unit:0.1V)
	present_voltage_0v1 = voltage_input_adc/4096.0f*3.3f*24.2f/2.2f*10.0f*VOLTAGE_CALIBRATION;
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <scale_all_sensors+0x158>)
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000eb0 <scale_all_sensors+0x15c>
 8000e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e4e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000eb4 <scale_all_sensors+0x160>
 8000e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e56:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000eb8 <scale_all_sensors+0x164>
 8000e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e5e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000ebc <scale_all_sensors+0x168>
 8000e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e6e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ec0 <scale_all_sensors+0x16c>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <scale_all_sensors+0x170>)
 8000e78:	edc3 7a00 	vstr	s15, [r3]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000150 	.word	0x20000150
 8000e88:	200000c0 	.word	0x200000c0
 8000e8c:	200000cc 	.word	0x200000cc
 8000e90:	447a0000 	.word	0x447a0000
 8000e94:	200000d0 	.word	0x200000d0
 8000e98:	200000d4 	.word	0x200000d4
 8000e9c:	200000d8 	.word	0x200000d8
 8000ea0:	200000c4 	.word	0x200000c4
 8000ea4:	00000000 	.word	0x00000000
 8000ea8:	200000dc 	.word	0x200000dc
 8000eac:	200000c8 	.word	0x200000c8
 8000eb0:	45800000 	.word	0x45800000
 8000eb4:	40533333 	.word	0x40533333
 8000eb8:	41c1999a 	.word	0x41c1999a
 8000ebc:	400ccccd 	.word	0x400ccccd
 8000ec0:	3f8a3d71 	.word	0x3f8a3d71
 8000ec4:	200000e0 	.word	0x200000e0

08000ec8 <APP_Control_Reset>:

// called once after SW REBBOT or HW RESET, and every time entering a new control loop mode
void APP_Control_Reset()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	// reset
	entering_state = true;
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <APP_Control_Reset+0x9c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
	counter = 0;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <APP_Control_Reset+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	pid_reset(&pid_position);
 8000ed8:	4824      	ldr	r0, [pc, #144]	; (8000f6c <APP_Control_Reset+0xa4>)
 8000eda:	f002 f98e 	bl	80031fa <pid_reset>
	pid_reset(&pid_current);
 8000ede:	4824      	ldr	r0, [pc, #144]	; (8000f70 <APP_Control_Reset+0xa8>)
 8000ee0:	f002 f98b 	bl	80031fa <pid_reset>
	setpoint_pwm = 0.0f;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <APP_Control_Reset+0xac>)
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	setpoint_current_ma = 0.0f;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <APP_Control_Reset+0xb0>)
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
	setpoint_acceleration_dpss = 0.0f;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <APP_Control_Reset+0xb4>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
	setpoint_velocity_dps = 0.0f;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <APP_Control_Reset+0xb8>)
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	last_setpoint_velocity_dps = 0.0f;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <APP_Control_Reset+0xbc>)
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	setpoint_position_deg = present_position_deg;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <APP_Control_Reset+0xc4>)
 8000f12:	6013      	str	r3, [r2, #0]
	last_present_position_deg = present_position_deg;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <APP_Control_Reset+0xc8>)
 8000f1a:	6013      	str	r3, [r2, #0]
	// when re-entering in the control mode 'position', avoid glitch from past goal position
	regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <APP_Control_Reset+0xcc>)
 8000f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <APP_Control_Reset+0xc0>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f4e:	ee17 3a90 	vmov	r3, s15
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	121b      	asrs	r3, r3, #8
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <APP_Control_Reset+0xcc>)
 8000f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	200000f8 	.word	0x200000f8
 8000f6c:	200000fc 	.word	0x200000fc
 8000f70:	20000108 	.word	0x20000108
 8000f74:	200000e4 	.word	0x200000e4
 8000f78:	200000e8 	.word	0x200000e8
 8000f7c:	200000ec 	.word	0x200000ec
 8000f80:	200000f0 	.word	0x200000f0
 8000f84:	2000011c 	.word	0x2000011c
 8000f88:	200000dc 	.word	0x200000dc
 8000f8c:	200000f4 	.word	0x200000f4
 8000f90:	20000118 	.word	0x20000118
 8000f94:	20000150 	.word	0x20000150

08000f98 <APP_Control_Init>:

// called once after SW REBOOT or HW RESET
void APP_Control_Init()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	// reset (EWMA) filtered sensor inputs
	motor_current_input_adc = 0.0f;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <APP_Control_Init+0x8c>)
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
	position_input_adc = 0.0f; // NOTE : init by zero will delay the present position estimation by 1 ms at least
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <APP_Control_Init+0x90>)
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
	voltage_input_adc = 0.0f; // NOTE : init by zero will delay the present voltage estimation by 1 ms at least
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <APP_Control_Init+0x94>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	motor_current_input_adc_offset = (float)(MAKE_SHORT(regs[REG_CAL_CURRENT_SENSE_B_L],regs[REG_CAL_CURRENT_SENSE_B_H]));
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <APP_Control_Init+0x98>)
 8000fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <APP_Control_Init+0x98>)
 8000fbe:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <APP_Control_Init+0x9c>)
 8000fce:	edc3 7a00 	vstr	s15, [r3]

	// force motor in coast
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_COAST);
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <APP_Control_Init+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_COAST);
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <APP_Control_Init+0xa0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
	// start motor PWM generation
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4814      	ldr	r0, [pc, #80]	; (8001038 <APP_Control_Init+0xa0>)
 8000fe6:	f007 fa73 	bl	80084d0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 8000fea:	2104      	movs	r1, #4
 8000fec:	4812      	ldr	r0, [pc, #72]	; (8001038 <APP_Control_Init+0xa0>)
 8000fee:	f007 fa6f 	bl	80084d0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start(&htim15);
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <APP_Control_Init+0xa4>)
 8000ff4:	f007 f9a8 	bl	8008348 <HAL_TIM_Base_Start>
	// start OP AMP
	HAL_OPAMP_Start(&hopamp1);
 8000ff8:	4811      	ldr	r0, [pc, #68]	; (8001040 <APP_Control_Init+0xa8>)
 8000ffa:	f006 f943 	bl	8007284 <HAL_OPAMP_Start>
	// start ADC
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 8000ffe:	2203      	movs	r2, #3
 8001000:	4910      	ldr	r1, [pc, #64]	; (8001044 <APP_Control_Init+0xac>)
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <APP_Control_Init+0xb0>)
 8001004:	f003 ff8a 	bl	8004f1c <HAL_ADC_Start_DMA>

	// 2ms delay for filtered sensor inputs to stabilize
	HAL_Delay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f003 fb9d 	bl	8004748 <HAL_Delay>
	scale_all_sensors();
 800100e:	f7ff fea1 	bl	8000d54 <scale_all_sensors>
	HAL_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f003 fb98 	bl	8004748 <HAL_Delay>
	scale_all_sensors();
 8001018:	f7ff fe9c 	bl	8000d54 <scale_all_sensors>

	// reset all state control loop variables
	APP_Control_Reset();
 800101c:	f7ff ff54 	bl	8000ec8 <APP_Control_Reset>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000c0 	.word	0x200000c0
 8001028:	200000c4 	.word	0x200000c4
 800102c:	200000c8 	.word	0x200000c8
 8001030:	20000150 	.word	0x20000150
 8001034:	200000cc 	.word	0x200000cc
 8001038:	20000234 	.word	0x20000234
 800103c:	20000280 	.word	0x20000280
 8001040:	200002cc 	.word	0x200002cc
 8001044:	200000b8 	.word	0x200000b8
 8001048:	20000308 	.word	0x20000308

0800104c <APP_Control_Process>:

// called from main loop
void APP_Control_Process()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0bc      	sub	sp, #240	; 0xf0
 8001050:	af00      	add	r7, sp, #0
	// apply 1ms period
	uint16_t current_time_us = __HAL_TIM_GET_COUNTER(&htim15);
 8001052:	4bb6      	ldr	r3, [pc, #728]	; (800132c <APP_Control_Process+0x2e0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
	if(current_time_us<period_us)
 800105c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001060:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8001064:	4293      	cmp	r3, r2
 8001066:	f0c1 80ee 	bcc.w	8002246 <APP_Control_Process+0x11fa>
		return;
	__HAL_TIM_SET_COUNTER(&htim15,(current_time_us-period_us));
 800106a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800106e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001072:	1a9a      	subs	r2, r3, r2
 8001074:	4bad      	ldr	r3, [pc, #692]	; (800132c <APP_Control_Process+0x2e0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

	// acquire motor current, position and voltage (see ADC DMA completed conversion callback)

	// scale sensor at process rate
	scale_all_sensors();
 800107a:	f7ff fe6b 	bl	8000d54 <scale_all_sensors>

	// compute velocity from position (derivative), and filter velocity (EWMA)
	float present_speed_dps_unfiltered = (present_position_deg - last_present_position_deg)*LOOP_FREQUENCY_HZ;
 800107e:	4bac      	ldr	r3, [pc, #688]	; (8001330 <APP_Control_Process+0x2e4>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	4bab      	ldr	r3, [pc, #684]	; (8001334 <APP_Control_Process+0x2e8>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001338 <APP_Control_Process+0x2ec>
 8001092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001096:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
	last_present_position_deg =  present_position_deg;
 800109a:	4ba5      	ldr	r3, [pc, #660]	; (8001330 <APP_Control_Process+0x2e4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4aa5      	ldr	r2, [pc, #660]	; (8001334 <APP_Control_Process+0x2e8>)
 80010a0:	6013      	str	r3, [r2, #0]
	present_velocity_dps = ALPHA_VELOCITY * present_speed_dps_unfiltered + (1.0f-ALPHA_VELOCITY)*present_velocity_dps;
 80010a2:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80010a6:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800133c <APP_Control_Process+0x2f0>
 80010aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ae:	4ba4      	ldr	r3, [pc, #656]	; (8001340 <APP_Control_Process+0x2f4>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001344 <APP_Control_Process+0x2f8>
 80010b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	4b9f      	ldr	r3, [pc, #636]	; (8001340 <APP_Control_Process+0x2f4>)
 80010c2:	edc3 7a00 	vstr	s15, [r3]

	// torque enable logic
	bool torque_enable = (regs[REG_TORQUE_ENABLE]!=0) && (regs[REG_HARDWARE_ERROR_STATUS]==0);
 80010c6:	4ba0      	ldr	r3, [pc, #640]	; (8001348 <APP_Control_Process+0x2fc>)
 80010c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <APP_Control_Process+0x92>
 80010d0:	4b9d      	ldr	r3, [pc, #628]	; (8001348 <APP_Control_Process+0x2fc>)
 80010d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <APP_Control_Process+0x92>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <APP_Control_Process+0x94>
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80010e4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if(torque_enable)
 80010f0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 871d 	beq.w	8001f34 <APP_Control_Process+0xee8>
	{
		// modes & transitions
		// compute setpoint_pwm
		switch(current_control_mode)
 80010fa:	4b94      	ldr	r3, [pc, #592]	; (800134c <APP_Control_Process+0x300>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b04      	cmp	r3, #4
 8001100:	f200 86b9 	bhi.w	8001e76 <APP_Control_Process+0xe2a>
 8001104:	a201      	add	r2, pc, #4	; (adr r2, 800110c <APP_Control_Process+0xc0>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	08001121 	.word	0x08001121
 8001110:	08001371 	.word	0x08001371
 8001114:	080016a9 	.word	0x080016a9
 8001118:	08001bad 	.word	0x08001bad
 800111c:	08001d6b 	.word	0x08001d6b
		{
		// Simple PID from position to pwm
		// Mg92 Kp = 400 Ki = 20 Kd = 400
		case REG_CONTROL_MODE_POSITION:
			if(entering_state)
 8001120:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <APP_Control_Process+0x304>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d042      	beq.n	80011ae <APP_Control_Process+0x162>
			{
				entering_state = false;
 8001128:	4b89      	ldr	r3, [pc, #548]	; (8001350 <APP_Control_Process+0x304>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 800112e:	4b80      	ldr	r3, [pc, #512]	; (8001330 <APP_Control_Process+0x2e4>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	ee17 3a90 	vmov	r3, s15
 8001144:	b21b      	sxth	r3, r3
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <APP_Control_Process+0x2fc>)
 800114a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 800114e:	4b78      	ldr	r3, [pc, #480]	; (8001330 <APP_Control_Process+0x2e4>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	b21b      	sxth	r3, r3
 8001166:	121b      	asrs	r3, r3, #8
 8001168:	b21b      	sxth	r3, r3
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b76      	ldr	r3, [pc, #472]	; (8001348 <APP_Control_Process+0x2fc>)
 800116e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001172:	4b75      	ldr	r3, [pc, #468]	; (8001348 <APP_Control_Process+0x2fc>)
 8001174:	7e9a      	ldrb	r2, [r3, #26]
 8001176:	4b74      	ldr	r3, [pc, #464]	; (8001348 <APP_Control_Process+0x2fc>)
 8001178:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 800117c:	4b72      	ldr	r3, [pc, #456]	; (8001348 <APP_Control_Process+0x2fc>)
 800117e:	7eda      	ldrb	r2, [r3, #27]
 8001180:	4b71      	ldr	r3, [pc, #452]	; (8001348 <APP_Control_Process+0x2fc>)
 8001182:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001186:	4b70      	ldr	r3, [pc, #448]	; (8001348 <APP_Control_Process+0x2fc>)
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <APP_Control_Process+0x2fc>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001196:	4b6c      	ldr	r3, [pc, #432]	; (8001348 <APP_Control_Process+0x2fc>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 800119e:	4b6a      	ldr	r3, [pc, #424]	; (8001348 <APP_Control_Process+0x2fc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <APP_Control_Process+0x2e4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6a      	ldr	r2, [pc, #424]	; (8001354 <APP_Control_Process+0x308>)
 80011ac:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 80011ae:	4b66      	ldr	r3, [pc, #408]	; (8001348 <APP_Control_Process+0x2fc>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	4a64      	ldr	r2, [pc, #400]	; (8001348 <APP_Control_Process+0x2fc>)
 80011b6:	7c12      	ldrb	r2, [r2, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <APP_Control_Process+0x2fc>)
 80011c8:	7cdb      	ldrb	r3, [r3, #19]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <APP_Control_Process+0x2fc>)
 80011ce:	7c92      	ldrb	r2, [r2, #18]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 80011de:	4b5a      	ldr	r3, [pc, #360]	; (8001348 <APP_Control_Process+0x2fc>)
 80011e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4a58      	ldr	r2, [pc, #352]	; (8001348 <APP_Control_Process+0x2fc>)
 80011e8:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80011ec:	4313      	orrs	r3, r2
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001358 <APP_Control_Process+0x30c>
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 8001202:	ed97 1a0c 	vldr	s2, [r7, #48]	; 0x30
 8001206:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 800120a:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800120e:	f001 ff85 	bl	800311c <fconstrain>
 8001212:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 8001216:	4a4f      	ldr	r2, [pc, #316]	; (8001354 <APP_Control_Process+0x308>)
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <APP_Control_Process+0x308>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <APP_Control_Process+0x2e4>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				// compute pwm setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8001230:	4b45      	ldr	r3, [pc, #276]	; (8001348 <APP_Control_Process+0x2fc>)
 8001232:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	4a43      	ldr	r2, [pc, #268]	; (8001348 <APP_Control_Process+0x2fc>)
 800123a:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800123e:	4313      	orrs	r3, r2
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	eddf 6a44 	vldr	s13, [pc, #272]	; 800135c <APP_Control_Process+0x310>
 800124c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001250:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <APP_Control_Process+0x2fc>)
 8001256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <APP_Control_Process+0x2fc>)
 800125e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001262:	4313      	orrs	r3, r2
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001338 <APP_Control_Process+0x2ec>
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	edc7 7a08 	vstr	s15, [r7, #32]
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <APP_Control_Process+0x2fc>)
 800127a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	4a31      	ldr	r2, [pc, #196]	; (8001348 <APP_Control_Process+0x2fc>)
 8001282:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8001286:	4313      	orrs	r3, r2
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001298:	edc7 7a07 	vstr	s15, [r7, #28]
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <APP_Control_Process+0x2fc>)
 800129e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <APP_Control_Process+0x2fc>)
 80012a6:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 80012aa:	4313      	orrs	r3, r2
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	edc7 7a06 	vstr	s15, [r7, #24]
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp(
 80012b8:	eddf 2a20 	vldr	s5, [pc, #128]	; 800133c <APP_Control_Process+0x2f0>
 80012bc:	ed97 2a06 	vldr	s4, [r7, #24]
 80012c0:	edd7 1a07 	vldr	s3, [r7, #28]
 80012c4:	ed97 1a08 	vldr	s2, [r7, #32]
 80012c8:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80012cc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <APP_Control_Process+0x314>)
 80012d2:	f002 f856 	bl	8003382 <pid_process_antiwindup_clamp>
 80012d6:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 80012da:	eddf 7a18 	vldr	s15, [pc, #96]	; 800133c <APP_Control_Process+0x2f0>
 80012de:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										pwm_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <APP_Control_Process+0x318>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001344 <APP_Control_Process+0x2f8>
 80012ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <APP_Control_Process+0x318>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
			}
			// unused setpoints zero
			setpoint_velocity_dps = 0.0f;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <APP_Control_Process+0x31c>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
			setpoint_current_ma = 0.0f;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <APP_Control_Process+0x320>)
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION)
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <APP_Control_Process+0x2fc>)
 800130c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 85a7 	beq.w	8001e64 <APP_Control_Process+0xe18>
			{
				APP_Control_Reset();
 8001316:	f7ff fdd7 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <APP_Control_Process+0x2fc>)
 800131c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001320:	461a      	mov	r2, r3
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <APP_Control_Process+0x300>)
 8001324:	601a      	str	r2, [r3, #0]
			}
			break;
 8001326:	f000 bd9d 	b.w	8001e64 <APP_Control_Process+0xe18>
 800132a:	bf00      	nop
 800132c:	20000280 	.word	0x20000280
 8001330:	200000dc 	.word	0x200000dc
 8001334:	20000118 	.word	0x20000118
 8001338:	447a0000 	.word	0x447a0000
 800133c:	3df5c28f 	.word	0x3df5c28f
 8001340:	20000114 	.word	0x20000114
 8001344:	3f6147ae 	.word	0x3f6147ae
 8001348:	20000150 	.word	0x20000150
 800134c:	20000004 	.word	0x20000004
 8001350:	20000000 	.word	0x20000000
 8001354:	200000f4 	.word	0x200000f4
 8001358:	3dcccccd 	.word	0x3dcccccd
 800135c:	42c80000 	.word	0x42c80000
 8001360:	200000fc 	.word	0x200000fc
 8001364:	200000e4 	.word	0x200000e4
 8001368:	200000f0 	.word	0x200000f0
 800136c:	200000e8 	.word	0x200000e8


		case REG_CONTROL_MODE_POSITION_TORQUE:
			if(entering_state)
 8001370:	4bbb      	ldr	r3, [pc, #748]	; (8001660 <APP_Control_Process+0x614>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d044      	beq.n	8001402 <APP_Control_Process+0x3b6>
			{
				entering_state = false;
 8001378:	4bb9      	ldr	r3, [pc, #740]	; (8001660 <APP_Control_Process+0x614>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 800137e:	4bb9      	ldr	r3, [pc, #740]	; (8001664 <APP_Control_Process+0x618>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	b21b      	sxth	r3, r3
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4bb3      	ldr	r3, [pc, #716]	; (8001668 <APP_Control_Process+0x61c>)
 800139a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 800139e:	4bb1      	ldr	r3, [pc, #708]	; (8001664 <APP_Control_Process+0x618>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 3a90 	vmov	r3, s15
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	121b      	asrs	r3, r3, #8
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4baa      	ldr	r3, [pc, #680]	; (8001668 <APP_Control_Process+0x61c>)
 80013be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 80013c2:	4ba9      	ldr	r3, [pc, #676]	; (8001668 <APP_Control_Process+0x61c>)
 80013c4:	7e1a      	ldrb	r2, [r3, #24]
 80013c6:	4ba8      	ldr	r3, [pc, #672]	; (8001668 <APP_Control_Process+0x61c>)
 80013c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 80013cc:	4ba6      	ldr	r3, [pc, #664]	; (8001668 <APP_Control_Process+0x61c>)
 80013ce:	7e5a      	ldrb	r2, [r3, #25]
 80013d0:	4ba5      	ldr	r3, [pc, #660]	; (8001668 <APP_Control_Process+0x61c>)
 80013d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 80013d6:	4ba4      	ldr	r3, [pc, #656]	; (8001668 <APP_Control_Process+0x61c>)
 80013d8:	7e9a      	ldrb	r2, [r3, #26]
 80013da:	4ba3      	ldr	r3, [pc, #652]	; (8001668 <APP_Control_Process+0x61c>)
 80013dc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 80013e0:	4ba1      	ldr	r3, [pc, #644]	; (8001668 <APP_Control_Process+0x61c>)
 80013e2:	7eda      	ldrb	r2, [r3, #27]
 80013e4:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <APP_Control_Process+0x61c>)
 80013e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset others
				regs[REG_GOAL_VELOCITY_DPS_L] = 0.0f;
 80013ea:	4b9f      	ldr	r3, [pc, #636]	; (8001668 <APP_Control_Process+0x61c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0.0f;
 80013f2:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <APP_Control_Process+0x61c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 80013fa:	4b9a      	ldr	r3, [pc, #616]	; (8001664 <APP_Control_Process+0x618>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a9b      	ldr	r2, [pc, #620]	; (800166c <APP_Control_Process+0x620>)
 8001400:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 8001402:	4b99      	ldr	r3, [pc, #612]	; (8001668 <APP_Control_Process+0x61c>)
 8001404:	7c5b      	ldrb	r3, [r3, #17]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4a97      	ldr	r2, [pc, #604]	; (8001668 <APP_Control_Process+0x61c>)
 800140a:	7c12      	ldrb	r2, [r2, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001416:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 800141a:	4b93      	ldr	r3, [pc, #588]	; (8001668 <APP_Control_Process+0x61c>)
 800141c:	7cdb      	ldrb	r3, [r3, #19]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4a91      	ldr	r2, [pc, #580]	; (8001668 <APP_Control_Process+0x61c>)
 8001422:	7c92      	ldrb	r2, [r2, #18]
 8001424:	4313      	orrs	r3, r2
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 8001432:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <APP_Control_Process+0x61c>)
 8001434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4a8b      	ldr	r2, [pc, #556]	; (8001668 <APP_Control_Process+0x61c>)
 800143c:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8001440:	4313      	orrs	r3, r2
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8001670 <APP_Control_Process+0x624>
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 8001456:	ed97 1a19 	vldr	s2, [r7, #100]	; 0x64
 800145a:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 800145e:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001462:	f001 fe5b 	bl	800311c <fconstrain>
 8001466:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
				// compute position setpoint from goal position
				// there is no profil, so position setpoint is goal position
				setpoint_position_deg = goal_position_deg;
 800146a:	4a80      	ldr	r2, [pc, #512]	; (800166c <APP_Control_Process+0x620>)
 800146c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800146e:	6013      	str	r3, [r2, #0]
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 8001470:	4b7e      	ldr	r3, [pc, #504]	; (800166c <APP_Control_Process+0x620>)
 8001472:	ed93 7a00 	vldr	s14, [r3]
 8001476:	4b7b      	ldr	r3, [pc, #492]	; (8001664 <APP_Control_Process+0x618>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8001484:	4b78      	ldr	r3, [pc, #480]	; (8001668 <APP_Control_Process+0x61c>)
 8001486:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	4a76      	ldr	r2, [pc, #472]	; (8001668 <APP_Control_Process+0x61c>)
 800148e:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001492:	4313      	orrs	r3, r2
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001674 <APP_Control_Process+0x628>
 80014a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <APP_Control_Process+0x61c>)
 80014aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	4a6d      	ldr	r2, [pc, #436]	; (8001668 <APP_Control_Process+0x61c>)
 80014b2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80014b6:	4313      	orrs	r3, r2
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c0:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001678 <APP_Control_Process+0x62c>
 80014c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <APP_Control_Process+0x61c>)
 80014ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	4a64      	ldr	r2, [pc, #400]	; (8001668 <APP_Control_Process+0x61c>)
 80014d6:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80014da:	4313      	orrs	r3, r2
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 80014f0:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <APP_Control_Process+0x61c>)
 80014f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4a5b      	ldr	r2, [pc, #364]	; (8001668 <APP_Control_Process+0x61c>)
 80014fa:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80014fe:	4313      	orrs	r3, r2
 8001500:	ee07 3a90 	vmov	s15, r3
 8001504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001508:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp(
 800150c:	eddf 2a5b 	vldr	s5, [pc, #364]	; 800167c <APP_Control_Process+0x630>
 8001510:	ed97 2a13 	vldr	s4, [r7, #76]	; 0x4c
 8001514:	edd7 1a14 	vldr	s3, [r7, #80]	; 0x50
 8001518:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 800151c:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8001520:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001524:	4856      	ldr	r0, [pc, #344]	; (8001680 <APP_Control_Process+0x634>)
 8001526:	f001 ff2c 	bl	8003382 <pid_process_antiwindup_clamp>
 800152a:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 800152e:	eddf 7a55 	vldr	s15, [pc, #340]	; 8001684 <APP_Control_Process+0x638>
 8001532:	ee27 7a27 	vmul.f32	s14, s14, s15
										pid_pos_kd,
										current_limit,
										ALPHA_VELOCITY
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8001536:	4b54      	ldr	r3, [pc, #336]	; (8001688 <APP_Control_Process+0x63c>)
 8001538:	edd3 7a00 	vldr	s15, [r3]
 800153c:	eddf 6a53 	vldr	s13, [pc, #332]	; 800168c <APP_Control_Process+0x640>
 8001540:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8001548:	4b4f      	ldr	r3, [pc, #316]	; (8001688 <APP_Control_Process+0x63c>)
 800154a:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 800154e:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <APP_Control_Process+0x63c>)
 8001550:	ed93 7a00 	vldr	s14, [r3]
 8001554:	4b4e      	ldr	r3, [pc, #312]	; (8001690 <APP_Control_Process+0x644>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <APP_Control_Process+0x61c>)
 8001564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <APP_Control_Process+0x61c>)
 800156c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001570:	4313      	orrs	r3, r2
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001678 <APP_Control_Process+0x62c>
 800157e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001582:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <APP_Control_Process+0x61c>)
 8001588:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4a36      	ldr	r2, [pc, #216]	; (8001668 <APP_Control_Process+0x61c>)
 8001590:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001594:	4313      	orrs	r3, r2
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001674 <APP_Control_Process+0x628>
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <APP_Control_Process+0x61c>)
 80015ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <APP_Control_Process+0x61c>)
 80015b4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80015b8:	4313      	orrs	r3, r2
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c2:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001674 <APP_Control_Process+0x628>
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <APP_Control_Process+0x61c>)
 80015d0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <APP_Control_Process+0x61c>)
 80015d8:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 80015dc:	4313      	orrs	r3, r2
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <APP_Control_Process+0x63c>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	eeb0 3a67 	vmov.f32	s6, s15
 80015fc:	eddf 2a25 	vldr	s5, [pc, #148]	; 8001694 <APP_Control_Process+0x648>
 8001600:	ed97 2a0e 	vldr	s4, [r7, #56]	; 0x38
 8001604:	eddf 1a23 	vldr	s3, [pc, #140]	; 8001694 <APP_Control_Process+0x648>
 8001608:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 800160c:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8001610:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001614:	4820      	ldr	r0, [pc, #128]	; (8001698 <APP_Control_Process+0x64c>)
 8001616:	f001 fe06 	bl	8003226 <pid_process_antiwindup_clamp_with_ff>
 800161a:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 800161e:	eddf 7a17 	vldr	s15, [pc, #92]	; 800167c <APP_Control_Process+0x630>
 8001622:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <APP_Control_Process+0x650>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80016a0 <APP_Control_Process+0x654>
 8001630:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <APP_Control_Process+0x650>)
 800163a:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_POSITION_TORQUE)
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <APP_Control_Process+0x61c>)
 8001640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001644:	2b01      	cmp	r3, #1
 8001646:	f000 840f 	beq.w	8001e68 <APP_Control_Process+0xe1c>
			{
				APP_Control_Reset();
 800164a:	f7ff fc3d 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <APP_Control_Process+0x61c>)
 8001650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001654:	461a      	mov	r2, r3
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <APP_Control_Process+0x658>)
 8001658:	601a      	str	r2, [r3, #0]
			}
			break;
 800165a:	f000 bc05 	b.w	8001e68 <APP_Control_Process+0xe1c>
 800165e:	bf00      	nop
 8001660:	20000000 	.word	0x20000000
 8001664:	200000dc 	.word	0x200000dc
 8001668:	20000150 	.word	0x20000150
 800166c:	200000f4 	.word	0x200000f4
 8001670:	3dcccccd 	.word	0x3dcccccd
 8001674:	42c80000 	.word	0x42c80000
 8001678:	447a0000 	.word	0x447a0000
 800167c:	3df5c28f 	.word	0x3df5c28f
 8001680:	200000fc 	.word	0x200000fc
 8001684:	3f75c28f 	.word	0x3f75c28f
 8001688:	200000e8 	.word	0x200000e8
 800168c:	3d23d710 	.word	0x3d23d710
 8001690:	200000d8 	.word	0x200000d8
 8001694:	00000000 	.word	0x00000000
 8001698:	20000108 	.word	0x20000108
 800169c:	200000e4 	.word	0x200000e4
 80016a0:	3f6147ae 	.word	0x3f6147ae
 80016a4:	20000004 	.word	0x20000004


		case REG_CONTROL_MODE_VELOCITY_PROFIL_POSITION_TORQUE:
			if(entering_state)
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <APP_Control_Process+0x7d4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d046      	beq.n	800173e <APP_Control_Process+0x6f2>
			{
				entering_state = false;
 80016b0:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <APP_Control_Process+0x7d4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 80016b6:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <APP_Control_Process+0x7d8>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c8:	ee17 3a90 	vmov	r3, s15
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <APP_Control_Process+0x7dc>)
 80016d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 80016d6:	4b53      	ldr	r3, [pc, #332]	; (8001824 <APP_Control_Process+0x7d8>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e8:	ee17 3a90 	vmov	r3, s15
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	121b      	asrs	r3, r3, #8
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <APP_Control_Process+0x7dc>)
 80016f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				// init limit RAM registers according this control mode
				regs[REG_GOAL_VELOCITY_DPS_L] = regs[REG_MAX_VELOCITY_DPS_L];
 80016fa:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <APP_Control_Process+0x7dc>)
 80016fc:	7d1a      	ldrb	r2, [r3, #20]
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <APP_Control_Process+0x7dc>)
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = regs[REG_MAX_VELOCITY_DPS_H];
 8001704:	4b48      	ldr	r3, [pc, #288]	; (8001828 <APP_Control_Process+0x7dc>)
 8001706:	7d5a      	ldrb	r2, [r3, #21]
 8001708:	4b47      	ldr	r3, [pc, #284]	; (8001828 <APP_Control_Process+0x7dc>)
 800170a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = regs[REG_MAX_CURRENT_MA_L];
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <APP_Control_Process+0x7dc>)
 8001710:	7e1a      	ldrb	r2, [r3, #24]
 8001712:	4b45      	ldr	r3, [pc, #276]	; (8001828 <APP_Control_Process+0x7dc>)
 8001714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = regs[REG_MAX_CURRENT_MA_H];
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <APP_Control_Process+0x7dc>)
 800171a:	7e5a      	ldrb	r2, [r3, #25]
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <APP_Control_Process+0x7dc>)
 800171e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <APP_Control_Process+0x7dc>)
 8001724:	7e9a      	ldrb	r2, [r3, #26]
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <APP_Control_Process+0x7dc>)
 8001728:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 800172c:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <APP_Control_Process+0x7dc>)
 800172e:	7eda      	ldrb	r2, [r3, #27]
 8001730:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <APP_Control_Process+0x7dc>)
 8001732:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// set setpoint position at current position
				setpoint_position_deg = present_position_deg;
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <APP_Control_Process+0x7d8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a3c      	ldr	r2, [pc, #240]	; (800182c <APP_Control_Process+0x7e0>)
 800173c:	6013      	str	r3, [r2, #0]
			}
			{
				// limit goal position
				float const min_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MIN_POSITION_DEG_L],regs[REG_MIN_POSITION_DEG_H]));
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <APP_Control_Process+0x7dc>)
 8001740:	7c5b      	ldrb	r3, [r3, #17]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <APP_Control_Process+0x7dc>)
 8001746:	7c12      	ldrb	r2, [r2, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				float const max_goal_position_deg = (float)(MAKE_SHORT(regs[REG_MAX_POSITION_DEG_L],regs[REG_MAX_POSITION_DEG_H]));
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <APP_Control_Process+0x7dc>)
 8001758:	7cdb      	ldrb	r3, [r3, #19]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4a32      	ldr	r2, [pc, #200]	; (8001828 <APP_Control_Process+0x7dc>)
 800175e:	7c92      	ldrb	r2, [r2, #18]
 8001760:	4313      	orrs	r3, r2
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				float goal_position_deg = 0.1f * (float)(MAKE_SHORT(regs[REG_GOAL_POSITION_DEG_L],regs[REG_GOAL_POSITION_DEG_H]));
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <APP_Control_Process+0x7dc>)
 8001770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <APP_Control_Process+0x7dc>)
 8001778:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800177c:	4313      	orrs	r3, r2
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001786:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001830 <APP_Control_Process+0x7e4>
 800178a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
				goal_position_deg = fconstrain(goal_position_deg,min_goal_position_deg,max_goal_position_deg);
 8001792:	ed97 1a2f 	vldr	s2, [r7, #188]	; 0xbc
 8001796:	edd7 0a30 	vldr	s1, [r7, #192]	; 0xc0
 800179a:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 800179e:	f001 fcbd 	bl	800311c <fconstrain>
 80017a2:	ed87 0a2e 	vstr	s0, [r7, #184]	; 0xb8
				// compute position setpoint from goal position
				float const max_velocity_dps = (float)(MAKE_SHORT(regs[REG_GOAL_VELOCITY_DPS_L],regs[REG_GOAL_VELOCITY_DPS_H]));
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <APP_Control_Process+0x7dc>)
 80017a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <APP_Control_Process+0x7dc>)
 80017b0:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 80017b4:	4313      	orrs	r3, r2
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				float const max_acceleration_dpss = (float)(MAKE_SHORT(regs[REG_MAX_ACCELERATION_DPSS_L],regs[REG_MAX_ACCELERATION_DPSS_H]));
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <APP_Control_Process+0x7dc>)
 80017c4:	7ddb      	ldrb	r3, [r3, #23]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <APP_Control_Process+0x7dc>)
 80017ca:	7d92      	ldrb	r2, [r2, #22]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
				// trapezoidal profile for setpoint position
				// compute remaining distance between setpoint position to goal position
				float const remaining_distance_deg = goal_position_deg - setpoint_position_deg;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <APP_Control_Process+0x7e0>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
				// compute maximun velocity to be able to stop at goal position
				float vmax = sqrtf( 2.0f * max_acceleration_dpss * fabsf(remaining_distance_deg) );
 80017ec:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80017f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017f4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80017f8:	eef0 7ae7 	vabs.f32	s15, s15
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	f009 f9fc 	bl	800ac00 <sqrtf>
 8001808:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
				// restore sign
				vmax = ( remaining_distance_deg>0.0f) ? vmax : -vmax;
 800180c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	dd0c      	ble.n	8001834 <APP_Control_Process+0x7e8>
 800181a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800181e:	e00d      	b.n	800183c <APP_Control_Process+0x7f0>
 8001820:	20000000 	.word	0x20000000
 8001824:	200000dc 	.word	0x200000dc
 8001828:	20000150 	.word	0x20000150
 800182c:	200000f4 	.word	0x200000f4
 8001830:	3dcccccd 	.word	0x3dcccccd
 8001834:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001838:	eef1 7a67 	vneg.f32	s15, s15
 800183c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
				// limit maximum velocity, when far from stop
				vmax = fconstrain(vmax,-max_velocity_dps,max_velocity_dps);
 8001840:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001844:	eef1 7a67 	vneg.f32	s15, s15
 8001848:	ed97 1a2d 	vldr	s2, [r7, #180]	; 0xb4
 800184c:	eef0 0a67 	vmov.f32	s1, s15
 8001850:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8001854:	f001 fc62 	bl	800311c <fconstrain>
 8001858:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
				// compute distance between maximun velocity and current velocity
				float delta_v = vmax - setpoint_velocity_dps;
 800185c:	4bbf      	ldr	r3, [pc, #764]	; (8001b5c <APP_Control_Process+0xb10>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
				// now compute new velocity according acceleration
				setpoint_velocity_dps += fconstrain(delta_v, (-max_acceleration_dpss/LOOP_FREQUENCY_HZ), (max_acceleration_dpss/LOOP_FREQUENCY_HZ));
 800186e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001872:	eef1 7a67 	vneg.f32	s15, s15
 8001876:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001b60 <APP_Control_Process+0xb14>
 800187a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800187e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001882:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001b60 <APP_Control_Process+0xb14>
 8001886:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800188a:	eeb0 1a46 	vmov.f32	s2, s12
 800188e:	eef0 0a66 	vmov.f32	s1, s13
 8001892:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8001896:	f001 fc41 	bl	800311c <fconstrain>
 800189a:	eeb0 7a40 	vmov.f32	s14, s0
 800189e:	4baf      	ldr	r3, [pc, #700]	; (8001b5c <APP_Control_Process+0xb10>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a8:	4bac      	ldr	r3, [pc, #688]	; (8001b5c <APP_Control_Process+0xb10>)
 80018aa:	edc3 7a00 	vstr	s15, [r3]
				// now compute new position
				setpoint_position_deg += (setpoint_velocity_dps/LOOP_FREQUENCY_HZ);
 80018ae:	4bab      	ldr	r3, [pc, #684]	; (8001b5c <APP_Control_Process+0xb10>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8001b60 <APP_Control_Process+0xb14>
 80018b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018bc:	4ba9      	ldr	r3, [pc, #676]	; (8001b64 <APP_Control_Process+0xb18>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4ba7      	ldr	r3, [pc, #668]	; (8001b64 <APP_Control_Process+0xb18>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
				// now compute acceleration
				setpoint_acceleration_dpss = (setpoint_velocity_dps - last_setpoint_velocity_dps)*LOOP_FREQUENCY_HZ;
 80018cc:	4ba3      	ldr	r3, [pc, #652]	; (8001b5c <APP_Control_Process+0xb10>)
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	4ba5      	ldr	r3, [pc, #660]	; (8001b68 <APP_Control_Process+0xb1c>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018dc:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001b60 <APP_Control_Process+0xb14>
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	4ba1      	ldr	r3, [pc, #644]	; (8001b6c <APP_Control_Process+0xb20>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]
				last_setpoint_velocity_dps =  setpoint_velocity_dps;
 80018ea:	4b9c      	ldr	r3, [pc, #624]	; (8001b5c <APP_Control_Process+0xb10>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a9e      	ldr	r2, [pc, #632]	; (8001b68 <APP_Control_Process+0xb1c>)
 80018f0:	6013      	str	r3, [r2, #0]
				// compute current setpoint from position setpoint using a PID position and velocity/acceleration feed forwards
				float const pid_vel_kff = (float)(MAKE_SHORT(regs[REG_PID_VELOCITY_KFF_L],regs[REG_PID_VELOCITY_KFF_H]))/1000.0f;
 80018f2:	4b9f      	ldr	r3, [pc, #636]	; (8001b70 <APP_Control_Process+0xb24>)
 80018f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	4a9d      	ldr	r2, [pc, #628]	; (8001b70 <APP_Control_Process+0xb24>)
 80018fc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001900:	4313      	orrs	r3, r2
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190a:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001b60 <APP_Control_Process+0xb14>
 800190e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001912:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
				float const pid_acc_kff = (float)(MAKE_SHORT(regs[REG_PID_ACCELERATION_KFF_L],regs[REG_PID_ACCELERATION_KFF_H]))/100000.0f;
 8001916:	4b96      	ldr	r3, [pc, #600]	; (8001b70 <APP_Control_Process+0xb24>)
 8001918:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	4a94      	ldr	r2, [pc, #592]	; (8001b70 <APP_Control_Process+0xb24>)
 8001920:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001924:	4313      	orrs	r3, r2
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001b74 <APP_Control_Process+0xb28>
 8001932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001936:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
				float const velocity_feed_forward = pid_vel_kff * setpoint_velocity_dps;
 800193a:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <APP_Control_Process+0xb10>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001948:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
				float const acceleration_feed_forward = pid_acc_kff * setpoint_acceleration_dpss;
 800194c:	4b87      	ldr	r3, [pc, #540]	; (8001b6c <APP_Control_Process+0xb20>)
 800194e:	edd3 7a00 	vldr	s15, [r3]
 8001952:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				// compute position error
				float const error_position = setpoint_position_deg - present_position_deg;
 800195e:	4b81      	ldr	r3, [pc, #516]	; (8001b64 <APP_Control_Process+0xb18>)
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	4b84      	ldr	r3, [pc, #528]	; (8001b78 <APP_Control_Process+0xb2c>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
				// compute current setpoint from position error using a PID position
				float const pid_pos_kp = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KP_L],regs[REG_PID_POSITION_KP_H]))/100.0f;
 8001972:	4b7f      	ldr	r3, [pc, #508]	; (8001b70 <APP_Control_Process+0xb24>)
 8001974:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	4a7d      	ldr	r2, [pc, #500]	; (8001b70 <APP_Control_Process+0xb24>)
 800197c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8001980:	4313      	orrs	r3, r2
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198a:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001b7c <APP_Control_Process+0xb30>
 800198e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001992:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				float const pid_pos_ki = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KI_L],regs[REG_PID_POSITION_KI_H]))/1000.0f;
 8001996:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <APP_Control_Process+0xb24>)
 8001998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	4a74      	ldr	r2, [pc, #464]	; (8001b70 <APP_Control_Process+0xb24>)
 80019a0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80019a4:	4313      	orrs	r3, r2
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ae:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001b60 <APP_Control_Process+0xb14>
 80019b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				float const pid_pos_kd = (float)(MAKE_SHORT(regs[REG_PID_POSITION_KD_L],regs[REG_PID_POSITION_KD_H]))/10.0f;
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <APP_Control_Process+0xb24>)
 80019bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <APP_Control_Process+0xb24>)
 80019c4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80019c8:	4313      	orrs	r3, r2
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019da:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				float const current_limit = (float)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 80019de:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <APP_Control_Process+0xb24>)
 80019e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	4a62      	ldr	r2, [pc, #392]	; (8001b70 <APP_Control_Process+0xb24>)
 80019e8:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80019ec:	4313      	orrs	r3, r2
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				setpoint_current_ma =
						ALPHA_CURRENT_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 80019fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80019fe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	eeb0 3a67 	vmov.f32	s6, s15
 8001a0a:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8001b80 <APP_Control_Process+0xb34>
 8001a0e:	ed97 2a20 	vldr	s4, [r7, #128]	; 0x80
 8001a12:	edd7 1a21 	vldr	s3, [r7, #132]	; 0x84
 8001a16:	ed97 1a22 	vldr	s2, [r7, #136]	; 0x88
 8001a1a:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 8001a1e:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001a22:	4858      	ldr	r0, [pc, #352]	; (8001b84 <APP_Control_Process+0xb38>)
 8001a24:	f001 fbff 	bl	8003226 <pid_process_antiwindup_clamp_with_ff>
 8001a28:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_CURRENT_SETPOINT * (
 8001a2c:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001b88 <APP_Control_Process+0xb3c>
 8001a30:	ee27 7a27 	vmul.f32	s14, s14, s15
										current_limit,
										ALPHA_VELOCITY,
										velocity_feed_forward+acceleration_feed_forward
								)
						) +
						(1.0f-ALPHA_CURRENT_SETPOINT) * setpoint_current_ma;
 8001a34:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <APP_Control_Process+0xb40>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001b90 <APP_Control_Process+0xb44>
 8001a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
						) +
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_current_ma =
 8001a46:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <APP_Control_Process+0xb40>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
			}
			{
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <APP_Control_Process+0xb40>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <APP_Control_Process+0xb48>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/1000.0f;
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <APP_Control_Process+0xb24>)
 8001a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <APP_Control_Process+0xb24>)
 8001a6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a78:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001b60 <APP_Control_Process+0xb14>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/100.0f;
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <APP_Control_Process+0xb24>)
 8001a86:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <APP_Control_Process+0xb24>)
 8001a8e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001a92:	4313      	orrs	r3, r2
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001b7c <APP_Control_Process+0xb30>
 8001aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <APP_Control_Process+0xb24>)
 8001aaa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <APP_Control_Process+0xb24>)
 8001ab2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001b7c <APP_Control_Process+0xb30>
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <APP_Control_Process+0xb24>)
 8001ace:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <APP_Control_Process+0xb24>)
 8001ad6:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001ada:	4313      	orrs	r3, r2
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <APP_Control_Process+0xb40>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	eeb0 3a67 	vmov.f32	s6, s15
 8001afa:	eddf 2a27 	vldr	s5, [pc, #156]	; 8001b98 <APP_Control_Process+0xb4c>
 8001afe:	ed97 2a1b 	vldr	s4, [r7, #108]	; 0x6c
 8001b02:	eddf 1a25 	vldr	s3, [pc, #148]	; 8001b98 <APP_Control_Process+0xb4c>
 8001b06:	ed97 1a1d 	vldr	s2, [r7, #116]	; 0x74
 8001b0a:	edd7 0a1e 	vldr	s1, [r7, #120]	; 0x78
 8001b0e:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8001b12:	4822      	ldr	r0, [pc, #136]	; (8001b9c <APP_Control_Process+0xb50>)
 8001b14:	f001 fb87 	bl	8003226 <pid_process_antiwindup_clamp_with_ff>
 8001b18:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001b1c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001b80 <APP_Control_Process+0xb34>
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <APP_Control_Process+0xb54>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001ba4 <APP_Control_Process+0xb58>
 8001b2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <APP_Control_Process+0xb54>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_VELOCITY_PROFIL_POSITION_TORQUE)
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <APP_Control_Process+0xb24>)
 8001b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	f000 8192 	beq.w	8001e6c <APP_Control_Process+0xe20>
			{
				APP_Control_Reset();
 8001b48:	f7ff f9be 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <APP_Control_Process+0xb24>)
 8001b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <APP_Control_Process+0xb5c>)
 8001b56:	601a      	str	r2, [r3, #0]
			}
			break;
 8001b58:	e188      	b.n	8001e6c <APP_Control_Process+0xe20>
 8001b5a:	bf00      	nop
 8001b5c:	200000f0 	.word	0x200000f0
 8001b60:	447a0000 	.word	0x447a0000
 8001b64:	200000f4 	.word	0x200000f4
 8001b68:	2000011c 	.word	0x2000011c
 8001b6c:	200000ec 	.word	0x200000ec
 8001b70:	20000150 	.word	0x20000150
 8001b74:	47c35000 	.word	0x47c35000
 8001b78:	200000dc 	.word	0x200000dc
 8001b7c:	42c80000 	.word	0x42c80000
 8001b80:	3df5c28f 	.word	0x3df5c28f
 8001b84:	200000fc 	.word	0x200000fc
 8001b88:	3f75c28f 	.word	0x3f75c28f
 8001b8c:	200000e8 	.word	0x200000e8
 8001b90:	3d23d710 	.word	0x3d23d710
 8001b94:	200000d8 	.word	0x200000d8
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	20000108 	.word	0x20000108
 8001ba0:	200000e4 	.word	0x200000e4
 8001ba4:	3f6147ae 	.word	0x3f6147ae
 8001ba8:	20000004 	.word	0x20000004

		case REG_CONTROL_MODE_CURRENT:
			if(entering_state)
 8001bac:	4bc8      	ldr	r3, [pc, #800]	; (8001ed0 <APP_Control_Process+0xe84>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03e      	beq.n	8001c32 <APP_Control_Process+0xbe6>
			{
				entering_state = false;
 8001bb4:	4bc6      	ldr	r3, [pc, #792]	; (8001ed0 <APP_Control_Process+0xe84>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001bba:	4bc6      	ldr	r3, [pc, #792]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001bc2:	4bc4      	ldr	r3, [pc, #784]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				// init limit RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = regs[REG_MAX_PWM_100_L];
 8001bca:	4bc2      	ldr	r3, [pc, #776]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bcc:	7e9a      	ldrb	r2, [r3, #26]
 8001bce:	4bc1      	ldr	r3, [pc, #772]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bd0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = regs[REG_MAX_PWM_100_H];
 8001bd4:	4bbf      	ldr	r3, [pc, #764]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bd6:	7eda      	ldrb	r2, [r3, #27]
 8001bd8:	4bbe      	ldr	r3, [pc, #760]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bda:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001bde:	4bbe      	ldr	r3, [pc, #760]	; (8001ed8 <APP_Control_Process+0xe8c>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf0:	ee17 3a90 	vmov	r3, s15
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4bb6      	ldr	r3, [pc, #728]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001bfe:	4bb6      	ldr	r3, [pc, #728]	; (8001ed8 <APP_Control_Process+0xe8c>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c10:	ee17 3a90 	vmov	r3, s15
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	121b      	asrs	r3, r3, #8
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4bad      	ldr	r3, [pc, #692]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001c22:	4bac      	ldr	r3, [pc, #688]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001c2a:	4baa      	ldr	r3, [pc, #680]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			{
				float const goal_current = (int16_t)(MAKE_SHORT(regs[REG_GOAL_CURRENT_MA_L],regs[REG_GOAL_CURRENT_MA_H]));
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4ba5      	ldr	r3, [pc, #660]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c3e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				//float const current_limit = (float)(MAKE_SHORT(regs[REG_MAX_CURRENT_MA_L],regs[REG_MAX_CURRENT_MA_H]));
				//setpoint_current_ma = fconstrain(goal_current,-current_limit,current_limit);
				setpoint_current_ma = goal_current;
 8001c54:	4aa1      	ldr	r2, [pc, #644]	; (8001edc <APP_Control_Process+0xe90>)
 8001c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c5a:	6013      	str	r3, [r2, #0]
				// compute current error
				float const error_current = setpoint_current_ma - present_motor_current_ma;
 8001c5c:	4b9f      	ldr	r3, [pc, #636]	; (8001edc <APP_Control_Process+0xe90>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	4b9f      	ldr	r3, [pc, #636]	; (8001ee0 <APP_Control_Process+0xe94>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
				// compute pwm setpoint from current error using a PI
				float const pid_current_kp = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KP_L],regs[REG_PID_CURRENT_KP_H]))/100.0f;
 8001c70:	4b98      	ldr	r3, [pc, #608]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4a96      	ldr	r2, [pc, #600]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c88:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001ee4 <APP_Control_Process+0xe98>
 8001c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c90:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
				float const pid_current_ki = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KI_L],regs[REG_PID_CURRENT_KI_H]))/1000.0f;
 8001c94:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c96:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	4a8d      	ldr	r2, [pc, #564]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001c9e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cac:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8001ee8 <APP_Control_Process+0xe9c>
 8001cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb4:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
				float const pid_current_kff = (float)(MAKE_SHORT(regs[REG_PID_CURRENT_KFF_L],regs[REG_PID_CURRENT_KFF_H]))/100.0f;
 8001cb8:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001cba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4a84      	ldr	r2, [pc, #528]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001cc2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd0:	eddf 6a84 	vldr	s13, [pc, #528]	; 8001ee4 <APP_Control_Process+0xe98>
 8001cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd8:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001cdc:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001cde:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001ce6:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001cea:	4313      	orrs	r3, r2
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
				setpoint_pwm =
						ALPHA_PWM_SETPOINT * (
								pid_process_antiwindup_clamp_with_ff(
 8001cf8:	4b78      	ldr	r3, [pc, #480]	; (8001edc <APP_Control_Process+0xe90>)
 8001cfa:	ed93 7a00 	vldr	s14, [r3]
 8001cfe:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	eeb0 3a67 	vmov.f32	s6, s15
 8001d0a:	eddf 2a78 	vldr	s5, [pc, #480]	; 8001eec <APP_Control_Process+0xea0>
 8001d0e:	ed97 2a31 	vldr	s4, [r7, #196]	; 0xc4
 8001d12:	eddf 1a76 	vldr	s3, [pc, #472]	; 8001eec <APP_Control_Process+0xea0>
 8001d16:	ed97 1a33 	vldr	s2, [r7, #204]	; 0xcc
 8001d1a:	edd7 0a34 	vldr	s1, [r7, #208]	; 0xd0
 8001d1e:	ed97 0a35 	vldr	s0, [r7, #212]	; 0xd4
 8001d22:	4873      	ldr	r0, [pc, #460]	; (8001ef0 <APP_Control_Process+0xea4>)
 8001d24:	f001 fa7f 	bl	8003226 <pid_process_antiwindup_clamp_with_ff>
 8001d28:	eeb0 7a40 	vmov.f32	s14, s0
						ALPHA_PWM_SETPOINT * (
 8001d2c:	eddf 7a71 	vldr	s15, [pc, #452]	; 8001ef4 <APP_Control_Process+0xea8>
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
										pwm_limit,
										0.0f,
										pid_current_kff * setpoint_current_ma
								)
							) +
							(1.0f-ALPHA_PWM_SETPOINT) * setpoint_pwm ;
 8001d34:	4b70      	ldr	r3, [pc, #448]	; (8001ef8 <APP_Control_Process+0xeac>)
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001efc <APP_Control_Process+0xeb0>
 8001d3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
							) +
 8001d42:	ee77 7a27 	vadd.f32	s15, s14, s15
				setpoint_pwm =
 8001d46:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <APP_Control_Process+0xeac>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_CURRENT)
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	f000 808c 	beq.w	8001e70 <APP_Control_Process+0xe24>
			{
				APP_Control_Reset();
 8001d58:	f7ff f8b6 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001d5c:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <APP_Control_Process+0xeb4>)
 8001d66:	601a      	str	r2, [r3, #0]
			}
			break;
 8001d68:	e082      	b.n	8001e70 <APP_Control_Process+0xe24>


		case REG_CONTROL_MODE_PWM:
			if(entering_state)
 8001d6a:	4b59      	ldr	r3, [pc, #356]	; (8001ed0 <APP_Control_Process+0xe84>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03c      	beq.n	8001dec <APP_Control_Process+0xda0>
			{
				entering_state = false;
 8001d72:	4b57      	ldr	r3, [pc, #348]	; (8001ed0 <APP_Control_Process+0xe84>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
				// init goal RAM registers according this control mode
				regs[REG_GOAL_PWM_100_L] = 0;
 8001d78:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				regs[REG_GOAL_PWM_100_H] = 0;
 8001d80:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				// reset unused RAM registers
				regs[REG_GOAL_POSITION_DEG_L] = LOW_BYTE((int16_t)(present_position_deg*10.0f));
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <APP_Control_Process+0xe8c>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9a:	ee17 3a90 	vmov	r3, s15
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				regs[REG_GOAL_POSITION_DEG_H] = HIGH_BYTE((int16_t)(present_position_deg*10.0f));
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <APP_Control_Process+0xe8c>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dba:	ee17 3a90 	vmov	r3, s15
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	121b      	asrs	r3, r3, #8
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 8001dcc:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
				regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				regs[REG_GOAL_CURRENT_MA_L] = 0;
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				regs[REG_GOAL_CURRENT_MA_H] = 0;
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			}
			// compute pwm setpoint from goal pwm
			{
				float const goal_pwm = (int16_t)(MAKE_SHORT(regs[REG_GOAL_PWM_100_L],regs[REG_GOAL_PWM_100_H]));
 8001dec:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001dee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001df8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0a:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				float const pwm_limit = (float)(MAKE_SHORT(regs[REG_MAX_PWM_100_L],regs[REG_MAX_PWM_100_H]));
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001e10:	7edb      	ldrb	r3, [r3, #27]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001e16:	7e92      	ldrb	r2, [r2, #26]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
				setpoint_pwm = fconstrain(goal_pwm,-pwm_limit,pwm_limit);
 8001e26:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001e2a:	eef1 7a67 	vneg.f32	s15, s15
 8001e2e:	ed97 1a37 	vldr	s2, [r7, #220]	; 0xdc
 8001e32:	eef0 0a67 	vmov.f32	s1, s15
 8001e36:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 8001e3a:	f001 f96f 	bl	800311c <fconstrain>
 8001e3e:	eef0 7a40 	vmov.f32	s15, s0
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <APP_Control_Process+0xeac>)
 8001e44:	edc3 7a00 	vstr	s15, [r3]
			}
			// mode change
			if(regs[REG_CONTROL_MODE]!=REG_CONTROL_MODE_PWM)
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d010      	beq.n	8001e74 <APP_Control_Process+0xe28>
			{
				APP_Control_Reset();
 8001e52:	f7ff f839 	bl	8000ec8 <APP_Control_Reset>
				current_control_mode = regs[REG_CONTROL_MODE];
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001e58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <APP_Control_Process+0xeb4>)
 8001e60:	601a      	str	r2, [r3, #0]
			}
			break;
 8001e62:	e007      	b.n	8001e74 <APP_Control_Process+0xe28>
			break;
 8001e64:	bf00      	nop
 8001e66:	e006      	b.n	8001e76 <APP_Control_Process+0xe2a>
			break;
 8001e68:	bf00      	nop
 8001e6a:	e004      	b.n	8001e76 <APP_Control_Process+0xe2a>
			break;
 8001e6c:	bf00      	nop
 8001e6e:	e002      	b.n	8001e76 <APP_Control_Process+0xe2a>
			break;
 8001e70:	bf00      	nop
 8001e72:	e000      	b.n	8001e76 <APP_Control_Process+0xe2a>
			break;
 8001e74:	bf00      	nop
		}

		// motor leads maybe inverted, user can reverse polarity of motor (EEPROM parameter)
		float const pwm_inv = regs[REG_INV_ROTATION_MOTOR] > 0 ? -1.0f : 1.0f;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <APP_Control_Process+0xe88>)
 8001e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <APP_Control_Process+0xe38>
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <APP_Control_Process+0xeb8>)
 8001e82:	e001      	b.n	8001e88 <APP_Control_Process+0xe3c>
 8001e84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e88:	617b      	str	r3, [r7, #20]
		float pwm = pwm_inv * setpoint_pwm;
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <APP_Control_Process+0xeac>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	edc7 7a04 	vstr	s15, [r7, #16]

		// apply pwm
		if(pwm>=0.0f)
 8001e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	db32      	blt.n	8001f10 <APP_Control_Process+0xec4>
		{
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <APP_Control_Process+0xebc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2263      	movs	r2, #99	; 0x63
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE-pwm);
 8001eb2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f0c <APP_Control_Process+0xec0>
 8001eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <APP_Control_Process+0xebc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec6:	ee17 2a90 	vmov	r2, s15
 8001eca:	639a      	str	r2, [r3, #56]	; 0x38
 8001ecc:	e03c      	b.n	8001f48 <APP_Control_Process+0xefc>
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000150 	.word	0x20000150
 8001ed8:	200000dc 	.word	0x200000dc
 8001edc:	200000e8 	.word	0x200000e8
 8001ee0:	200000d8 	.word	0x200000d8
 8001ee4:	42c80000 	.word	0x42c80000
 8001ee8:	447a0000 	.word	0x447a0000
 8001eec:	00000000 	.word	0x00000000
 8001ef0:	20000108 	.word	0x20000108
 8001ef4:	3df5c28f 	.word	0x3df5c28f
 8001ef8:	200000e4 	.word	0x200000e4
 8001efc:	3f6147ae 	.word	0x3f6147ae
 8001f00:	20000004 	.word	0x20000004
 8001f04:	bf800000 	.word	0xbf800000
 8001f08:	20000234 	.word	0x20000234
 8001f0c:	42c60000 	.word	0x42c60000


		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE+pwm);
 8001f10:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f14:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8001f0c <APP_Control_Process+0xec0>
 8001f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <APP_Control_Process+0xf10>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f24:	ee17 2a90 	vmov	r2, s15
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <APP_Control_Process+0xf10>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2263      	movs	r2, #99	; 0x63
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
 8001f32:	e009      	b.n	8001f48 <APP_Control_Process+0xefc>
		}
	}
	else
	{
		APP_Control_Reset();
 8001f34:	f7fe ffc8 	bl	8000ec8 <APP_Control_Reset>
		// motor brake
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,MOTOR_PWM_BRAKE);
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <APP_Control_Process+0xf10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2263      	movs	r2, #99	; 0x63
 8001f3e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,MOTOR_PWM_BRAKE);
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <APP_Control_Process+0xf10>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2263      	movs	r2, #99	; 0x63
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
	}

	// Note : This is an unipolar current sensing architecture,
	// then motor current is always positive in FORWARD and REVERSE drive phase,
	// and zero in BRAKE phases. So, the sign of the current, is build from the sign of the PWM setpoint
	pwm_sign = ( setpoint_pwm < 0.0f ) ? -1.0f : 1.0f;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <APP_Control_Process+0xf14>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d507      	bpl.n	8001f68 <APP_Control_Process+0xf1c>
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <APP_Control_Process+0xf18>)
 8001f5a:	e007      	b.n	8001f6c <APP_Control_Process+0xf20>
 8001f5c:	20000234 	.word	0x20000234
 8001f60:	200000e4 	.word	0x200000e4
 8001f64:	bf800000 	.word	0xbf800000
 8001f68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f6c:	4ab8      	ldr	r2, [pc, #736]	; (8002250 <APP_Control_Process+0x1204>)
 8001f6e:	6013      	str	r3, [r2, #0]
	pwm_ratio = fabsf(setpoint_pwm)/100.0f;
 8001f70:	4bb8      	ldr	r3, [pc, #736]	; (8002254 <APP_Control_Process+0x1208>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f7a:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8002258 <APP_Control_Process+0x120c>
 8001f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f82:	4bb6      	ldr	r3, [pc, #728]	; (800225c <APP_Control_Process+0x1210>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]

	// live update of RAM regs
	regs[REG_PRESENT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(present_position_deg*10.0f));
 8001f88:	4bb5      	ldr	r3, [pc, #724]	; (8002260 <APP_Control_Process+0x1214>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9a:	ee17 3a90 	vmov	r3, s15
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4bb0      	ldr	r3, [pc, #704]	; (8002264 <APP_Control_Process+0x1218>)
 8001fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(present_position_deg*10.0f));
 8001fa8:	4bad      	ldr	r3, [pc, #692]	; (8002260 <APP_Control_Process+0x1214>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fba:	ee17 3a90 	vmov	r3, s15
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4ba7      	ldr	r3, [pc, #668]	; (8002264 <APP_Control_Process+0x1218>)
 8001fc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

	regs[REG_PRESENT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)present_velocity_dps);
 8001fcc:	4ba6      	ldr	r3, [pc, #664]	; (8002268 <APP_Control_Process+0x121c>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	ee17 3a90 	vmov	r3, s15
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4ba1      	ldr	r3, [pc, #644]	; (8002264 <APP_Control_Process+0x1218>)
 8001fe0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)present_velocity_dps);
 8001fe4:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <APP_Control_Process+0x121c>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fee:	ee17 3a90 	vmov	r3, s15
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	121b      	asrs	r3, r3, #8
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b9a      	ldr	r3, [pc, #616]	; (8002264 <APP_Control_Process+0x1218>)
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	regs[REG_PRESENT_CURRENT_MA_L] = LOW_BYTE((int16_t)present_motor_current_ma);
 8002000:	4b9a      	ldr	r3, [pc, #616]	; (800226c <APP_Control_Process+0x1220>)
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200a:	ee17 3a90 	vmov	r3, s15
 800200e:	b21b      	sxth	r3, r3
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b94      	ldr	r3, [pc, #592]	; (8002264 <APP_Control_Process+0x1218>)
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = HIGH_BYTE((int16_t)present_motor_current_ma);
 8002018:	4b94      	ldr	r3, [pc, #592]	; (800226c <APP_Control_Process+0x1220>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b21b      	sxth	r3, r3
 8002028:	121b      	asrs	r3, r3, #8
 800202a:	b21b      	sxth	r3, r3
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <APP_Control_Process+0x1218>)
 8002030:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

	regs[REG_PRESENT_VOLTAGE] = (uint8_t)(present_voltage_0v1);
 8002034:	4b8e      	ldr	r3, [pc, #568]	; (8002270 <APP_Control_Process+0x1224>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002042:	793b      	ldrb	r3, [r7, #4]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b87      	ldr	r3, [pc, #540]	; (8002264 <APP_Control_Process+0x1218>)
 8002048:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 800204c:	4b85      	ldr	r3, [pc, #532]	; (8002264 <APP_Control_Process+0x1218>)
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	float moving_threshold = regs[REG_MOVING_THRESHOLD_DPS];
 8002054:	4b83      	ldr	r3, [pc, #524]	; (8002264 <APP_Control_Process+0x1218>)
 8002056:	7fdb      	ldrb	r3, [r3, #31]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002060:	edc7 7a03 	vstr	s15, [r7, #12]
	regs[REG_MOVING] = ( fabs(present_velocity_dps) > moving_threshold ) ? 1 : 0;
 8002064:	4b80      	ldr	r3, [pc, #512]	; (8002268 <APP_Control_Process+0x121c>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eef0 7ae7 	vabs.f32	s15, s15
 800206e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	bf4c      	ite	mi
 800207c:	2301      	movmi	r3, #1
 800207e:	2300      	movpl	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	4b77      	ldr	r3, [pc, #476]	; (8002264 <APP_Control_Process+0x1218>)
 8002086:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = LOW_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 800208a:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <APP_Control_Process+0x1228>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209c:	ee17 3a90 	vmov	r3, s15
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <APP_Control_Process+0x1218>)
 80020a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = HIGH_BYTE((uint16_t)(setpoint_position_deg*10.0f));
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <APP_Control_Process+0x1228>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020bc:	ee17 3a90 	vmov	r3, s15
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <APP_Control_Process+0x1218>)
 80020ca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)setpoint_velocity_dps);
 80020ce:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <APP_Control_Process+0x122c>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	b21b      	sxth	r3, r3
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <APP_Control_Process+0x1218>)
 80020e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)setpoint_velocity_dps);
 80020e6:	4b64      	ldr	r3, [pc, #400]	; (8002278 <APP_Control_Process+0x122c>)
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f0:	ee17 3a90 	vmov	r3, s15
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	121b      	asrs	r3, r3, #8
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <APP_Control_Process+0x1218>)
 80020fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	//regs[REG_SETPOINT_VELOCITY_DPS_L] = LOW_BYTE((int16_t)pid_position.err_integral); // DEBUG
	//regs[REG_SETPOINT_VELOCITY_DPS_H] = HIGH_BYTE((int16_t)pid_position.err_integral); // DEBUG

	regs[REG_SETPOINT_CURRENT_MA_L] = LOW_BYTE((int16_t)setpoint_current_ma);
 8002102:	4b5e      	ldr	r3, [pc, #376]	; (800227c <APP_Control_Process+0x1230>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210c:	ee17 3a90 	vmov	r3, s15
 8002110:	b21b      	sxth	r3, r3
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <APP_Control_Process+0x1218>)
 8002116:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = HIGH_BYTE((int16_t)setpoint_current_ma);
 800211a:	4b58      	ldr	r3, [pc, #352]	; (800227c <APP_Control_Process+0x1230>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	b21b      	sxth	r3, r3
 800212a:	121b      	asrs	r3, r3, #8
 800212c:	b21b      	sxth	r3, r3
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <APP_Control_Process+0x1218>)
 8002132:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	regs[REG_SETPOINT_PWM_100_L] = LOW_BYTE((int16_t)setpoint_pwm);
 8002136:	4b47      	ldr	r3, [pc, #284]	; (8002254 <APP_Control_Process+0x1208>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002140:	ee17 3a90 	vmov	r3, s15
 8002144:	b21b      	sxth	r3, r3
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b46      	ldr	r3, [pc, #280]	; (8002264 <APP_Control_Process+0x1218>)
 800214a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = HIGH_BYTE((int16_t)setpoint_pwm);
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <APP_Control_Process+0x1208>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002158:	ee17 3a90 	vmov	r3, s15
 800215c:	b21b      	sxth	r3, r3
 800215e:	121b      	asrs	r3, r3, #8
 8002160:	b21b      	sxth	r3, r3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <APP_Control_Process+0x1218>)
 8002166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = LOW_BYTE((uint16_t)motor_current_input_adc);
 800216a:	4b45      	ldr	r3, [pc, #276]	; (8002280 <APP_Control_Process+0x1234>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002174:	ee17 3a90 	vmov	r3, s15
 8002178:	b29b      	uxth	r3, r3
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b39      	ldr	r3, [pc, #228]	; (8002264 <APP_Control_Process+0x1218>)
 800217e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = HIGH_BYTE((uint16_t)motor_current_input_adc);
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <APP_Control_Process+0x1234>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218c:	ee17 3a90 	vmov	r3, s15
 8002190:	b29b      	uxth	r3, r3
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b32      	ldr	r3, [pc, #200]	; (8002264 <APP_Control_Process+0x1218>)
 800219a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f

	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = LOW_BYTE((uint16_t)motor_current_input_adc_offset);
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <APP_Control_Process+0x1238>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a8:	ee17 3a90 	vmov	r3, s15
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <APP_Control_Process+0x1218>)
 80021b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = HIGH_BYTE((uint16_t)motor_current_input_adc_offset);
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <APP_Control_Process+0x1238>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c0:	ee17 3a90 	vmov	r3, s15
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <APP_Control_Process+0x1218>)
 80021ce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	regs[REG_POSITION_INPUT_ADC_L] = LOW_BYTE((uint16_t)position_input_adc);
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <APP_Control_Process+0x123c>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021dc:	ee17 3a90 	vmov	r3, s15
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <APP_Control_Process+0x1218>)
 80021e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = HIGH_BYTE((uint16_t)position_input_adc);
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <APP_Control_Process+0x123c>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <APP_Control_Process+0x1218>)
 8002202:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

	regs[REG_VOLTAGE_INPUT_ADC_L] = LOW_BYTE((uint16_t)voltage_input_adc);
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <APP_Control_Process+0x1240>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <APP_Control_Process+0x1218>)
 800221a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = HIGH_BYTE((uint16_t)voltage_input_adc);
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <APP_Control_Process+0x1240>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002228:	ee17 3a90 	vmov	r3, s15
 800222c:	b29b      	uxth	r3, r3
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <APP_Control_Process+0x1218>)
 8002236:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// steps
	++counter;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <APP_Control_Process+0x1244>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <APP_Control_Process+0x1244>)
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	e000      	b.n	8002248 <APP_Control_Process+0x11fc>
		return;
 8002246:	bf00      	nop
}
 8002248:	37f0      	adds	r7, #240	; 0xf0
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200000d0 	.word	0x200000d0
 8002254:	200000e4 	.word	0x200000e4
 8002258:	42c80000 	.word	0x42c80000
 800225c:	200000d4 	.word	0x200000d4
 8002260:	200000dc 	.word	0x200000dc
 8002264:	20000150 	.word	0x20000150
 8002268:	20000114 	.word	0x20000114
 800226c:	200000d8 	.word	0x200000d8
 8002270:	200000e0 	.word	0x200000e0
 8002274:	200000f4 	.word	0x200000f4
 8002278:	200000f0 	.word	0x200000f0
 800227c:	200000e8 	.word	0x200000e8
 8002280:	200000c0 	.word	0x200000c0
 8002284:	200000cc 	.word	0x200000cc
 8002288:	200000c4 	.word	0x200000c4
 800228c:	200000c8 	.word	0x200000c8
 8002290:	200000f8 	.word	0x200000f8

08002294 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <HAL_ADC_ConvCpltCallback+0xfc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d170      	bne.n	8002386 <HAL_ADC_ConvCpltCallback+0xf2>
	{
		// Filter (EWMA) position and voltage ADC samples
		voltage_input_adc = ALPHA_VOLTAGE * (float)(ADC_DMA[2]) + (1.0f-ALPHA_VOLTAGE) * voltage_input_adc;
 80022a4:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_ADC_ConvCpltCallback+0x100>)
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002398 <HAL_ADC_ConvCpltCallback+0x104>
 80022b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_ADC_ConvCpltCallback+0x108>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80023a0 <HAL_ADC_ConvCpltCallback+0x10c>
 80022c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022cc:	4b33      	ldr	r3, [pc, #204]	; (800239c <HAL_ADC_ConvCpltCallback+0x108>)
 80022ce:	edc3 7a00 	vstr	s15, [r3]
		position_input_adc = ALPHA_POSITION * (float)(ADC_DMA[1]) + (1.0f-ALPHA_POSITION) * position_input_adc;
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_ADC_ConvCpltCallback+0x100>)
 80022d4:	885b      	ldrh	r3, [r3, #2]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002398 <HAL_ADC_ConvCpltCallback+0x104>
 80022e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_ADC_ConvCpltCallback+0x110>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80023a0 <HAL_ADC_ConvCpltCallback+0x10c>
 80022f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_ADC_ConvCpltCallback+0x110>)
 80022fc:	edc3 7a00 	vstr	s15, [r3]
		// TIM4 is 40KHz, motor PWM is 20KHz
		// So ADC is triggered twice per motor PWM period by TIM4
		// We will measure ON and OFF instant motor current

		// In FORWARD or REVERSE DRIVE phases, PWM is ON, counter decreases
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_ADC_ConvCpltCallback+0x114>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b10      	cmp	r3, #16
 800230c:	d117      	bne.n	800233e <HAL_ADC_ConvCpltCallback+0xaa>
		{
			// filter motor current
			motor_current_input_adc = ALPHA_CURRENT_SENSE*(float)(ADC_DMA[0]) + (1.0f-ALPHA_CURRENT_SENSE)*motor_current_input_adc;
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_ADC_ConvCpltCallback+0x100>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002398 <HAL_ADC_ConvCpltCallback+0x104>
 8002320:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_ADC_ConvCpltCallback+0x118>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80023a0 <HAL_ADC_ConvCpltCallback+0x10c>
 800232e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_ADC_ConvCpltCallback+0x118>)
 8002338:	edc3 7a00 	vstr	s15, [r3]
 800233c:	e01e      	b.n	800237c <HAL_ADC_ConvCpltCallback+0xe8>
		}
		// In BRAKE phase, PWM is OFF, counter increases
		else
		{
			// self-calibrate ADC offset (b) when motor is stopped
			if(setpoint_pwm==0.0f)
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d116      	bne.n	800237c <HAL_ADC_ConvCpltCallback+0xe8>
			{
				motor_current_input_adc_offset = ALPHA_CURRENT_SENSE_OFFSET*(float)(ADC_DMA[0]) + (1.0f-ALPHA_CURRENT_SENSE_OFFSET)*motor_current_input_adc_offset;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_ADC_ConvCpltCallback+0x100>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80023b4 <HAL_ADC_ConvCpltCallback+0x120>
 8002360:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_ADC_ConvCpltCallback+0x124>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	eddf 6a14 	vldr	s13, [pc, #80]	; 80023bc <HAL_ADC_ConvCpltCallback+0x128>
 800236e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_ADC_ConvCpltCallback+0x124>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		// restart ADC
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_DMA,3);
 800237c:	2203      	movs	r2, #3
 800237e:	4905      	ldr	r1, [pc, #20]	; (8002394 <HAL_ADC_ConvCpltCallback+0x100>)
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002382:	f002 fdcb 	bl	8004f1c <HAL_ADC_Start_DMA>
	}
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000308 	.word	0x20000308
 8002394:	200000b8 	.word	0x200000b8
 8002398:	3d4ccccd 	.word	0x3d4ccccd
 800239c:	200000c8 	.word	0x200000c8
 80023a0:	3f733333 	.word	0x3f733333
 80023a4:	200000c4 	.word	0x200000c4
 80023a8:	20000234 	.word	0x20000234
 80023ac:	200000c0 	.word	0x200000c0
 80023b0:	200000e4 	.word	0x200000e4
 80023b4:	3a83126f 	.word	0x3a83126f
 80023b8:	200000cc 	.word	0x200000cc
 80023bc:	3f7fbe77 	.word	0x3f7fbe77

080023c0 <factory_reset_eeprom_regs>:
#include "stm32g4xx_hal.h"

uint8_t regs[REG_MAX];

void factory_reset_eeprom_regs()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	regs[REG_MODEL_NUMBER_L] = LOW_BYTE(REG_MODEL_NUMBER_VALUE);
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023c6:	225c      	movs	r2, #92	; 0x5c
 80023c8:	701a      	strb	r2, [r3, #0]
	regs[REG_MODEL_NUMBER_H] = HIGH_BYTE(REG_MODEL_NUMBER_VALUE);
 80023ca:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
	regs[REG_VERSION] = REG_VERSION_VALUE;
 80023d0:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	709a      	strb	r2, [r3, #2]
	regs[REG_ID] = REG_ID_VALUE;
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023d8:	2201      	movs	r2, #1
 80023da:	70da      	strb	r2, [r3, #3]
	regs[REG_BAUD_RATE] = REG_BAUD_RATE_VALUE;
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023de:	2203      	movs	r2, #3
 80023e0:	711a      	strb	r2, [r3, #4]
	regs[REG_RETURN_DELAY] = REG_RETURN_DELAY_VALUE;
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	715a      	strb	r2, [r3, #5]

	regs[REG_MIN_POSITION_DEG_L] = LOW_BYTE(REG_MIN_POSITION_DEG_VALUE);
 80023e8:	4b56      	ldr	r3, [pc, #344]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023ea:	221e      	movs	r2, #30
 80023ec:	741a      	strb	r2, [r3, #16]
	regs[REG_MIN_POSITION_DEG_H] = HIGH_BYTE(REG_MIN_POSITION_DEG_VALUE);
 80023ee:	4b55      	ldr	r3, [pc, #340]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	745a      	strb	r2, [r3, #17]
	regs[REG_MAX_POSITION_DEG_L] = LOW_BYTE(REG_MAX_POSITION_DEG_VALUE);
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023f6:	2296      	movs	r2, #150	; 0x96
 80023f8:	749a      	strb	r2, [r3, #18]
	regs[REG_MAX_POSITION_DEG_H] = HIGH_BYTE(REG_MAX_POSITION_DEG_VALUE);
 80023fa:	4b52      	ldr	r3, [pc, #328]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	74da      	strb	r2, [r3, #19]
	regs[REG_MAX_VELOCITY_DPS_L] = LOW_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002402:	2220      	movs	r2, #32
 8002404:	751a      	strb	r2, [r3, #20]
	regs[REG_MAX_VELOCITY_DPS_H] = HIGH_BYTE(REG_MAX_VELOCITY_DPS_VALUE);
 8002406:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002408:	2203      	movs	r2, #3
 800240a:	755a      	strb	r2, [r3, #21]
	regs[REG_MAX_ACCELERATION_DPSS_L] = LOW_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 800240c:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	759a      	strb	r2, [r3, #22]
	regs[REG_MAX_ACCELERATION_DPSS_H] = HIGH_BYTE(REG_MAX_ACCELERATION_DPSS_VALUE);
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002414:	221f      	movs	r2, #31
 8002416:	75da      	strb	r2, [r3, #23]
	regs[REG_MAX_CURRENT_MA_L] = LOW_BYTE(REG_MAX_CURRENT_MA_VALUE);
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800241a:	22fa      	movs	r2, #250	; 0xfa
 800241c:	761a      	strb	r2, [r3, #24]
	regs[REG_MAX_CURRENT_MA_H] = HIGH_BYTE(REG_MAX_CURRENT_MA_VALUE);
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002420:	2200      	movs	r2, #0
 8002422:	765a      	strb	r2, [r3, #25]
	regs[REG_MAX_PWM_100_L] = LOW_BYTE(REG_MAX_PWM_100_VALUE);
 8002424:	4b47      	ldr	r3, [pc, #284]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002426:	2232      	movs	r2, #50	; 0x32
 8002428:	769a      	strb	r2, [r3, #26]
	regs[REG_MAX_PWM_100_H] = HIGH_BYTE(REG_MAX_PWM_100_VALUE);
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800242c:	2200      	movs	r2, #0
 800242e:	76da      	strb	r2, [r3, #27]
	regs[REG_TEMPERATURE_LIMIT] = REG_TEMPERATURE_LIMIT_VALUE;
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002432:	223c      	movs	r2, #60	; 0x3c
 8002434:	771a      	strb	r2, [r3, #28]
	regs[REG_LOW_VOLTAGE_LIMIT] = REG_LOW_VOLTAGE_LIMIT_VALUE;
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002438:	222d      	movs	r2, #45	; 0x2d
 800243a:	775a      	strb	r2, [r3, #29]
	regs[REG_HIGH_VOLTAGE_LIMIT] = REG_HIGH_VOLTAGE_LIMIT_VALUE;
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800243e:	225f      	movs	r2, #95	; 0x5f
 8002440:	779a      	strb	r2, [r3, #30]

	regs[REG_MOVING_THRESHOLD_DPS] = REG_MOVING_THRESHOLD_DPS_VALUE;
 8002442:	4b40      	ldr	r3, [pc, #256]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002444:	2205      	movs	r2, #5
 8002446:	77da      	strb	r2, [r3, #31]
	regs[REG_STATUS_RETURN_LVL] = REG_STATUS_RETURN_LVL_VALUE;
 8002448:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2020 	strb.w	r2, [r3, #32]
	regs[REG_ALARM_LED] = REG_ALARM_LED_VALUE;
 8002450:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	regs[REG_ALARM_SHUTDOWN] = REG_ALARM_SHUTDOWN_VALUE;
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800245a:	2224      	movs	r2, #36	; 0x24
 800245c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	regs[REG_MIN_POSITION_ADC_L] = LOW_BYTE(REG_MIN_POSITION_ADC_VALUE);
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002462:	2232      	movs	r2, #50	; 0x32
 8002464:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	regs[REG_MIN_POSITION_ADC_H] = HIGH_BYTE(REG_MIN_POSITION_ADC_VALUE);
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	regs[REG_MAX_POSITION_ADC_L] = LOW_BYTE(REG_MAX_POSITION_ADC_VALUE);
 8002470:	4b34      	ldr	r3, [pc, #208]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002472:	226e      	movs	r2, #110	; 0x6e
 8002474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	regs[REG_MAX_POSITION_ADC_H] = HIGH_BYTE(REG_MAX_POSITION_ADC_VALUE);
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800247a:	220f      	movs	r2, #15
 800247c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	regs[REG_MAX_ROTATION_DEG] = REG_MAX_ROTATION_DEG_VALUE;
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002482:	22b4      	movs	r2, #180	; 0xb4
 8002484:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	regs[REG_INV_ROTATION_MOTOR] = REG_INV_ROTATION_MOTOR_VALUE;
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	regs[REG_INV_ROTATION_SENSOR] = REG_INV_ROTATION_SENSOR_VALUE;
 8002490:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	regs[REG_PID_POSITION_KP_L] = LOW_BYTE(REG_PID_POSITION_KP_VALUE);
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800249a:	22d0      	movs	r2, #208	; 0xd0
 800249c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	regs[REG_PID_POSITION_KP_H] = HIGH_BYTE(REG_PID_POSITION_KP_VALUE);
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024a2:	2207      	movs	r2, #7
 80024a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	regs[REG_PID_POSITION_KI_L] = LOW_BYTE(REG_PID_POSITION_KI_VALUE);
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	regs[REG_PID_POSITION_KI_H] = HIGH_BYTE(REG_PID_POSITION_KI_VALUE);
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	regs[REG_PID_POSITION_KD_L] = LOW_BYTE(REG_PID_POSITION_KD_VALUE);
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024ba:	2210      	movs	r2, #16
 80024bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	regs[REG_PID_POSITION_KD_H] = HIGH_BYTE(REG_PID_POSITION_KD_VALUE);
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024c2:	220e      	movs	r2, #14
 80024c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	regs[REG_PID_VELOCITY_KFF_L] = LOW_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024ca:	220a      	movs	r2, #10
 80024cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	regs[REG_PID_VELOCITY_KFF_H] = HIGH_BYTE(REG_PID_VELOCITY_KFF_VALUE);
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	regs[REG_PID_ACCELERATION_KFF_L] = LOW_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024da:	220a      	movs	r2, #10
 80024dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	regs[REG_PID_ACCELERATION_KFF_H] = HIGH_BYTE(REG_PID_ACCELERATION_KFF_VALUE);
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	regs[REG_PID_CURRENT_KP_L] = LOW_BYTE(REG_PID_CURRENT_KP_VALUE);
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024ea:	22f4      	movs	r2, #244	; 0xf4
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	regs[REG_PID_CURRENT_KP_H] = HIGH_BYTE(REG_PID_CURRENT_KP_VALUE);
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	regs[REG_PID_CURRENT_KI_L] = LOW_BYTE(REG_PID_CURRENT_KI_VALUE);
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	regs[REG_PID_CURRENT_KI_H] = HIGH_BYTE(REG_PID_CURRENT_KI_VALUE);
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	regs[REG_PID_CURRENT_KFF_L] = LOW_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800250a:	2214      	movs	r2, #20
 800250c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	regs[REG_PID_CURRENT_KFF_H] = HIGH_BYTE(REG_PID_CURRENT_KFF_VALUE);
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	regs[REG_CAL_CURRENT_SENSE_A_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	regs[REG_CAL_CURRENT_SENSE_A_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_A_L_VALUE);
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002522:	2207      	movs	r2, #7
 8002524:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	regs[REG_CAL_CURRENT_SENSE_B_L] = LOW_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800252a:	22b5      	movs	r2, #181	; 0xb5
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	regs[REG_CAL_CURRENT_SENSE_B_H] = HIGH_BYTE(REG_CAL_CURRENT_SENSE_B_L_VALUE);
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 8002532:	2204      	movs	r2, #4
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d


	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4802      	ldr	r0, [pc, #8]	; (8002544 <factory_reset_eeprom_regs+0x184>)
 800253c:	f000 f8e0 	bl	8002700 <eeprom_store>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000150 	.word	0x20000150

08002548 <load_eeprom_regs>:


void load_eeprom_regs()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	eeprom_restore(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	4802      	ldr	r0, [pc, #8]	; (8002558 <load_eeprom_regs+0x10>)
 8002550:	f000 f8c2 	bl	80026d8 <eeprom_restore>
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000150 	.word	0x20000150

0800255c <store_eeprom_regs>:

void store_eeprom_regs()
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	eeprom_store(regs, REG_TORQUE_ENABLE); // REG_TORQUE_ENABLE must be 64 bits aligned
 8002560:	2140      	movs	r1, #64	; 0x40
 8002562:	4802      	ldr	r0, [pc, #8]	; (800256c <store_eeprom_regs+0x10>)
 8002564:	f000 f8cc 	bl	8002700 <eeprom_store>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000150 	.word	0x20000150

08002570 <reset_ram_regs>:

void reset_ram_regs()
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

	regs[REG_TORQUE_ENABLE] = 0; 	// OFF
 8002574:	4b4e      	ldr	r3, [pc, #312]	; (80026b0 <reset_ram_regs+0x140>)
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	regs[REG_LED] = 0;				// OFF
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <reset_ram_regs+0x140>)
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	regs[REG_CONTROL_MODE] = 1;		// POSITION CONTROL
 8002584:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <reset_ram_regs+0x140>)
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	regs[REG_GOAL_POSITION_DEG_L] = 0;
 800258c:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <reset_ram_regs+0x140>)
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	regs[REG_GOAL_POSITION_DEG_H] = 0;
 8002594:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <reset_ram_regs+0x140>)
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	regs[REG_GOAL_VELOCITY_DPS_L] = 0;
 800259c:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <reset_ram_regs+0x140>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	regs[REG_GOAL_VELOCITY_DPS_H] = 0;
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <reset_ram_regs+0x140>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	regs[REG_GOAL_CURRENT_MA_L] = 0;
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <reset_ram_regs+0x140>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	regs[REG_GOAL_CURRENT_MA_H] = 0;
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <reset_ram_regs+0x140>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	regs[REG_GOAL_PWM_100_L] = 0;
 80025bc:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <reset_ram_regs+0x140>)
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	regs[REG_GOAL_PWM_100_H] = 0;
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <reset_ram_regs+0x140>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	regs[REG_PRESENT_POSITION_DEG_L] = 0;
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <reset_ram_regs+0x140>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	regs[REG_PRESENT_POSITION_DEG_H] = 0;
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <reset_ram_regs+0x140>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	regs[REG_PRESENT_VELOCITY_DPS_L] = 0;
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <reset_ram_regs+0x140>)
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	regs[REG_PRESENT_VELOCITY_DPS_H] = 0;
 80025e4:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <reset_ram_regs+0x140>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	regs[REG_PRESENT_CURRENT_MA_L] = 0;
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <reset_ram_regs+0x140>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	regs[REG_PRESENT_CURRENT_MA_H] = 0;
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <reset_ram_regs+0x140>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	regs[REG_PRESENT_VOLTAGE] = 0;
 80025fc:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <reset_ram_regs+0x140>)
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	regs[REG_PRESENT_TEMPERATURE] = 0;
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <reset_ram_regs+0x140>)
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	regs[REG_MOVING] = 0;
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <reset_ram_regs+0x140>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	regs[REG_SETPOINT_POSITION_DEG_L] = 0;
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <reset_ram_regs+0x140>)
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	regs[REG_SETPOINT_POSITION_DEG_H] = 0;
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <reset_ram_regs+0x140>)
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	regs[REG_SETPOINT_VELOCITY_DPS_L] = 0;
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <reset_ram_regs+0x140>)
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	regs[REG_SETPOINT_VELOCITY_DPS_H] = 0;
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <reset_ram_regs+0x140>)
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	regs[REG_SETPOINT_CURRENT_MA_L] = 0;
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <reset_ram_regs+0x140>)
 8002636:	2200      	movs	r2, #0
 8002638:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	regs[REG_SETPOINT_CURRENT_MA_H] = 0;
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <reset_ram_regs+0x140>)
 800263e:	2200      	movs	r2, #0
 8002640:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	regs[REG_SETPOINT_PWM_100_L] = 0;
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <reset_ram_regs+0x140>)
 8002646:	2200      	movs	r2, #0
 8002648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	regs[REG_SETPOINT_PWM_100_H] = 0;
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <reset_ram_regs+0x140>)
 800264e:	2200      	movs	r2, #0
 8002650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	regs[REG_MOTOR_CURRENT_INPUT_ADC_L] = 0;
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <reset_ram_regs+0x140>)
 8002656:	2200      	movs	r2, #0
 8002658:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	regs[REG_MOTOR_CURRENT_INPUT_ADC_H] = 0;
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <reset_ram_regs+0x140>)
 800265e:	2200      	movs	r2, #0
 8002660:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_L] = 0;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <reset_ram_regs+0x140>)
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	regs[REG_MOTOR_CURRENT_INPUT_ADC_OFFSET_H] = 0;
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <reset_ram_regs+0x140>)
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	regs[REG_POSITION_INPUT_ADC_L] = 0;
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <reset_ram_regs+0x140>)
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	regs[REG_POSITION_INPUT_ADC_H] = 0;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <reset_ram_regs+0x140>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	regs[REG_VOLTAGE_INPUT_ADC_L] = 0;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <reset_ram_regs+0x140>)
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	regs[REG_VOLTAGE_INPUT_ADC_H] = 0;
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <reset_ram_regs+0x140>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	regs[REG_PROTOCOL_CRC_FAIL] = 0;
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <reset_ram_regs+0x140>)
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	regs[REG_HARDWARE_ERROR_STATUS] = 0;
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <reset_ram_regs+0x140>)
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000150 	.word	0x20000150

080026b4 <eeprom_empty>:
{
	return (uint8_t*)start_address;
}

bool eeprom_empty()
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
	return *(uint32_t*)(start_address)==0xFFFFFFFF;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <eeprom_empty+0x20>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	0801f800 	.word	0x0801f800

080026d8 <eeprom_restore>:

HAL_StatusTypeDef eeprom_restore(uint8_t * regs, uint32_t size)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	memcpy(regs,(uint8_t const*)start_address,size);
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <eeprom_restore+0x20>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f008 fa75 	bl	800abd8 <memcpy>
	return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	0801f800 	.word	0x0801f800
 80026fc:	00000000 	.word	0x00000000

08002700 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(uint8_t const * regs, uint32_t size)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08d      	sub	sp, #52	; 0x34
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800270a:	f004 f921 	bl	8006950 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase =
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	2301      	movs	r3, #1
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	233f      	movs	r3, #63	; 0x3f
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	2301      	movs	r3, #1
 800271c:	623b      	str	r3, [r7, #32]
				FLASH_TYPEERASE_PAGES,
				FLASH_BANK_1,
				page_nb,
				1
			};
		uint32_t page_error = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8002722:	f107 0210 	add.w	r2, r7, #16
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fa03 	bl	8006b38 <HAL_FLASHEx_Erase>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(result!=HAL_OK)
 8002738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <eeprom_store+0x4a>
		{
			HAL_FLASH_Lock();
 8002740:	f004 f928 	bl	8006994 <HAL_FLASH_Lock>
			return result;
 8002744:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002748:	e03b      	b.n	80027c2 <eeprom_store+0xc2>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 800274a:	a422      	add	r4, pc, #136	; (adr r4, 80027d4 <eeprom_store+0xd4>)
 800274c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002750:	e9c7 3402 	strd	r3, r4, [r7, #8]
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002758:	e02c      	b.n	80027b4 <eeprom_store+0xb4>
		{
			memcpy(&data,regs+index,sizeof(uint64_t));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	18d1      	adds	r1, r2, r3
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	2208      	movs	r2, #8
 8002766:	4618      	mov	r0, r3
 8002768:	f008 fa36 	bl	800abd8 <memcpy>
			HAL_StatusTypeDef result = HAL_FLASH_Program(
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <eeprom_store+0xd0>)
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	18d1      	adds	r1, r2, r3
 8002772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002776:	461a      	mov	r2, r3
 8002778:	4623      	mov	r3, r4
 800277a:	2000      	movs	r0, #0
 800277c:	f004 f892 	bl	80068a4 <HAL_FLASH_Program>
 8002780:	4603      	mov	r3, r0
 8002782:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					FLASH_TYPEPROGRAM_DOUBLEWORD,
					start_address+index,
					data
				);
			if(result!=HAL_OK)
 8002786:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00f      	beq.n	80027ae <eeprom_store+0xae>
			{
				uint32_t error = HAL_FLASH_GetError();
 800278e:	f004 f91b 	bl	80069c8 <HAL_FLASH_GetError>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24
				if(error)
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <eeprom_store+0xa4>
				{
					HAL_FLASH_Lock();
 800279a:	f004 f8fb 	bl	8006994 <HAL_FLASH_Lock>
					return error;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e00e      	b.n	80027c2 <eeprom_store+0xc2>
				}
				HAL_FLASH_Lock();
 80027a4:	f004 f8f6 	bl	8006994 <HAL_FLASH_Lock>
				return result;
 80027a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80027ac:	e009      	b.n	80027c2 <eeprom_store+0xc2>
		for(uint32_t index=0; index<size;index+=sizeof(uint64_t)) // 64 bits
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	3308      	adds	r3, #8
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3ce      	bcc.n	800275a <eeprom_store+0x5a>
			}
		}
	}
	HAL_FLASH_Lock();
 80027bc:	f004 f8ea 	bl	8006994 <HAL_FLASH_Lock>
	return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3734      	adds	r7, #52	; 0x34
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	0801f800 	.word	0x0801f800
 80027d4:	deadbeef 	.word	0xdeadbeef
 80027d8:	00000000 	.word	0x00000000

080027dc <stop_blinking>:
static uint32_t last_state_change_time[LED_COUNT]; // ms

/* Private functions ---------------------------------------------------------*/

void stop_blinking(int id)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    blinkin_period[id]=0;
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <stop_blinking+0x3c>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2100      	movs	r1, #0
 80027ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_counter[id]=0;
 80027ee:	4a0b      	ldr	r2, [pc, #44]	; (800281c <stop_blinking+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2100      	movs	r1, #0
 80027f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    blinkin_infinite[id]=false;
 80027f8:	4a09      	ldr	r2, [pc, #36]	; (8002820 <stop_blinking+0x44>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=0;
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <stop_blinking+0x48>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2100      	movs	r1, #0
 8002808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000120 	.word	0x20000120
 800281c:	20000124 	.word	0x20000124
 8002820:	20000128 	.word	0x20000128
 8002824:	2000012c 	.word	0x2000012c

08002828 <HAL_Led_Init>:

/* HAL functions ---------------------------------------------------------*/

void HAL_Led_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
    // Init private data & ALL OFF
    int id = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	e00d      	b.n	8002854 <HAL_Led_Init+0x2c>
    {
        stop_blinking(id);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffcf 	bl	80027dc <stop_blinking>
        HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 800283e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002846:	2201      	movs	r2, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f004 fc33 	bl	80070b4 <HAL_GPIO_WritePin>
    for(id=0;id<LED_COUNT;++id)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3301      	adds	r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	ddee      	ble.n	8002838 <HAL_Led_Init+0x10>
    }
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_Led_Process>:

void HAL_Led_Process(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
    uint32_t const current_time = HAL_GetTick();
 800286a:	f001 ff61 	bl	8004730 <HAL_GetTick>
 800286e:	6038      	str	r0, [r7, #0]
    int id = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
    for(id=0;id<LED_COUNT;++id)
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	e058      	b.n	800292c <HAL_Led_Process+0xc8>
    {
        // have to blink ?
        if( blinkin_period[id]!=0 )
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_Led_Process+0xd8>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d04f      	beq.n	8002926 <HAL_Led_Process+0xc2>
        {
            // is it time to blink ?
            if( current_time >= last_state_change_time[id]+blinkin_period[id] )
 8002886:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_Led_Process+0xdc>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	492b      	ldr	r1, [pc, #172]	; (800293c <HAL_Led_Process+0xd8>)
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002896:	4413      	add	r3, r2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d343      	bcc.n	8002926 <HAL_Led_Process+0xc2>
            {
                // blink
                if(HAL_GPIO_ReadPin(hal_led_id_to_port[id],hal_led_id_to_pin[id])==GPIO_PIN_RESET)
 800289e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 fbeb 	bl	8007084 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d108      	bne.n	80028c6 <HAL_Led_Process+0x62>
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 80028b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028bc:	2201      	movs	r2, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 fbf8 	bl	80070b4 <HAL_GPIO_WritePin>
 80028c4:	e007      	b.n	80028d6 <HAL_Led_Process+0x72>
                else
                    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 80028c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ce:	2200      	movs	r2, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f004 fbef 	bl	80070b4 <HAL_GPIO_WritePin>
                // next time
                last_state_change_time[id]+=blinkin_period[id];
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_Led_Process+0xdc>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	4917      	ldr	r1, [pc, #92]	; (800293c <HAL_Led_Process+0xd8>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028e6:	441a      	add	r2, r3
 80028e8:	4915      	ldr	r1, [pc, #84]	; (8002940 <HAL_Led_Process+0xdc>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if(!blinkin_infinite[id])
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_Led_Process+0xe0>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	f083 0301 	eor.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d011      	beq.n	8002926 <HAL_Led_Process+0xc2>
                {
                    --blinkin_counter[id];
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_Led_Process+0xe4>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_Led_Process+0xe4>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if(blinkin_counter[id]==0)
 8002914:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_Led_Process+0xe4>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <HAL_Led_Process+0xc2>
                    {
                        stop_blinking(id);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff5b 	bl	80027dc <stop_blinking>
    for(id=0;id<LED_COUNT;++id)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	dda3      	ble.n	800287a <HAL_Led_Process+0x16>
            }
            // else don't change led state
        }
        // else don't change led state
    }
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000120 	.word	0x20000120
 8002940:	2000012c 	.word	0x2000012c
 8002944:	20000128 	.word	0x20000128
 8002948:	20000124 	.word	0x20000124

0800294c <HAL_Led_Set>:

void HAL_Led_Set(int id)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff41 	bl	80027dc <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 800295a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800295e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002962:	2200      	movs	r2, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fba5 	bl	80070b4 <HAL_GPIO_WritePin>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_Led_Reset>:

void HAL_Led_Reset(int id)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
    stop_blinking(id);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ff2e 	bl	80027dc <stop_blinking>
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_SET);
 8002980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002988:	2201      	movs	r2, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f004 fb92 	bl	80070b4 <HAL_GPIO_WritePin>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_Led_Blink>:
    else
        return LED_OFF;
}

void HAL_Led_Blink(int id, int times, int period_ms)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
    blinkin_period[id]=period_ms;
 80029a4:	4917      	ldr	r1, [pc, #92]	; (8002a04 <HAL_Led_Blink+0x6c>)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    blinkin_counter[id]=times!=0?times*2-1:0;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_Led_Blink+0x24>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_Led_Blink+0x26>
 80029bc:	2300      	movs	r3, #0
 80029be:	4912      	ldr	r1, [pc, #72]	; (8002a08 <HAL_Led_Blink+0x70>)
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    blinkin_infinite[id]=(times==0);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2d9      	uxtb	r1, r3
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_Led_Blink+0x74>)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	460a      	mov	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]
    last_state_change_time[id]=HAL_GetTick();
 80029dc:	f001 fea8 	bl	8004730 <HAL_GetTick>
 80029e0:	4601      	mov	r1, r0
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <HAL_Led_Blink+0x78>)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // ON at once
    HAL_GPIO_WritePin(hal_led_id_to_port[id],hal_led_id_to_pin[id],GPIO_PIN_RESET);
 80029ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80029ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029f2:	2200      	movs	r2, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f004 fb5d 	bl	80070b4 <HAL_GPIO_WritePin>
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000120 	.word	0x20000120
 8002a08:	20000124 	.word	0x20000124
 8002a0c:	20000128 	.word	0x20000128
 8002a10:	2000012c 	.word	0x2000012c

08002a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a1a:	f001 fe24 	bl	8004666 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a1e:	f000 f86b 	bl	8002af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a22:	f000 faf9 	bl	8003018 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a26:	f000 fabd 	bl	8002fa4 <MX_DMA_Init>
  MX_TIM4_Init();
 8002a2a:	f000 f997 	bl	8002d5c <MX_TIM4_Init>
  MX_TIM15_Init();
 8002a2e:	f000 fa19 	bl	8002e64 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002a32:	f000 fa69 	bl	8002f08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002a36:	f000 f8c9 	bl	8002bcc <MX_ADC1_Init>
  MX_OPAMP1_Init();
 8002a3a:	f000 f961 	bl	8002d00 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Led_Init();
 8002a3e:	f7ff fef3 	bl	8002828 <HAL_Led_Init>
  HAL_Led_Blink(LED0,10,150);
 8002a42:	2296      	movs	r2, #150	; 0x96
 8002a44:	210a      	movs	r1, #10
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7ff ffa6 	bl	8002998 <HAL_Led_Blink>
  HAL_Serial_Init_Half_Duplex(
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9303      	str	r3, [sp, #12]
 8002a50:	2310      	movs	r3, #16
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <main+0xd4>)
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a60:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a64:	4921      	ldr	r1, [pc, #132]	; (8002aec <main+0xd8>)
 8002a66:	4822      	ldr	r0, [pc, #136]	; (8002af0 <main+0xdc>)
 8002a68:	f001 f88e 	bl	8003b88 <HAL_Serial_Init_Half_Duplex>
	GPIO_PIN_RESET,
	UART2_DIR_RX_GPIO_Port,
	UART2_DIR_RX_Pin,
	GPIO_PIN_RESET
	);
	if(eeprom_empty())
 8002a6c:	f7ff fe22 	bl	80026b4 <eeprom_empty>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <main+0x66>
		factory_reset_eeprom_regs();
 8002a76:	f7ff fca3 	bl	80023c0 <factory_reset_eeprom_regs>
	load_eeprom_regs();
 8002a7a:	f7ff fd65 	bl	8002548 <load_eeprom_regs>
	reset_ram_regs();
 8002a7e:	f7ff fd77 	bl	8002570 <reset_ram_regs>
	APP_Control_Init();
 8002a82:	f7fe fa89 	bl	8000f98 <APP_Control_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t start_time = HAL_GetTick();
 8002a86:	f001 fe53 	bl	8004730 <HAL_GetTick>
 8002a8a:	6078      	str	r0, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle LED
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8002a8c:	f001 fe50 	bl	8004730 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d910      	bls.n	8002abe <main+0xaa>
	{
		if(regs[REG_LED]==0)
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <main+0xe0>)
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <main+0x9a>
		{
			HAL_Led_Reset(LED0);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff ff63 	bl	8002972 <HAL_Led_Reset>
 8002aac:	e007      	b.n	8002abe <main+0xaa>
		}
		else if(regs[REG_LED]==1)
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <main+0xe0>)
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d102      	bne.n	8002abe <main+0xaa>
		{
			HAL_Led_Set(LED0);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7ff ff47 	bl	800294c <HAL_Led_Set>
		}
	}
	HAL_Led_Process();
 8002abe:	f7ff fed1 	bl	8002864 <HAL_Led_Process>

	// Handle communication
	while(HAL_Serial_Available(&serial))
 8002ac2:	e008      	b.n	8002ad6 <main+0xc2>
	{
	  char c = HAL_Serial_GetChar(&serial);
 8002ac4:	4809      	ldr	r0, [pc, #36]	; (8002aec <main+0xd8>)
 8002ac6:	f001 f925 	bl	8003d14 <HAL_Serial_GetChar>
 8002aca:	4603      	mov	r3, r0
 8002acc:	70fb      	strb	r3, [r7, #3]
	  packet_handler(c);
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 feef 	bl	80038b4 <packet_handler>
	while(HAL_Serial_Available(&serial))
 8002ad6:	4805      	ldr	r0, [pc, #20]	; (8002aec <main+0xd8>)
 8002ad8:	f001 f8ec 	bl	8003cb4 <HAL_Serial_Available>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <main+0xb0>
	}

	// regulation
	APP_Control_Process();
 8002ae2:	f7fe fab3 	bl	800104c <APP_Control_Process>
	if(HAL_GetTick()>start_time+2000) // blink first 2 seconds
 8002ae6:	e7d1      	b.n	8002a8c <main+0x78>
 8002ae8:	48000400 	.word	0x48000400
 8002aec:	200003d4 	.word	0x200003d4
 8002af0:	20002cdc 	.word	0x20002cdc
 8002af4:	20000150 	.word	0x20000150

08002af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0a4      	sub	sp, #144	; 0x90
 8002afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002afe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b02:	2238      	movs	r2, #56	; 0x38
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f008 f871 	bl	800abee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b1c:	463b      	mov	r3, r7
 8002b1e:	2244      	movs	r2, #68	; 0x44
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f008 f863 	bl	800abee <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b2c:	f004 fbdc 	bl	80072e8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b30:	2302      	movs	r3, #2
 8002b32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b3a:	2340      	movs	r3, #64	; 0x40
 8002b3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b42:	2302      	movs	r3, #2
 8002b44:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002b46:	2304      	movs	r3, #4
 8002b48:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8002b4a:	234b      	movs	r3, #75	; 0x4b
 8002b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fc72 	bl	8007450 <HAL_RCC_OscConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002b72:	f000 facf 	bl	8003114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b76:	230f      	movs	r3, #15
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b82:	2300      	movs	r3, #0
 8002b84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b8e:	2104      	movs	r1, #4
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 ff75 	bl	8007a80 <HAL_RCC_ClockConfig>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002b9c:	f000 faba 	bl	8003114 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8002ba0:	f248 0302 	movw	r3, #32770	; 0x8002
 8002ba4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002baa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f005 f980 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002bbe:	f000 faa9 	bl	8003114 <Error_Handler>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3790      	adds	r7, #144	; 0x90
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	; 0x30
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	2220      	movs	r2, #32
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f008 f802 	bl	800abee <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002bec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002bf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002bf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002c06:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c0c:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c14:	2208      	movs	r2, #8
 8002c16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c26:	2203      	movs	r2, #3
 8002c28:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8002c32:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c34:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c5a:	4825      	ldr	r0, [pc, #148]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c5c:	f001 ffd6 	bl	8004c0c <HAL_ADC_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002c66:	f000 fa55 	bl	8003114 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c72:	4619      	mov	r1, r3
 8002c74:	481e      	ldr	r0, [pc, #120]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002c76:	f003 f973 	bl	8005f60 <HAL_ADCEx_MultiModeConfigChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8002c80:	f000 fa48 	bl	8003114 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <MX_ADC1_Init+0x128>)
 8002c86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c88:	2306      	movs	r3, #6
 8002c8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c90:	237f      	movs	r3, #127	; 0x7f
 8002c92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c94:	2304      	movs	r3, #4
 8002c96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4813      	ldr	r0, [pc, #76]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002ca2:	f002 fc27 	bl	80054f4 <HAL_ADC_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002cac:	f000 fa32 	bl	8003114 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_ADC1_Init+0x12c>)
 8002cb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002cb4:	230c      	movs	r3, #12
 8002cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	4619      	mov	r1, r3
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002cbe:	f002 fc19 	bl	80054f4 <HAL_ADC_ConfigChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002cc8:	f000 fa24 	bl	8003114 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_ADC1_Init+0x130>)
 8002cce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_ADC1_Init+0x124>)
 8002cda:	f002 fc0b 	bl	80054f4 <HAL_ADC_ConfigChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002ce4:	f000 fa16 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	3730      	adds	r7, #48	; 0x30
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000308 	.word	0x20000308
 8002cf4:	b6902000 	.word	0xb6902000
 8002cf8:	3ef08000 	.word	0x3ef08000
 8002cfc:	2a000400 	.word	0x2a000400

08002d00 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <MX_OPAMP1_Init+0x58>)
 8002d08:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_OPAMP1_Init+0x54>)
 8002d40:	f004 f9d0 	bl	80070e4 <HAL_OPAMP_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002d4a:	f000 f9e3 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200002cc 	.word	0x200002cc
 8002d58:	40010300 	.word	0x40010300

08002d5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d70:	f107 031c 	add.w	r3, r7, #28
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	615a      	str	r2, [r3, #20]
 8002d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d8e:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002d90:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <MX_TIM4_Init+0x104>)
 8002d92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 37;
 8002d94:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002d96:	2225      	movs	r2, #37	; 0x25
 8002d98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002d9a:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002da0:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002da2:	2263      	movs	r2, #99	; 0x63
 8002da4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dac:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002db2:	482a      	ldr	r0, [pc, #168]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002db4:	f005 fa70 	bl	8008298 <HAL_TIM_Base_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002dbe:	f000 f9a9 	bl	8003114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4823      	ldr	r0, [pc, #140]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002dd0:	f005 ff54 	bl	8008c7c <HAL_TIM_ConfigClockSource>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002dda:	f000 f99b 	bl	8003114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002dde:	481f      	ldr	r0, [pc, #124]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002de0:	f005 fb14 	bl	800840c <HAL_TIM_PWM_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002dea:	f000 f993 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dee:	2320      	movs	r3, #32
 8002df0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002df6:	f107 031c 	add.w	r3, r7, #28
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4817      	ldr	r0, [pc, #92]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002dfe:	f006 fc89 	bl	8009714 <HAL_TIMEx_MasterConfigSynchronization>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002e08:	f000 f984 	bl	8003114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e0c:	2360      	movs	r3, #96	; 0x60
 8002e0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4619      	mov	r1, r3
 8002e22:	480e      	ldr	r0, [pc, #56]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002e24:	f005 fe1a 	bl	8008a5c <HAL_TIM_PWM_ConfigChannel>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002e2e:	f000 f971 	bl	8003114 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	2204      	movs	r2, #4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4807      	ldr	r0, [pc, #28]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002e3e:	f005 fe0d 	bl	8008a5c <HAL_TIM_PWM_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002e48:	f000 f964 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e4c:	4803      	ldr	r0, [pc, #12]	; (8002e5c <MX_TIM4_Init+0x100>)
 8002e4e:	f001 fa69 	bl	8004324 <HAL_TIM_MspPostInit>

}
 8002e52:	bf00      	nop
 8002e54:	3738      	adds	r7, #56	; 0x38
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000234 	.word	0x20000234
 8002e60:	40000800 	.word	0x40000800

08002e64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6a:	f107 0310 	add.w	r3, r7, #16
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002e82:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002e84:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <MX_TIM15_Init+0xa0>)
 8002e86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 149;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002e8a:	2295      	movs	r2, #149	; 0x95
 8002e8c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002eae:	4814      	ldr	r0, [pc, #80]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002eb0:	f005 f9f2 	bl	8008298 <HAL_TIM_Base_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002eba:	f000 f92b 	bl	8003114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480d      	ldr	r0, [pc, #52]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002ecc:	f005 fed6 	bl	8008c7c <HAL_TIM_ConfigClockSource>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002ed6:	f000 f91d 	bl	8003114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4806      	ldr	r0, [pc, #24]	; (8002f00 <MX_TIM15_Init+0x9c>)
 8002ee8:	f006 fc14 	bl	8009714 <HAL_TIMEx_MasterConfigSynchronization>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002ef2:	f000 f90f 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000280 	.word	0x20000280
 8002f04:	40014000 	.word	0x40014000

08002f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f0e:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <MX_USART2_UART_Init+0x94>)
 8002f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <MX_USART2_UART_Init+0x98>)
 8002f16:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f18:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f4e:	4812      	ldr	r0, [pc, #72]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f50:	f006 fca8 	bl	80098a4 <HAL_UART_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002f5a:	f000 f8db 	bl	8003114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5e:	2100      	movs	r1, #0
 8002f60:	480d      	ldr	r0, [pc, #52]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f62:	f007 fd2a 	bl	800a9ba <HAL_UARTEx_SetTxFifoThreshold>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8002f6c:	f000 f8d2 	bl	8003114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f70:	2100      	movs	r1, #0
 8002f72:	4809      	ldr	r0, [pc, #36]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f74:	f007 fd5f 	bl	800aa36 <HAL_UARTEx_SetRxFifoThreshold>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8002f7e:	f000 f8c9 	bl	8003114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USART2_UART_Init+0x90>)
 8002f84:	f007 fce0 	bl	800a948 <HAL_UARTEx_DisableFifoMode>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8002f8e:	f000 f8c1 	bl	8003114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20002cdc 	.word	0x20002cdc
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	0007a120 	.word	0x0007a120

08002fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <MX_DMA_Init+0x70>)
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	4a19      	ldr	r2, [pc, #100]	; (8003014 <MX_DMA_Init+0x70>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6493      	str	r3, [r2, #72]	; 0x48
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <MX_DMA_Init+0x70>)
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <MX_DMA_Init+0x70>)
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	4a13      	ldr	r2, [pc, #76]	; (8003014 <MX_DMA_Init+0x70>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6493      	str	r3, [r2, #72]	; 0x48
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <MX_DMA_Init+0x70>)
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	200b      	movs	r0, #11
 8002fe0:	f003 f94d 	bl	800627e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fe4:	200b      	movs	r0, #11
 8002fe6:	f003 f964 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	200c      	movs	r0, #12
 8002ff0:	f003 f945 	bl	800627e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ff4:	200c      	movs	r0, #12
 8002ff6:	f003 f95c 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	200d      	movs	r0, #13
 8003000:	f003 f93d 	bl	800627e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003004:	200d      	movs	r0, #13
 8003006:	f003 f954 	bl	80062b2 <HAL_NVIC_EnableIRQ>

}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <MX_GPIO_Init+0xf4>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	4a36      	ldr	r2, [pc, #216]	; (800310c <MX_GPIO_Init+0xf4>)
 8003034:	f043 0320 	orr.w	r3, r3, #32
 8003038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <MX_GPIO_Init+0xf4>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <MX_GPIO_Init+0xf4>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	4a30      	ldr	r2, [pc, #192]	; (800310c <MX_GPIO_Init+0xf4>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <MX_GPIO_Init+0xf4>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <MX_GPIO_Init+0xf4>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	4a2a      	ldr	r2, [pc, #168]	; (800310c <MX_GPIO_Init+0xf4>)
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <MX_GPIO_Init+0xf4>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|UART2_DIR_TX_Pin, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800307c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003080:	f004 f818 	bl	80070b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART2_DIR_RX_GPIO_Port, UART2_DIR_RX_Pin, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	2110      	movs	r1, #16
 8003088:	4821      	ldr	r0, [pc, #132]	; (8003110 <MX_GPIO_Init+0xf8>)
 800308a:	f004 f813 	bl	80070b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800308e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003094:	2311      	movs	r3, #17
 8003096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	4619      	mov	r1, r3
 80030a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030aa:	f003 fe69 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_TX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_TX_Pin;
 80030ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030b4:	2311      	movs	r3, #17
 80030b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_TX_GPIO_Port, &GPIO_InitStruct);
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ca:	f003 fe59 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_DIR_RX_Pin */
  GPIO_InitStruct.Pin = UART2_DIR_RX_Pin;
 80030ce:	2310      	movs	r3, #16
 80030d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030d2:	2311      	movs	r3, #17
 80030d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d6:	2301      	movs	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UART2_DIR_RX_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4619      	mov	r1, r3
 80030e4:	480a      	ldr	r0, [pc, #40]	; (8003110 <MX_GPIO_Init+0xf8>)
 80030e6:	f003 fe4b 	bl	8006d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 80030ea:	2320      	movs	r3, #32
 80030ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	4619      	mov	r1, r3
 80030fc:	4804      	ldr	r0, [pc, #16]	; (8003110 <MX_GPIO_Init+0xf8>)
 80030fe:	f003 fe3f 	bl	8006d80 <HAL_GPIO_Init>

}
 8003102:	bf00      	nop
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	48000400 	.word	0x48000400

08003114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800311a:	e7fe      	b.n	800311a <Error_Handler+0x6>

0800311c <fconstrain>:
    else
        return x;
}

float fconstrain(float x, float min, float max)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	ed87 0a03 	vstr	s0, [r7, #12]
 8003126:	edc7 0a02 	vstr	s1, [r7, #8]
 800312a:	ed87 1a01 	vstr	s2, [r7, #4]
    if(x<min)
 800312e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003132:	edd7 7a02 	vldr	s15, [r7, #8]
 8003136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d501      	bpl.n	8003144 <fconstrain+0x28>
        return min;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	e00b      	b.n	800315c <fconstrain+0x40>
    else if(x>max)
 8003144:	ed97 7a03 	vldr	s14, [r7, #12]
 8003148:	edd7 7a01 	vldr	s15, [r7, #4]
 800314c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	dd01      	ble.n	800315a <fconstrain+0x3e>
        return max;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	e000      	b.n	800315c <fconstrain+0x40>
    else
        return x;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	ee07 3a90 	vmov	s15, r3
}
 8003160:	eeb0 0a67 	vmov.f32	s0, s15
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <fmap>:
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float fmap(float x, float in_min, float in_max, float out_min, float out_max)
{
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	ed87 0a05 	vstr	s0, [r7, #20]
 8003178:	edc7 0a04 	vstr	s1, [r7, #16]
 800317c:	ed87 1a03 	vstr	s2, [r7, #12]
 8003180:	edc7 1a02 	vstr	s3, [r7, #8]
 8003184:	ed87 2a01 	vstr	s4, [r7, #4]
    if(x<=in_min)
 8003188:	ed97 7a05 	vldr	s14, [r7, #20]
 800318c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	d802      	bhi.n	80031a0 <fmap+0x32>
        return out_min;
 800319a:	edd7 7a02 	vldr	s15, [r7, #8]
 800319e:	e025      	b.n	80031ec <fmap+0x7e>
    else if(x>=in_max)
 80031a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80031a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	db02      	blt.n	80031b8 <fmap+0x4a>
        return out_max;
 80031b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b6:	e019      	b.n	80031ec <fmap+0x7e>
    else
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80031b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80031c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80031c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80031d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80031dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80031ec:	eeb0 0a67 	vmov.f32	s0, s15
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <pid_reset>:
#include <string.h>
#include <stdbool.h>
#include "math_tool.h"

void pid_reset( pid_context_t * ctx )
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
	ctx->err_last_one = 0.0f;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
	ctx->err_integral = 0.0f;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	605a      	str	r2, [r3, #4]
	ctx->derivative_filtered = 0.0f;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <pid_process_antiwindup_clamp_with_ff>:
		float kd,
		float output_limit,
		float alpha_derivative,
		float feed_forward
)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b08e      	sub	sp, #56	; 0x38
 800322a:	af00      	add	r7, sp, #0
 800322c:	61f8      	str	r0, [r7, #28]
 800322e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003232:	edc7 0a05 	vstr	s1, [r7, #20]
 8003236:	ed87 1a04 	vstr	s2, [r7, #16]
 800323a:	edc7 1a03 	vstr	s3, [r7, #12]
 800323e:	ed87 2a02 	vstr	s4, [r7, #8]
 8003242:	edc7 2a01 	vstr	s5, [r7, #4]
 8003246:	ed87 3a00 	vstr	s6, [r7]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ed97 7a06 	vldr	s14, [r7, #24]
 8003254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003258:	edd7 7a01 	vldr	s15, [r7, #4]
 800325c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003264:	edd7 7a01 	vldr	s15, [r7, #4]
 8003268:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 8003286:	ed97 7a05 	vldr	s14, [r7, #20]
 800328a:	edd7 7a06 	vldr	s15, [r7, #24]
 800328e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003292:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term + feed_forward;
 80032ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80032b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c2:	ed97 7a00 	vldr	s14, [r7]
 80032c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 80032ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d2:	eef1 7a67 	vneg.f32	s15, s15
 80032d6:	ed97 1a02 	vldr	s2, [r7, #8]
 80032da:	eef0 0a67 	vmov.f32	s1, s15
 80032de:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80032e2:	f7ff ff1b 	bl	800311c <fconstrain>
 80032e6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 80032ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80032ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80032f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 8003304:	ed97 7a06 	vldr	s14, [r7, #24]
 8003308:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800330c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	bfac      	ite	ge
 800331a:	2301      	movge	r3, #1
 800331c:	2300      	movlt	r3, #0
 800331e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 8003322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <pid_process_antiwindup_clamp_with_ff+0x110>
 800332a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <pid_process_antiwindup_clamp_with_ff+0x110>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <pid_process_antiwindup_clamp_with_ff+0x112>
 8003336:	2300      	movs	r3, #0
 8003338:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800333c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8003348:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800334c:	f083 0301 	eor.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <pid_process_antiwindup_clamp_with_ff+0x14c>
		ctx->err_integral = ctx->err_integral + ki*error;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	ed93 7a01 	vldr	s14, [r3, #4]
 800335c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003360:	edd7 7a06 	vldr	s15, [r7, #24]
 8003364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	ee07 3a90 	vmov	s15, r3
}
 8003378:	eeb0 0a67 	vmov.f32	s0, s15
 800337c:	3738      	adds	r7, #56	; 0x38
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <pid_process_antiwindup_clamp>:
		float ki,
		float kd,
		float output_limit,
		float alpha_derivative
)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b08e      	sub	sp, #56	; 0x38
 8003386:	af00      	add	r7, sp, #0
 8003388:	61f8      	str	r0, [r7, #28]
 800338a:	ed87 0a06 	vstr	s0, [r7, #24]
 800338e:	edc7 0a05 	vstr	s1, [r7, #20]
 8003392:	ed87 1a04 	vstr	s2, [r7, #16]
 8003396:	edc7 1a03 	vstr	s3, [r7, #12]
 800339a:	ed87 2a02 	vstr	s4, [r7, #8]
 800339e:	edc7 2a01 	vstr	s5, [r7, #4]
	// filter derivative
	ctx->derivative_filtered = alpha_derivative*(error-ctx->err_last_one)+(1.0f-alpha_derivative)*ctx->derivative_filtered;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80033ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80033ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	edc3 7a02 	vstr	s15, [r3, #8]
	// update derivative state
	ctx->err_last_one = error;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	601a      	str	r2, [r3, #0]
	// PID
	float const p_term = kp*error;
 80033de:	ed97 7a05 	vldr	s14, [r7, #20]
 80033e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float const i_term = ctx->err_integral;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
	float const d_term = kd*ctx->derivative_filtered;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80033fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	// compute output before saturation
	float const v = p_term + i_term + d_term;
 8003406:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800340a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// saturation
	float const u = fconstrain(v,-output_limit,output_limit);
 800341e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003422:	eef1 7a67 	vneg.f32	s15, s15
 8003426:	ed97 1a02 	vldr	s2, [r7, #8]
 800342a:	eef0 0a67 	vmov.f32	s1, s15
 800342e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8003432:	f7ff fe73 	bl	800311c <fconstrain>
 8003436:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	// output saturating
	bool saturating = (u!=v);
 800343a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800343e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003442:	eeb4 7a67 	vcmp.f32	s14, s15
 8003446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// error and output same sign
	bool sign = (error*v >= 0);
 8003454:	ed97 7a06 	vldr	s14, [r7, #24]
 8003458:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800345c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	bfac      	ite	ge
 800346a:	2301      	movge	r3, #1
 800346c:	2300      	movlt	r3, #0
 800346e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	// zero
	bool clamp = saturating && sign;
 8003472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <pid_process_antiwindup_clamp+0x104>
 800347a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <pid_process_antiwindup_clamp+0x104>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <pid_process_antiwindup_clamp+0x106>
 8003486:	2300      	movs	r3, #0
 8003488:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800348c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(!clamp)
 8003498:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800349c:	f083 0301 	eor.w	r3, r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <pid_process_antiwindup_clamp+0x140>
		ctx->err_integral = ctx->err_integral + ki*error;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80034ac:	edd7 6a04 	vldr	s13, [r7, #16]
 80034b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80034b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	edc3 7a01 	vstr	s15, [r3, #4]
	// output
	return u;
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	ee07 3a90 	vmov	s15, r3
}
 80034c8:	eeb0 0a67 	vmov.f32	s0, s15
 80034cc:	3738      	adds	r7, #56	; 0x38
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <updateCRC>:
#include "serial.h"

extern HAL_Serial_Handler serial;

uint16_t updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	80fb      	strh	r3, [r7, #6]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	81fb      	strh	r3, [r7, #14]
 80034e8:	e019      	b.n	800351e <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4053      	eors	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	b21a      	sxth	r2, r3
 8003508:	89bb      	ldrh	r3, [r7, #12]
 800350a:	490a      	ldr	r1, [pc, #40]	; (8003534 <updateCRC+0x60>)
 800350c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003510:	b21b      	sxth	r3, r3
 8003512:	4053      	eors	r3, r2
 8003514:	b21b      	sxth	r3, r3
 8003516:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8003518:	89fb      	ldrh	r3, [r7, #14]
 800351a:	3301      	adds	r3, #1
 800351c:	81fb      	strh	r3, [r7, #14]
 800351e:	89fa      	ldrh	r2, [r7, #14]
 8003520:	88bb      	ldrh	r3, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d3e1      	bcc.n	80034ea <updateCRC+0x16>
  }

  return crc_accum;
 8003526:	88fb      	ldrh	r3, [r7, #6]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	0800acd4 	.word	0x0800acd4

08003538 <packet_encapsulate>:
#define PKT_PARAMETER2          10
#define PKT_PARAMETER3          11
#define PKT_PARAMETER4          12

void packet_encapsulate(uint32_t payload_status_length) // length from instruction byte to last parameter byte
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	// header
	tx_packet_buffer[PKT_HEADER0]=0xFF;
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <packet_encapsulate+0x84>)
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	701a      	strb	r2, [r3, #0]
	tx_packet_buffer[PKT_HEADER1]=0xFF;
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <packet_encapsulate+0x84>)
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	705a      	strb	r2, [r3, #1]
	tx_packet_buffer[PKT_HEADER2]=0xFD;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <packet_encapsulate+0x84>)
 800354e:	22fd      	movs	r2, #253	; 0xfd
 8003550:	709a      	strb	r2, [r3, #2]
	tx_packet_buffer[PKT_RESERVED]=0x00;
 8003552:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <packet_encapsulate+0x84>)
 8003554:	2200      	movs	r2, #0
 8003556:	70da      	strb	r2, [r3, #3]
	tx_packet_buffer[PKT_ID]=regs[REG_ID];
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <packet_encapsulate+0x88>)
 800355a:	78da      	ldrb	r2, [r3, #3]
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <packet_encapsulate+0x84>)
 800355e:	711a      	strb	r2, [r3, #4]
	// length
	uint16_t length = payload_status_length+2; // +crc
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	b29b      	uxth	r3, r3
 8003564:	3302      	adds	r3, #2
 8003566:	81fb      	strh	r3, [r7, #14]
	tx_packet_buffer[PKT_LENGTH_L]= LOW_BYTE(length);
 8003568:	89fb      	ldrh	r3, [r7, #14]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <packet_encapsulate+0x84>)
 800356e:	715a      	strb	r2, [r3, #5]
	tx_packet_buffer[PKT_LENGTH_H]= HIGH_BYTE(length);
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	b29b      	uxth	r3, r3
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <packet_encapsulate+0x84>)
 800357a:	719a      	strb	r2, [r3, #6]
	// crc
	uint16_t packet_crc = updateCRC(0, tx_packet_buffer, length+5);
 800357c:	89fb      	ldrh	r3, [r7, #14]
 800357e:	3305      	adds	r3, #5
 8003580:	b29b      	uxth	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	490d      	ldr	r1, [pc, #52]	; (80035bc <packet_encapsulate+0x84>)
 8003586:	2000      	movs	r0, #0
 8003588:	f7ff ffa4 	bl	80034d4 <updateCRC>
 800358c:	4603      	mov	r3, r0
 800358e:	81bb      	strh	r3, [r7, #12]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length]= LOW_BYTE(packet_crc); // CRC 1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3307      	adds	r3, #7
 8003594:	89ba      	ldrh	r2, [r7, #12]
 8003596:	b2d1      	uxtb	r1, r2
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <packet_encapsulate+0x84>)
 800359a:	54d1      	strb	r1, [r2, r3]
	tx_packet_buffer[PKT_INSTRUCTION+payload_status_length+1]= HIGH_BYTE(packet_crc); // CRC 2
 800359c:	89bb      	ldrh	r3, [r7, #12]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3308      	adds	r3, #8
 80035a6:	b2d1      	uxtb	r1, r2
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <packet_encapsulate+0x84>)
 80035aa:	54d1      	strb	r1, [r2, r3]
	tx_packet_length = PKT_INSTRUCTION+payload_status_length+2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3309      	adds	r3, #9
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <packet_encapsulate+0x8c>)
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200031b4 	.word	0x200031b4
 80035c0:	20000150 	.word	0x20000150
 80035c4:	20000138 	.word	0x20000138

080035c8 <instruction_handler>:
#define ERROR_DATA_LENGTH_ERROR  	0x05
#define ERROR_DATA_LIMIT_ERROR  	0x06
#define ERROR_ACCESS_ERROR  		0x07

void instruction_handler()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08c      	sub	sp, #48	; 0x30
 80035cc:	af00      	add	r7, sp, #0
	switch(rx_packet_buffer[PKT_INSTRUCTION])
 80035ce:	4b9b      	ldr	r3, [pc, #620]	; (800383c <instruction_handler+0x274>)
 80035d0:	79db      	ldrb	r3, [r3, #7]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	f000 811a 	beq.w	800380c <instruction_handler+0x244>
 80035d8:	2b06      	cmp	r3, #6
 80035da:	dc06      	bgt.n	80035ea <instruction_handler+0x22>
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d02b      	beq.n	8003638 <instruction_handler+0x70>
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d070      	beq.n	80036c6 <instruction_handler+0xfe>
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d00a      	beq.n	80035fe <instruction_handler+0x36>
 80035e8:	e148      	b.n	800387c <instruction_handler+0x2b4>
 80035ea:	2b82      	cmp	r3, #130	; 0x82
 80035ec:	f000 8157 	beq.w	800389e <instruction_handler+0x2d6>
 80035f0:	2b83      	cmp	r3, #131	; 0x83
 80035f2:	f000 80b5 	beq.w	8003760 <instruction_handler+0x198>
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	f000 812a 	beq.w	8003850 <instruction_handler+0x288>
 80035fc:	e13e      	b.n	800387c <instruction_handler+0x2b4>
	{
	case INSTR_PING:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80035fe:	4b90      	ldr	r3, [pc, #576]	; (8003840 <instruction_handler+0x278>)
 8003600:	2255      	movs	r2, #85	; 0x55
 8003602:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8003604:	4b8e      	ldr	r3, [pc, #568]	; (8003840 <instruction_handler+0x278>)
 8003606:	2200      	movs	r2, #0
 8003608:	721a      	strb	r2, [r3, #8]
			tx_packet_buffer[PKT_PARAMETER1]= regs[REG_MODEL_NUMBER_L];
 800360a:	4b8e      	ldr	r3, [pc, #568]	; (8003844 <instruction_handler+0x27c>)
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <instruction_handler+0x278>)
 8003610:	725a      	strb	r2, [r3, #9]
			tx_packet_buffer[PKT_PARAMETER2]= regs[REG_MODEL_NUMBER_H];
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <instruction_handler+0x27c>)
 8003614:	785a      	ldrb	r2, [r3, #1]
 8003616:	4b8a      	ldr	r3, [pc, #552]	; (8003840 <instruction_handler+0x278>)
 8003618:	729a      	strb	r2, [r3, #10]
			tx_packet_buffer[PKT_PARAMETER3]= regs[REG_VERSION];
 800361a:	4b8a      	ldr	r3, [pc, #552]	; (8003844 <instruction_handler+0x27c>)
 800361c:	789a      	ldrb	r2, [r3, #2]
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <instruction_handler+0x278>)
 8003620:	72da      	strb	r2, [r3, #11]
			packet_encapsulate(5);
 8003622:	2005      	movs	r0, #5
 8003624:	f7ff ff88 	bl	8003538 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003628:	4b87      	ldr	r3, [pc, #540]	; (8003848 <instruction_handler+0x280>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4984      	ldr	r1, [pc, #528]	; (8003840 <instruction_handler+0x278>)
 8003630:	4886      	ldr	r0, [pc, #536]	; (800384c <instruction_handler+0x284>)
 8003632:	f000 fbbf 	bl	8003db4 <HAL_Serial_Write>
		}
		break;
 8003636:	e133      	b.n	80038a0 <instruction_handler+0x2d8>
	case INSTR_READ:
		{
			// resassemble 16-bit address and length
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8003638:	4b80      	ldr	r3, [pc, #512]	; (800383c <instruction_handler+0x274>)
 800363a:	7a5b      	ldrb	r3, [r3, #9]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	b21a      	sxth	r2, r3
 8003640:	4b7e      	ldr	r3, [pc, #504]	; (800383c <instruction_handler+0x274>)
 8003642:	7a1b      	ldrb	r3, [r3, #8]
 8003644:	b21b      	sxth	r3, r3
 8003646:	4313      	orrs	r3, r2
 8003648:	b21b      	sxth	r3, r3
 800364a:	807b      	strh	r3, [r7, #2]
			uint16_t length =  MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 800364c:	4b7b      	ldr	r3, [pc, #492]	; (800383c <instruction_handler+0x274>)
 800364e:	7adb      	ldrb	r3, [r3, #11]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	b21a      	sxth	r2, r3
 8003654:	4b79      	ldr	r3, [pc, #484]	; (800383c <instruction_handler+0x274>)
 8003656:	7a9b      	ldrb	r3, [r3, #10]
 8003658:	b21b      	sxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	b21b      	sxth	r3, r3
 800365e:	803b      	strh	r3, [r7, #0]
			// capture value
			if(address<REG_MAX)
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	2b81      	cmp	r3, #129	; 0x81
 8003664:	d81e      	bhi.n	80036a4 <instruction_handler+0xdc>
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <instruction_handler+0x278>)
 8003668:	2255      	movs	r2, #85	; 0x55
 800366a:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 800366c:	4b74      	ldr	r3, [pc, #464]	; (8003840 <instruction_handler+0x278>)
 800366e:	2200      	movs	r2, #0
 8003670:	721a      	strb	r2, [r3, #8]
				for(uint32_t index=0;index<length;++index)
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003676:	e00b      	b.n	8003690 <instruction_handler+0xc8>
					tx_packet_buffer[PKT_ERROR+1+index]= regs[address+index];
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	441a      	add	r2, r3
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	3309      	adds	r3, #9
 8003682:	4970      	ldr	r1, [pc, #448]	; (8003844 <instruction_handler+0x27c>)
 8003684:	5c89      	ldrb	r1, [r1, r2]
 8003686:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <instruction_handler+0x278>)
 8003688:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<length;++index)
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	3301      	adds	r3, #1
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003690:	883b      	ldrh	r3, [r7, #0]
 8003692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003694:	429a      	cmp	r2, r3
 8003696:	d3ef      	bcc.n	8003678 <instruction_handler+0xb0>
				packet_encapsulate(2+length);
 8003698:	883b      	ldrh	r3, [r7, #0]
 800369a:	3302      	adds	r3, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff4b 	bl	8003538 <packet_encapsulate>
 80036a2:	e008      	b.n	80036b6 <instruction_handler+0xee>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 80036a4:	4b66      	ldr	r3, [pc, #408]	; (8003840 <instruction_handler+0x278>)
 80036a6:	2255      	movs	r2, #85	; 0x55
 80036a8:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <instruction_handler+0x278>)
 80036ac:	2207      	movs	r2, #7
 80036ae:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 80036b0:	2002      	movs	r0, #2
 80036b2:	f7ff ff41 	bl	8003538 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <instruction_handler+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4960      	ldr	r1, [pc, #384]	; (8003840 <instruction_handler+0x278>)
 80036be:	4863      	ldr	r0, [pc, #396]	; (800384c <instruction_handler+0x284>)
 80036c0:	f000 fb78 	bl	8003db4 <HAL_Serial_Write>
		}
		break;
 80036c4:	e0ec      	b.n	80038a0 <instruction_handler+0x2d8>
	case INSTR_WRITE:
		{
			// resassemble 16-bit address and value
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <instruction_handler+0x274>)
 80036c8:	7a5b      	ldrb	r3, [r3, #9]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	b21a      	sxth	r2, r3
 80036ce:	4b5b      	ldr	r3, [pc, #364]	; (800383c <instruction_handler+0x274>)
 80036d0:	7a1b      	ldrb	r3, [r3, #8]
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	80fb      	strh	r3, [r7, #6]
			// TODO ; depend on length of packet
			uint16_t value_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2-1-2; // remove INSTR, CRC-16 and PARAM0/1
 80036da:	4b58      	ldr	r3, [pc, #352]	; (800383c <instruction_handler+0x274>)
 80036dc:	799b      	ldrb	r3, [r3, #6]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <instruction_handler+0x274>)
 80036e4:	795b      	ldrb	r3, [r3, #5]
 80036e6:	b21b      	sxth	r3, r3
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b05      	subs	r3, #5
 80036f0:	80bb      	strh	r3, [r7, #4]
			// write into register
			if(address<REG_MAX)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b81      	cmp	r3, #129	; 0x81
 80036f6:	d822      	bhi.n	800373e <instruction_handler+0x176>
			{
				// TODO : check data range for global position, and other registers in RAM
				for(uint32_t index=0;index<value_length;++index)
 80036f8:	2300      	movs	r3, #0
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fc:	e00c      	b.n	8003718 <instruction_handler+0x150>
					regs[address+index]=rx_packet_buffer[PKT_PARAMETER2+index];
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	f103 020a 	add.w	r2, r3, #10
 8003704:	88f9      	ldrh	r1, [r7, #6]
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	440b      	add	r3, r1
 800370a:	494c      	ldr	r1, [pc, #304]	; (800383c <instruction_handler+0x274>)
 800370c:	5c89      	ldrb	r1, [r1, r2]
 800370e:	4a4d      	ldr	r2, [pc, #308]	; (8003844 <instruction_handler+0x27c>)
 8003710:	54d1      	strb	r1, [r2, r3]
				for(uint32_t index=0;index<value_length;++index)
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	3301      	adds	r3, #1
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
 8003718:	88bb      	ldrh	r3, [r7, #4]
 800371a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371c:	429a      	cmp	r2, r3
 800371e:	d3ee      	bcc.n	80036fe <instruction_handler+0x136>
				// store when accessing EEPROM regs
				if(address<REG_TORQUE_ENABLE)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	2b3f      	cmp	r3, #63	; 0x3f
 8003724:	d801      	bhi.n	800372a <instruction_handler+0x162>
				{
					store_eeprom_regs();
 8003726:	f7fe ff19 	bl	800255c <store_eeprom_regs>
				}
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800372a:	4b45      	ldr	r3, [pc, #276]	; (8003840 <instruction_handler+0x278>)
 800372c:	2255      	movs	r2, #85	; 0x55
 800372e:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= 0x00; // TODO : Alarm flag to handle here
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <instruction_handler+0x278>)
 8003732:	2200      	movs	r2, #0
 8003734:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 8003736:	2002      	movs	r0, #2
 8003738:	f7ff fefe 	bl	8003538 <packet_encapsulate>
 800373c:	e008      	b.n	8003750 <instruction_handler+0x188>
			}
			else
			{
				// reply with a status packet with ERR only
				tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <instruction_handler+0x278>)
 8003740:	2255      	movs	r2, #85	; 0x55
 8003742:	71da      	strb	r2, [r3, #7]
				tx_packet_buffer[PKT_ERROR]= ERROR_ACCESS_ERROR; // TODO : Alarm flag to handle here
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <instruction_handler+0x278>)
 8003746:	2207      	movs	r2, #7
 8003748:	721a      	strb	r2, [r3, #8]
				packet_encapsulate(2);
 800374a:	2002      	movs	r0, #2
 800374c:	f7ff fef4 	bl	8003538 <packet_encapsulate>
			}
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003750:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <instruction_handler+0x280>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	493a      	ldr	r1, [pc, #232]	; (8003840 <instruction_handler+0x278>)
 8003758:	483c      	ldr	r0, [pc, #240]	; (800384c <instruction_handler+0x284>)
 800375a:	f000 fb2b 	bl	8003db4 <HAL_Serial_Write>
		}
		break;
 800375e:	e09f      	b.n	80038a0 <instruction_handler+0x2d8>
		}
		break;
	case INSTR_SYNC_WRITE:
		{
			// decode length of [ID,PARAMS]
			uint16_t const values_length =  MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-1-4-2; // remove INSTR, CRC-16 and PARAM0/1/2/3
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <instruction_handler+0x274>)
 8003762:	799b      	ldrb	r3, [r3, #6]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	b21a      	sxth	r2, r3
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <instruction_handler+0x274>)
 800376a:	795b      	ldrb	r3, [r3, #5]
 800376c:	b21b      	sxth	r3, r3
 800376e:	4313      	orrs	r3, r2
 8003770:	b21b      	sxth	r3, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b07      	subs	r3, #7
 8003776:	83fb      	strh	r3, [r7, #30]
			// decode the address
			uint16_t address = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER0],rx_packet_buffer[PKT_PARAMETER1]);
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <instruction_handler+0x274>)
 800377a:	7a5b      	ldrb	r3, [r3, #9]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	b21a      	sxth	r2, r3
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <instruction_handler+0x274>)
 8003782:	7a1b      	ldrb	r3, [r3, #8]
 8003784:	b21b      	sxth	r3, r3
 8003786:	4313      	orrs	r3, r2
 8003788:	b21b      	sxth	r3, r3
 800378a:	83bb      	strh	r3, [r7, #28]
			// decode the size of data per ID
			uint32_t const data_length = MAKE_SHORT(rx_packet_buffer[PKT_PARAMETER2],rx_packet_buffer[PKT_PARAMETER3]);
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <instruction_handler+0x274>)
 800378e:	7adb      	ldrb	r3, [r3, #11]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	4a2a      	ldr	r2, [pc, #168]	; (800383c <instruction_handler+0x274>)
 8003794:	7a92      	ldrb	r2, [r2, #10]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
			// count the [ID,PARAMS]
			uint16_t const number_of_id_and_data = values_length / (1+data_length); // 1 for ID + data_length
 800379a:	8bfa      	ldrh	r2, [r7, #30]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	3301      	adds	r3, #1
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	82fb      	strh	r3, [r7, #22]
			// search for my ID
			uint32_t const my_id = regs[REG_ID];
 80037a6:	4b27      	ldr	r3, [pc, #156]	; (8003844 <instruction_handler+0x27c>)
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	613b      	str	r3, [r7, #16]
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	e027      	b.n	8003802 <instruction_handler+0x23a>
			{
				uint32_t position = PKT_PARAMETER4+index*(data_length+1);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	3301      	adds	r3, #1
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	330c      	adds	r3, #12
 80037be:	60fb      	str	r3, [r7, #12]
				uint32_t id = rx_packet_buffer[position];
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <instruction_handler+0x274>)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	60bb      	str	r3, [r7, #8]
				// found my own id in one ID,PARAMS]
				if(id==my_id)
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d114      	bne.n	80037fc <instruction_handler+0x234>
				{
					// update RAM
					for(uint32_t index2=0;index2<data_length;++index2)
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	e00d      	b.n	80037f4 <instruction_handler+0x22c>
						regs[address+index2]=rx_packet_buffer[position+1+index2];
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	4413      	add	r3, r2
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	8bb9      	ldrh	r1, [r7, #28]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	440b      	add	r3, r1
 80037e6:	4915      	ldr	r1, [pc, #84]	; (800383c <instruction_handler+0x274>)
 80037e8:	5c89      	ldrb	r1, [r1, r2]
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <instruction_handler+0x27c>)
 80037ec:	54d1      	strb	r1, [r2, r3]
					for(uint32_t index2=0;index2<data_length;++index2)
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	3301      	adds	r3, #1
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3ed      	bcc.n	80037d8 <instruction_handler+0x210>
			for(uint32_t index=0;index<number_of_id_and_data;++index)
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	3301      	adds	r3, #1
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	8afb      	ldrh	r3, [r7, #22]
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	429a      	cmp	r2, r3
 8003808:	d3d3      	bcc.n	80037b2 <instruction_handler+0x1ea>
				}
			}
		}
		break;
 800380a:	e049      	b.n	80038a0 <instruction_handler+0x2d8>
	case INSTR_FACTORY_RESET:
		{
			factory_reset_eeprom_regs();
 800380c:	f7fe fdd8 	bl	80023c0 <factory_reset_eeprom_regs>
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <instruction_handler+0x278>)
 8003812:	2255      	movs	r2, #85	; 0x55
 8003814:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <instruction_handler+0x278>)
 8003818:	2200      	movs	r2, #0
 800381a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 800381c:	2002      	movs	r0, #2
 800381e:	f7ff fe8b 	bl	8003538 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <instruction_handler+0x280>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	4905      	ldr	r1, [pc, #20]	; (8003840 <instruction_handler+0x278>)
 800382a:	4808      	ldr	r0, [pc, #32]	; (800384c <instruction_handler+0x284>)
 800382c:	f000 fac2 	bl	8003db4 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8003830:	2064      	movs	r0, #100	; 0x64
 8003832:	f000 ff89 	bl	8004748 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8003836:	f002 fd4a 	bl	80062ce <HAL_NVIC_SystemReset>
		}
		break;
 800383a:	e031      	b.n	80038a0 <instruction_handler+0x2d8>
 800383c:	20002d68 	.word	0x20002d68
 8003840:	200031b4 	.word	0x200031b4
 8003844:	20000150 	.word	0x20000150
 8003848:	20000138 	.word	0x20000138
 800384c:	200003d4 	.word	0x200003d4
	case INSTR_REBOOT:
		{
			// reply with a status packet with Model Number LSB MSB and Firmware version
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <instruction_handler+0x2e0>)
 8003852:	2255      	movs	r2, #85	; 0x55
 8003854:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_NONE;
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <instruction_handler+0x2e0>)
 8003858:	2200      	movs	r2, #0
 800385a:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 800385c:	2002      	movs	r0, #2
 800385e:	f7ff fe6b 	bl	8003538 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <instruction_handler+0x2e4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	490f      	ldr	r1, [pc, #60]	; (80038a8 <instruction_handler+0x2e0>)
 800386a:	4811      	ldr	r0, [pc, #68]	; (80038b0 <instruction_handler+0x2e8>)
 800386c:	f000 faa2 	bl	8003db4 <HAL_Serial_Write>
			// reboot
			HAL_Delay(100);
 8003870:	2064      	movs	r0, #100	; 0x64
 8003872:	f000 ff69 	bl	8004748 <HAL_Delay>
			HAL_NVIC_SystemReset();
 8003876:	f002 fd2a 	bl	80062ce <HAL_NVIC_SystemReset>
		}
		break;
 800387a:	e011      	b.n	80038a0 <instruction_handler+0x2d8>
	default:
		// reply with a status packet with ERR only
		tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <instruction_handler+0x2e0>)
 800387e:	2255      	movs	r2, #85	; 0x55
 8003880:	71da      	strb	r2, [r3, #7]
		tx_packet_buffer[PKT_ERROR]= ERROR_INSTRUCTION_ERROR; // TODO : Alarm flag to handle here
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <instruction_handler+0x2e0>)
 8003884:	2202      	movs	r2, #2
 8003886:	721a      	strb	r2, [r3, #8]
		packet_encapsulate(2);
 8003888:	2002      	movs	r0, #2
 800388a:	f7ff fe55 	bl	8003538 <packet_encapsulate>
		// send packet
		HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <instruction_handler+0x2e4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4904      	ldr	r1, [pc, #16]	; (80038a8 <instruction_handler+0x2e0>)
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <instruction_handler+0x2e8>)
 8003898:	f000 fa8c 	bl	8003db4 <HAL_Serial_Write>
		break;
 800389c:	e000      	b.n	80038a0 <instruction_handler+0x2d8>
		break;
 800389e:	bf00      	nop
		// nope
	}
}
 80038a0:	bf00      	nop
 80038a2:	3730      	adds	r7, #48	; 0x30
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	200031b4 	.word	0x200031b4
 80038ac:	20000138 	.word	0x20000138
 80038b0:	200003d4 	.word	0x200003d4

080038b4 <packet_handler>:
	HEADER1,HEADER2,HEADER3,RESERVED,ID,LENGTH1,LENGTH2,PAYLOAD,CRC1,CRC2
} e_packet_state;
e_packet_state packet_state = HEADER1;

void packet_handler(char c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
	switch(packet_state)
 80038be:	4b84      	ldr	r3, [pc, #528]	; (8003ad0 <packet_handler+0x21c>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b09      	cmp	r3, #9
 80038c4:	f200 8100 	bhi.w	8003ac8 <packet_handler+0x214>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <packet_handler+0x1c>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	0800390f 	.word	0x0800390f
 80038d8:	0800393f 	.word	0x0800393f
 80038dc:	0800395b 	.word	0x0800395b
 80038e0:	08003977 	.word	0x08003977
 80038e4:	08003999 	.word	0x08003999
 80038e8:	080039a7 	.word	0x080039a7
 80038ec:	080039df 	.word	0x080039df
 80038f0:	08003a0d 	.word	0x08003a0d
 80038f4:	08003a29 	.word	0x08003a29
	{
	case HEADER1:
		if(c==0xFF)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	2bff      	cmp	r3, #255	; 0xff
 80038fc:	f040 80e1 	bne.w	8003ac2 <packet_handler+0x20e>
		{
			rx_packet_buffer[PKT_HEADER0] = (uint8_t)c;
 8003900:	4a74      	ldr	r2, [pc, #464]	; (8003ad4 <packet_handler+0x220>)
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	7013      	strb	r3, [r2, #0]
			packet_state = HEADER2;
 8003906:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <packet_handler+0x21c>)
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800390c:	e0d9      	b.n	8003ac2 <packet_handler+0x20e>
	case HEADER2:
		if(c==0xFF)
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	2bff      	cmp	r3, #255	; 0xff
 8003912:	d106      	bne.n	8003922 <packet_handler+0x6e>
		{
			rx_packet_buffer[PKT_HEADER1] = (uint8_t)c;
 8003914:	4a6f      	ldr	r2, [pc, #444]	; (8003ad4 <packet_handler+0x220>)
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	7053      	strb	r3, [r2, #1]
			packet_state = HEADER3;
 800391a:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <packet_handler+0x21c>)
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
			packet_state = RESERVED;
		}
		else
			packet_state = HEADER1;
		break;
 8003920:	e0d2      	b.n	8003ac8 <packet_handler+0x214>
		else if(c==0xFD)
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2bfd      	cmp	r3, #253	; 0xfd
 8003926:	d106      	bne.n	8003936 <packet_handler+0x82>
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8003928:	4a6a      	ldr	r2, [pc, #424]	; (8003ad4 <packet_handler+0x220>)
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 800392e:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <packet_handler+0x21c>)
 8003930:	2203      	movs	r2, #3
 8003932:	701a      	strb	r2, [r3, #0]
		break;
 8003934:	e0c8      	b.n	8003ac8 <packet_handler+0x214>
			packet_state = HEADER1;
 8003936:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <packet_handler+0x21c>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
		break;
 800393c:	e0c4      	b.n	8003ac8 <packet_handler+0x214>
	case HEADER3:
		if(c==0xFD)
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2bfd      	cmp	r3, #253	; 0xfd
 8003942:	d106      	bne.n	8003952 <packet_handler+0x9e>
		{
			rx_packet_buffer[PKT_HEADER2] = (uint8_t)c;
 8003944:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <packet_handler+0x220>)
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	7093      	strb	r3, [r2, #2]
			packet_state = RESERVED;
 800394a:	4b61      	ldr	r3, [pc, #388]	; (8003ad0 <packet_handler+0x21c>)
 800394c:	2203      	movs	r2, #3
 800394e:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 8003950:	e0ba      	b.n	8003ac8 <packet_handler+0x214>
			packet_state = HEADER1;
 8003952:	4b5f      	ldr	r3, [pc, #380]	; (8003ad0 <packet_handler+0x21c>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
		break;
 8003958:	e0b6      	b.n	8003ac8 <packet_handler+0x214>
	case RESERVED:
		if(c==0x00)
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <packet_handler+0xba>
		{
			rx_packet_buffer[PKT_RESERVED] = (uint8_t)c;
 8003960:	4a5c      	ldr	r2, [pc, #368]	; (8003ad4 <packet_handler+0x220>)
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	70d3      	strb	r3, [r2, #3]
			packet_state = ID;
 8003966:	4b5a      	ldr	r3, [pc, #360]	; (8003ad0 <packet_handler+0x21c>)
 8003968:	2204      	movs	r2, #4
 800396a:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 800396c:	e0ac      	b.n	8003ac8 <packet_handler+0x214>
			packet_state = HEADER1;
 800396e:	4b58      	ldr	r3, [pc, #352]	; (8003ad0 <packet_handler+0x21c>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
		break;
 8003974:	e0a8      	b.n	8003ac8 <packet_handler+0x214>
	case ID:
		if( (c<=252) || (c==254) ) // validate ID
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2bfc      	cmp	r3, #252	; 0xfc
 800397a:	d902      	bls.n	8003982 <packet_handler+0xce>
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2bfe      	cmp	r3, #254	; 0xfe
 8003980:	d106      	bne.n	8003990 <packet_handler+0xdc>
		{
			rx_packet_buffer[PKT_ID] = (uint8_t)c;
 8003982:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <packet_handler+0x220>)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	7113      	strb	r3, [r2, #4]
			packet_state = LENGTH1;
 8003988:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <packet_handler+0x21c>)
 800398a:	2205      	movs	r2, #5
 800398c:	701a      	strb	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 800398e:	e09b      	b.n	8003ac8 <packet_handler+0x214>
			packet_state = HEADER1;
 8003990:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <packet_handler+0x21c>)
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
		break;
 8003996:	e097      	b.n	8003ac8 <packet_handler+0x214>
	case LENGTH1:
		rx_packet_buffer[PKT_LENGTH_L] = (uint8_t)c;
 8003998:	4a4e      	ldr	r2, [pc, #312]	; (8003ad4 <packet_handler+0x220>)
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	7153      	strb	r3, [r2, #5]
		packet_state = LENGTH2;
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <packet_handler+0x21c>)
 80039a0:	2206      	movs	r2, #6
 80039a2:	701a      	strb	r2, [r3, #0]
		break;
 80039a4:	e090      	b.n	8003ac8 <packet_handler+0x214>
	case LENGTH2:
		rx_packet_buffer[PKT_LENGTH_H] = (uint8_t)c;
 80039a6:	4a4b      	ldr	r2, [pc, #300]	; (8003ad4 <packet_handler+0x220>)
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	7193      	strb	r3, [r2, #6]
		// reassemble length
		rx_packet_payload_bytes = (uint32_t)MAKE_SHORT(rx_packet_buffer[PKT_LENGTH_L],rx_packet_buffer[PKT_LENGTH_H])-2;
 80039ac:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <packet_handler+0x220>)
 80039ae:	799b      	ldrb	r3, [r3, #6]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	4a48      	ldr	r2, [pc, #288]	; (8003ad4 <packet_handler+0x220>)
 80039b4:	7952      	ldrb	r2, [r2, #5]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	3b02      	subs	r3, #2
 80039ba:	4a47      	ldr	r2, [pc, #284]	; (8003ad8 <packet_handler+0x224>)
 80039bc:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes<=1024) // validate length
 80039be:	4b46      	ldr	r3, [pc, #280]	; (8003ad8 <packet_handler+0x224>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d806      	bhi.n	80039d6 <packet_handler+0x122>
		{
			packet_state = PAYLOAD;
 80039c8:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <packet_handler+0x21c>)
 80039ca:	2207      	movs	r2, #7
 80039cc:	701a      	strb	r2, [r3, #0]
			rx_packet_position = PKT_INSTRUCTION;
 80039ce:	4b43      	ldr	r3, [pc, #268]	; (8003adc <packet_handler+0x228>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
		}
		else
			packet_state = HEADER1;
		break;
 80039d4:	e078      	b.n	8003ac8 <packet_handler+0x214>
			packet_state = HEADER1;
 80039d6:	4b3e      	ldr	r3, [pc, #248]	; (8003ad0 <packet_handler+0x21c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
		break;
 80039dc:	e074      	b.n	8003ac8 <packet_handler+0x214>
	case PAYLOAD:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 80039de:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <packet_handler+0x228>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	493c      	ldr	r1, [pc, #240]	; (8003ad4 <packet_handler+0x220>)
 80039e4:	79fa      	ldrb	r2, [r7, #7]
 80039e6:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <packet_handler+0x228>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <packet_handler+0x228>)
 80039f0:	6013      	str	r3, [r2, #0]
		--rx_packet_payload_bytes;
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <packet_handler+0x224>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	4a37      	ldr	r2, [pc, #220]	; (8003ad8 <packet_handler+0x224>)
 80039fa:	6013      	str	r3, [r2, #0]
		if(rx_packet_payload_bytes==0)
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <packet_handler+0x224>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d160      	bne.n	8003ac6 <packet_handler+0x212>
			packet_state = CRC1;
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <packet_handler+0x21c>)
 8003a06:	2208      	movs	r2, #8
 8003a08:	701a      	strb	r2, [r3, #0]
		break;
 8003a0a:	e05c      	b.n	8003ac6 <packet_handler+0x212>
	case CRC1:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003a0c:	4b33      	ldr	r3, [pc, #204]	; (8003adc <packet_handler+0x228>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4930      	ldr	r1, [pc, #192]	; (8003ad4 <packet_handler+0x220>)
 8003a12:	79fa      	ldrb	r2, [r7, #7]
 8003a14:	54ca      	strb	r2, [r1, r3]
		++rx_packet_position;
 8003a16:	4b31      	ldr	r3, [pc, #196]	; (8003adc <packet_handler+0x228>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <packet_handler+0x228>)
 8003a1e:	6013      	str	r3, [r2, #0]
		packet_state = CRC2;
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <packet_handler+0x21c>)
 8003a22:	2209      	movs	r2, #9
 8003a24:	701a      	strb	r2, [r3, #0]
		break;
 8003a26:	e04f      	b.n	8003ac8 <packet_handler+0x214>
	case CRC2:
		rx_packet_buffer[rx_packet_position] = (uint8_t)c;
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <packet_handler+0x228>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4929      	ldr	r1, [pc, #164]	; (8003ad4 <packet_handler+0x220>)
 8003a2e:	79fa      	ldrb	r2, [r7, #7]
 8003a30:	54ca      	strb	r2, [r1, r3]
		// check CRC
		uint16_t received_crc = (uint16_t)MAKE_SHORT(rx_packet_buffer[rx_packet_position-1],rx_packet_buffer[rx_packet_position]);
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <packet_handler+0x228>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a27      	ldr	r2, [pc, #156]	; (8003ad4 <packet_handler+0x220>)
 8003a38:	5cd3      	ldrb	r3, [r2, r3]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	b21a      	sxth	r2, r3
 8003a3e:	4b27      	ldr	r3, [pc, #156]	; (8003adc <packet_handler+0x228>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	4923      	ldr	r1, [pc, #140]	; (8003ad4 <packet_handler+0x220>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	b21b      	sxth	r3, r3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	81fb      	strh	r3, [r7, #14]
		uint16_t calculated_crc = updateCRC(0,rx_packet_buffer,rx_packet_position-1);
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <packet_handler+0x228>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	491d      	ldr	r1, [pc, #116]	; (8003ad4 <packet_handler+0x220>)
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7ff fd38 	bl	80034d4 <updateCRC>
 8003a64:	4603      	mov	r3, r0
 8003a66:	81bb      	strh	r3, [r7, #12]
		if(calculated_crc==received_crc)
 8003a68:	89ba      	ldrh	r2, [r7, #12]
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10c      	bne.n	8003a8a <packet_handler+0x1d6>
		{
			if(rx_packet_buffer[PKT_ID]==regs[REG_ID] || rx_packet_buffer[PKT_ID]==0xFE)
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <packet_handler+0x220>)
 8003a72:	791a      	ldrb	r2, [r3, #4]
 8003a74:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <packet_handler+0x22c>)
 8003a76:	78db      	ldrb	r3, [r3, #3]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d003      	beq.n	8003a84 <packet_handler+0x1d0>
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <packet_handler+0x220>)
 8003a7e:	791b      	ldrb	r3, [r3, #4]
 8003a80:	2bfe      	cmp	r3, #254	; 0xfe
 8003a82:	d11a      	bne.n	8003aba <packet_handler+0x206>
				instruction_handler();
 8003a84:	f7ff fda0 	bl	80035c8 <instruction_handler>
 8003a88:	e017      	b.n	8003aba <packet_handler+0x206>
		}
		else
		{
			regs[REG_PROTOCOL_CRC_FAIL] = regs[REG_PROTOCOL_CRC_FAIL] + 1;
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <packet_handler+0x22c>)
 8003a8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a90:	3301      	adds	r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <packet_handler+0x22c>)
 8003a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			// reply with a status packet with ERR only
			tx_packet_buffer[PKT_INSTRUCTION]= INSTR_STATUS;
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <packet_handler+0x230>)
 8003a9c:	2255      	movs	r2, #85	; 0x55
 8003a9e:	71da      	strb	r2, [r3, #7]
			tx_packet_buffer[PKT_ERROR]= ERROR_CRC_ERROR; // TODO : Alarm flag to handle here
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <packet_handler+0x230>)
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	721a      	strb	r2, [r3, #8]
			packet_encapsulate(2);
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	f7ff fd46 	bl	8003538 <packet_encapsulate>
			// send packet
			HAL_Serial_Write(&serial, (uint8_t const *)tx_packet_buffer,tx_packet_length);
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <packet_handler+0x234>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	490c      	ldr	r1, [pc, #48]	; (8003ae4 <packet_handler+0x230>)
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <packet_handler+0x238>)
 8003ab6:	f000 f97d 	bl	8003db4 <HAL_Serial_Write>
		}
		packet_state = HEADER1;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <packet_handler+0x21c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
		break;
 8003ac0:	e002      	b.n	8003ac8 <packet_handler+0x214>
		break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <packet_handler+0x214>
		break;
 8003ac6:	bf00      	nop
	}
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2000013c 	.word	0x2000013c
 8003ad4:	20002d68 	.word	0x20002d68
 8003ad8:	20000134 	.word	0x20000134
 8003adc:	20000130 	.word	0x20000130
 8003ae0:	20000150 	.word	0x20000150
 8003ae4:	200031b4 	.word	0x200031b4
 8003ae8:	20000138 	.word	0x20000138
 8003aec:	200003d4 	.word	0x200003d4

08003af0 <HAL_UART_ErrorCallback>:
/// This table has to be filled in the application code
HAL_Serial_Handler * hserial_table[HAL_Serial_Handler_Count] = {0};
uint32_t serial_counter = 0;

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	static int id = 0;
	for(id=0;id!=serial_counter;++id)
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e032      	b.n	8003b66 <HAL_UART_ErrorCallback+0x76>
	{
		if(hserial_table[id]->huart == huart)
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <HAL_UART_ErrorCallback+0x90>)
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d124      	bne.n	8003b5c <HAL_UART_ErrorCallback+0x6c>
		{
			hserial_table[id]->rx_tail_ptr = hserial_table[id]->rx_circular_buffer;
 8003b12:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <HAL_UART_ErrorCallback+0x90>)
 8003b18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4917      	ldr	r1, [pc, #92]	; (8003b80 <HAL_UART_ErrorCallback+0x90>)
 8003b22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b26:	f502 5202 	add.w	r2, r2, #8320	; 0x2080
 8003b2a:	3210      	adds	r2, #16
 8003b2c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003b30:	3310      	adds	r3, #16
 8003b32:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(hserial_table[id]->huart, hserial_table[id]->rx_circular_buffer,size_of_rx_circular_buffer);
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <HAL_UART_ErrorCallback+0x90>)
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0e      	ldr	r2, [pc, #56]	; (8003b80 <HAL_UART_ErrorCallback+0x90>)
 8003b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003b4e:	3310      	adds	r3, #16
 8003b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b54:	4619      	mov	r1, r3
 8003b56:	f005 ff75 	bl	8009a44 <HAL_UART_Receive_DMA>
		   break;
 8003b5a:	e00b      	b.n	8003b74 <HAL_UART_ErrorCallback+0x84>
	for(id=0;id!=serial_counter;++id)
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_UART_ErrorCallback+0x8c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_UART_ErrorCallback+0x94>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1c5      	bne.n	8003b00 <HAL_UART_ErrorCallback+0x10>
		}
	}
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000148 	.word	0x20000148
 8003b80:	20000140 	.word	0x20000140
 8003b84:	20000144 	.word	0x20000144

08003b88 <HAL_Serial_Init_Half_Duplex>:
		GPIO_PinState PinState_TX,
		GPIO_TypeDef *GPIOx_RX,
		uint16_t GPIO_Pin_RX,
		GPIO_PinState PinState_RX
)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	807b      	strh	r3, [r7, #2]
	// register this handle
	hserial_table[serial_counter++]=hserial;
 8003b96:	4b45      	ldr	r3, [pc, #276]	; (8003cac <HAL_Serial_Init_Half_Duplex+0x124>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	4943      	ldr	r1, [pc, #268]	; (8003cac <HAL_Serial_Init_Half_Duplex+0x124>)
 8003b9e:	600a      	str	r2, [r1, #0]
 8003ba0:	4943      	ldr	r1, [pc, #268]	; (8003cb0 <HAL_Serial_Init_Half_Duplex+0x128>)
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    hserial->huart = huart;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]

    // reset tx fifo pool buffer
    hserial->tx_head_position = 0;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    hserial->tx_tail_position = 0;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
	hserial->tx_dma = 0;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003bcc:	330c      	adds	r3, #12
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

	// reset rx circular buffer
	hserial->rx_tail_ptr = hserial->rx_circular_buffer;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f503 5202 	add.w	r2, r3, #8320	; 0x2080
 8003bd8:	3210      	adds	r2, #16
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003be0:	3310      	adds	r3, #16
 8003be2:	601a      	str	r2, [r3, #0]

    // start rx DMA
	HAL_UART_Receive_DMA(hserial->huart, hserial->rx_circular_buffer,size_of_rx_circular_buffer);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003bee:	3310      	adds	r3, #16
 8003bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f005 ff25 	bl	8009a44 <HAL_UART_Receive_DMA>

	// half-duplex
	hserial->half_duplex = true;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c00:	3314      	adds	r3, #20
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_TX = GPIOx_TX;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_TX = GPIO_Pin_TX;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c18:	331c      	adds	r3, #28
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_TX = PinState_TX;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c24:	331e      	adds	r3, #30
 8003c26:	7e3a      	ldrb	r2, [r7, #24]
 8003c28:	701a      	strb	r2, [r3, #0]
	hserial->GPIOx_DIR_RX = GPIOx_RX;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c30:	3320      	adds	r3, #32
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	601a      	str	r2, [r3, #0]
	hserial->GPIO_Pin_DIR_RX = GPIO_Pin_RX;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c3c:	3324      	adds	r3, #36	; 0x24
 8003c3e:	8c3a      	ldrh	r2, [r7, #32]
 8003c40:	801a      	strh	r2, [r3, #0]
	hserial->PinState_DIR_RX = PinState_RX;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c48:	3326      	adds	r3, #38	; 0x26
 8003c4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c4e:	701a      	strb	r2, [r3, #0]
    // TX = OFF
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c56:	3318      	adds	r3, #24
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c60:	331c      	adds	r3, #28
 8003c62:	8819      	ldrh	r1, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c6a:	331e      	adds	r3, #30
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f003 fa1b 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c84:	3320      	adds	r3, #32
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c8e:	3324      	adds	r3, #36	; 0x24
 8003c90:	8819      	ldrh	r1, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003c98:	3326      	adds	r3, #38	; 0x26
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f003 fa09 	bl	80070b4 <HAL_GPIO_WritePin>
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000144 	.word	0x20000144
 8003cb0:	20000140 	.word	0x20000140

08003cb4 <HAL_Serial_Available>:

int HAL_Serial_Available(HAL_Serial_Handler * hserial)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_Serial_Available+0x14>
        return 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e01f      	b.n	8003d08 <HAL_Serial_Available+0x54>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003cce:	3310      	adds	r3, #16
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	6852      	ldr	r2, [r2, #4]
 8003cda:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8003cde:	4413      	add	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003ce8:	3310      	adds	r3, #16
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]
    if( head>=tail )
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d303      	bcc.n	8003cfe <HAL_Serial_Available+0x4a>
        return head-tail;
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	e004      	b.n	8003d08 <HAL_Serial_Available+0x54>
    else
        return head-tail+size_of_rx_circular_buffer;
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_Serial_GetChar>:

char HAL_Serial_GetChar(HAL_Serial_Handler * hserial)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
    if(hserial->huart == 0)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_Serial_GetChar+0x14>
        return 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e03f      	b.n	8003da8 <HAL_Serial_GetChar+0x94>
    uint8_t const * head = hserial->rx_circular_buffer + size_of_rx_circular_buffer - __HAL_DMA_GET_COUNTER(hserial->huart->hdmarx);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d2e:	3310      	adds	r3, #16
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	6852      	ldr	r2, [r2, #4]
 8003d3a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8003d3e:	4413      	add	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    uint8_t const * tail = hserial->rx_tail_ptr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d48:	3310      	adds	r3, #16
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	613b      	str	r3, [r7, #16]
    if(head!=tail)
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d027      	beq.n	8003da6 <HAL_Serial_GetChar+0x92>
    {
        char c =  *hserial->rx_tail_ptr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	1c51      	adds	r1, r2, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d68:	3310      	adds	r3, #16
 8003d6a:	6019      	str	r1, [r3, #0]
 8003d6c:	7813      	ldrb	r3, [r2, #0]
 8003d6e:	73fb      	strb	r3, [r7, #15]
        if(hserial->rx_tail_ptr>=hserial->rx_circular_buffer + size_of_rx_circular_buffer)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d76:	3310      	adds	r3, #16
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003d80:	3310      	adds	r3, #16
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d30b      	bcc.n	8003da2 <HAL_Serial_GetChar+0x8e>
            hserial->rx_tail_ptr-=size_of_rx_circular_buffer;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d90:	3310      	adds	r3, #16
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003d9e:	3310      	adds	r3, #16
 8003da0:	601a      	str	r2, [r3, #0]
        return c;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	e000      	b.n	8003da8 <HAL_Serial_GetChar+0x94>
    }
    else
        return 0;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_Serial_Write>:
    }
    return counter;
}

int HAL_Serial_Write(HAL_Serial_Handler * hserial, uint8_t const * ptr, int len )
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
    if(hserial->huart == 0)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_Serial_Write+0x18>
        return 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e09a      	b.n	8003f02 <HAL_Serial_Write+0x14e>

    // copy user data into the head tx buffer into tx pool, inc tx pool head
    hserial->tx_buffer_pool[hserial->tx_head_position].length = len;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4403      	add	r3, r0
 8003de4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003de8:	6019      	str	r1, [r3, #0]
    uint8_t * dst = hserial->tx_buffer_pool[hserial->tx_head_position].data;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003df0:	3304      	adds	r3, #4
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	019b      	lsls	r3, r3, #6
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	617b      	str	r3, [r7, #20]
    memcpy(dst,ptr,len);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	6978      	ldr	r0, [r7, #20]
 8003e0c:	f006 fee4 	bl	800abd8 <memcpy>
    hserial->tx_head_position = (hserial->tx_head_position + 1 ) % size_of_tx_pool;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e16:	3304      	adds	r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e26:	3304      	adds	r3, #4
 8003e28:	601a      	str	r2, [r3, #0]

    // if no tx dma running, start tx dma
    if(hserial->tx_dma==0)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e30:	330c      	adds	r3, #12
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d163      	bne.n	8003f00 <HAL_Serial_Write+0x14c>
    {
    	// set tx dma running
        hserial->tx_dma=1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003e3e:	330c      	adds	r3, #12
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

        // TX = ON
        if(hserial->half_duplex)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d028      	beq.n	8003ea4 <HAL_Serial_Write+0xf0>
        {
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_TX,hserial->GPIO_Pin_DIR_TX,hserial->PinState_DIR_TX);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e58:	3318      	adds	r3, #24
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e62:	331c      	adds	r3, #28
 8003e64:	8819      	ldrh	r1, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e6c:	331e      	adds	r3, #30
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f003 f91f 	bl	80070b4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(hserial->GPIOx_DIR_RX,hserial->GPIO_Pin_DIR_RX,hserial->PinState_DIR_RX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e7c:	3320      	adds	r3, #32
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	8819      	ldrh	r1, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8003e90:	3326      	adds	r3, #38	; 0x26
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f003 f908 	bl	80070b4 <HAL_GPIO_WritePin>
        // transmit serial internal tx buffer using DMA if no DMA running
        //HAL_StatusTypeDef result = 0;
        //do
        //{
        	//result =
        	HAL_UART_Transmit_DMA(
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6818      	ldr	r0, [r3, #0]
        			hserial->huart,
					hserial->tx_buffer_pool[hserial->tx_tail_position].data,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003eae:	3308      	adds	r3, #8
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	1d1c      	adds	r4, r3, #4
					hserial->tx_buffer_pool[hserial->tx_tail_position].length
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	019b      	lsls	r3, r3, #6
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003eda:	681b      	ldr	r3, [r3, #0]
        	HAL_UART_Transmit_DMA(
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	f005 fd2f 	bl	8009944 <HAL_UART_Transmit_DMA>
					);
        //}
        //while(result!=HAL_OK);
        hserial->tx_tail_position = (hserial->tx_tail_position + 1 ) % size_of_tx_pool;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003eec:	3308      	adds	r3, #8
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f003 021f 	and.w	r2, r3, #31
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003efc:	3308      	adds	r3, #8
 8003efe:	601a      	str	r2, [r3, #0]
    }
    else
    {
    	// end of tx dma callback will start next tx dma
    }
    return len;
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
	...

08003f0c <HAL_UART_TxCpltCallback>:
//	HAL_Delay(100);
//
//}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f0c:	b590      	push	{r4, r7, lr}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
    static int id = 0;
    for(id=0;id!=serial_counter;++id)
 8003f14:	4b71      	ldr	r3, [pc, #452]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e0d0      	b.n	80040be <HAL_UART_TxCpltCallback+0x1b2>
    {
        if(hserial_table[id]->huart == huart && hserial_table[id]->tx_dma == 1)
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6f      	ldr	r2, [pc, #444]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	f040 80c2 	bne.w	80040b4 <HAL_UART_TxCpltCallback+0x1a8>
 8003f30:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a6a      	ldr	r2, [pc, #424]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f3e:	330c      	adds	r3, #12
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 80b6 	bne.w	80040b4 <HAL_UART_TxCpltCallback+0x1a8>
        {
			// tx buffer from pool waiting for transmission ?
			if(hserial_table[id]->tx_head_position!=hserial_table[id]->tx_tail_position)
 8003f48:	4b64      	ldr	r3, [pc, #400]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a64      	ldr	r2, [pc, #400]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f56:	3304      	adds	r3, #4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b60      	ldr	r3, [pc, #384]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4960      	ldr	r1, [pc, #384]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f64:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f68:	3308      	adds	r3, #8
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d04a      	beq.n	8004006 <HAL_UART_TxCpltCallback+0xfa>
		        //HAL_StatusTypeDef result = 0;
		        //do
		        //{
		        	//result =
				 HAL_UART_Transmit_DMA(
		        			hserial_table[id]->huart,
 8003f70:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a5a      	ldr	r2, [pc, #360]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				 HAL_UART_Transmit_DMA(
 8003f7a:	6818      	ldr	r0, [r3, #0]
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].data,
 8003f7c:	4b57      	ldr	r3, [pc, #348]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f86:	4b55      	ldr	r3, [pc, #340]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a55      	ldr	r2, [pc, #340]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f90:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003f94:	3308      	adds	r3, #8
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	019b      	lsls	r3, r3, #6
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	1d1c      	adds	r4, r3, #4
							hserial_table[id]->tx_buffer_pool[hserial_table[id]->tx_tail_position].length
 8003fa4:	4b4d      	ldr	r3, [pc, #308]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fae:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4b      	ldr	r2, [pc, #300]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003fce:	681b      	ldr	r3, [r3, #0]
				 HAL_UART_Transmit_DMA(
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	f005 fcb5 	bl	8009944 <HAL_UART_Transmit_DMA>
							);
		        //}
		        //while(result!=HAL_OK);

				// inc tail
				hserial_table[id]->tx_tail_position = (hserial_table[id]->tx_tail_position + 1 ) % size_of_tx_pool;
 8003fda:	4b40      	ldr	r3, [pc, #256]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003fe8:	3308      	adds	r3, #8
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	4b3b      	ldr	r3, [pc, #236]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	493b      	ldr	r1, [pc, #236]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8003ff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ff8:	f002 021f 	and.w	r2, r2, #31
 8003ffc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004000:	3308      	adds	r3, #8
 8004002:	601a      	str	r2, [r3, #0]
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
		        }

			}
           break;
 8004004:	e064      	b.n	80040d0 <HAL_UART_TxCpltCallback+0x1c4>
				hserial_table[id]->tx_dma = 0;
 8004006:	4b35      	ldr	r3, [pc, #212]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a35      	ldr	r2, [pc, #212]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8004014:	330c      	adds	r3, #12
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
		        if(hserial_table[id]->half_duplex)
 800401a:	4b30      	ldr	r3, [pc, #192]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8004020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004024:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004028:	3314      	adds	r3, #20
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d04f      	beq.n	80040d0 <HAL_UART_TxCpltCallback+0x1c4>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_TX,hserial_table[id]->GPIO_Pin_DIR_TX,hserial_table[id]->PinState_DIR_TX==GPIO_PIN_RESET?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004030:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800403e:	3318      	adds	r3, #24
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 8004048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004050:	331c      	adds	r3, #28
 8004052:	8819      	ldrh	r1, [r3, #0]
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 800405a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405e:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004062:	331e      	adds	r3, #30
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	f003 f81f 	bl	80070b4 <HAL_GPIO_WritePin>
		        	HAL_GPIO_WritePin(hserial_table[id]->GPIOx_DIR_RX,hserial_table[id]->GPIO_Pin_DIR_RX,hserial_table[id]->PinState_DIR_RX);
 8004076:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 800407c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004080:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004084:	3320      	adds	r3, #32
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004096:	3324      	adds	r3, #36	; 0x24
 8004098:	8819      	ldrh	r1, [r3, #0]
 800409a:	4b10      	ldr	r3, [pc, #64]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_UART_TxCpltCallback+0x1d4>)
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80040a8:	3326      	adds	r3, #38	; 0x26
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	f003 f801 	bl	80070b4 <HAL_GPIO_WritePin>
           break;
 80040b2:	e00d      	b.n	80040d0 <HAL_UART_TxCpltCallback+0x1c4>
    for(id=0;id!=serial_counter;++id)
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a08      	ldr	r2, [pc, #32]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <HAL_UART_TxCpltCallback+0x1d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_UART_TxCpltCallback+0x1d8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	f47f af27 	bne.w	8003f1c <HAL_UART_TxCpltCallback+0x10>
        }
    }
}
 80040ce:	e000      	b.n	80040d2 <HAL_UART_TxCpltCallback+0x1c6>
           break;
 80040d0:	bf00      	nop
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	2000014c 	.word	0x2000014c
 80040e0:	20000140 	.word	0x20000140
 80040e4:	20000144 	.word	0x20000144

080040e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ee:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_MspInit+0x44>)
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	4a0e      	ldr	r2, [pc, #56]	; (800412c <HAL_MspInit+0x44>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6613      	str	r3, [r2, #96]	; 0x60
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_MspInit+0x44>)
 80040fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_MspInit+0x44>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_MspInit+0x44>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_MspInit+0x44>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800411e:	f003 f987 	bl	8007430 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004150:	d16e      	bne.n	8004230 <HAL_ADC_MspInit+0x100>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004156:	4a38      	ldr	r2, [pc, #224]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800415c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800415e:	4b36      	ldr	r3, [pc, #216]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800416a:	4b33      	ldr	r3, [pc, #204]	; (8004238 <HAL_ADC_MspInit+0x108>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	4a32      	ldr	r2, [pc, #200]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004170:	f043 0320 	orr.w	r3, r3, #32
 8004174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004176:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004182:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	4a2c      	ldr	r2, [pc, #176]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418e:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <HAL_ADC_MspInit+0x108>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF0-OSC_IN     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800419a:	2301      	movs	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800419e:	2303      	movs	r3, #3
 80041a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	4619      	mov	r1, r3
 80041ac:	4823      	ldr	r0, [pc, #140]	; (800423c <HAL_ADC_MspInit+0x10c>)
 80041ae:	f002 fde7 	bl	8006d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041b2:	2301      	movs	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b6:	2303      	movs	r3, #3
 80041b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4619      	mov	r1, r3
 80041c4:	481e      	ldr	r0, [pc, #120]	; (8004240 <HAL_ADC_MspInit+0x110>)
 80041c6:	f002 fddb 	bl	8006d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041cc:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <HAL_ADC_MspInit+0x118>)
 80041ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041d2:	2205      	movs	r2, #5
 80041d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041e4:	2280      	movs	r2, #128	; 0x80
 80041e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_ADC_MspInit+0x114>)
 80041fa:	2220      	movs	r2, #32
 80041fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004200:	2200      	movs	r2, #0
 8004202:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004204:	480f      	ldr	r0, [pc, #60]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004206:	f002 f873 	bl	80062f0 <HAL_DMA_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8004210:	f7fe ff80 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <HAL_ADC_MspInit+0x114>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	2012      	movs	r0, #18
 8004226:	f002 f82a 	bl	800627e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800422a:	2012      	movs	r0, #18
 800422c:	f002 f841 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004230:	bf00      	nop
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	48001400 	.word	0x48001400
 8004240:	48000400 	.word	0x48000400
 8004244:	20002c7c 	.word	0x20002c7c
 8004248:	40020030 	.word	0x40020030

0800424c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0f      	ldr	r2, [pc, #60]	; (80042a8 <HAL_OPAMP_MspInit+0x5c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d118      	bne.n	80042a0 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_OPAMP_MspInit+0x60>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <HAL_OPAMP_MspInit+0x60>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_OPAMP_MspInit+0x60>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004286:	230a      	movs	r3, #10
 8004288:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800428a:	2303      	movs	r3, #3
 800428c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	4619      	mov	r1, r3
 8004298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800429c:	f002 fd70 	bl	8006d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 80042a0:	bf00      	nop
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40010300 	.word	0x40010300
 80042ac:	40021000 	.word	0x40021000

080042b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_TIM_Base_MspInit+0x68>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d114      	bne.n	80042ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <HAL_TIM_Base_MspInit+0x6c>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_TIM_Base_MspInit+0x6c>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	6593      	str	r3, [r2, #88]	; 0x58
 80042ce:	4b13      	ldr	r3, [pc, #76]	; (800431c <HAL_TIM_Base_MspInit+0x6c>)
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2100      	movs	r1, #0
 80042de:	201e      	movs	r0, #30
 80042e0:	f001 ffcd 	bl	800627e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042e4:	201e      	movs	r0, #30
 80042e6:	f001 ffe4 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80042ea:	e010      	b.n	800430e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM15)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <HAL_TIM_Base_MspInit+0x70>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10b      	bne.n	800430e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_TIM_Base_MspInit+0x6c>)
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_TIM_Base_MspInit+0x6c>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004300:	6613      	str	r3, [r2, #96]	; 0x60
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_TIM_Base_MspInit+0x6c>)
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40000800 	.word	0x40000800
 800431c:	40021000 	.word	0x40021000
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a11      	ldr	r2, [pc, #68]	; (8004388 <HAL_TIM_MspPostInit+0x64>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d11b      	bne.n	800437e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_TIM_MspPostInit+0x68>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	4a10      	ldr	r2, [pc, #64]	; (800438c <HAL_TIM_MspPostInit+0x68>)
 800434c:	f043 0302 	orr.w	r3, r3, #2
 8004350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <HAL_TIM_MspPostInit+0x68>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800435e:	23c0      	movs	r3, #192	; 0xc0
 8004360:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800436e:	2302      	movs	r3, #2
 8004370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	4619      	mov	r1, r3
 8004378:	4805      	ldr	r0, [pc, #20]	; (8004390 <HAL_TIM_MspPostInit+0x6c>)
 800437a:	f002 fd01 	bl	8006d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800437e:	bf00      	nop
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40000800 	.word	0x40000800
 800438c:	40021000 	.word	0x40021000
 8004390:	48000400 	.word	0x48000400

08004394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a53      	ldr	r2, [pc, #332]	; (8004500 <HAL_UART_MspInit+0x16c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	f040 80a0 	bne.w	80044f8 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043b8:	4b52      	ldr	r3, [pc, #328]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4a51      	ldr	r2, [pc, #324]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
 80043c4:	4b4f      	ldr	r3, [pc, #316]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d0:	4b4c      	ldr	r3, [pc, #304]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d4:	4a4b      	ldr	r2, [pc, #300]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043dc:	4b49      	ldr	r3, [pc, #292]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e8:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	4a45      	ldr	r2, [pc, #276]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_UART_MspInit+0x170>)
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004412:	2307      	movs	r3, #7
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	4619      	mov	r1, r3
 800441c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004420:	f002 fcae 	bl	8006d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004424:	2308      	movs	r3, #8
 8004426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004434:	2307      	movs	r3, #7
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	4619      	mov	r1, r3
 800443e:	4832      	ldr	r0, [pc, #200]	; (8004508 <HAL_UART_MspInit+0x174>)
 8004440:	f002 fc9e 	bl	8006d80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004444:	4b31      	ldr	r3, [pc, #196]	; (800450c <HAL_UART_MspInit+0x178>)
 8004446:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_UART_MspInit+0x17c>)
 8004448:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_UART_MspInit+0x178>)
 800444c:	221a      	movs	r2, #26
 800444e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004450:	4b2e      	ldr	r3, [pc, #184]	; (800450c <HAL_UART_MspInit+0x178>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_UART_MspInit+0x178>)
 8004458:	2200      	movs	r2, #0
 800445a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800445c:	4b2b      	ldr	r3, [pc, #172]	; (800450c <HAL_UART_MspInit+0x178>)
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_UART_MspInit+0x178>)
 8004464:	2200      	movs	r2, #0
 8004466:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004468:	4b28      	ldr	r3, [pc, #160]	; (800450c <HAL_UART_MspInit+0x178>)
 800446a:	2200      	movs	r2, #0
 800446c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800446e:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_UART_MspInit+0x178>)
 8004470:	2220      	movs	r2, #32
 8004472:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_UART_MspInit+0x178>)
 8004476:	2200      	movs	r2, #0
 8004478:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800447a:	4824      	ldr	r0, [pc, #144]	; (800450c <HAL_UART_MspInit+0x178>)
 800447c:	f001 ff38 	bl	80062f0 <HAL_DMA_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8004486:	f7fe fe45 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_UART_MspInit+0x178>)
 800448e:	679a      	str	r2, [r3, #120]	; 0x78
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_UART_MspInit+0x178>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004496:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <HAL_UART_MspInit+0x180>)
 8004498:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <HAL_UART_MspInit+0x184>)
 800449a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <HAL_UART_MspInit+0x180>)
 800449e:	221b      	movs	r2, #27
 80044a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044a4:	2210      	movs	r2, #16
 80044a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044b0:	2280      	movs	r2, #128	; 0x80
 80044b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ba:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044cc:	4811      	ldr	r0, [pc, #68]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044ce:	f001 ff0f 	bl	80062f0 <HAL_DMA_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 80044d8:	f7fe fe1c 	bl	8003114 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044e0:	675a      	str	r2, [r3, #116]	; 0x74
 80044e2:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <HAL_UART_MspInit+0x180>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80044e8:	2200      	movs	r2, #0
 80044ea:	2100      	movs	r1, #0
 80044ec:	2026      	movs	r0, #38	; 0x26
 80044ee:	f001 fec6 	bl	800627e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044f2:	2026      	movs	r0, #38	; 0x26
 80044f4:	f001 fedd 	bl	80062b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044f8:	bf00      	nop
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40004400 	.word	0x40004400
 8004504:	40021000 	.word	0x40021000
 8004508:	48000400 	.word	0x48000400
 800450c:	200001d4 	.word	0x200001d4
 8004510:	40020008 	.word	0x40020008
 8004514:	20000374 	.word	0x20000374
 8004518:	4002001c 	.word	0x4002001c

0800451c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004520:	e7fe      	b.n	8004520 <NMI_Handler+0x4>

08004522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004526:	e7fe      	b.n	8004526 <HardFault_Handler+0x4>

08004528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800452c:	e7fe      	b.n	800452c <MemManage_Handler+0x4>

0800452e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004532:	e7fe      	b.n	8004532 <BusFault_Handler+0x4>

08004534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004538:	e7fe      	b.n	8004538 <UsageFault_Handler+0x4>

0800453a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800453a:	b480      	push	{r7}
 800453c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004568:	f000 f8d0 	bl	800470c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}

08004570 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <DMA1_Channel1_IRQHandler+0x10>)
 8004576:	f002 f845 	bl	8006604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200001d4 	.word	0x200001d4

08004584 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004588:	4802      	ldr	r0, [pc, #8]	; (8004594 <DMA1_Channel2_IRQHandler+0x10>)
 800458a:	f002 f83b 	bl	8006604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000374 	.word	0x20000374

08004598 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800459c:	4802      	ldr	r0, [pc, #8]	; (80045a8 <DMA1_Channel3_IRQHandler+0x10>)
 800459e:	f002 f831 	bl	8006604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20002c7c 	.word	0x20002c7c

080045ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80045b0:	4802      	ldr	r0, [pc, #8]	; (80045bc <ADC1_2_IRQHandler+0x10>)
 80045b2:	f000 fd67 	bl	8005084 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000308 	.word	0x20000308

080045c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045c4:	4802      	ldr	r0, [pc, #8]	; (80045d0 <TIM4_IRQHandler+0x10>)
 80045c6:	f004 f8c9 	bl	800875c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000234 	.word	0x20000234

080045d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045d8:	4802      	ldr	r0, [pc, #8]	; (80045e4 <USART2_IRQHandler+0x10>)
 80045da:	f005 fabb 	bl	8009b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20002cdc 	.word	0x20002cdc

080045e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <SystemInit+0x28>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	4a07      	ldr	r2, [pc, #28]	; (8004610 <SystemInit+0x28>)
 80045f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <SystemInit+0x28>)
 80045fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004602:	609a      	str	r2, [r3, #8]
#endif
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004614:	480d      	ldr	r0, [pc, #52]	; (800464c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004616:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004618:	480d      	ldr	r0, [pc, #52]	; (8004650 <LoopForever+0x6>)
  ldr r1, =_edata
 800461a:	490e      	ldr	r1, [pc, #56]	; (8004654 <LoopForever+0xa>)
  ldr r2, =_sidata
 800461c:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <LoopForever+0xe>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004620:	e002      	b.n	8004628 <LoopCopyDataInit>

08004622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004626:	3304      	adds	r3, #4

08004628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800462a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800462c:	d3f9      	bcc.n	8004622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800462e:	4a0b      	ldr	r2, [pc, #44]	; (800465c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004630:	4c0b      	ldr	r4, [pc, #44]	; (8004660 <LoopForever+0x16>)
  movs r3, #0
 8004632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004634:	e001      	b.n	800463a <LoopFillZerobss>

08004636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004638:	3204      	adds	r2, #4

0800463a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800463a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800463c:	d3fb      	bcc.n	8004636 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800463e:	f7ff ffd3 	bl	80045e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004642:	f006 faa5 	bl	800ab90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004646:	f7fe f9e5 	bl	8002a14 <main>

0800464a <LoopForever>:

LoopForever:
    b LoopForever
 800464a:	e7fe      	b.n	800464a <LoopForever>
  ldr   r0, =_estack
 800464c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004654:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8004658:	0800af1c 	.word	0x0800af1c
  ldr r2, =_sbss
 800465c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8004660:	20003604 	.word	0x20003604

08004664 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004664:	e7fe      	b.n	8004664 <COMP1_2_3_IRQHandler>

08004666 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004670:	2003      	movs	r0, #3
 8004672:	f001 fdf9 	bl	8006268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004676:	2000      	movs	r0, #0
 8004678:	f000 f80e 	bl	8004698 <HAL_InitTick>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	71fb      	strb	r3, [r7, #7]
 8004686:	e001      	b.n	800468c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004688:	f7ff fd2e 	bl	80040e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800468c:	79fb      	ldrb	r3, [r7, #7]

}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_InitTick+0x68>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d022      	beq.n	80046f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <HAL_InitTick+0x6c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_InitTick+0x68>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 fe08 	bl	80062d6 <HAL_SYSTICK_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b0f      	cmp	r3, #15
 80046d0:	d809      	bhi.n	80046e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046d2:	2200      	movs	r2, #0
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	f001 fdd0 	bl	800627e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_InitTick+0x70>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e007      	b.n	80046f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
 80046ea:	e004      	b.n	80046f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e001      	b.n	80046f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000010 	.word	0x20000010
 8004704:	20000008 	.word	0x20000008
 8004708:	2000000c 	.word	0x2000000c

0800470c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_IncTick+0x1c>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_IncTick+0x20>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4413      	add	r3, r2
 800471a:	4a03      	ldr	r2, [pc, #12]	; (8004728 <HAL_IncTick+0x1c>)
 800471c:	6013      	str	r3, [r2, #0]
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	20003600 	.word	0x20003600
 800472c:	20000010 	.word	0x20000010

08004730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return uwTick;
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_GetTick+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20003600 	.word	0x20003600

08004748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff ffee 	bl	8004730 <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d004      	beq.n	800476c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_Delay+0x40>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800476c:	bf00      	nop
 800476e:	f7ff ffdf 	bl	8004730 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	429a      	cmp	r2, r3
 800477c:	d8f7      	bhi.n	800476e <HAL_Delay+0x26>
  {
  }
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000010 	.word	0x20000010

0800478c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3360      	adds	r3, #96	; 0x60
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <LL_ADC_SetOffset+0x44>)
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	03fff000 	.word	0x03fff000

0800483c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3360      	adds	r3, #96	; 0x60
 800484a:	461a      	mov	r2, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3360      	adds	r3, #96	; 0x60
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	431a      	orrs	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800489e:	b480      	push	{r7}
 80048a0:	b087      	sub	sp, #28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3360      	adds	r3, #96	; 0x60
 80048ae:	461a      	mov	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3360      	adds	r3, #96	; 0x60
 80048e4:	461a      	mov	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	615a      	str	r2, [r3, #20]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004956:	b480      	push	{r7}
 8004958:	b087      	sub	sp, #28
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3330      	adds	r3, #48	; 0x30
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	211f      	movs	r1, #31
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	401a      	ands	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0e9b      	lsrs	r3, r3, #26
 800498e:	f003 011f 	and.w	r1, r3, #31
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3314      	adds	r3, #20
 80049e4:	461a      	mov	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	0e5b      	lsrs	r3, r3, #25
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	4413      	add	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	0d1b      	lsrs	r3, r3, #20
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2107      	movs	r1, #7
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	401a      	ands	r2, r3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	0d1b      	lsrs	r3, r3, #20
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	43db      	mvns	r3, r3
 8004a46:	401a      	ands	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f003 0318 	and.w	r3, r3, #24
 8004a4e:	4908      	ldr	r1, [pc, #32]	; (8004a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a50:	40d9      	lsrs	r1, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	400b      	ands	r3, r1
 8004a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	0007ffff 	.word	0x0007ffff

08004a74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 031f 	and.w	r3, r3, #31
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6093      	str	r3, [r2, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae4:	d101      	bne.n	8004aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b5c:	f043 0201 	orr.w	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <LL_ADC_IsEnabled+0x18>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <LL_ADC_IsEnabled+0x1a>
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ba6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004baa:	f043 0204 	orr.w	r2, r3, #4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d101      	bne.n	8004bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d101      	bne.n	8004bfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e16b      	b.n	8004efe <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fa7b 	bl	8004130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff3f 	bl	8004ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ff25 	bl	8004aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff ff5a 	bl	8004b20 <LL_ADC_IsInternalRegulatorEnabled>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d113      	bne.n	8004c9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff3e 	bl	8004af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004c7c:	4ba2      	ldr	r3, [pc, #648]	; (8004f08 <HAL_ADC_Init+0x2fc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	099b      	lsrs	r3, r3, #6
 8004c82:	4aa2      	ldr	r2, [pc, #648]	; (8004f0c <HAL_ADC_Init+0x300>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c8c:	e002      	b.n	8004c94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f9      	bne.n	8004c8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff3e 	bl	8004b20 <LL_ADC_IsInternalRegulatorEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f043 0210 	orr.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff ff77 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 8004cd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 8106 	bne.w	8004eec <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f040 8102 	bne.w	8004eec <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004cf0:	f043 0202 	orr.w	r2, r3, #2
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff37 	bl	8004b70 <LL_ADC_IsEnabled>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d111      	bne.n	8004d2c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d0c:	f7ff ff30 	bl	8004b70 <LL_ADC_IsEnabled>
 8004d10:	4604      	mov	r4, r0
 8004d12:	487f      	ldr	r0, [pc, #508]	; (8004f10 <HAL_ADC_Init+0x304>)
 8004d14:	f7ff ff2c 	bl	8004b70 <LL_ADC_IsEnabled>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4323      	orrs	r3, r4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4619      	mov	r1, r3
 8004d26:	487b      	ldr	r0, [pc, #492]	; (8004f14 <HAL_ADC_Init+0x308>)
 8004d28:	f7ff fd30 	bl	800478c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7f5b      	ldrb	r3, [r3, #29]
 8004d30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004d3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004d42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d106      	bne.n	8004d68 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	045b      	lsls	r3, r3, #17
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_ADC_Init+0x30c>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	69b9      	ldr	r1, [r7, #24]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff ff03 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 8004db8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ff10 	bl	8004be4 <LL_ADC_INJ_IsConversionOngoing>
 8004dc4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d16d      	bne.n	8004ea8 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d16a      	bne.n	8004ea8 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dde:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dee:	f023 0302 	bic.w	r3, r3, #2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	69b9      	ldr	r1, [r7, #24]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6911      	ldr	r1, [r2, #16]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004e32:	e013      	b.n	8004e5c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e58:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d118      	bne.n	8004e98 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e7c:	4311      	orrs	r1, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e82:	4311      	orrs	r1, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	e007      	b.n	8004ea8 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10c      	bne.n	8004eca <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f023 010f 	bic.w	r1, r3, #15
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	1e5a      	subs	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ec8:	e007      	b.n	8004eda <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 020f 	bic.w	r2, r2, #15
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eea:	e007      	b.n	8004efc <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f043 0210 	orr.w	r2, r3, #16
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3724      	adds	r7, #36	; 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000008 	.word	0x20000008
 8004f0c:	053e2d63 	.word	0x053e2d63
 8004f10:	50000100 	.word	0x50000100
 8004f14:	50000300 	.word	0x50000300
 8004f18:	fff04007 	.word	0xfff04007

08004f1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f28:	4851      	ldr	r0, [pc, #324]	; (8005070 <HAL_ADC_Start_DMA+0x154>)
 8004f2a:	f7ff fda3 	bl	8004a74 <LL_ADC_GetMultimode>
 8004f2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fe42 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 808f 	bne.w	8005060 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_ADC_Start_DMA+0x34>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e08a      	b.n	8005066 <HAL_ADC_Start_DMA+0x14a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d002      	beq.n	8004f6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d173      	bne.n	8005052 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 feb2 	bl	8005cd4 <ADC_Enable>
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d166      	bne.n	8005048 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a38      	ldr	r2, [pc, #224]	; (8005074 <HAL_ADC_Start_DMA+0x158>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d002      	beq.n	8004f9e <HAL_ADC_Start_DMA+0x82>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	e001      	b.n	8004fa2 <HAL_ADC_Start_DMA+0x86>
 8004f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d002      	beq.n	8004fb0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fcc:	f023 0206 	bic.w	r2, r3, #6
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	661a      	str	r2, [r3, #96]	; 0x60
 8004fd4:	e002      	b.n	8004fdc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe0:	4a25      	ldr	r2, [pc, #148]	; (8005078 <HAL_ADC_Start_DMA+0x15c>)
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	4a24      	ldr	r2, [pc, #144]	; (800507c <HAL_ADC_Start_DMA+0x160>)
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	4a23      	ldr	r2, [pc, #140]	; (8005080 <HAL_ADC_Start_DMA+0x164>)
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	221c      	movs	r2, #28
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0210 	orr.w	r2, r2, #16
 8005012:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3340      	adds	r3, #64	; 0x40
 800502e:	4619      	mov	r1, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f001 fa04 	bl	8006440 <HAL_DMA_Start_IT>
 8005038:	4603      	mov	r3, r0
 800503a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fda8 	bl	8004b96 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005046:	e00d      	b.n	8005064 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005050:	e008      	b.n	8005064 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800505e:	e001      	b.n	8005064 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	50000300 	.word	0x50000300
 8005074:	50000100 	.word	0x50000100
 8005078:	08005d89 	.word	0x08005d89
 800507c:	08005e61 	.word	0x08005e61
 8005080:	08005e7d 	.word	0x08005e7d

08005084 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050a0:	4883      	ldr	r0, [pc, #524]	; (80052b0 <HAL_ADC_IRQHandler+0x22c>)
 80050a2:	f7ff fce7 	bl	8004a74 <LL_ADC_GetMultimode>
 80050a6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <HAL_ADC_IRQHandler+0x5e>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050cc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 ff39 	bl	8005f4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2202      	movs	r2, #2
 80050e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <HAL_ADC_IRQHandler+0x72>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8085 	beq.w	800520c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d07f      	beq.n	800520c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fc01 	bl	8004930 <LL_ADC_REG_IsTriggerSourceSWStart>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d064      	beq.n	80051fe <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a5e      	ldr	r2, [pc, #376]	; (80052b4 <HAL_ADC_IRQHandler+0x230>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d002      	beq.n	8005144 <HAL_ADC_IRQHandler+0xc0>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	e001      	b.n	8005148 <HAL_ADC_IRQHandler+0xc4>
 8005144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	4293      	cmp	r3, r2
 800514e:	d008      	beq.n	8005162 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b05      	cmp	r3, #5
 800515a:	d002      	beq.n	8005162 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b09      	cmp	r3, #9
 8005160:	d104      	bne.n	800516c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	623b      	str	r3, [r7, #32]
 800516a:	e00d      	b.n	8005188 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a50      	ldr	r2, [pc, #320]	; (80052b4 <HAL_ADC_IRQHandler+0x230>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d002      	beq.n	800517c <HAL_ADC_IRQHandler+0xf8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	e001      	b.n	8005180 <HAL_ADC_IRQHandler+0xfc>
 800517c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005180:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d135      	bne.n	80051fe <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d12e      	bne.n	80051fe <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fd0a 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11a      	bne.n	80051e6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 020c 	bic.w	r2, r2, #12
 80051be:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d112      	bne.n	80051fe <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f043 0201 	orr.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80051e4:	e00b      	b.n	80051fe <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ea:	f043 0210 	orr.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd f848 	bl	8002294 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	220c      	movs	r2, #12
 800520a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_ADC_IRQHandler+0x19c>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 809e 	beq.w	8005368 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8098 	beq.w	8005368 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005248:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fbaa 	bl	80049ae <LL_ADC_INJ_IsTriggerSourceSWStart>
 800525a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fb65 	bl	8004930 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005266:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <HAL_ADC_IRQHandler+0x230>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d002      	beq.n	8005278 <HAL_ADC_IRQHandler+0x1f4>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	e001      	b.n	800527c <HAL_ADC_IRQHandler+0x1f8>
 8005278:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	4293      	cmp	r3, r2
 8005282:	d008      	beq.n	8005296 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d002      	beq.n	8005296 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b07      	cmp	r3, #7
 8005294:	d104      	bne.n	80052a0 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	e011      	b.n	80052c4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a03      	ldr	r2, [pc, #12]	; (80052b4 <HAL_ADC_IRQHandler+0x230>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d006      	beq.n	80052b8 <HAL_ADC_IRQHandler+0x234>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	e005      	b.n	80052bc <HAL_ADC_IRQHandler+0x238>
 80052b0:	50000300 	.word	0x50000300
 80052b4:	50000100 	.word	0x50000100
 80052b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052bc:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d142      	bne.n	800535a <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03f      	beq.n	800535a <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d13a      	bne.n	800535a <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d133      	bne.n	800535a <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d12e      	bne.n	800535a <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fc6f 	bl	8004be4 <LL_ADC_INJ_IsConversionOngoing>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11a      	bne.n	8005342 <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800531a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d112      	bne.n	800535a <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005340:	e00b      	b.n	800535a <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	f043 0210 	orr.w	r2, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fdce 	bl	8005efc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2260      	movs	r2, #96	; 0x60
 8005366:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <HAL_ADC_IRQHandler+0x312>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f89f 	bl	80054cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <HAL_ADC_IRQHandler+0x342>
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fdb4 	bl	8005f24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d012      	beq.n	80053f6 <HAL_ADC_IRQHandler+0x372>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fda6 	bl	8005f38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d036      	beq.n	800546e <HAL_ADC_IRQHandler+0x3ea>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d031      	beq.n	800546e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8005412:	2301      	movs	r3, #1
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
 8005416:	e014      	b.n	8005442 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800541e:	4825      	ldr	r0, [pc, #148]	; (80054b4 <HAL_ADC_IRQHandler+0x430>)
 8005420:	f7ff fb36 	bl	8004a90 <LL_ADC_GetMultiDMATransfer>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800542a:	2301      	movs	r3, #1
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	e008      	b.n	8005442 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800543e:	2301      	movs	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10e      	bne.n	8005466 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	f043 0202 	orr.w	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f83d 	bl	80054e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2210      	movs	r2, #16
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	2b00      	cmp	r3, #0
 8005476:	d018      	beq.n	80054aa <HAL_ADC_IRQHandler+0x426>
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005492:	f043 0208 	orr.w	r2, r3, #8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054a2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fd33 	bl	8005f10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80054aa:	bf00      	nop
 80054ac:	3728      	adds	r7, #40	; 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	50000300 	.word	0x50000300

080054b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0b6      	sub	sp, #216	; 0xd8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x22>
 8005512:	2302      	movs	r3, #2
 8005514:	e3c7      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x7b2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fb4b 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 83ac 	bne.w	8005c88 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	f7ff fa0a 	bl	8004956 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fb39 	bl	8004bbe <LL_ADC_REG_IsConversionOngoing>
 800554c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fb45 	bl	8004be4 <LL_ADC_INJ_IsConversionOngoing>
 800555a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800555e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 81d9 	bne.w	800591a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 81d4 	bne.w	800591a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800557a:	d10f      	bne.n	800559c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2200      	movs	r2, #0
 8005586:	4619      	mov	r1, r3
 8005588:	f7ff fa24 	bl	80049d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff f9b8 	bl	800490a <LL_ADC_SetSamplingTimeCommonConfig>
 800559a:	e00e      	b.n	80055ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	461a      	mov	r2, r3
 80055aa:	f7ff fa13 	bl	80049d4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff f9a8 	bl	800490a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	08db      	lsrs	r3, r3, #3
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d022      	beq.n	8005622 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6919      	ldr	r1, [r3, #16]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055ec:	f7ff f902 	bl	80047f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6919      	ldr	r1, [r3, #16]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	461a      	mov	r2, r3
 80055fe:	f7ff f94e 	bl	800489e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6919      	ldr	r1, [r3, #16]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	7f1b      	ldrb	r3, [r3, #28]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x124>
 8005612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005616:	e000      	b.n	800561a <HAL_ADC_ConfigChannel+0x126>
 8005618:	2300      	movs	r3, #0
 800561a:	461a      	mov	r2, r3
 800561c:	f7ff f95a 	bl	80048d4 <LL_ADC_SetOffsetSaturation>
 8005620:	e17b      	b.n	800591a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff f907 	bl	800483c <LL_ADC_GetOffsetChannel>
 800562e:	4603      	mov	r3, r0
 8005630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <HAL_ADC_ConfigChannel+0x15a>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff f8fc 	bl	800483c <LL_ADC_GetOffsetChannel>
 8005644:	4603      	mov	r3, r0
 8005646:	0e9b      	lsrs	r3, r3, #26
 8005648:	f003 021f 	and.w	r2, r3, #31
 800564c:	e01e      	b.n	800568c <HAL_ADC_ConfigChannel+0x198>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff f8f1 	bl	800483c <LL_ADC_GetOffsetChannel>
 800565a:	4603      	mov	r3, r0
 800565c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800566c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e004      	b.n	800568a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x1b0>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	0e9b      	lsrs	r3, r3, #26
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	e018      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x1e2>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80056b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80056c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80056c8:	2320      	movs	r3, #32
 80056ca:	e004      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80056cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d106      	bne.n	80056e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f8c0 	bl	8004868 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2101      	movs	r1, #1
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff f8a4 	bl	800483c <LL_ADC_GetOffsetChannel>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_ADC_ConfigChannel+0x220>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2101      	movs	r1, #1
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f899 	bl	800483c <LL_ADC_GetOffsetChannel>
 800570a:	4603      	mov	r3, r0
 800570c:	0e9b      	lsrs	r3, r3, #26
 800570e:	f003 021f 	and.w	r2, r3, #31
 8005712:	e01e      	b.n	8005752 <HAL_ADC_ConfigChannel+0x25e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff f88e 	bl	800483c <LL_ADC_GetOffsetChannel>
 8005720:	4603      	mov	r3, r0
 8005722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800573a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005742:	2320      	movs	r3, #32
 8005744:	e004      	b.n	8005750 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800574a:	fab3 f383 	clz	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_ADC_ConfigChannel+0x276>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	0e9b      	lsrs	r3, r3, #26
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	e018      	b.n	800579c <HAL_ADC_ConfigChannel+0x2a8>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005772:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800577e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800578e:	2320      	movs	r3, #32
 8005790:	e004      	b.n	800579c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005796:	fab3 f383 	clz	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	429a      	cmp	r2, r3
 800579e:	d106      	bne.n	80057ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2101      	movs	r1, #1
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff f85d 	bl	8004868 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff f841 	bl	800483c <LL_ADC_GetOffsetChannel>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <HAL_ADC_ConfigChannel+0x2e6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2102      	movs	r1, #2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff f836 	bl	800483c <LL_ADC_GetOffsetChannel>
 80057d0:	4603      	mov	r3, r0
 80057d2:	0e9b      	lsrs	r3, r3, #26
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	e01e      	b.n	8005818 <HAL_ADC_ConfigChannel+0x324>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2102      	movs	r1, #2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff f82b 	bl	800483c <LL_ADC_GetOffsetChannel>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80057f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005808:	2320      	movs	r3, #32
 800580a:	e004      	b.n	8005816 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800580c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_ADC_ConfigChannel+0x33c>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0e9b      	lsrs	r3, r3, #26
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	e016      	b.n	800585e <HAL_ADC_ConfigChannel+0x36a>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005842:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005850:	2320      	movs	r3, #32
 8005852:	e004      	b.n	800585e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	429a      	cmp	r2, r3
 8005860:	d106      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	2102      	movs	r1, #2
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fffc 	bl	8004868 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2103      	movs	r1, #3
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe ffe0 	bl	800483c <LL_ADC_GetOffsetChannel>
 800587c:	4603      	mov	r3, r0
 800587e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <HAL_ADC_ConfigChannel+0x3a8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2103      	movs	r1, #3
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe ffd5 	bl	800483c <LL_ADC_GetOffsetChannel>
 8005892:	4603      	mov	r3, r0
 8005894:	0e9b      	lsrs	r3, r3, #26
 8005896:	f003 021f 	and.w	r2, r3, #31
 800589a:	e017      	b.n	80058cc <HAL_ADC_ConfigChannel+0x3d8>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2103      	movs	r1, #3
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe ffca 	bl	800483c <LL_ADC_GetOffsetChannel>
 80058a8:	4603      	mov	r3, r0
 80058aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ae:	fa93 f3a3 	rbit	r3, r3
 80058b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80058b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80058b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80058be:	2320      	movs	r3, #32
 80058c0:	e003      	b.n	80058ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80058c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c4:	fab3 f383 	clz	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x3f0>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	0e9b      	lsrs	r3, r3, #26
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	e011      	b.n	8005908 <HAL_ADC_ConfigChannel+0x414>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ec:	fa93 f3a3 	rbit	r3, r3
 80058f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80058f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80058fc:	2320      	movs	r3, #32
 80058fe:	e003      	b.n	8005908 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005902:	fab3 f383 	clz	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	429a      	cmp	r2, r3
 800590a:	d106      	bne.n	800591a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2200      	movs	r2, #0
 8005912:	2103      	movs	r1, #3
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe ffa7 	bl	8004868 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff f926 	bl	8004b70 <LL_ADC_IsEnabled>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 8140 	bne.w	8005bac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	461a      	mov	r2, r3
 800593a:	f7ff f877 	bl	8004a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	4a8f      	ldr	r2, [pc, #572]	; (8005b80 <HAL_ADC_ConfigChannel+0x68c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 8131 	bne.w	8005bac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x47e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	0e9b      	lsrs	r3, r3, #26
 8005960:	3301      	adds	r3, #1
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2b09      	cmp	r3, #9
 8005968:	bf94      	ite	ls
 800596a:	2301      	movls	r3, #1
 800596c:	2300      	movhi	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e019      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x4b2>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800598a:	2320      	movs	r3, #32
 800598c:	e003      	b.n	8005996 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800598e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	3301      	adds	r3, #1
 8005998:	f003 031f 	and.w	r3, r3, #31
 800599c:	2b09      	cmp	r3, #9
 800599e:	bf94      	ite	ls
 80059a0:	2301      	movls	r3, #1
 80059a2:	2300      	movhi	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d079      	beq.n	8005a9e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x4d2>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	0e9b      	lsrs	r3, r3, #26
 80059bc:	3301      	adds	r3, #1
 80059be:	069b      	lsls	r3, r3, #26
 80059c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059c4:	e015      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x4fe>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ce:	fa93 f3a3 	rbit	r3, r3
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80059d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80059de:	2320      	movs	r3, #32
 80059e0:	e003      	b.n	80059ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80059e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e4:	fab3 f383 	clz	r3, r3
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	3301      	adds	r3, #1
 80059ec:	069b      	lsls	r3, r3, #26
 80059ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_ADC_ConfigChannel+0x51e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0e9b      	lsrs	r3, r3, #26
 8005a04:	3301      	adds	r3, #1
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	e017      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x54e>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1a:	fa93 f3a3 	rbit	r3, r3
 8005a1e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	e003      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a30:	fab3 f383 	clz	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3301      	adds	r3, #1
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	ea42 0103 	orr.w	r1, r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <HAL_ADC_ConfigChannel+0x574>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	0e9b      	lsrs	r3, r3, #26
 8005a58:	3301      	adds	r3, #1
 8005a5a:	f003 021f 	and.w	r2, r3, #31
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	051b      	lsls	r3, r3, #20
 8005a66:	e018      	b.n	8005a9a <HAL_ADC_ConfigChannel+0x5a6>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	fa93 f3a3 	rbit	r3, r3
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005a80:	2320      	movs	r3, #32
 8005a82:	e003      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a86:	fab3 f383 	clz	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f003 021f 	and.w	r2, r3, #31
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	e081      	b.n	8005ba2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x5c6>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	0e9b      	lsrs	r3, r3, #26
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	069b      	lsls	r3, r3, #26
 8005ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ab8:	e015      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x5f2>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	fa93 f3a3 	rbit	r3, r3
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	e003      	b.n	8005ade <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	fab3 f383 	clz	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	3301      	adds	r3, #1
 8005ae0:	069b      	lsls	r3, r3, #26
 8005ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <HAL_ADC_ConfigChannel+0x612>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	0e9b      	lsrs	r3, r3, #26
 8005af8:	3301      	adds	r3, #1
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2101      	movs	r1, #1
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	e017      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x642>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	61fb      	str	r3, [r7, #28]
  return result;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005b1e:	2320      	movs	r3, #32
 8005b20:	e003      	b.n	8005b2a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	fab3 f383 	clz	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2101      	movs	r1, #1
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	ea42 0103 	orr.w	r1, r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10d      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x66e>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	0e9b      	lsrs	r3, r3, #26
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	f003 021f 	and.w	r2, r3, #31
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	3b1e      	subs	r3, #30
 8005b5a:	051b      	lsls	r3, r3, #20
 8005b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b60:	e01e      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x6ac>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fa93 f3a3 	rbit	r3, r3
 8005b6e:	613b      	str	r3, [r7, #16]
  return result;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	e006      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x698>
 8005b7e:	bf00      	nop
 8005b80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	fab3 f383 	clz	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f003 021f 	and.w	r2, r3, #31
 8005b92:	4613      	mov	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	3b1e      	subs	r3, #30
 8005b9a:	051b      	lsls	r3, r3, #20
 8005b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	6892      	ldr	r2, [r2, #8]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f7fe ff14 	bl	80049d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b3f      	ldr	r3, [pc, #252]	; (8005cb0 <HAL_ADC_ConfigChannel+0x7bc>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d070      	beq.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bb8:	483e      	ldr	r0, [pc, #248]	; (8005cb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bba:	f7fe fe0d 	bl	80047d8 <LL_ADC_GetCommonPathInternalCh>
 8005bbe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a3c      	ldr	r2, [pc, #240]	; (8005cb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <HAL_ADC_ConfigChannel+0x6e2>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a3a      	ldr	r2, [pc, #232]	; (8005cbc <HAL_ADC_ConfigChannel+0x7c8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d126      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d120      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bea:	d156      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	482f      	ldr	r0, [pc, #188]	; (8005cb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bf8:	f7fe fddb 	bl	80047b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005bfc:	4b30      	ldr	r3, [pc, #192]	; (8005cc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	099b      	lsrs	r3, r3, #6
 8005c02:	4a30      	ldr	r2, [pc, #192]	; (8005cc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	099a      	lsrs	r2, r3, #6
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c14:	e002      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1f9      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c22:	e03a      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d113      	bne.n	8005c56 <HAL_ADC_ConfigChannel+0x762>
 8005c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10d      	bne.n	8005c56 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <HAL_ADC_ConfigChannel+0x7d8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02a      	beq.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4819      	ldr	r0, [pc, #100]	; (8005cb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c50:	f7fe fdaf 	bl	80047b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c54:	e021      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d11c      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d116      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <HAL_ADC_ConfigChannel+0x7d8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d011      	beq.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c7e:	4619      	mov	r1, r3
 8005c80:	480c      	ldr	r0, [pc, #48]	; (8005cb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c82:	f7fe fd96 	bl	80047b2 <LL_ADC_SetCommonPathInternalCh>
 8005c86:	e008      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ca2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	37d8      	adds	r7, #216	; 0xd8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	80080000 	.word	0x80080000
 8005cb4:	50000300 	.word	0x50000300
 8005cb8:	c3210000 	.word	0xc3210000
 8005cbc:	90c00010 	.word	0x90c00010
 8005cc0:	20000008 	.word	0x20000008
 8005cc4:	053e2d63 	.word	0x053e2d63
 8005cc8:	c7520000 	.word	0xc7520000
 8005ccc:	50000100 	.word	0x50000100
 8005cd0:	cb840000 	.word	0xcb840000

08005cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe ff45 	bl	8004b70 <LL_ADC_IsEnabled>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d146      	bne.n	8005d7a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <ADC_Enable+0xb0>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	f043 0210 	orr.w	r2, r3, #16
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e032      	b.n	8005d7c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe ff14 	bl	8004b48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d20:	f7fe fd06 	bl	8004730 <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d26:	e021      	b.n	8005d6c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe ff1f 	bl	8004b70 <LL_ADC_IsEnabled>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe ff03 	bl	8004b48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d42:	f7fe fcf5 	bl	8004730 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d90d      	bls.n	8005d6c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	f043 0210 	orr.w	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d60:	f043 0201 	orr.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e007      	b.n	8005d7c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d1d6      	bne.n	8005d28 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	8000003f 	.word	0x8000003f

08005d88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d14b      	bne.n	8005e3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d021      	beq.n	8005e00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe fdb5 	bl	8004930 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d032      	beq.n	8005e32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d12b      	bne.n	8005e32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11f      	bne.n	8005e32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	f043 0201 	orr.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dfe:	e018      	b.n	8005e32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d111      	bne.n	8005e32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7fc fa2e 	bl	8002294 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e38:	e00e      	b.n	8005e58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff fb4a 	bl	80054e0 <HAL_ADC_ErrorCallback>
}
 8005e4c:	e004      	b.n	8005e58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff fb22 	bl	80054b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fb1c 	bl	80054e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <LL_ADC_IsEnabled>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <LL_ADC_IsEnabled+0x18>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <LL_ADC_IsEnabled+0x1a>
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d101      	bne.n	8005eee <LL_ADC_REG_IsConversionOngoing+0x18>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b0a1      	sub	sp, #132	; 0x84
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e087      	b.n	800608e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f8e:	d102      	bne.n	8005f96 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005f90:	4b41      	ldr	r3, [pc, #260]	; (8006098 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	e001      	b.n	8005f9a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10b      	bne.n	8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	f043 0220 	orr.w	r2, r3, #32
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e06a      	b.n	800608e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff ff8b 	bl	8005ed6 <LL_ADC_REG_IsConversionOngoing>
 8005fc0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ff85 	bl	8005ed6 <LL_ADC_REG_IsConversionOngoing>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d14c      	bne.n	800606c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d149      	bne.n	800606c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005fd8:	4b30      	ldr	r3, [pc, #192]	; (800609c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005fda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d028      	beq.n	8006036 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6859      	ldr	r1, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ff6:	035b      	lsls	r3, r3, #13
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006000:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006004:	f7ff ff54 	bl	8005eb0 <LL_ADC_IsEnabled>
 8006008:	4604      	mov	r4, r0
 800600a:	4823      	ldr	r0, [pc, #140]	; (8006098 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800600c:	f7ff ff50 	bl	8005eb0 <LL_ADC_IsEnabled>
 8006010:	4603      	mov	r3, r0
 8006012:	4323      	orrs	r3, r4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d133      	bne.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006020:	f023 030f 	bic.w	r3, r3, #15
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	6811      	ldr	r1, [r2, #0]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	6892      	ldr	r2, [r2, #8]
 800602c:	430a      	orrs	r2, r1
 800602e:	431a      	orrs	r2, r3
 8006030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006032:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006034:	e024      	b.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800603e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006040:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006042:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006046:	f7ff ff33 	bl	8005eb0 <LL_ADC_IsEnabled>
 800604a:	4604      	mov	r4, r0
 800604c:	4812      	ldr	r0, [pc, #72]	; (8006098 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800604e:	f7ff ff2f 	bl	8005eb0 <LL_ADC_IsEnabled>
 8006052:	4603      	mov	r3, r0
 8006054:	4323      	orrs	r3, r4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d112      	bne.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800605a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006062:	f023 030f 	bic.w	r3, r3, #15
 8006066:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006068:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800606a:	e009      	b.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800607e:	e000      	b.n	8006082 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006080:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800608a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800608e:	4618      	mov	r0, r3
 8006090:	3784      	adds	r7, #132	; 0x84
 8006092:	46bd      	mov	sp, r7
 8006094:	bd90      	pop	{r4, r7, pc}
 8006096:	bf00      	nop
 8006098:	50000100 	.word	0x50000100
 800609c:	50000300 	.word	0x50000300

080060a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <__NVIC_SetPriorityGrouping+0x44>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060bc:	4013      	ands	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060d2:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <__NVIC_SetPriorityGrouping+0x44>)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	60d3      	str	r3, [r2, #12]
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	e000ed00 	.word	0xe000ed00

080060e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <__NVIC_GetPriorityGrouping+0x18>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 0307 	and.w	r3, r3, #7
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	e000ed00 	.word	0xe000ed00

08006104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	db0b      	blt.n	800612e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f003 021f 	and.w	r2, r3, #31
 800611c:	4907      	ldr	r1, [pc, #28]	; (800613c <__NVIC_EnableIRQ+0x38>)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2001      	movs	r0, #1
 8006126:	fa00 f202 	lsl.w	r2, r0, r2
 800612a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000e100 	.word	0xe000e100

08006140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800614c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006150:	2b00      	cmp	r3, #0
 8006152:	db0a      	blt.n	800616a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	490c      	ldr	r1, [pc, #48]	; (800618c <__NVIC_SetPriority+0x4c>)
 800615a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	440b      	add	r3, r1
 8006164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006168:	e00a      	b.n	8006180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4908      	ldr	r1, [pc, #32]	; (8006190 <__NVIC_SetPriority+0x50>)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	3b04      	subs	r3, #4
 8006178:	0112      	lsls	r2, r2, #4
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	440b      	add	r3, r1
 800617e:	761a      	strb	r2, [r3, #24]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	e000e100 	.word	0xe000e100
 8006190:	e000ed00 	.word	0xe000ed00

08006194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	; 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f1c3 0307 	rsb	r3, r3, #7
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	bf28      	it	cs
 80061b2:	2304      	movcs	r3, #4
 80061b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3304      	adds	r3, #4
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d902      	bls.n	80061c4 <NVIC_EncodePriority+0x30>
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3b03      	subs	r3, #3
 80061c2:	e000      	b.n	80061c6 <NVIC_EncodePriority+0x32>
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43da      	mvns	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	401a      	ands	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061dc:	f04f 31ff 	mov.w	r1, #4294967295
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	43d9      	mvns	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ec:	4313      	orrs	r3, r2
         );
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3724      	adds	r7, #36	; 0x24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006200:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <__NVIC_SystemReset+0x20>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800620c:	4903      	ldr	r1, [pc, #12]	; (800621c <__NVIC_SystemReset+0x20>)
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <__NVIC_SystemReset+0x24>)
 8006210:	4313      	orrs	r3, r2
 8006212:	60cb      	str	r3, [r1, #12]
 8006214:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <__NVIC_SystemReset+0x1c>
 800621c:	e000ed00 	.word	0xe000ed00
 8006220:	05fa0004 	.word	0x05fa0004

08006224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3b01      	subs	r3, #1
 8006230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006234:	d301      	bcc.n	800623a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006236:	2301      	movs	r3, #1
 8006238:	e00f      	b.n	800625a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <SysTick_Config+0x40>)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3b01      	subs	r3, #1
 8006240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006242:	210f      	movs	r1, #15
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
 8006248:	f7ff ff7a 	bl	8006140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <SysTick_Config+0x40>)
 800624e:	2200      	movs	r2, #0
 8006250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006252:	4b04      	ldr	r3, [pc, #16]	; (8006264 <SysTick_Config+0x40>)
 8006254:	2207      	movs	r2, #7
 8006256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	e000e010 	.word	0xe000e010

08006268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ff15 	bl	80060a0 <__NVIC_SetPriorityGrouping>
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af00      	add	r7, sp, #0
 8006284:	4603      	mov	r3, r0
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800628c:	f7ff ff2c 	bl	80060e8 <__NVIC_GetPriorityGrouping>
 8006290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7ff ff7c 	bl	8006194 <NVIC_EncodePriority>
 800629c:	4602      	mov	r2, r0
 800629e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff ff4b 	bl	8006140 <__NVIC_SetPriority>
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	4603      	mov	r3, r0
 80062ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff ff1f 	bl	8006104 <__NVIC_EnableIRQ>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80062d2:	f7ff ff93 	bl	80061fc <__NVIC_SystemReset>

080062d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff ffa0 	bl	8006224 <SysTick_Config>
 80062e4:	4603      	mov	r3, r0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e08d      	b.n	800641e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	4b47      	ldr	r3, [pc, #284]	; (8006428 <HAL_DMA_Init+0x138>)
 800630a:	429a      	cmp	r2, r3
 800630c:	d80f      	bhi.n	800632e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	4b45      	ldr	r3, [pc, #276]	; (800642c <HAL_DMA_Init+0x13c>)
 8006316:	4413      	add	r3, r2
 8006318:	4a45      	ldr	r2, [pc, #276]	; (8006430 <HAL_DMA_Init+0x140>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	091b      	lsrs	r3, r3, #4
 8006320:	009a      	lsls	r2, r3, #2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a42      	ldr	r2, [pc, #264]	; (8006434 <HAL_DMA_Init+0x144>)
 800632a:	641a      	str	r2, [r3, #64]	; 0x40
 800632c:	e00e      	b.n	800634c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	4b40      	ldr	r3, [pc, #256]	; (8006438 <HAL_DMA_Init+0x148>)
 8006336:	4413      	add	r3, r2
 8006338:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <HAL_DMA_Init+0x140>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	009a      	lsls	r2, r3, #2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a3c      	ldr	r2, [pc, #240]	; (800643c <HAL_DMA_Init+0x14c>)
 800634a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800637c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa1e 	bl	80067e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ac:	d102      	bne.n	80063b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063c8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d010      	beq.n	80063f4 <HAL_DMA_Init+0x104>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d80c      	bhi.n	80063f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa3e 	bl	800685c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	e008      	b.n	8006406 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40020407 	.word	0x40020407
 800642c:	bffdfff8 	.word	0xbffdfff8
 8006430:	cccccccd 	.word	0xcccccccd
 8006434:	40020000 	.word	0x40020000
 8006438:	bffdfbf8 	.word	0xbffdfbf8
 800643c:	40020400 	.word	0x40020400

08006440 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_DMA_Start_IT+0x20>
 800645c:	2302      	movs	r3, #2
 800645e:	e066      	b.n	800652e <HAL_DMA_Start_IT+0xee>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d155      	bne.n	8006520 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f962 	bl	8006762 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 020e 	orr.w	r2, r2, #14
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e00f      	b.n	80064d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0204 	bic.w	r2, r2, #4
 80064c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 020a 	orr.w	r2, r2, #10
 80064d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e005      	b.n	800652c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006528:	2302      	movs	r3, #2
 800652a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d00d      	beq.n	800656a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2204      	movs	r2, #4
 8006552:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e047      	b.n	80065fa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 020e 	bic.w	r2, r2, #14
 8006578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f003 021f 	and.w	r2, r3, #31
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2101      	movs	r1, #1
 80065a8:	fa01 f202 	lsl.w	r2, r1, r2
 80065ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
    }
  }
  return status;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	2204      	movs	r2, #4
 8006626:	409a      	lsls	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d026      	beq.n	800667e <HAL_DMA_IRQHandler+0x7a>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d021      	beq.n	800667e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d107      	bne.n	8006658 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0204 	bic.w	r2, r2, #4
 8006656:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665c:	f003 021f 	and.w	r2, r3, #31
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2104      	movs	r1, #4
 8006666:	fa01 f202 	lsl.w	r2, r1, r2
 800666a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d071      	beq.n	8006758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800667c:	e06c      	b.n	8006758 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	2202      	movs	r2, #2
 8006688:	409a      	lsls	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d02e      	beq.n	80066f0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d029      	beq.n	80066f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 020a 	bic.w	r2, r2, #10
 80066b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	f003 021f 	and.w	r2, r3, #31
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2102      	movs	r1, #2
 80066d0:	fa01 f202 	lsl.w	r2, r1, r2
 80066d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d038      	beq.n	8006758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066ee:	e033      	b.n	8006758 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2208      	movs	r2, #8
 80066fa:	409a      	lsls	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d02a      	beq.n	800675a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d025      	beq.n	800675a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 020e 	bic.w	r2, r2, #14
 800671c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f003 021f 	and.w	r2, r3, #31
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2101      	movs	r1, #1
 800672c:	fa01 f202 	lsl.w	r2, r1, r2
 8006730:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006758:	bf00      	nop
 800675a:	bf00      	nop
}
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006778:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800678a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	f003 021f 	and.w	r2, r3, #31
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	2101      	movs	r1, #1
 800679a:	fa01 f202 	lsl.w	r2, r1, r2
 800679e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d108      	bne.n	80067c2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067c0:	e007      	b.n	80067d2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	60da      	str	r2, [r3, #12]
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d802      	bhi.n	80067fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80067f4:	4b15      	ldr	r3, [pc, #84]	; (800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e001      	b.n	80067fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80067fa:	4b15      	ldr	r3, [pc, #84]	; (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80067fc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	3b08      	subs	r3, #8
 800680a:	4a12      	ldr	r2, [pc, #72]	; (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	089b      	lsrs	r3, r3, #2
 800681a:	009a      	lsls	r2, r3, #2
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a0b      	ldr	r2, [pc, #44]	; (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800682a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2201      	movs	r2, #1
 8006834:	409a      	lsls	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	651a      	str	r2, [r3, #80]	; 0x50
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40020407 	.word	0x40020407
 800684c:	40020800 	.word	0x40020800
 8006850:	40020820 	.word	0x40020820
 8006854:	cccccccd 	.word	0xcccccccd
 8006858:	40020880 	.word	0x40020880

0800685c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800687e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b01      	subs	r3, #1
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	2201      	movs	r2, #1
 800688a:	409a      	lsls	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	1000823f 	.word	0x1000823f
 80068a0:	40020940 	.word	0x40020940

080068a4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <HAL_FLASH_Program+0xa4>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_FLASH_Program+0x1e>
 80068be:	2302      	movs	r3, #2
 80068c0:	e03e      	b.n	8006940 <HAL_FLASH_Program+0x9c>
 80068c2:	4b21      	ldr	r3, [pc, #132]	; (8006948 <HAL_FLASH_Program+0xa4>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068cc:	f000 f888 	bl	80069e0 <FLASH_WaitForLastOperation>
 80068d0:	4603      	mov	r3, r0
 80068d2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d12e      	bne.n	8006938 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <HAL_FLASH_Program+0xa4>)
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d107      	bne.n	80068f6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80068e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ea:	68b8      	ldr	r0, [r7, #8]
 80068ec:	f000 f8cc 	bl	8006a88 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80068f0:	2301      	movs	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e010      	b.n	8006918 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d002      	beq.n	8006902 <HAL_FLASH_Program+0x5e>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d10a      	bne.n	8006918 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	68b8      	ldr	r0, [r7, #8]
 8006908:	f000 f8e2 	bl	8006ad0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d102      	bne.n	8006918 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006912:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006916:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800691c:	f000 f860 	bl	80069e0 <FLASH_WaitForLastOperation>
 8006920:	4603      	mov	r3, r0
 8006922:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d006      	beq.n	8006938 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800692a:	4b08      	ldr	r3, [pc, #32]	; (800694c <HAL_FLASH_Program+0xa8>)
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	43db      	mvns	r3, r3
 8006932:	4906      	ldr	r1, [pc, #24]	; (800694c <HAL_FLASH_Program+0xa8>)
 8006934:	4013      	ands	r3, r2
 8006936:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006938:	4b03      	ldr	r3, [pc, #12]	; (8006948 <HAL_FLASH_Program+0xa4>)
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000014 	.word	0x20000014
 800694c:	40022000 	.word	0x40022000

08006950 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_FLASH_Unlock+0x38>)
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	da0b      	bge.n	800697a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <HAL_FLASH_Unlock+0x38>)
 8006964:	4a09      	ldr	r2, [pc, #36]	; (800698c <HAL_FLASH_Unlock+0x3c>)
 8006966:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <HAL_FLASH_Unlock+0x38>)
 800696a:	4a09      	ldr	r2, [pc, #36]	; (8006990 <HAL_FLASH_Unlock+0x40>)
 800696c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_FLASH_Unlock+0x38>)
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da01      	bge.n	800697a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800697a:	79fb      	ldrb	r3, [r7, #7]
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	40022000 	.word	0x40022000
 800698c:	45670123 	.word	0x45670123
 8006990:	cdef89ab 	.word	0xcdef89ab

08006994 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <HAL_FLASH_Lock+0x30>)
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4a08      	ldr	r2, [pc, #32]	; (80069c4 <HAL_FLASH_Lock+0x30>)
 80069a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80069aa:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <HAL_FLASH_Lock+0x30>)
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da01      	bge.n	80069b6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80069b6:	79fb      	ldrb	r3, [r7, #7]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40022000 	.word	0x40022000

080069c8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80069cc:	4b03      	ldr	r3, [pc, #12]	; (80069dc <HAL_FLASH_GetError+0x14>)
 80069ce:	685b      	ldr	r3, [r3, #4]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000014 	.word	0x20000014

080069e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80069e8:	f7fd fea2 	bl	8004730 <HAL_GetTick>
 80069ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80069ee:	e009      	b.n	8006a04 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80069f0:	f7fd fe9e 	bl	8004730 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d201      	bcs.n	8006a04 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e038      	b.n	8006a76 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006a04:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a10:	d0ee      	beq.n	80069f0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01e      	beq.n	8006a62 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8006a24:	4b17      	ldr	r3, [pc, #92]	; (8006a84 <FLASH_WaitForLastOperation+0xa4>)
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <FLASH_WaitForLastOperation+0xa4>)
 8006a2e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <FLASH_WaitForLastOperation+0x6a>
 8006a3a:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a44:	490e      	ldr	r1, [pc, #56]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	618b      	str	r3, [r1, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <FLASH_WaitForLastOperation+0x7e>
 8006a54:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006a5c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e009      	b.n	8006a76 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d102      	bne.n	8006a74 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <FLASH_WaitForLastOperation+0xa0>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40022000 	.word	0x40022000
 8006a84:	20000014 	.word	0x20000014

08006a88 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a88:	b490      	push	{r4, r7}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <FLASH_Program_DoubleWord+0x44>)
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <FLASH_Program_DoubleWord+0x44>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006aa6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006aaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	f04f 0400 	mov.w	r4, #0
 8006ab6:	0013      	movs	r3, r2
 8006ab8:	2400      	movs	r4, #0
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	3204      	adds	r2, #4
 8006abe:	6013      	str	r3, [r2, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc90      	pop	{r4, r7}
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40022000 	.word	0x40022000

08006ad0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	; 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <FLASH_Program_Fast+0x64>)
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4a12      	ldr	r2, [pc, #72]	; (8006b34 <FLASH_Program_Fast+0x64>)
 8006aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af2:	f3ef 8310 	mrs	r3, PRIMASK
 8006af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006af8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006afc:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	617b      	str	r3, [r7, #20]
    row_index--;
 8006b12:	7ffb      	ldrb	r3, [r7, #31]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006b18:	7ffb      	ldrb	r3, [r7, #31]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1ef      	bne.n	8006afe <FLASH_Program_Fast+0x2e>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006b28:	bf00      	nop
 8006b2a:	3724      	adds	r7, #36	; 0x24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40022000 	.word	0x40022000

08006b38 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b42:	4b4a      	ldr	r3, [pc, #296]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_FLASHEx_Erase+0x16>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e089      	b.n	8006c62 <HAL_FLASHEx_Erase+0x12a>
 8006b4e:	4b47      	ldr	r3, [pc, #284]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b58:	f7ff ff42 	bl	80069e0 <FLASH_WaitForLastOperation>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d179      	bne.n	8006c5a <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b66:	4b41      	ldr	r3, [pc, #260]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006b6c:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d019      	beq.n	8006bac <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006b78:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a3c      	ldr	r2, [pc, #240]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006b7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b82:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006b84:	4b3a      	ldr	r3, [pc, #232]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d009      	beq.n	8006ba4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006b90:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a36      	ldr	r2, [pc, #216]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b9a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006b9c:	4b33      	ldr	r3, [pc, #204]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	771a      	strb	r2, [r3, #28]
 8006ba2:	e016      	b.n	8006bd2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006ba4:	4b31      	ldr	r3, [pc, #196]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	771a      	strb	r2, [r3, #28]
 8006baa:	e012      	b.n	8006bd2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006bac:	4b30      	ldr	r3, [pc, #192]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d009      	beq.n	8006bcc <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006bb8:	4b2d      	ldr	r3, [pc, #180]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bc2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006bc4:	4b29      	ldr	r3, [pc, #164]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	771a      	strb	r2, [r3, #28]
 8006bca:	e002      	b.n	8006bd2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006bcc:	4b27      	ldr	r3, [pc, #156]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d111      	bne.n	8006bfe <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f848 	bl	8006c74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006be8:	f7ff fefa 	bl	80069e0 <FLASH_WaitForLastOperation>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006bf0:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006bf6:	f023 0304 	bic.w	r3, r3, #4
 8006bfa:	6153      	str	r3, [r2, #20]
 8006bfc:	e02b      	b.n	8006c56 <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f04f 32ff 	mov.w	r2, #4294967295
 8006c04:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	e01b      	b.n	8006c46 <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	4619      	mov	r1, r3
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	f000 f84b 	bl	8006cb0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c1e:	f7ff fedf 	bl	80069e0 <FLASH_WaitForLastOperation>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006c26:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <HAL_FLASHEx_Erase+0x138>)
 8006c2c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8006c30:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	601a      	str	r2, [r3, #0]
          break;
 8006c3e:	e00a      	b.n	8006c56 <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d3db      	bcc.n	8006c0e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006c56:	f000 f84f 	bl	8006cf8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c5a:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <HAL_FLASHEx_Erase+0x134>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]

  return status;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000014 	.word	0x20000014
 8006c70:	40022000 	.word	0x40022000

08006c74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <FLASH_MassErase+0x38>)
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	4a08      	ldr	r2, [pc, #32]	; (8006cac <FLASH_MassErase+0x38>)
 8006c8c:	f043 0304 	orr.w	r3, r3, #4
 8006c90:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <FLASH_MassErase+0x38>)
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	4a05      	ldr	r2, [pc, #20]	; (8006cac <FLASH_MassErase+0x38>)
 8006c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9c:	6153      	str	r3, [r2, #20]
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40022000 	.word	0x40022000

08006cb0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006cba:	4b0e      	ldr	r3, [pc, #56]	; (8006cf4 <FLASH_PageErase+0x44>)
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006cca:	490a      	ldr	r1, [pc, #40]	; (8006cf4 <FLASH_PageErase+0x44>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006cd0:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <FLASH_PageErase+0x44>)
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	4a07      	ldr	r2, [pc, #28]	; (8006cf4 <FLASH_PageErase+0x44>)
 8006cd6:	f043 0302 	orr.w	r3, r3, #2
 8006cda:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <FLASH_PageErase+0x44>)
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <FLASH_PageErase+0x44>)
 8006ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce6:	6153      	str	r3, [r2, #20]
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	40022000 	.word	0x40022000

08006cf8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006cfe:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <FLASH_FlushCaches+0x80>)
 8006d00:	7f1b      	ldrb	r3, [r3, #28]
 8006d02:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d002      	beq.n	8006d10 <FLASH_FlushCaches+0x18>
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d111      	bne.n	8006d34 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4b17      	ldr	r3, [pc, #92]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d28:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d002      	beq.n	8006d40 <FLASH_FlushCaches+0x48>
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d111      	bne.n	8006d64 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0d      	ldr	r2, [pc, #52]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d58:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a07      	ldr	r2, [pc, #28]	; (8006d7c <FLASH_FlushCaches+0x84>)
 8006d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <FLASH_FlushCaches+0x80>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	771a      	strb	r2, [r3, #28]
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000014 	.word	0x20000014
 8006d7c:	40022000 	.word	0x40022000

08006d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d8e:	e15a      	b.n	8007046 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	2101      	movs	r1, #1
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 814c 	beq.w	8007040 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d00b      	beq.n	8006dc8 <HAL_GPIO_Init+0x48>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d007      	beq.n	8006dc8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006dbc:	2b11      	cmp	r3, #17
 8006dbe:	d003      	beq.n	8006dc8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b12      	cmp	r3, #18
 8006dc6:	d130      	bne.n	8006e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dfe:	2201      	movs	r2, #1
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	43db      	mvns	r3, r3
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	f003 0201 	and.w	r2, r3, #1
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	2203      	movs	r2, #3
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d003      	beq.n	8006e6a <HAL_GPIO_Init+0xea>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b12      	cmp	r3, #18
 8006e68:	d123      	bne.n	8006eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	08da      	lsrs	r2, r3, #3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3208      	adds	r2, #8
 8006e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	220f      	movs	r2, #15
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43db      	mvns	r3, r3
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	08da      	lsrs	r2, r3, #3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3208      	adds	r2, #8
 8006eac:	6939      	ldr	r1, [r7, #16]
 8006eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f003 0203 	and.w	r2, r3, #3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80a6 	beq.w	8007040 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ef4:	4b5b      	ldr	r3, [pc, #364]	; (8007064 <HAL_GPIO_Init+0x2e4>)
 8006ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef8:	4a5a      	ldr	r2, [pc, #360]	; (8007064 <HAL_GPIO_Init+0x2e4>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6613      	str	r3, [r2, #96]	; 0x60
 8006f00:	4b58      	ldr	r3, [pc, #352]	; (8007064 <HAL_GPIO_Init+0x2e4>)
 8006f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f0c:	4a56      	ldr	r2, [pc, #344]	; (8007068 <HAL_GPIO_Init+0x2e8>)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	089b      	lsrs	r3, r3, #2
 8006f12:	3302      	adds	r3, #2
 8006f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	220f      	movs	r2, #15
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f36:	d01f      	beq.n	8006f78 <HAL_GPIO_Init+0x1f8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a4c      	ldr	r2, [pc, #304]	; (800706c <HAL_GPIO_Init+0x2ec>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d019      	beq.n	8006f74 <HAL_GPIO_Init+0x1f4>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a4b      	ldr	r2, [pc, #300]	; (8007070 <HAL_GPIO_Init+0x2f0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <HAL_GPIO_Init+0x1f0>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a4a      	ldr	r2, [pc, #296]	; (8007074 <HAL_GPIO_Init+0x2f4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00d      	beq.n	8006f6c <HAL_GPIO_Init+0x1ec>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a49      	ldr	r2, [pc, #292]	; (8007078 <HAL_GPIO_Init+0x2f8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <HAL_GPIO_Init+0x1e8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a48      	ldr	r2, [pc, #288]	; (800707c <HAL_GPIO_Init+0x2fc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d101      	bne.n	8006f64 <HAL_GPIO_Init+0x1e4>
 8006f60:	2305      	movs	r3, #5
 8006f62:	e00a      	b.n	8006f7a <HAL_GPIO_Init+0x1fa>
 8006f64:	2306      	movs	r3, #6
 8006f66:	e008      	b.n	8006f7a <HAL_GPIO_Init+0x1fa>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	e006      	b.n	8006f7a <HAL_GPIO_Init+0x1fa>
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e004      	b.n	8006f7a <HAL_GPIO_Init+0x1fa>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e002      	b.n	8006f7a <HAL_GPIO_Init+0x1fa>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <HAL_GPIO_Init+0x1fa>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	f002 0203 	and.w	r2, r2, #3
 8006f80:	0092      	lsls	r2, r2, #2
 8006f82:	4093      	lsls	r3, r2
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f8a:	4937      	ldr	r1, [pc, #220]	; (8007068 <HAL_GPIO_Init+0x2e8>)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	089b      	lsrs	r3, r3, #2
 8006f90:	3302      	adds	r3, #2
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f98:	4b39      	ldr	r3, [pc, #228]	; (8007080 <HAL_GPIO_Init+0x300>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006fbc:	4a30      	ldr	r2, [pc, #192]	; (8007080 <HAL_GPIO_Init+0x300>)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <HAL_GPIO_Init+0x300>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	43db      	mvns	r3, r3
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006fe6:	4a26      	ldr	r2, [pc, #152]	; (8007080 <HAL_GPIO_Init+0x300>)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fec:	4b24      	ldr	r3, [pc, #144]	; (8007080 <HAL_GPIO_Init+0x300>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <HAL_GPIO_Init+0x300>)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007016:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <HAL_GPIO_Init+0x300>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	43db      	mvns	r3, r3
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4013      	ands	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800703a:	4a11      	ldr	r2, [pc, #68]	; (8007080 <HAL_GPIO_Init+0x300>)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	3301      	adds	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	f47f ae9d 	bne.w	8006d90 <HAL_GPIO_Init+0x10>
  }
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40021000 	.word	0x40021000
 8007068:	40010000 	.word	0x40010000
 800706c:	48000400 	.word	0x48000400
 8007070:	48000800 	.word	0x48000800
 8007074:	48000c00 	.word	0x48000c00
 8007078:	48001000 	.word	0x48001000
 800707c:	48001400 	.word	0x48001400
 8007080:	40010400 	.word	0x40010400

08007084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	887b      	ldrh	r3, [r7, #2]
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
 80070a0:	e001      	b.n	80070a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	807b      	strh	r3, [r7, #2]
 80070c0:	4613      	mov	r3, r2
 80070c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070c4:	787b      	ldrb	r3, [r7, #1]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070ca:	887a      	ldrh	r2, [r7, #2]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070d0:	e002      	b.n	80070d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e0bb      	b.n	8007272 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b05      	cmp	r3, #5
 8007104:	d101      	bne.n	800710a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e0b3      	b.n	8007272 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d101      	bne.n	800711a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e0ab      	b.n	8007272 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800711a:	4b58      	ldr	r3, [pc, #352]	; (800727c <HAL_OPAMP_Init+0x198>)
 800711c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711e:	4a57      	ldr	r2, [pc, #348]	; (800727c <HAL_OPAMP_Init+0x198>)
 8007120:	f043 0301 	orr.w	r3, r3, #1
 8007124:	6613      	str	r3, [r2, #96]	; 0x60
 8007126:	4b55      	ldr	r3, [pc, #340]	; (800727c <HAL_OPAMP_Init+0x198>)
 8007128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fd f880 	bl	800424c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d003      	beq.n	800715c <HAL_OPAMP_Init+0x78>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	2b60      	cmp	r3, #96	; 0x60
 800715a:	d133      	bne.n	80071c4 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 0110 	bic.w	r1, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4b41      	ldr	r3, [pc, #260]	; (8007280 <HAL_OPAMP_Init+0x19c>)
 800717a:	4013      	ands	r3, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6851      	ldr	r1, [r2, #4]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6892      	ldr	r2, [r2, #8]
 8007184:	4311      	orrs	r1, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6912      	ldr	r2, [r2, #16]
 800718a:	430a      	orrs	r2, r1
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	7d09      	ldrb	r1, [r1, #20]
 8007190:	2901      	cmp	r1, #1
 8007192:	d102      	bne.n	800719a <HAL_OPAMP_Init+0xb6>
 8007194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007198:	e000      	b.n	800719c <HAL_OPAMP_Init+0xb8>
 800719a:	2100      	movs	r1, #0
 800719c:	4311      	orrs	r1, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071a2:	4311      	orrs	r1, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80071a8:	4311      	orrs	r1, r2
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071ae:	04d2      	lsls	r2, r2, #19
 80071b0:	4311      	orrs	r1, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071b6:	0612      	lsls	r2, r2, #24
 80071b8:	4311      	orrs	r1, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	430b      	orrs	r3, r1
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	e035      	b.n	8007230 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f023 0110 	bic.w	r1, r3, #16
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b27      	ldr	r3, [pc, #156]	; (8007280 <HAL_OPAMP_Init+0x19c>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6851      	ldr	r1, [r2, #4]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6892      	ldr	r2, [r2, #8]
 80071ec:	4311      	orrs	r1, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68d2      	ldr	r2, [r2, #12]
 80071f2:	4311      	orrs	r1, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6912      	ldr	r2, [r2, #16]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	7d09      	ldrb	r1, [r1, #20]
 80071fe:	2901      	cmp	r1, #1
 8007200:	d102      	bne.n	8007208 <HAL_OPAMP_Init+0x124>
 8007202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007206:	e000      	b.n	800720a <HAL_OPAMP_Init+0x126>
 8007208:	2100      	movs	r1, #0
 800720a:	4311      	orrs	r1, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007210:	4311      	orrs	r1, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007216:	4311      	orrs	r1, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800721c:	04d2      	lsls	r2, r2, #19
 800721e:	4311      	orrs	r1, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007224:	0612      	lsls	r2, r2, #24
 8007226:	4311      	orrs	r1, r2
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6812      	ldr	r2, [r2, #0]
 800722c:	430b      	orrs	r3, r1
 800722e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	db10      	blt.n	800725c <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699a      	ldr	r2, [r3, #24]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
 8007280:	e0003e11 	.word	0xe0003e11

08007284 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	e01d      	b.n	80072d8 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d102      	bne.n	80072ae <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	e014      	b.n	80072d8 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10c      	bne.n	80072d4 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0201 	orr.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2204      	movs	r2, #4
 80072ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80072d2:	e001      	b.n	80072d8 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d141      	bne.n	800737a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072f6:	4b4b      	ldr	r3, [pc, #300]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80072fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007302:	d131      	bne.n	8007368 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007304:	4b47      	ldr	r3, [pc, #284]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800730a:	4a46      	ldr	r2, [pc, #280]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007314:	4b43      	ldr	r3, [pc, #268]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800731c:	4a41      	ldr	r2, [pc, #260]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800731e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007324:	4b40      	ldr	r3, [pc, #256]	; (8007428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2232      	movs	r2, #50	; 0x32
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	4a3f      	ldr	r2, [pc, #252]	; (800742c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007330:	fba2 2303 	umull	r2, r3, r2, r3
 8007334:	0c9b      	lsrs	r3, r3, #18
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800733a:	e002      	b.n	8007342 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b01      	subs	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007342:	4b38      	ldr	r3, [pc, #224]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734e:	d102      	bne.n	8007356 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1f2      	bne.n	800733c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007356:	4b33      	ldr	r3, [pc, #204]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800735e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007362:	d158      	bne.n	8007416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e057      	b.n	8007418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007368:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800736a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736e:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007378:	e04d      	b.n	8007416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007380:	d141      	bne.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007382:	4b28      	ldr	r3, [pc, #160]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800738a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738e:	d131      	bne.n	80073f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007390:	4b24      	ldr	r3, [pc, #144]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007396:	4a23      	ldr	r2, [pc, #140]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800739c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073a0:	4b20      	ldr	r3, [pc, #128]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073a8:	4a1e      	ldr	r2, [pc, #120]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073b0:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2232      	movs	r2, #50	; 0x32
 80073b6:	fb02 f303 	mul.w	r3, r2, r3
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	0c9b      	lsrs	r3, r3, #18
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073c6:	e002      	b.n	80073ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073da:	d102      	bne.n	80073e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f2      	bne.n	80073c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ee:	d112      	bne.n	8007416 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e011      	b.n	8007418 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073fa:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007404:	e007      	b.n	8007416 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007406:	4b07      	ldr	r3, [pc, #28]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800740e:	4a05      	ldr	r2, [pc, #20]	; (8007424 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007414:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40007000 	.word	0x40007000
 8007428:	20000008 	.word	0x20000008
 800742c:	431bde83 	.word	0x431bde83

08007430 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	4a04      	ldr	r2, [pc, #16]	; (800744c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800743a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800743e:	6093      	str	r3, [r2, #8]
}
 8007440:	bf00      	nop
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40007000 	.word	0x40007000

08007450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e308      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d075      	beq.n	800755a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800746e:	4ba3      	ldr	r3, [pc, #652]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007478:	4ba0      	ldr	r3, [pc, #640]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b0c      	cmp	r3, #12
 8007486:	d102      	bne.n	800748e <HAL_RCC_OscConfig+0x3e>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b03      	cmp	r3, #3
 800748c:	d002      	beq.n	8007494 <HAL_RCC_OscConfig+0x44>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d10b      	bne.n	80074ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007494:	4b99      	ldr	r3, [pc, #612]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d05b      	beq.n	8007558 <HAL_RCC_OscConfig+0x108>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d157      	bne.n	8007558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e2e3      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b4:	d106      	bne.n	80074c4 <HAL_RCC_OscConfig+0x74>
 80074b6:	4b91      	ldr	r3, [pc, #580]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a90      	ldr	r2, [pc, #576]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e01d      	b.n	8007500 <HAL_RCC_OscConfig+0xb0>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074cc:	d10c      	bne.n	80074e8 <HAL_RCC_OscConfig+0x98>
 80074ce:	4b8b      	ldr	r3, [pc, #556]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a8a      	ldr	r2, [pc, #552]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	4b88      	ldr	r3, [pc, #544]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a87      	ldr	r2, [pc, #540]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e00b      	b.n	8007500 <HAL_RCC_OscConfig+0xb0>
 80074e8:	4b84      	ldr	r3, [pc, #528]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a83      	ldr	r2, [pc, #524]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	4b81      	ldr	r3, [pc, #516]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a80      	ldr	r2, [pc, #512]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80074fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d013      	beq.n	8007530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fd f912 	bl	8004730 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007510:	f7fd f90e 	bl	8004730 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b64      	cmp	r3, #100	; 0x64
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e2a8      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007522:	4b76      	ldr	r3, [pc, #472]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0xc0>
 800752e:	e014      	b.n	800755a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fd f8fe 	bl	8004730 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007538:	f7fd f8fa 	bl	8004730 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e294      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800754a:	4b6c      	ldr	r3, [pc, #432]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0xe8>
 8007556:	e000      	b.n	800755a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d075      	beq.n	8007652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007566:	4b65      	ldr	r3, [pc, #404]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 030c 	and.w	r3, r3, #12
 800756e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007570:	4b62      	ldr	r3, [pc, #392]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b0c      	cmp	r3, #12
 800757e:	d102      	bne.n	8007586 <HAL_RCC_OscConfig+0x136>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d002      	beq.n	800758c <HAL_RCC_OscConfig+0x13c>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b04      	cmp	r3, #4
 800758a:	d11f      	bne.n	80075cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800758c:	4b5b      	ldr	r3, [pc, #364]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_OscConfig+0x154>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e267      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075a4:	4b55      	ldr	r3, [pc, #340]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	4952      	ldr	r1, [pc, #328]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80075b8:	4b51      	ldr	r3, [pc, #324]	; (8007700 <HAL_RCC_OscConfig+0x2b0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fd f86b 	bl	8004698 <HAL_InitTick>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d043      	beq.n	8007650 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e253      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d023      	beq.n	800761c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d4:	4b49      	ldr	r3, [pc, #292]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a48      	ldr	r2, [pc, #288]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80075da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e0:	f7fd f8a6 	bl	8004730 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075e8:	f7fd f8a2 	bl	8004730 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e23c      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075fa:	4b40      	ldr	r3, [pc, #256]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f0      	beq.n	80075e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007606:	4b3d      	ldr	r3, [pc, #244]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	061b      	lsls	r3, r3, #24
 8007614:	4939      	ldr	r1, [pc, #228]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007616:	4313      	orrs	r3, r2
 8007618:	604b      	str	r3, [r1, #4]
 800761a:	e01a      	b.n	8007652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761c:	4b37      	ldr	r3, [pc, #220]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a36      	ldr	r2, [pc, #216]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fd f882 	bl	8004730 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007630:	f7fd f87e 	bl	8004730 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b02      	cmp	r3, #2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e218      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007642:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1f0      	bne.n	8007630 <HAL_RCC_OscConfig+0x1e0>
 800764e:	e000      	b.n	8007652 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0308 	and.w	r3, r3, #8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d03c      	beq.n	80076d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007666:	4b25      	ldr	r3, [pc, #148]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800766c:	4a23      	ldr	r2, [pc, #140]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007676:	f7fd f85b 	bl	8004730 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800767e:	f7fd f857 	bl	8004730 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e1f1      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 8007692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0ef      	beq.n	800767e <HAL_RCC_OscConfig+0x22e>
 800769e:	e01b      	b.n	80076d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076a0:	4b16      	ldr	r3, [pc, #88]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80076a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a6:	4a15      	ldr	r2, [pc, #84]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b0:	f7fd f83e 	bl	8004730 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076b8:	f7fd f83a 	bl	8004730 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e1d4      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076ca:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80076cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1ef      	bne.n	80076b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80ab 	beq.w	800783c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e6:	2300      	movs	r3, #0
 80076e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076ea:	4b04      	ldr	r3, [pc, #16]	; (80076fc <HAL_RCC_OscConfig+0x2ac>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_RCC_OscConfig+0x2b4>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e005      	b.n	8007706 <HAL_RCC_OscConfig+0x2b6>
 80076fa:	bf00      	nop
 80076fc:	40021000 	.word	0x40021000
 8007700:	2000000c 	.word	0x2000000c
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800770a:	4baf      	ldr	r3, [pc, #700]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800770c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770e:	4aae      	ldr	r2, [pc, #696]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007714:	6593      	str	r3, [r2, #88]	; 0x58
 8007716:	4bac      	ldr	r3, [pc, #688]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007722:	2301      	movs	r3, #1
 8007724:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007726:	4ba9      	ldr	r3, [pc, #676]	; (80079cc <HAL_RCC_OscConfig+0x57c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772e:	2b00      	cmp	r3, #0
 8007730:	d118      	bne.n	8007764 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007732:	4ba6      	ldr	r3, [pc, #664]	; (80079cc <HAL_RCC_OscConfig+0x57c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4aa5      	ldr	r2, [pc, #660]	; (80079cc <HAL_RCC_OscConfig+0x57c>)
 8007738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800773e:	f7fc fff7 	bl	8004730 <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007744:	e008      	b.n	8007758 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007746:	f7fc fff3 	bl	8004730 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d901      	bls.n	8007758 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e18d      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007758:	4b9c      	ldr	r3, [pc, #624]	; (80079cc <HAL_RCC_OscConfig+0x57c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0f0      	beq.n	8007746 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d108      	bne.n	800777e <HAL_RCC_OscConfig+0x32e>
 800776c:	4b96      	ldr	r3, [pc, #600]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007772:	4a95      	ldr	r2, [pc, #596]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800777c:	e024      	b.n	80077c8 <HAL_RCC_OscConfig+0x378>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	2b05      	cmp	r3, #5
 8007784:	d110      	bne.n	80077a8 <HAL_RCC_OscConfig+0x358>
 8007786:	4b90      	ldr	r3, [pc, #576]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778c:	4a8e      	ldr	r2, [pc, #568]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800778e:	f043 0304 	orr.w	r3, r3, #4
 8007792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007796:	4b8c      	ldr	r3, [pc, #560]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779c:	4a8a      	ldr	r2, [pc, #552]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800779e:	f043 0301 	orr.w	r3, r3, #1
 80077a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077a6:	e00f      	b.n	80077c8 <HAL_RCC_OscConfig+0x378>
 80077a8:	4b87      	ldr	r3, [pc, #540]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ae:	4a86      	ldr	r2, [pc, #536]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80077b0:	f023 0301 	bic.w	r3, r3, #1
 80077b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077b8:	4b83      	ldr	r3, [pc, #524]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	4a82      	ldr	r2, [pc, #520]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80077c0:	f023 0304 	bic.w	r3, r3, #4
 80077c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d016      	beq.n	80077fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d0:	f7fc ffae 	bl	8004730 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077d6:	e00a      	b.n	80077ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077d8:	f7fc ffaa 	bl	8004730 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e142      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077ee:	4b76      	ldr	r3, [pc, #472]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0ed      	beq.n	80077d8 <HAL_RCC_OscConfig+0x388>
 80077fc:	e015      	b.n	800782a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077fe:	f7fc ff97 	bl	8004730 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007804:	e00a      	b.n	800781c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007806:	f7fc ff93 	bl	8004730 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	f241 3288 	movw	r2, #5000	; 0x1388
 8007814:	4293      	cmp	r3, r2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e12b      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800781c:	4b6a      	ldr	r3, [pc, #424]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1ed      	bne.n	8007806 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800782a:	7ffb      	ldrb	r3, [r7, #31]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d105      	bne.n	800783c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007830:	4b65      	ldr	r3, [pc, #404]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007834:	4a64      	ldr	r2, [pc, #400]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d03c      	beq.n	80078c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01c      	beq.n	800788a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007850:	4b5d      	ldr	r3, [pc, #372]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007856:	4a5c      	ldr	r2, [pc, #368]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007860:	f7fc ff66 	bl	8004730 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007868:	f7fc ff62 	bl	8004730 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e0fc      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800787a:	4b53      	ldr	r3, [pc, #332]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800787c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0ef      	beq.n	8007868 <HAL_RCC_OscConfig+0x418>
 8007888:	e01b      	b.n	80078c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800788a:	4b4f      	ldr	r3, [pc, #316]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800788c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007890:	4a4d      	ldr	r2, [pc, #308]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789a:	f7fc ff49 	bl	8004730 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078a2:	f7fc ff45 	bl	8004730 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0df      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078b4:	4b44      	ldr	r3, [pc, #272]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80078b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1ef      	bne.n	80078a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80d3 	beq.w	8007a72 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078cc:	4b3e      	ldr	r3, [pc, #248]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 030c 	and.w	r3, r3, #12
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	f000 808d 	beq.w	80079f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d15a      	bne.n	8007998 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e2:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80078e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ee:	f7fc ff1f 	bl	8004730 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f6:	f7fc ff1b 	bl	8004730 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e0b5      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007908:	4b2f      	ldr	r3, [pc, #188]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007914:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	4b2d      	ldr	r3, [pc, #180]	; (80079d0 <HAL_RCC_OscConfig+0x580>)
 800791a:	4013      	ands	r3, r2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6a11      	ldr	r1, [r2, #32]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007924:	3a01      	subs	r2, #1
 8007926:	0112      	lsls	r2, r2, #4
 8007928:	4311      	orrs	r1, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800792e:	0212      	lsls	r2, r2, #8
 8007930:	4311      	orrs	r1, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007936:	0852      	lsrs	r2, r2, #1
 8007938:	3a01      	subs	r2, #1
 800793a:	0552      	lsls	r2, r2, #21
 800793c:	4311      	orrs	r1, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007942:	0852      	lsrs	r2, r2, #1
 8007944:	3a01      	subs	r2, #1
 8007946:	0652      	lsls	r2, r2, #25
 8007948:	4311      	orrs	r1, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800794e:	06d2      	lsls	r2, r2, #27
 8007950:	430a      	orrs	r2, r1
 8007952:	491d      	ldr	r1, [pc, #116]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007954:	4313      	orrs	r3, r2
 8007956:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007958:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1a      	ldr	r2, [pc, #104]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800795e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007962:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007964:	4b18      	ldr	r3, [pc, #96]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800796a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800796e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007970:	f7fc fede 	bl	8004730 <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007978:	f7fc feda 	bl	8004730 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b02      	cmp	r3, #2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e074      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800798a:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0f0      	beq.n	8007978 <HAL_RCC_OscConfig+0x528>
 8007996:	e06c      	b.n	8007a72 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 800799e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80079a4:	4b08      	ldr	r3, [pc, #32]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4a07      	ldr	r2, [pc, #28]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80079aa:	f023 0303 	bic.w	r3, r3, #3
 80079ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	4a04      	ldr	r2, [pc, #16]	; (80079c8 <HAL_RCC_OscConfig+0x578>)
 80079b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80079ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c0:	f7fc feb6 	bl	8004730 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079c6:	e00e      	b.n	80079e6 <HAL_RCC_OscConfig+0x596>
 80079c8:	40021000 	.word	0x40021000
 80079cc:	40007000 	.word	0x40007000
 80079d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d4:	f7fc feac 	bl	8004730 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e046      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e6:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <HAL_RCC_OscConfig+0x62c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <HAL_RCC_OscConfig+0x584>
 80079f2:	e03e      	b.n	8007a72 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e039      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007a00:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <HAL_RCC_OscConfig+0x62c>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f003 0203 	and.w	r2, r3, #3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d12c      	bne.n	8007a6e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d123      	bne.n	8007a6e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d11b      	bne.n	8007a6e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d113      	bne.n	8007a6e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	3b01      	subs	r3, #1
 8007a54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d109      	bne.n	8007a6e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	3b01      	subs	r3, #1
 8007a68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d001      	beq.n	8007a72 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40021000 	.word	0x40021000

08007a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e11e      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a98:	4b91      	ldr	r3, [pc, #580]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d910      	bls.n	8007ac8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aa6:	4b8e      	ldr	r3, [pc, #568]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f023 020f 	bic.w	r2, r3, #15
 8007aae:	498c      	ldr	r1, [pc, #560]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab6:	4b8a      	ldr	r3, [pc, #552]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e106      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d073      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d129      	bne.n	8007b30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007adc:	4b81      	ldr	r3, [pc, #516]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e0f4      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007aec:	f000 f99e 	bl	8007e2c <RCC_GetSysClockFreqFromPLLSource>
 8007af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	4a7c      	ldr	r2, [pc, #496]	; (8007ce8 <HAL_RCC_ClockConfig+0x268>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d93f      	bls.n	8007b7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007afa:	4b7a      	ldr	r3, [pc, #488]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d033      	beq.n	8007b7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d12f      	bne.n	8007b7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b1a:	4b72      	ldr	r3, [pc, #456]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b22:	4a70      	ldr	r2, [pc, #448]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b2a:	2380      	movs	r3, #128	; 0x80
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e024      	b.n	8007b7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d107      	bne.n	8007b48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b38:	4b6a      	ldr	r3, [pc, #424]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d109      	bne.n	8007b58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e0c6      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b48:	4b66      	ldr	r3, [pc, #408]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0be      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007b58:	f000 f8ce 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007b5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	4a61      	ldr	r2, [pc, #388]	; (8007ce8 <HAL_RCC_ClockConfig+0x268>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d909      	bls.n	8007b7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b66:	4b5f      	ldr	r3, [pc, #380]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b6e:	4a5d      	ldr	r2, [pc, #372]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b7a:	4b5a      	ldr	r3, [pc, #360]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f023 0203 	bic.w	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	4957      	ldr	r1, [pc, #348]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8c:	f7fc fdd0 	bl	8004730 <HAL_GetTick>
 8007b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b92:	e00a      	b.n	8007baa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b94:	f7fc fdcc 	bl	8004730 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e095      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007baa:	4b4e      	ldr	r3, [pc, #312]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 020c 	and.w	r2, r3, #12
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d1eb      	bne.n	8007b94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d023      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bd4:	4b43      	ldr	r3, [pc, #268]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	4a42      	ldr	r2, [pc, #264]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007bda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d007      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007bec:	4b3d      	ldr	r3, [pc, #244]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bf4:	4a3b      	ldr	r2, [pc, #236]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bfc:	4b39      	ldr	r3, [pc, #228]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	4936      	ldr	r1, [pc, #216]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	608b      	str	r3, [r1, #8]
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	2b80      	cmp	r3, #128	; 0x80
 8007c14:	d105      	bne.n	8007c22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c16:	4b33      	ldr	r3, [pc, #204]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	4a32      	ldr	r2, [pc, #200]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c22:	4b2f      	ldr	r3, [pc, #188]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d21d      	bcs.n	8007c6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c30:	4b2b      	ldr	r3, [pc, #172]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f023 020f 	bic.w	r2, r3, #15
 8007c38:	4929      	ldr	r1, [pc, #164]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c40:	f7fc fd76 	bl	8004730 <HAL_GetTick>
 8007c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c46:	e00a      	b.n	8007c5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c48:	f7fc fd72 	bl	8004730 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e03b      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5e:	4b20      	ldr	r3, [pc, #128]	; (8007ce0 <HAL_RCC_ClockConfig+0x260>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d1ed      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c78:	4b1a      	ldr	r3, [pc, #104]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	4917      	ldr	r1, [pc, #92]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d009      	beq.n	8007caa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	490f      	ldr	r1, [pc, #60]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007caa:	f000 f825 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007cae:	4601      	mov	r1, r0
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <HAL_RCC_ClockConfig+0x264>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	091b      	lsrs	r3, r3, #4
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	4a0c      	ldr	r2, [pc, #48]	; (8007cec <HAL_RCC_ClockConfig+0x26c>)
 8007cbc:	5cd3      	ldrb	r3, [r2, r3]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8007cc6:	4a0a      	ldr	r2, [pc, #40]	; (8007cf0 <HAL_RCC_ClockConfig+0x270>)
 8007cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <HAL_RCC_ClockConfig+0x274>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fc fce2 	bl	8004698 <HAL_InitTick>
 8007cd4:	4603      	mov	r3, r0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40022000 	.word	0x40022000
 8007ce4:	40021000 	.word	0x40021000
 8007ce8:	04c4b400 	.word	0x04c4b400
 8007cec:	0800aed4 	.word	0x0800aed4
 8007cf0:	20000008 	.word	0x20000008
 8007cf4:	2000000c 	.word	0x2000000c

08007cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007cfe:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d102      	bne.n	8007d10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d0a:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	e047      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d10:	4b27      	ldr	r3, [pc, #156]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 030c 	and.w	r3, r3, #12
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d102      	bne.n	8007d22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d1c:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	e03e      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d22:	4b23      	ldr	r3, [pc, #140]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 030c 	and.w	r3, r3, #12
 8007d2a:	2b0c      	cmp	r3, #12
 8007d2c:	d136      	bne.n	8007d9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d2e:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d38:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	3301      	adds	r3, #1
 8007d44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d10c      	bne.n	8007d66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d4c:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d56:	68d2      	ldr	r2, [r2, #12]
 8007d58:	0a12      	lsrs	r2, r2, #8
 8007d5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	617b      	str	r3, [r7, #20]
      break;
 8007d64:	e00c      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d66:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6e:	4a10      	ldr	r2, [pc, #64]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d70:	68d2      	ldr	r2, [r2, #12]
 8007d72:	0a12      	lsrs	r2, r2, #8
 8007d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]
      break;
 8007d7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	0e5b      	lsrs	r3, r3, #25
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	e001      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007da0:	693b      	ldr	r3, [r7, #16]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40021000 	.word	0x40021000
 8007db4:	00f42400 	.word	0x00f42400
 8007db8:	007a1200 	.word	0x007a1200

08007dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dc0:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000008 	.word	0x20000008

08007dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007dd8:	f7ff fff0 	bl	8007dbc <HAL_RCC_GetHCLKFreq>
 8007ddc:	4601      	mov	r1, r0
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	4a04      	ldr	r2, [pc, #16]	; (8007dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dea:	5cd3      	ldrb	r3, [r2, r3]
 8007dec:	f003 031f 	and.w	r3, r3, #31
 8007df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	0800aee4 	.word	0x0800aee4

08007e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e04:	f7ff ffda 	bl	8007dbc <HAL_RCC_GetHCLKFreq>
 8007e08:	4601      	mov	r1, r0
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	0adb      	lsrs	r3, r3, #11
 8007e10:	f003 0307 	and.w	r3, r3, #7
 8007e14:	4a04      	ldr	r2, [pc, #16]	; (8007e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e16:	5cd3      	ldrb	r3, [r2, r3]
 8007e18:	f003 031f 	and.w	r3, r3, #31
 8007e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40021000 	.word	0x40021000
 8007e28:	0800aee4 	.word	0x0800aee4

08007e2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e32:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	091b      	lsrs	r3, r3, #4
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d10c      	bne.n	8007e6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e50:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e58:	4a14      	ldr	r2, [pc, #80]	; (8007eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e5a:	68d2      	ldr	r2, [r2, #12]
 8007e5c:	0a12      	lsrs	r2, r2, #8
 8007e5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e62:	fb02 f303 	mul.w	r3, r2, r3
 8007e66:	617b      	str	r3, [r7, #20]
    break;
 8007e68:	e00c      	b.n	8007e84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e6a:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e74:	68d2      	ldr	r2, [r2, #12]
 8007e76:	0a12      	lsrs	r2, r2, #8
 8007e78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]
    break;
 8007e82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e84:	4b09      	ldr	r3, [pc, #36]	; (8007eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	0e5b      	lsrs	r3, r3, #25
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	3301      	adds	r3, #1
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007e9e:	687b      	ldr	r3, [r7, #4]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	007a1200 	.word	0x007a1200
 8007eb4:	00f42400 	.word	0x00f42400

08007eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8098 	beq.w	8008006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eda:	4b43      	ldr	r3, [pc, #268]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10d      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ee6:	4b40      	ldr	r3, [pc, #256]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	4a3f      	ldr	r2, [pc, #252]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ef2:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efa:	60bb      	str	r3, [r7, #8]
 8007efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007efe:	2301      	movs	r3, #1
 8007f00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f02:	4b3a      	ldr	r3, [pc, #232]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a39      	ldr	r2, [pc, #228]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f0e:	f7fc fc0f 	bl	8004730 <HAL_GetTick>
 8007f12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f14:	e009      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f16:	f7fc fc0b 	bl	8004730 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d902      	bls.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	74fb      	strb	r3, [r7, #19]
        break;
 8007f28:	e005      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f2a:	4b30      	ldr	r3, [pc, #192]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0ef      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007f36:	7cfb      	ldrb	r3, [r7, #19]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d159      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01e      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d019      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f58:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f64:	4b20      	ldr	r3, [pc, #128]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6a:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f96:	f7fc fbcb 	bl	8004730 <HAL_GetTick>
 8007f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f9c:	e00b      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9e:	f7fc fbc7 	bl	8004730 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d902      	bls.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8007fb4:	e006      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0ec      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007fc4:	7cfb      	ldrb	r3, [r7, #19]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10b      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007fe0:	e008      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fe2:	7cfb      	ldrb	r3, [r7, #19]
 8007fe4:	74bb      	strb	r3, [r7, #18]
 8007fe6:	e005      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	7cfb      	ldrb	r3, [r7, #19]
 8007ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ff4:	7c7b      	ldrb	r3, [r7, #17]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d105      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ffa:	4ba6      	ldr	r3, [pc, #664]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	4aa5      	ldr	r2, [pc, #660]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008012:	4ba0      	ldr	r3, [pc, #640]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008018:	f023 0203 	bic.w	r2, r3, #3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	499c      	ldr	r1, [pc, #624]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008034:	4b97      	ldr	r3, [pc, #604]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f023 020c 	bic.w	r2, r3, #12
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	4994      	ldr	r1, [pc, #592]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008056:	4b8f      	ldr	r3, [pc, #572]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	498b      	ldr	r1, [pc, #556]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008078:	4b86      	ldr	r3, [pc, #536]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	4983      	ldr	r1, [pc, #524]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800809a:	4b7e      	ldr	r3, [pc, #504]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	497a      	ldr	r1, [pc, #488]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080bc:	4b75      	ldr	r3, [pc, #468]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	4972      	ldr	r1, [pc, #456]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080de:	4b6d      	ldr	r3, [pc, #436]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	4969      	ldr	r1, [pc, #420]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008100:	4b64      	ldr	r3, [pc, #400]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008106:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	4961      	ldr	r1, [pc, #388]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008122:	4b5c      	ldr	r3, [pc, #368]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	4958      	ldr	r1, [pc, #352]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008144:	4b53      	ldr	r3, [pc, #332]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	4950      	ldr	r1, [pc, #320]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008162:	d105      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008164:	4b4b      	ldr	r3, [pc, #300]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	4a4a      	ldr	r2, [pc, #296]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008178:	2b00      	cmp	r3, #0
 800817a:	d015      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800817c:	4b45      	ldr	r3, [pc, #276]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800817e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4942      	ldr	r1, [pc, #264]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819a:	d105      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800819c:	4b3d      	ldr	r3, [pc, #244]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4a3c      	ldr	r2, [pc, #240]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d015      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081b4:	4b37      	ldr	r3, [pc, #220]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	4934      	ldr	r1, [pc, #208]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081d2:	d105      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081d4:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4a2e      	ldr	r2, [pc, #184]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d015      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081ec:	4b29      	ldr	r3, [pc, #164]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fa:	4926      	ldr	r1, [pc, #152]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800820a:	d105      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800820c:	4b21      	ldr	r3, [pc, #132]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008224:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	4918      	ldr	r1, [pc, #96]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008242:	d105      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008244:	4b13      	ldr	r3, [pc, #76]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a12      	ldr	r2, [pc, #72]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d015      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	490a      	ldr	r1, [pc, #40]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800827a:	d105      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a04      	ldr	r2, [pc, #16]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008286:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008288:	7cbb      	ldrb	r3, [r7, #18]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000

08008298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e049      	b.n	800833e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7fb fff6 	bl	80042b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f000 fdd4 	bl	8008e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b01      	cmp	r3, #1
 800835a:	d001      	beq.n	8008360 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e042      	b.n	80083e6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a21      	ldr	r2, [pc, #132]	; (80083f4 <HAL_TIM_Base_Start+0xac>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d018      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837a:	d013      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <HAL_TIM_Base_Start+0xb0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00e      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1c      	ldr	r2, [pc, #112]	; (80083fc <HAL_TIM_Base_Start+0xb4>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1a      	ldr	r2, [pc, #104]	; (8008400 <HAL_TIM_Base_Start+0xb8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIM_Base_Start+0x5c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a19      	ldr	r2, [pc, #100]	; (8008404 <HAL_TIM_Base_Start+0xbc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d115      	bne.n	80083d0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	4b17      	ldr	r3, [pc, #92]	; (8008408 <HAL_TIM_Base_Start+0xc0>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b06      	cmp	r3, #6
 80083b4:	d015      	beq.n	80083e2 <HAL_TIM_Base_Start+0x9a>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083bc:	d011      	beq.n	80083e2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0201 	orr.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ce:	e008      	b.n	80083e2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0201 	orr.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	e000      	b.n	80083e4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	40012c00 	.word	0x40012c00
 80083f8:	40000400 	.word	0x40000400
 80083fc:	40000800 	.word	0x40000800
 8008400:	40013400 	.word	0x40013400
 8008404:	40014000 	.word	0x40014000
 8008408:	00010007 	.word	0x00010007

0800840c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e049      	b.n	80084b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f841 	bl	80084ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f000 fd1a 	bl	8008e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_TIM_PWM_Start_IT+0x24>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	bf14      	ite	ne
 80084ec:	2301      	movne	r3, #1
 80084ee:	2300      	moveq	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	e03c      	b.n	800856e <HAL_TIM_PWM_Start_IT+0x9e>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d109      	bne.n	800850e <HAL_TIM_PWM_Start_IT+0x3e>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b01      	cmp	r3, #1
 8008504:	bf14      	ite	ne
 8008506:	2301      	movne	r3, #1
 8008508:	2300      	moveq	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	e02f      	b.n	800856e <HAL_TIM_PWM_Start_IT+0x9e>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d109      	bne.n	8008528 <HAL_TIM_PWM_Start_IT+0x58>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	bf14      	ite	ne
 8008520:	2301      	movne	r3, #1
 8008522:	2300      	moveq	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	e022      	b.n	800856e <HAL_TIM_PWM_Start_IT+0x9e>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b0c      	cmp	r3, #12
 800852c:	d109      	bne.n	8008542 <HAL_TIM_PWM_Start_IT+0x72>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b01      	cmp	r3, #1
 8008538:	bf14      	ite	ne
 800853a:	2301      	movne	r3, #1
 800853c:	2300      	moveq	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	e015      	b.n	800856e <HAL_TIM_PWM_Start_IT+0x9e>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b10      	cmp	r3, #16
 8008546:	d109      	bne.n	800855c <HAL_TIM_PWM_Start_IT+0x8c>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	e008      	b.n	800856e <HAL_TIM_PWM_Start_IT+0x9e>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008562:	b2db      	uxtb	r3, r3
 8008564:	2b01      	cmp	r3, #1
 8008566:	bf14      	ite	ne
 8008568:	2301      	movne	r3, #1
 800856a:	2300      	moveq	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e0dd      	b.n	8008732 <HAL_TIM_PWM_Start_IT+0x262>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <HAL_TIM_PWM_Start_IT+0xb6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008584:	e023      	b.n	80085ce <HAL_TIM_PWM_Start_IT+0xfe>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b04      	cmp	r3, #4
 800858a:	d104      	bne.n	8008596 <HAL_TIM_PWM_Start_IT+0xc6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008594:	e01b      	b.n	80085ce <HAL_TIM_PWM_Start_IT+0xfe>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b08      	cmp	r3, #8
 800859a:	d104      	bne.n	80085a6 <HAL_TIM_PWM_Start_IT+0xd6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085a4:	e013      	b.n	80085ce <HAL_TIM_PWM_Start_IT+0xfe>
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b0c      	cmp	r3, #12
 80085aa:	d104      	bne.n	80085b6 <HAL_TIM_PWM_Start_IT+0xe6>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085b4:	e00b      	b.n	80085ce <HAL_TIM_PWM_Start_IT+0xfe>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_PWM_Start_IT+0xf6>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c4:	e003      	b.n	80085ce <HAL_TIM_PWM_Start_IT+0xfe>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b0c      	cmp	r3, #12
 80085d2:	d841      	bhi.n	8008658 <HAL_TIM_PWM_Start_IT+0x188>
 80085d4:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <HAL_TIM_PWM_Start_IT+0x10c>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	08008611 	.word	0x08008611
 80085e0:	08008659 	.word	0x08008659
 80085e4:	08008659 	.word	0x08008659
 80085e8:	08008659 	.word	0x08008659
 80085ec:	08008623 	.word	0x08008623
 80085f0:	08008659 	.word	0x08008659
 80085f4:	08008659 	.word	0x08008659
 80085f8:	08008659 	.word	0x08008659
 80085fc:	08008635 	.word	0x08008635
 8008600:	08008659 	.word	0x08008659
 8008604:	08008659 	.word	0x08008659
 8008608:	08008659 	.word	0x08008659
 800860c:	08008647 	.word	0x08008647
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0202 	orr.w	r2, r2, #2
 800861e:	60da      	str	r2, [r3, #12]
      break;
 8008620:	e01b      	b.n	800865a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f042 0204 	orr.w	r2, r2, #4
 8008630:	60da      	str	r2, [r3, #12]
      break;
 8008632:	e012      	b.n	800865a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0208 	orr.w	r2, r2, #8
 8008642:	60da      	str	r2, [r3, #12]
      break;
 8008644:	e009      	b.n	800865a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0210 	orr.w	r2, r2, #16
 8008654:	60da      	str	r2, [r3, #12]
      break;
 8008656:	e000      	b.n	800865a <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8008658:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2201      	movs	r2, #1
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f830 	bl	80096c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a33      	ldr	r2, [pc, #204]	; (800873c <HAL_TIM_PWM_Start_IT+0x26c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d013      	beq.n	800869a <HAL_TIM_PWM_Start_IT+0x1ca>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a32      	ldr	r2, [pc, #200]	; (8008740 <HAL_TIM_PWM_Start_IT+0x270>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00e      	beq.n	800869a <HAL_TIM_PWM_Start_IT+0x1ca>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a30      	ldr	r2, [pc, #192]	; (8008744 <HAL_TIM_PWM_Start_IT+0x274>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d009      	beq.n	800869a <HAL_TIM_PWM_Start_IT+0x1ca>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a2f      	ldr	r2, [pc, #188]	; (8008748 <HAL_TIM_PWM_Start_IT+0x278>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d004      	beq.n	800869a <HAL_TIM_PWM_Start_IT+0x1ca>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a2d      	ldr	r2, [pc, #180]	; (800874c <HAL_TIM_PWM_Start_IT+0x27c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d101      	bne.n	800869e <HAL_TIM_PWM_Start_IT+0x1ce>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a20      	ldr	r2, [pc, #128]	; (800873c <HAL_TIM_PWM_Start_IT+0x26c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d018      	beq.n	80086f0 <HAL_TIM_PWM_Start_IT+0x220>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c6:	d013      	beq.n	80086f0 <HAL_TIM_PWM_Start_IT+0x220>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a20      	ldr	r2, [pc, #128]	; (8008750 <HAL_TIM_PWM_Start_IT+0x280>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00e      	beq.n	80086f0 <HAL_TIM_PWM_Start_IT+0x220>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1f      	ldr	r2, [pc, #124]	; (8008754 <HAL_TIM_PWM_Start_IT+0x284>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d009      	beq.n	80086f0 <HAL_TIM_PWM_Start_IT+0x220>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a17      	ldr	r2, [pc, #92]	; (8008740 <HAL_TIM_PWM_Start_IT+0x270>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d004      	beq.n	80086f0 <HAL_TIM_PWM_Start_IT+0x220>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a16      	ldr	r2, [pc, #88]	; (8008744 <HAL_TIM_PWM_Start_IT+0x274>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d115      	bne.n	800871c <HAL_TIM_PWM_Start_IT+0x24c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689a      	ldr	r2, [r3, #8]
 80086f6:	4b18      	ldr	r3, [pc, #96]	; (8008758 <HAL_TIM_PWM_Start_IT+0x288>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b06      	cmp	r3, #6
 8008700:	d015      	beq.n	800872e <HAL_TIM_PWM_Start_IT+0x25e>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008708:	d011      	beq.n	800872e <HAL_TIM_PWM_Start_IT+0x25e>
    {
      __HAL_TIM_ENABLE(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871a:	e008      	b.n	800872e <HAL_TIM_PWM_Start_IT+0x25e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e000      	b.n	8008730 <HAL_TIM_PWM_Start_IT+0x260>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800872e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	40012c00 	.word	0x40012c00
 8008740:	40013400 	.word	0x40013400
 8008744:	40014000 	.word	0x40014000
 8008748:	40014400 	.word	0x40014400
 800874c:	40014800 	.word	0x40014800
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	00010007 	.word	0x00010007

0800875c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b02      	cmp	r3, #2
 8008770:	d122      	bne.n	80087b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b02      	cmp	r3, #2
 800877e:	d11b      	bne.n	80087b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0202 	mvn.w	r2, #2
 8008788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fb52 	bl	8008e48 <HAL_TIM_IC_CaptureCallback>
 80087a4:	e005      	b.n	80087b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fb44 	bl	8008e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb55 	bl	8008e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d122      	bne.n	800880c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d11b      	bne.n	800880c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0204 	mvn.w	r2, #4
 80087dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fb28 	bl	8008e48 <HAL_TIM_IC_CaptureCallback>
 80087f8:	e005      	b.n	8008806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fb1a 	bl	8008e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb2b 	bl	8008e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0308 	and.w	r3, r3, #8
 8008816:	2b08      	cmp	r3, #8
 8008818:	d122      	bne.n	8008860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b08      	cmp	r3, #8
 8008826:	d11b      	bne.n	8008860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f06f 0208 	mvn.w	r2, #8
 8008830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2204      	movs	r2, #4
 8008836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fafe 	bl	8008e48 <HAL_TIM_IC_CaptureCallback>
 800884c:	e005      	b.n	800885a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 faf0 	bl	8008e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fb01 	bl	8008e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b10      	cmp	r3, #16
 800886c:	d122      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b10      	cmp	r3, #16
 800887a:	d11b      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0210 	mvn.w	r2, #16
 8008884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2208      	movs	r2, #8
 800888a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fad4 	bl	8008e48 <HAL_TIM_IC_CaptureCallback>
 80088a0:	e005      	b.n	80088ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fac6 	bl	8008e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fad7 	bl	8008e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d10e      	bne.n	80088e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d107      	bne.n	80088e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0201 	mvn.w	r2, #1
 80088d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 faa0 	bl	8008e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b80      	cmp	r3, #128	; 0x80
 80088ec:	d10e      	bne.n	800890c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f8:	2b80      	cmp	r3, #128	; 0x80
 80088fa:	d107      	bne.n	800890c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 ff90 	bl	800982c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891a:	d10e      	bne.n	800893a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b80      	cmp	r3, #128	; 0x80
 8008928:	d107      	bne.n	800893a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 ff83 	bl	8009840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d10e      	bne.n	8008966 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	d107      	bne.n	8008966 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800895e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fa85 	bl	8008e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f003 0320 	and.w	r3, r3, #32
 8008970:	2b20      	cmp	r3, #32
 8008972:	d10e      	bne.n	8008992 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b20      	cmp	r3, #32
 8008980:	d107      	bne.n	8008992 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f06f 0220 	mvn.w	r2, #32
 800898a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 ff43 	bl	8009818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800899c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a0:	d10f      	bne.n	80089c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b0:	d107      	bne.n	80089c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80089ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 ff49 	bl	8009854 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d0:	d10f      	bne.n	80089f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089e0:	d107      	bne.n	80089f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80089ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 ff3b 	bl	8009868 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a00:	d10f      	bne.n	8008a22 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a10:	d107      	bne.n	8008a22 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 ff2d 	bl	800987c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a30:	d10f      	bne.n	8008a52 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a40:	d107      	bne.n	8008a52 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 ff1f 	bl	8009890 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e0fd      	b.n	8008c72 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b14      	cmp	r3, #20
 8008a82:	f200 80f0 	bhi.w	8008c66 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008ae1 	.word	0x08008ae1
 8008a90:	08008c67 	.word	0x08008c67
 8008a94:	08008c67 	.word	0x08008c67
 8008a98:	08008c67 	.word	0x08008c67
 8008a9c:	08008b21 	.word	0x08008b21
 8008aa0:	08008c67 	.word	0x08008c67
 8008aa4:	08008c67 	.word	0x08008c67
 8008aa8:	08008c67 	.word	0x08008c67
 8008aac:	08008b63 	.word	0x08008b63
 8008ab0:	08008c67 	.word	0x08008c67
 8008ab4:	08008c67 	.word	0x08008c67
 8008ab8:	08008c67 	.word	0x08008c67
 8008abc:	08008ba3 	.word	0x08008ba3
 8008ac0:	08008c67 	.word	0x08008c67
 8008ac4:	08008c67 	.word	0x08008c67
 8008ac8:	08008c67 	.word	0x08008c67
 8008acc:	08008be5 	.word	0x08008be5
 8008ad0:	08008c67 	.word	0x08008c67
 8008ad4:	08008c67 	.word	0x08008c67
 8008ad8:	08008c67 	.word	0x08008c67
 8008adc:	08008c25 	.word	0x08008c25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fa5c 	bl	8008fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0208 	orr.w	r2, r2, #8
 8008afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0204 	bic.w	r2, r2, #4
 8008b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6999      	ldr	r1, [r3, #24]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691a      	ldr	r2, [r3, #16]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	619a      	str	r2, [r3, #24]
      break;
 8008b1e:	e0a3      	b.n	8008c68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 facc 	bl	80090c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699a      	ldr	r2, [r3, #24]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6999      	ldr	r1, [r3, #24]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	021a      	lsls	r2, r3, #8
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	619a      	str	r2, [r3, #24]
      break;
 8008b60:	e082      	b.n	8008c68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fb35 	bl	80091d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0208 	orr.w	r2, r2, #8
 8008b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69da      	ldr	r2, [r3, #28]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0204 	bic.w	r2, r2, #4
 8008b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69d9      	ldr	r1, [r3, #28]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	61da      	str	r2, [r3, #28]
      break;
 8008ba0:	e062      	b.n	8008c68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fb9d 	bl	80092e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69da      	ldr	r2, [r3, #28]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69da      	ldr	r2, [r3, #28]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69d9      	ldr	r1, [r3, #28]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	021a      	lsls	r2, r3, #8
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	61da      	str	r2, [r3, #28]
      break;
 8008be2:	e041      	b.n	8008c68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fc06 	bl	80093fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0208 	orr.w	r2, r2, #8
 8008bfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0204 	bic.w	r2, r2, #4
 8008c0e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008c22:	e021      	b.n	8008c68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fc4a 	bl	80094c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	021a      	lsls	r2, r3, #8
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008c64:	e000      	b.n	8008c68 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop

08008c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_TIM_ConfigClockSource+0x18>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e0b9      	b.n	8008e08 <HAL_TIM_ConfigClockSource+0x18c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008cb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b70      	cmp	r3, #112	; 0x70
 8008cce:	d02e      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0xb2>
 8008cd0:	2b70      	cmp	r3, #112	; 0x70
 8008cd2:	d812      	bhi.n	8008cfa <HAL_TIM_ConfigClockSource+0x7e>
 8008cd4:	2b30      	cmp	r3, #48	; 0x30
 8008cd6:	f000 8084 	beq.w	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008cda:	2b30      	cmp	r3, #48	; 0x30
 8008cdc:	d806      	bhi.n	8008cec <HAL_TIM_ConfigClockSource+0x70>
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d07f      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d07d      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d07b      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008cea:	e084      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008cec:	2b50      	cmp	r3, #80	; 0x50
 8008cee:	d048      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0x106>
 8008cf0:	2b60      	cmp	r3, #96	; 0x60
 8008cf2:	d056      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0x126>
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d064      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8008cf8:	e07d      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008cfa:	4a45      	ldr	r2, [pc, #276]	; (8008e10 <HAL_TIM_ConfigClockSource+0x194>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d070      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008d00:	4a43      	ldr	r2, [pc, #268]	; (8008e10 <HAL_TIM_ConfigClockSource+0x194>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d809      	bhi.n	8008d1a <HAL_TIM_ConfigClockSource+0x9e>
 8008d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0a:	d027      	beq.n	8008d5c <HAL_TIM_ConfigClockSource+0xe0>
 8008d0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d10:	d067      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d16:	d06d      	beq.n	8008df4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008d18:	e06d      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8008d1a:	4a3e      	ldr	r2, [pc, #248]	; (8008e14 <HAL_TIM_ConfigClockSource+0x198>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d060      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008d20:	4a3d      	ldr	r2, [pc, #244]	; (8008e18 <HAL_TIM_ConfigClockSource+0x19c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d05d      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
 8008d26:	4a3d      	ldr	r2, [pc, #244]	; (8008e1c <HAL_TIM_ConfigClockSource+0x1a0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d05a      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8008d2c:	e063      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6899      	ldr	r1, [r3, #8]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f000 fca3 	bl	8009688 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	609a      	str	r2, [r3, #8]
      break;
 8008d5a:	e04c      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6899      	ldr	r1, [r3, #8]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f000 fc8c 	bl	8009688 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d7e:	609a      	str	r2, [r3, #8]
      break;
 8008d80:	e039      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6859      	ldr	r1, [r3, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f000 fbfe 	bl	8009590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2150      	movs	r1, #80	; 0x50
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fc57 	bl	800964e <TIM_ITRx_SetConfig>
      break;
 8008da0:	e029      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 fc1d 	bl	80095ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2160      	movs	r1, #96	; 0x60
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fc47 	bl	800964e <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e019      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 fbde 	bl	8009590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2140      	movs	r1, #64	; 0x40
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fc37 	bl	800964e <TIM_ITRx_SetConfig>
      break;
 8008de0:	e009      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f000 fc2e 	bl	800964e <TIM_ITRx_SetConfig>
        break;
 8008df2:	e000      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8008df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	00100020 	.word	0x00100020
 8008e14:	00100040 	.word	0x00100040
 8008e18:	00100070 	.word	0x00100070
 8008e1c:	00100030 	.word	0x00100030

08008e20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a3c      	ldr	r2, [pc, #240]	; (8008f88 <TIM_Base_SetConfig+0x104>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00f      	beq.n	8008ebc <TIM_Base_SetConfig+0x38>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea2:	d00b      	beq.n	8008ebc <TIM_Base_SetConfig+0x38>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a39      	ldr	r2, [pc, #228]	; (8008f8c <TIM_Base_SetConfig+0x108>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d007      	beq.n	8008ebc <TIM_Base_SetConfig+0x38>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a38      	ldr	r2, [pc, #224]	; (8008f90 <TIM_Base_SetConfig+0x10c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_Base_SetConfig+0x38>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a37      	ldr	r2, [pc, #220]	; (8008f94 <TIM_Base_SetConfig+0x110>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d108      	bne.n	8008ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a2d      	ldr	r2, [pc, #180]	; (8008f88 <TIM_Base_SetConfig+0x104>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d01b      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008edc:	d017      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <TIM_Base_SetConfig+0x108>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d013      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a29      	ldr	r2, [pc, #164]	; (8008f90 <TIM_Base_SetConfig+0x10c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00f      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a28      	ldr	r2, [pc, #160]	; (8008f94 <TIM_Base_SetConfig+0x110>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00b      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a27      	ldr	r2, [pc, #156]	; (8008f98 <TIM_Base_SetConfig+0x114>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d007      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a26      	ldr	r2, [pc, #152]	; (8008f9c <TIM_Base_SetConfig+0x118>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d003      	beq.n	8008f0e <TIM_Base_SetConfig+0x8a>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <TIM_Base_SetConfig+0x11c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d108      	bne.n	8008f20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a10      	ldr	r2, [pc, #64]	; (8008f88 <TIM_Base_SetConfig+0x104>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00f      	beq.n	8008f6c <TIM_Base_SetConfig+0xe8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a11      	ldr	r2, [pc, #68]	; (8008f94 <TIM_Base_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00b      	beq.n	8008f6c <TIM_Base_SetConfig+0xe8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a10      	ldr	r2, [pc, #64]	; (8008f98 <TIM_Base_SetConfig+0x114>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_Base_SetConfig+0xe8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0f      	ldr	r2, [pc, #60]	; (8008f9c <TIM_Base_SetConfig+0x118>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_Base_SetConfig+0xe8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a0e      	ldr	r2, [pc, #56]	; (8008fa0 <TIM_Base_SetConfig+0x11c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d103      	bne.n	8008f74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	615a      	str	r2, [r3, #20]
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40012c00 	.word	0x40012c00
 8008f8c:	40000400 	.word	0x40000400
 8008f90:	40000800 	.word	0x40000800
 8008f94:	40013400 	.word	0x40013400
 8008f98:	40014000 	.word	0x40014000
 8008f9c:	40014400 	.word	0x40014400
 8008fa0:	40014800 	.word	0x40014800

08008fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f023 0201 	bic.w	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0303 	bic.w	r3, r3, #3
 8008fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f023 0302 	bic.w	r3, r3, #2
 8008ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a2c      	ldr	r2, [pc, #176]	; (80090b0 <TIM_OC1_SetConfig+0x10c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00f      	beq.n	8009024 <TIM_OC1_SetConfig+0x80>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a2b      	ldr	r2, [pc, #172]	; (80090b4 <TIM_OC1_SetConfig+0x110>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00b      	beq.n	8009024 <TIM_OC1_SetConfig+0x80>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a2a      	ldr	r2, [pc, #168]	; (80090b8 <TIM_OC1_SetConfig+0x114>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <TIM_OC1_SetConfig+0x80>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a29      	ldr	r2, [pc, #164]	; (80090bc <TIM_OC1_SetConfig+0x118>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <TIM_OC1_SetConfig+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a28      	ldr	r2, [pc, #160]	; (80090c0 <TIM_OC1_SetConfig+0x11c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d10c      	bne.n	800903e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f023 0308 	bic.w	r3, r3, #8
 800902a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f023 0304 	bic.w	r3, r3, #4
 800903c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1b      	ldr	r2, [pc, #108]	; (80090b0 <TIM_OC1_SetConfig+0x10c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <TIM_OC1_SetConfig+0xc2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1a      	ldr	r2, [pc, #104]	; (80090b4 <TIM_OC1_SetConfig+0x110>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00b      	beq.n	8009066 <TIM_OC1_SetConfig+0xc2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a19      	ldr	r2, [pc, #100]	; (80090b8 <TIM_OC1_SetConfig+0x114>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d007      	beq.n	8009066 <TIM_OC1_SetConfig+0xc2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a18      	ldr	r2, [pc, #96]	; (80090bc <TIM_OC1_SetConfig+0x118>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC1_SetConfig+0xc2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a17      	ldr	r2, [pc, #92]	; (80090c0 <TIM_OC1_SetConfig+0x11c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d111      	bne.n	800908a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	4313      	orrs	r3, r2
 800907e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	621a      	str	r2, [r3, #32]
}
 80090a4:	bf00      	nop
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40013400 	.word	0x40013400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800

080090c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f023 0210 	bic.w	r2, r3, #16
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	021b      	lsls	r3, r3, #8
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4313      	orrs	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f023 0320 	bic.w	r3, r3, #32
 8009112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4313      	orrs	r3, r2
 800911e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a28      	ldr	r2, [pc, #160]	; (80091c4 <TIM_OC2_SetConfig+0x100>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d003      	beq.n	8009130 <TIM_OC2_SetConfig+0x6c>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a27      	ldr	r2, [pc, #156]	; (80091c8 <TIM_OC2_SetConfig+0x104>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d10d      	bne.n	800914c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800914a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <TIM_OC2_SetConfig+0x100>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00f      	beq.n	8009174 <TIM_OC2_SetConfig+0xb0>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <TIM_OC2_SetConfig+0x104>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d00b      	beq.n	8009174 <TIM_OC2_SetConfig+0xb0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <TIM_OC2_SetConfig+0x108>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d007      	beq.n	8009174 <TIM_OC2_SetConfig+0xb0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <TIM_OC2_SetConfig+0x10c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <TIM_OC2_SetConfig+0xb0>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <TIM_OC2_SetConfig+0x110>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d113      	bne.n	800919c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800917a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	4313      	orrs	r3, r2
 800918e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	621a      	str	r2, [r3, #32]
}
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40013400 	.word	0x40013400
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40014400 	.word	0x40014400
 80091d4:	40014800 	.word	0x40014800

080091d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0303 	bic.w	r3, r3, #3
 8009212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a27      	ldr	r2, [pc, #156]	; (80092d4 <TIM_OC3_SetConfig+0xfc>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d003      	beq.n	8009242 <TIM_OC3_SetConfig+0x6a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a26      	ldr	r2, [pc, #152]	; (80092d8 <TIM_OC3_SetConfig+0x100>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d10d      	bne.n	800925e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	021b      	lsls	r3, r3, #8
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800925c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a1c      	ldr	r2, [pc, #112]	; (80092d4 <TIM_OC3_SetConfig+0xfc>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00f      	beq.n	8009286 <TIM_OC3_SetConfig+0xae>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a1b      	ldr	r2, [pc, #108]	; (80092d8 <TIM_OC3_SetConfig+0x100>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00b      	beq.n	8009286 <TIM_OC3_SetConfig+0xae>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a1a      	ldr	r2, [pc, #104]	; (80092dc <TIM_OC3_SetConfig+0x104>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d007      	beq.n	8009286 <TIM_OC3_SetConfig+0xae>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a19      	ldr	r2, [pc, #100]	; (80092e0 <TIM_OC3_SetConfig+0x108>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d003      	beq.n	8009286 <TIM_OC3_SetConfig+0xae>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a18      	ldr	r2, [pc, #96]	; (80092e4 <TIM_OC3_SetConfig+0x10c>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d113      	bne.n	80092ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	621a      	str	r2, [r3, #32]
}
 80092c8:	bf00      	nop
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	40012c00 	.word	0x40012c00
 80092d8:	40013400 	.word	0x40013400
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800

080092e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800931a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	021b      	lsls	r3, r3, #8
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4313      	orrs	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	031b      	lsls	r3, r3, #12
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4313      	orrs	r3, r2
 8009342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a28      	ldr	r2, [pc, #160]	; (80093e8 <TIM_OC4_SetConfig+0x100>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d003      	beq.n	8009354 <TIM_OC4_SetConfig+0x6c>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a27      	ldr	r2, [pc, #156]	; (80093ec <TIM_OC4_SetConfig+0x104>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d10d      	bne.n	8009370 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800935a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800936e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a1d      	ldr	r2, [pc, #116]	; (80093e8 <TIM_OC4_SetConfig+0x100>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00f      	beq.n	8009398 <TIM_OC4_SetConfig+0xb0>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a1c      	ldr	r2, [pc, #112]	; (80093ec <TIM_OC4_SetConfig+0x104>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00b      	beq.n	8009398 <TIM_OC4_SetConfig+0xb0>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a1b      	ldr	r2, [pc, #108]	; (80093f0 <TIM_OC4_SetConfig+0x108>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_OC4_SetConfig+0xb0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a1a      	ldr	r2, [pc, #104]	; (80093f4 <TIM_OC4_SetConfig+0x10c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC4_SetConfig+0xb0>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a19      	ldr	r2, [pc, #100]	; (80093f8 <TIM_OC4_SetConfig+0x110>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d113      	bne.n	80093c0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800939e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	019b      	lsls	r3, r3, #6
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	019b      	lsls	r3, r3, #6
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	621a      	str	r2, [r3, #32]
}
 80093da:	bf00      	nop
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	40012c00 	.word	0x40012c00
 80093ec:	40013400 	.word	0x40013400
 80093f0:	40014000 	.word	0x40014000
 80093f4:	40014400 	.word	0x40014400
 80093f8:	40014800 	.word	0x40014800

080093fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800942a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800942e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	4313      	orrs	r3, r2
 8009438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009440:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	041b      	lsls	r3, r3, #16
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a17      	ldr	r2, [pc, #92]	; (80094b0 <TIM_OC5_SetConfig+0xb4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00f      	beq.n	8009476 <TIM_OC5_SetConfig+0x7a>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a16      	ldr	r2, [pc, #88]	; (80094b4 <TIM_OC5_SetConfig+0xb8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00b      	beq.n	8009476 <TIM_OC5_SetConfig+0x7a>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a15      	ldr	r2, [pc, #84]	; (80094b8 <TIM_OC5_SetConfig+0xbc>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d007      	beq.n	8009476 <TIM_OC5_SetConfig+0x7a>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a14      	ldr	r2, [pc, #80]	; (80094bc <TIM_OC5_SetConfig+0xc0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d003      	beq.n	8009476 <TIM_OC5_SetConfig+0x7a>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a13      	ldr	r2, [pc, #76]	; (80094c0 <TIM_OC5_SetConfig+0xc4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d109      	bne.n	800948a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800947c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	021b      	lsls	r3, r3, #8
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	4313      	orrs	r3, r2
 8009488:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	621a      	str	r2, [r3, #32]
}
 80094a4:	bf00      	nop
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	40012c00 	.word	0x40012c00
 80094b4:	40013400 	.word	0x40013400
 80094b8:	40014000 	.word	0x40014000
 80094bc:	40014400 	.word	0x40014400
 80094c0:	40014800 	.word	0x40014800

080094c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800950a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	051b      	lsls	r3, r3, #20
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	4313      	orrs	r3, r2
 8009516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a18      	ldr	r2, [pc, #96]	; (800957c <TIM_OC6_SetConfig+0xb8>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00f      	beq.n	8009540 <TIM_OC6_SetConfig+0x7c>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a17      	ldr	r2, [pc, #92]	; (8009580 <TIM_OC6_SetConfig+0xbc>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00b      	beq.n	8009540 <TIM_OC6_SetConfig+0x7c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a16      	ldr	r2, [pc, #88]	; (8009584 <TIM_OC6_SetConfig+0xc0>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <TIM_OC6_SetConfig+0x7c>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a15      	ldr	r2, [pc, #84]	; (8009588 <TIM_OC6_SetConfig+0xc4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d003      	beq.n	8009540 <TIM_OC6_SetConfig+0x7c>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a14      	ldr	r2, [pc, #80]	; (800958c <TIM_OC6_SetConfig+0xc8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d109      	bne.n	8009554 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009546:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	029b      	lsls	r3, r3, #10
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	621a      	str	r2, [r3, #32]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40012c00 	.word	0x40012c00
 8009580:	40013400 	.word	0x40013400
 8009584:	40014000 	.word	0x40014000
 8009588:	40014400 	.word	0x40014400
 800958c:	40014800 	.word	0x40014800

08009590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	f023 0201 	bic.w	r2, r3, #1
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f023 030a 	bic.w	r3, r3, #10
 80095cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	621a      	str	r2, [r3, #32]
}
 80095e2:	bf00      	nop
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b087      	sub	sp, #28
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f023 0210 	bic.w	r2, r3, #16
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	031b      	lsls	r3, r3, #12
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800962a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	621a      	str	r2, [r3, #32]
}
 8009642:	bf00      	nop
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4313      	orrs	r3, r2
 8009670:	f043 0307 	orr.w	r3, r3, #7
 8009674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	609a      	str	r2, [r3, #8]
}
 800967c:	bf00      	nop
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	021a      	lsls	r2, r3, #8
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	431a      	orrs	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	609a      	str	r2, [r3, #8]
}
 80096bc:	bf00      	nop
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f003 031f 	and.w	r3, r3, #31
 80096da:	2201      	movs	r2, #1
 80096dc:	fa02 f303 	lsl.w	r3, r2, r3
 80096e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	43db      	mvns	r3, r3
 80096ea:	401a      	ands	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f003 031f 	and.w	r3, r3, #31
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009700:	431a      	orrs	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	621a      	str	r2, [r3, #32]
}
 8009706:	bf00      	nop
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009728:	2302      	movs	r3, #2
 800972a:	e065      	b.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a2c      	ldr	r2, [pc, #176]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d004      	beq.n	8009760 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a2b      	ldr	r2, [pc, #172]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d108      	bne.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009766:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1b      	ldr	r2, [pc, #108]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d018      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a2:	d013      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a18      	ldr	r2, [pc, #96]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d00e      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a17      	ldr	r2, [pc, #92]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d009      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a12      	ldr	r2, [pc, #72]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d004      	beq.n	80097cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a13      	ldr	r2, [pc, #76]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d10c      	bne.n	80097e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40013400 	.word	0x40013400
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40014000 	.word	0x40014000

08009818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e042      	b.n	800993c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fa fd63 	bl	8004394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2224      	movs	r2, #36	; 0x24
 80098d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 0201 	bic.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fad2 	bl	8009e90 <UART_SetConfig>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e022      	b.n	800993c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fd6e 	bl	800a3e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fdf5 	bl	800a524 <UART_CheckIdleState>
 800993a:	4603      	mov	r3, r0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	4613      	mov	r3, r2
 8009950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009958:	2b20      	cmp	r3, #32
 800995a:	d168      	bne.n	8009a2e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <HAL_UART_Transmit_DMA+0x24>
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e061      	b.n	8009a30 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009972:	2b01      	cmp	r3, #1
 8009974:	d101      	bne.n	800997a <HAL_UART_Transmit_DMA+0x36>
 8009976:	2302      	movs	r3, #2
 8009978:	e05a      	b.n	8009a30 <HAL_UART_Transmit_DMA+0xec>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	88fa      	ldrh	r2, [r7, #6]
 800998c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	88fa      	ldrh	r2, [r7, #6]
 8009994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2221      	movs	r2, #33	; 0x21
 80099a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02c      	beq.n	8009a0a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b4:	4a20      	ldr	r2, [pc, #128]	; (8009a38 <HAL_UART_Transmit_DMA+0xf4>)
 80099b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099bc:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <HAL_UART_Transmit_DMA+0xf8>)
 80099be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c4:	4a1e      	ldr	r2, [pc, #120]	; (8009a40 <HAL_UART_Transmit_DMA+0xfc>)
 80099c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099cc:	2200      	movs	r2, #0
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d8:	4619      	mov	r1, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3328      	adds	r3, #40	; 0x28
 80099e0:	461a      	mov	r2, r3
 80099e2:	88fb      	ldrh	r3, [r7, #6]
 80099e4:	f7fc fd2c 	bl	8006440 <HAL_DMA_Start_IT>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00d      	beq.n	8009a0a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2210      	movs	r2, #16
 80099f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e012      	b.n	8009a30 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2240      	movs	r2, #64	; 0x40
 8009a10:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a28:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e000      	b.n	8009a30 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009a2e:	2302      	movs	r3, #2
  }
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	0800a737 	.word	0x0800a737
 8009a3c:	0800a78b 	.word	0x0800a78b
 8009a40:	0800a82d 	.word	0x0800a82d

08009a44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d170      	bne.n	8009b3e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <HAL_UART_Receive_DMA+0x24>
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e069      	b.n	8009b40 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d101      	bne.n	8009a7a <HAL_UART_Receive_DMA+0x36>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e062      	b.n	8009b40 <HAL_UART_Receive_DMA+0xfc>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	88fa      	ldrh	r2, [r7, #6]
 8009a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2222      	movs	r2, #34	; 0x22
 8009a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d02c      	beq.n	8009b02 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aac:	4a26      	ldr	r2, [pc, #152]	; (8009b48 <HAL_UART_Receive_DMA+0x104>)
 8009aae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab4:	4a25      	ldr	r2, [pc, #148]	; (8009b4c <HAL_UART_Receive_DMA+0x108>)
 8009ab6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009abc:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <HAL_UART_Receive_DMA+0x10c>)
 8009abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad8:	461a      	mov	r2, r3
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	f7fc fcb0 	bl	8006440 <HAL_DMA_Start_IT>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00d      	beq.n	8009b02 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2210      	movs	r2, #16
 8009aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e01e      	b.n	8009b40 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b18:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f042 0201 	orr.w	r2, r2, #1
 8009b28:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b38:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e000      	b.n	8009b40 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8009b3e:	2302      	movs	r3, #2
  }
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	0800a7a7 	.word	0x0800a7a7
 8009b4c:	0800a811 	.word	0x0800a811
 8009b50:	0800a82d 	.word	0x0800a82d

08009b54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	f640 030f 	movw	r3, #2063	; 0x80f
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d118      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f003 0320 	and.w	r3, r3, #32
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d013      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 8145 	beq.w	8009e36 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
      }
      return;
 8009bb4:	e13f      	b.n	8009e36 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 80e8 	beq.w	8009d8e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4ba1      	ldr	r3, [pc, #644]	; (8009e48 <HAL_UART_IRQHandler+0x2f4>)
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	4ba0      	ldr	r3, [pc, #640]	; (8009e4c <HAL_UART_IRQHandler+0x2f8>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80dd 	beq.w	8009d8e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d010      	beq.n	8009c00 <HAL_UART_IRQHandler+0xac>
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2201      	movs	r2, #1
 8009bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf6:	f043 0201 	orr.w	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d010      	beq.n	8009c2c <HAL_UART_IRQHandler+0xd8>
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c22:	f043 0204 	orr.w	r2, r3, #4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	f003 0304 	and.w	r3, r3, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d010      	beq.n	8009c58 <HAL_UART_IRQHandler+0x104>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2204      	movs	r2, #4
 8009c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4e:	f043 0202 	orr.w	r2, r3, #2
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f003 0308 	and.w	r3, r3, #8
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d015      	beq.n	8009c8e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	f003 0320 	and.w	r3, r3, #32
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c6c:	697a      	ldr	r2, [r7, #20]
 8009c6e:	4b76      	ldr	r3, [pc, #472]	; (8009e48 <HAL_UART_IRQHandler+0x2f4>)
 8009c70:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c84:	f043 0208 	orr.w	r2, r3, #8
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d011      	beq.n	8009cbc <HAL_UART_IRQHandler+0x168>
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00c      	beq.n	8009cbc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb2:	f043 0220 	orr.w	r2, r3, #32
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 80b9 	beq.w	8009e3a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d011      	beq.n	8009cf6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	f003 0320 	and.w	r3, r3, #32
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cfc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d08:	2b40      	cmp	r3, #64	; 0x40
 8009d0a:	d004      	beq.n	8009d16 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d031      	beq.n	8009d7a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fcea 	bl	800a6f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d26:	2b40      	cmp	r3, #64	; 0x40
 8009d28:	d123      	bne.n	8009d72 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d013      	beq.n	8009d6a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d46:	4a42      	ldr	r2, [pc, #264]	; (8009e50 <HAL_UART_IRQHandler+0x2fc>)
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fc fbf1 	bl	8006536 <HAL_DMA_Abort_IT>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d017      	beq.n	8009d8a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d68:	e00f      	b.n	8009d8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7f9 fec0 	bl	8003af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d70:	e00b      	b.n	8009d8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7f9 febc 	bl	8003af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d78:	e007      	b.n	8009d8a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7f9 feb8 	bl	8003af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009d88:	e057      	b.n	8009e3a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8a:	bf00      	nop
    return;
 8009d8c:	e055      	b.n	8009e3a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00d      	beq.n	8009db4 <HAL_UART_IRQHandler+0x260>
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d008      	beq.n	8009db4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fdad 	bl	800a90c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009db2:	e045      	b.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d012      	beq.n	8009de4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d008      	beq.n	8009de4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d031      	beq.n	8009e3e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	4798      	blx	r3
    }
    return;
 8009de2:	e02c      	b.n	8009e3e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <HAL_UART_IRQHandler+0x2ac>
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fd6d 	bl	800a8d8 <UART_EndTransmit_IT>
    return;
 8009dfe:	e01f      	b.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d008      	beq.n	8009e1c <HAL_UART_IRQHandler+0x2c8>
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fd8d 	bl	800a934 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e1a:	e011      	b.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00c      	beq.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	da09      	bge.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fd77 	bl	800a920 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e32:	bf00      	nop
 8009e34:	e004      	b.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009e36:	bf00      	nop
 8009e38:	e002      	b.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009e3e:	bf00      	nop
  }
}
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	10000001 	.word	0x10000001
 8009e4c:	04000120 	.word	0x04000120
 8009e50:	0800a8ad 	.word	0x0800a8ad

08009e54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009e94:	b088      	sub	sp, #32
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	431a      	orrs	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	4bb0      	ldr	r3, [pc, #704]	; (800a188 <UART_SetConfig+0x2f8>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6812      	ldr	r2, [r2, #0]
 8009ece:	69f9      	ldr	r1, [r7, #28]
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4aa5      	ldr	r2, [pc, #660]	; (800a18c <UART_SetConfig+0x2fc>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009f0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6812      	ldr	r2, [r2, #0]
 8009f16:	69f9      	ldr	r1, [r7, #28]
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f22:	f023 010f 	bic.w	r1, r3, #15
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a96      	ldr	r2, [pc, #600]	; (800a190 <UART_SetConfig+0x300>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d121      	bne.n	8009f80 <UART_SetConfig+0xf0>
 8009f3c:	4b95      	ldr	r3, [pc, #596]	; (800a194 <UART_SetConfig+0x304>)
 8009f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d816      	bhi.n	8009f78 <UART_SetConfig+0xe8>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0xc0>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009f61 	.word	0x08009f61
 8009f54:	08009f6d 	.word	0x08009f6d
 8009f58:	08009f67 	.word	0x08009f67
 8009f5c:	08009f73 	.word	0x08009f73
 8009f60:	2301      	movs	r3, #1
 8009f62:	76fb      	strb	r3, [r7, #27]
 8009f64:	e0be      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009f66:	2302      	movs	r3, #2
 8009f68:	76fb      	strb	r3, [r7, #27]
 8009f6a:	e0bb      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	76fb      	strb	r3, [r7, #27]
 8009f70:	e0b8      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009f72:	2308      	movs	r3, #8
 8009f74:	76fb      	strb	r3, [r7, #27]
 8009f76:	e0b5      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	76fb      	strb	r3, [r7, #27]
 8009f7c:	bf00      	nop
 8009f7e:	e0b1      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a84      	ldr	r2, [pc, #528]	; (800a198 <UART_SetConfig+0x308>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d134      	bne.n	8009ff4 <UART_SetConfig+0x164>
 8009f8a:	4b82      	ldr	r3, [pc, #520]	; (800a194 <UART_SetConfig+0x304>)
 8009f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f90:	f003 030c 	and.w	r3, r3, #12
 8009f94:	2b0c      	cmp	r3, #12
 8009f96:	d829      	bhi.n	8009fec <UART_SetConfig+0x15c>
 8009f98:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <UART_SetConfig+0x110>)
 8009f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9e:	bf00      	nop
 8009fa0:	08009fd5 	.word	0x08009fd5
 8009fa4:	08009fed 	.word	0x08009fed
 8009fa8:	08009fed 	.word	0x08009fed
 8009fac:	08009fed 	.word	0x08009fed
 8009fb0:	08009fe1 	.word	0x08009fe1
 8009fb4:	08009fed 	.word	0x08009fed
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	08009fed 	.word	0x08009fed
 8009fc0:	08009fdb 	.word	0x08009fdb
 8009fc4:	08009fed 	.word	0x08009fed
 8009fc8:	08009fed 	.word	0x08009fed
 8009fcc:	08009fed 	.word	0x08009fed
 8009fd0:	08009fe7 	.word	0x08009fe7
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	76fb      	strb	r3, [r7, #27]
 8009fd8:	e084      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	76fb      	strb	r3, [r7, #27]
 8009fde:	e081      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	76fb      	strb	r3, [r7, #27]
 8009fe4:	e07e      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	76fb      	strb	r3, [r7, #27]
 8009fea:	e07b      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009fec:	2310      	movs	r3, #16
 8009fee:	76fb      	strb	r3, [r7, #27]
 8009ff0:	bf00      	nop
 8009ff2:	e077      	b.n	800a0e4 <UART_SetConfig+0x254>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a68      	ldr	r2, [pc, #416]	; (800a19c <UART_SetConfig+0x30c>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d120      	bne.n	800a040 <UART_SetConfig+0x1b0>
 8009ffe:	4b65      	ldr	r3, [pc, #404]	; (800a194 <UART_SetConfig+0x304>)
 800a000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a004:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d00f      	beq.n	800a02c <UART_SetConfig+0x19c>
 800a00c:	2b10      	cmp	r3, #16
 800a00e:	d802      	bhi.n	800a016 <UART_SetConfig+0x186>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <UART_SetConfig+0x190>
 800a014:	e010      	b.n	800a038 <UART_SetConfig+0x1a8>
 800a016:	2b20      	cmp	r3, #32
 800a018:	d005      	beq.n	800a026 <UART_SetConfig+0x196>
 800a01a:	2b30      	cmp	r3, #48	; 0x30
 800a01c:	d009      	beq.n	800a032 <UART_SetConfig+0x1a2>
 800a01e:	e00b      	b.n	800a038 <UART_SetConfig+0x1a8>
 800a020:	2300      	movs	r3, #0
 800a022:	76fb      	strb	r3, [r7, #27]
 800a024:	e05e      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a026:	2302      	movs	r3, #2
 800a028:	76fb      	strb	r3, [r7, #27]
 800a02a:	e05b      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a02c:	2304      	movs	r3, #4
 800a02e:	76fb      	strb	r3, [r7, #27]
 800a030:	e058      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a032:	2308      	movs	r3, #8
 800a034:	76fb      	strb	r3, [r7, #27]
 800a036:	e055      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a038:	2310      	movs	r3, #16
 800a03a:	76fb      	strb	r3, [r7, #27]
 800a03c:	bf00      	nop
 800a03e:	e051      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a56      	ldr	r2, [pc, #344]	; (800a1a0 <UART_SetConfig+0x310>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d120      	bne.n	800a08c <UART_SetConfig+0x1fc>
 800a04a:	4b52      	ldr	r3, [pc, #328]	; (800a194 <UART_SetConfig+0x304>)
 800a04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a050:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a054:	2b40      	cmp	r3, #64	; 0x40
 800a056:	d00f      	beq.n	800a078 <UART_SetConfig+0x1e8>
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d802      	bhi.n	800a062 <UART_SetConfig+0x1d2>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <UART_SetConfig+0x1dc>
 800a060:	e010      	b.n	800a084 <UART_SetConfig+0x1f4>
 800a062:	2b80      	cmp	r3, #128	; 0x80
 800a064:	d005      	beq.n	800a072 <UART_SetConfig+0x1e2>
 800a066:	2bc0      	cmp	r3, #192	; 0xc0
 800a068:	d009      	beq.n	800a07e <UART_SetConfig+0x1ee>
 800a06a:	e00b      	b.n	800a084 <UART_SetConfig+0x1f4>
 800a06c:	2300      	movs	r3, #0
 800a06e:	76fb      	strb	r3, [r7, #27]
 800a070:	e038      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a072:	2302      	movs	r3, #2
 800a074:	76fb      	strb	r3, [r7, #27]
 800a076:	e035      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a078:	2304      	movs	r3, #4
 800a07a:	76fb      	strb	r3, [r7, #27]
 800a07c:	e032      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a07e:	2308      	movs	r3, #8
 800a080:	76fb      	strb	r3, [r7, #27]
 800a082:	e02f      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a084:	2310      	movs	r3, #16
 800a086:	76fb      	strb	r3, [r7, #27]
 800a088:	bf00      	nop
 800a08a:	e02b      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a3e      	ldr	r2, [pc, #248]	; (800a18c <UART_SetConfig+0x2fc>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d124      	bne.n	800a0e0 <UART_SetConfig+0x250>
 800a096:	4b3f      	ldr	r3, [pc, #252]	; (800a194 <UART_SetConfig+0x304>)
 800a098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a4:	d012      	beq.n	800a0cc <UART_SetConfig+0x23c>
 800a0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0aa:	d802      	bhi.n	800a0b2 <UART_SetConfig+0x222>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <UART_SetConfig+0x230>
 800a0b0:	e012      	b.n	800a0d8 <UART_SetConfig+0x248>
 800a0b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0b6:	d006      	beq.n	800a0c6 <UART_SetConfig+0x236>
 800a0b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0bc:	d009      	beq.n	800a0d2 <UART_SetConfig+0x242>
 800a0be:	e00b      	b.n	800a0d8 <UART_SetConfig+0x248>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	76fb      	strb	r3, [r7, #27]
 800a0c4:	e00e      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	76fb      	strb	r3, [r7, #27]
 800a0ca:	e00b      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a0cc:	2304      	movs	r3, #4
 800a0ce:	76fb      	strb	r3, [r7, #27]
 800a0d0:	e008      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a0d2:	2308      	movs	r3, #8
 800a0d4:	76fb      	strb	r3, [r7, #27]
 800a0d6:	e005      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	76fb      	strb	r3, [r7, #27]
 800a0dc:	bf00      	nop
 800a0de:	e001      	b.n	800a0e4 <UART_SetConfig+0x254>
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a28      	ldr	r2, [pc, #160]	; (800a18c <UART_SetConfig+0x2fc>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	f040 80a1 	bne.w	800a232 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0f0:	7efb      	ldrb	r3, [r7, #27]
 800a0f2:	2b08      	cmp	r3, #8
 800a0f4:	d823      	bhi.n	800a13e <UART_SetConfig+0x2ae>
 800a0f6:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <UART_SetConfig+0x26c>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a121 	.word	0x0800a121
 800a100:	0800a13f 	.word	0x0800a13f
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a13f 	.word	0x0800a13f
 800a10c:	0800a12f 	.word	0x0800a12f
 800a110:	0800a13f 	.word	0x0800a13f
 800a114:	0800a13f 	.word	0x0800a13f
 800a118:	0800a13f 	.word	0x0800a13f
 800a11c:	0800a137 	.word	0x0800a137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a120:	f7fd fe58 	bl	8007dd4 <HAL_RCC_GetPCLK1Freq>
 800a124:	6178      	str	r0, [r7, #20]
        break;
 800a126:	e00f      	b.n	800a148 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a128:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <UART_SetConfig+0x314>)
 800a12a:	617b      	str	r3, [r7, #20]
        break;
 800a12c:	e00c      	b.n	800a148 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a12e:	f7fd fde3 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 800a132:	6178      	str	r0, [r7, #20]
        break;
 800a134:	e008      	b.n	800a148 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a13a:	617b      	str	r3, [r7, #20]
        break;
 800a13c:	e004      	b.n	800a148 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	76bb      	strb	r3, [r7, #26]
        break;
 800a146:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 8130 	beq.w	800a3b0 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	4a14      	ldr	r2, [pc, #80]	; (800a1a8 <UART_SetConfig+0x318>)
 800a156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a15a:	461a      	mov	r2, r3
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a162:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	4613      	mov	r3, r2
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	4413      	add	r3, r2
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	429a      	cmp	r2, r3
 800a172:	d305      	bcc.n	800a180 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d915      	bls.n	800a1ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	76bb      	strb	r3, [r7, #26]
 800a184:	e114      	b.n	800a3b0 <UART_SetConfig+0x520>
 800a186:	bf00      	nop
 800a188:	cfff69f3 	.word	0xcfff69f3
 800a18c:	40008000 	.word	0x40008000
 800a190:	40013800 	.word	0x40013800
 800a194:	40021000 	.word	0x40021000
 800a198:	40004400 	.word	0x40004400
 800a19c:	40004800 	.word	0x40004800
 800a1a0:	40004c00 	.word	0x40004c00
 800a1a4:	00f42400 	.word	0x00f42400
 800a1a8:	0800aeec 	.word	0x0800aeec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f04f 0100 	mov.w	r1, #0
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	4a87      	ldr	r2, [pc, #540]	; (800a3d8 <UART_SetConfig+0x548>)
 800a1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	f04f 0400 	mov.w	r4, #0
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4623      	mov	r3, r4
 800a1c8:	f7f6 fc44 	bl	8000a54 <__aeabi_uldivmod>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	f04f 0300 	mov.w	r3, #0
 800a1d8:	f04f 0400 	mov.w	r4, #0
 800a1dc:	0214      	lsls	r4, r2, #8
 800a1de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1e2:	020b      	lsls	r3, r1, #8
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	6852      	ldr	r2, [r2, #4]
 800a1e8:	0852      	lsrs	r2, r2, #1
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	eb13 0b01 	adds.w	fp, r3, r1
 800a1f4:	eb44 0c02 	adc.w	ip, r4, r2
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	4661      	mov	r1, ip
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f04f 0400 	mov.w	r4, #0
 800a204:	461a      	mov	r2, r3
 800a206:	4623      	mov	r3, r4
 800a208:	f7f6 fc24 	bl	8000a54 <__aeabi_uldivmod>
 800a20c:	4603      	mov	r3, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a218:	d308      	bcc.n	800a22c <UART_SetConfig+0x39c>
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a220:	d204      	bcs.n	800a22c <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	e0c1      	b.n	800a3b0 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	76bb      	strb	r3, [r7, #26]
 800a230:	e0be      	b.n	800a3b0 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a23a:	d164      	bne.n	800a306 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 800a23c:	7efb      	ldrb	r3, [r7, #27]
 800a23e:	2b08      	cmp	r3, #8
 800a240:	d827      	bhi.n	800a292 <UART_SetConfig+0x402>
 800a242:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <UART_SetConfig+0x3b8>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a26d 	.word	0x0800a26d
 800a24c:	0800a275 	.word	0x0800a275
 800a250:	0800a27d 	.word	0x0800a27d
 800a254:	0800a293 	.word	0x0800a293
 800a258:	0800a283 	.word	0x0800a283
 800a25c:	0800a293 	.word	0x0800a293
 800a260:	0800a293 	.word	0x0800a293
 800a264:	0800a293 	.word	0x0800a293
 800a268:	0800a28b 	.word	0x0800a28b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a26c:	f7fd fdb2 	bl	8007dd4 <HAL_RCC_GetPCLK1Freq>
 800a270:	6178      	str	r0, [r7, #20]
        break;
 800a272:	e013      	b.n	800a29c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a274:	f7fd fdc4 	bl	8007e00 <HAL_RCC_GetPCLK2Freq>
 800a278:	6178      	str	r0, [r7, #20]
        break;
 800a27a:	e00f      	b.n	800a29c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a27c:	4b57      	ldr	r3, [pc, #348]	; (800a3dc <UART_SetConfig+0x54c>)
 800a27e:	617b      	str	r3, [r7, #20]
        break;
 800a280:	e00c      	b.n	800a29c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a282:	f7fd fd39 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 800a286:	6178      	str	r0, [r7, #20]
        break;
 800a288:	e008      	b.n	800a29c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a28a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a28e:	617b      	str	r3, [r7, #20]
        break;
 800a290:	e004      	b.n	800a29c <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	76bb      	strb	r3, [r7, #26]
        break;
 800a29a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 8086 	beq.w	800a3b0 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	4a4b      	ldr	r2, [pc, #300]	; (800a3d8 <UART_SetConfig+0x548>)
 800a2aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b6:	005a      	lsls	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	441a      	add	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b0f      	cmp	r3, #15
 800a2d0:	d916      	bls.n	800a300 <UART_SetConfig+0x470>
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d8:	d212      	bcs.n	800a300 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	f023 030f 	bic.w	r3, r3, #15
 800a2e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	085b      	lsrs	r3, r3, #1
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	89fb      	ldrh	r3, [r7, #14]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	89fa      	ldrh	r2, [r7, #14]
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	e057      	b.n	800a3b0 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	76bb      	strb	r3, [r7, #26]
 800a304:	e054      	b.n	800a3b0 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a306:	7efb      	ldrb	r3, [r7, #27]
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d828      	bhi.n	800a35e <UART_SetConfig+0x4ce>
 800a30c:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <UART_SetConfig+0x484>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a339 	.word	0x0800a339
 800a318:	0800a341 	.word	0x0800a341
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	0800a35f 	.word	0x0800a35f
 800a324:	0800a34f 	.word	0x0800a34f
 800a328:	0800a35f 	.word	0x0800a35f
 800a32c:	0800a35f 	.word	0x0800a35f
 800a330:	0800a35f 	.word	0x0800a35f
 800a334:	0800a357 	.word	0x0800a357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a338:	f7fd fd4c 	bl	8007dd4 <HAL_RCC_GetPCLK1Freq>
 800a33c:	6178      	str	r0, [r7, #20]
        break;
 800a33e:	e013      	b.n	800a368 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a340:	f7fd fd5e 	bl	8007e00 <HAL_RCC_GetPCLK2Freq>
 800a344:	6178      	str	r0, [r7, #20]
        break;
 800a346:	e00f      	b.n	800a368 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a348:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <UART_SetConfig+0x54c>)
 800a34a:	617b      	str	r3, [r7, #20]
        break;
 800a34c:	e00c      	b.n	800a368 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a34e:	f7fd fcd3 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 800a352:	6178      	str	r0, [r7, #20]
        break;
 800a354:	e008      	b.n	800a368 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a35a:	617b      	str	r3, [r7, #20]
        break;
 800a35c:	e004      	b.n	800a368 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	76bb      	strb	r3, [r7, #26]
        break;
 800a366:	bf00      	nop
    }

    if (pclk != 0U)
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d020      	beq.n	800a3b0 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	4a19      	ldr	r2, [pc, #100]	; (800a3d8 <UART_SetConfig+0x548>)
 800a374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a378:	461a      	mov	r2, r3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	085b      	lsrs	r3, r3, #1
 800a386:	441a      	add	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a390:	b29b      	uxth	r3, r3
 800a392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2b0f      	cmp	r3, #15
 800a398:	d908      	bls.n	800a3ac <UART_SetConfig+0x51c>
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a0:	d204      	bcs.n	800a3ac <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	60da      	str	r2, [r3, #12]
 800a3aa:	e001      	b.n	800a3b0 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a3cc:	7ebb      	ldrb	r3, [r7, #26]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3720      	adds	r7, #32
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a3d8:	0800aeec 	.word	0x0800aeec
 800a3dc:	00f42400 	.word	0x00f42400

0800a3e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40e:	f003 0302 	and.w	r3, r3, #2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00a      	beq.n	800a492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01a      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4de:	d10a      	bne.n	800a4f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	605a      	str	r2, [r3, #4]
  }
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af02      	add	r7, sp, #8
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a534:	f7fa f8fc 	bl	8004730 <HAL_GetTick>
 800a538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b08      	cmp	r3, #8
 800a546:	d10e      	bne.n	800a566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f82c 	bl	800a5b4 <UART_WaitOnFlagUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e022      	b.n	800a5ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b04      	cmp	r3, #4
 800a572:	d10e      	bne.n	800a592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f816 	bl	800a5b4 <UART_WaitOnFlagUntilTimeout>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e00c      	b.n	800a5ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c4:	e062      	b.n	800a68c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d05e      	beq.n	800a68c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ce:	f7fa f8af 	bl	8004730 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d302      	bcc.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11d      	bne.n	800a620 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0201 	bic.w	r2, r2, #1
 800a602:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2220      	movs	r2, #32
 800a610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e045      	b.n	800a6ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d02e      	beq.n	800a68c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a63c:	d126      	bne.n	800a68c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a646:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a656:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689a      	ldr	r2, [r3, #8]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0201 	bic.w	r2, r2, #1
 800a666:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2220      	movs	r2, #32
 800a674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2220      	movs	r2, #32
 800a67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e00f      	b.n	800a6ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69da      	ldr	r2, [r3, #28]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	4013      	ands	r3, r2
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	429a      	cmp	r2, r3
 800a69a:	bf0c      	ite	eq
 800a69c:	2301      	moveq	r3, #1
 800a69e:	2300      	movne	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d08d      	beq.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a6ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a6da:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a706:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a716:	f023 0301 	bic.w	r3, r3, #1
 800a71a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800a72a:	bf00      	nop
 800a72c:	370c      	adds	r7, #12
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d114      	bne.n	800a77c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a768:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a778:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a77a:	e002      	b.n	800a782 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7f9 fbc5 	bl	8003f0c <HAL_UART_TxCpltCallback>
}
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a796:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff fb5b 	bl	8009e54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d11f      	bne.n	800a802 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0201 	bic.w	r2, r2, #1
 800a7e8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7f8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fb30 	bl	8009e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7ff fb2c 	bl	8009e7c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a824:	bf00      	nop
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a838:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a840:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a848:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a854:	2b80      	cmp	r3, #128	; 0x80
 800a856:	d109      	bne.n	800a86c <UART_DMAError+0x40>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2b21      	cmp	r3, #33	; 0x21
 800a85c:	d106      	bne.n	800a86c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2200      	movs	r2, #0
 800a862:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a866:	6978      	ldr	r0, [r7, #20]
 800a868:	f7ff ff24 	bl	800a6b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d109      	bne.n	800a88e <UART_DMAError+0x62>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b22      	cmp	r3, #34	; 0x22
 800a87e:	d106      	bne.n	800a88e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2200      	movs	r2, #0
 800a884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a888:	6978      	ldr	r0, [r7, #20]
 800a88a:	f7ff ff31 	bl	800a6f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a894:	f043 0210 	orr.w	r2, r3, #16
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a89e:	6978      	ldr	r0, [r7, #20]
 800a8a0:	f7f9 f926 	bl	8003af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8a4:	bf00      	nop
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7f9 f910 	bl	8003af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d0:	bf00      	nop
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7f9 fb04 	bl	8003f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a904:	bf00      	nop
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a956:	2b01      	cmp	r3, #1
 800a958:	d101      	bne.n	800a95e <HAL_UARTEx_DisableFifoMode+0x16>
 800a95a:	2302      	movs	r3, #2
 800a95c:	e027      	b.n	800a9ae <HAL_UARTEx_DisableFifoMode+0x66>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2224      	movs	r2, #36	; 0x24
 800a96a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0201 	bic.w	r2, r2, #1
 800a984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a98c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e02d      	b.n	800aa2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2224      	movs	r2, #36	; 0x24
 800a9de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0201 	bic.w	r2, r2, #1
 800a9f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f850 	bl	800aab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d101      	bne.n	800aa4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	e02d      	b.n	800aaaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2224      	movs	r2, #36	; 0x24
 800aa5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0201 	bic.w	r2, r2, #1
 800aa74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f812 	bl	800aab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b089      	sub	sp, #36	; 0x24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aabc:	4a2f      	ldr	r2, [pc, #188]	; (800ab7c <UARTEx_SetNbDataToProcess+0xc8>)
 800aabe:	f107 0314 	add.w	r3, r7, #20
 800aac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aac6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aaca:	4a2d      	ldr	r2, [pc, #180]	; (800ab80 <UARTEx_SetNbDataToProcess+0xcc>)
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aad4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d108      	bne.n	800aaf2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aaf0:	e03d      	b.n	800ab6e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aaf2:	2308      	movs	r3, #8
 800aaf4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aaf6:	2308      	movs	r3, #8
 800aaf8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	0e5b      	lsrs	r3, r3, #25
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	0f5b      	lsrs	r3, r3, #29
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab1a:	7fbb      	ldrb	r3, [r7, #30]
 800ab1c:	7f3a      	ldrb	r2, [r7, #28]
 800ab1e:	f107 0120 	add.w	r1, r7, #32
 800ab22:	440a      	add	r2, r1
 800ab24:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab2c:	7f3a      	ldrb	r2, [r7, #28]
 800ab2e:	f107 0120 	add.w	r1, r7, #32
 800ab32:	440a      	add	r2, r1
 800ab34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab44:	7ffb      	ldrb	r3, [r7, #31]
 800ab46:	7f7a      	ldrb	r2, [r7, #29]
 800ab48:	f107 0120 	add.w	r1, r7, #32
 800ab4c:	440a      	add	r2, r1
 800ab4e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab56:	7f7a      	ldrb	r2, [r7, #29]
 800ab58:	f107 0120 	add.w	r1, r7, #32
 800ab5c:	440a      	add	r2, r1
 800ab5e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab6e:	bf00      	nop
 800ab70:	3724      	adds	r7, #36	; 0x24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	0800acc4 	.word	0x0800acc4
 800ab80:	0800accc 	.word	0x0800accc

0800ab84 <__errno>:
 800ab84:	4b01      	ldr	r3, [pc, #4]	; (800ab8c <__errno+0x8>)
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	20000034 	.word	0x20000034

0800ab90 <__libc_init_array>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	4e0d      	ldr	r6, [pc, #52]	; (800abc8 <__libc_init_array+0x38>)
 800ab94:	4c0d      	ldr	r4, [pc, #52]	; (800abcc <__libc_init_array+0x3c>)
 800ab96:	1ba4      	subs	r4, r4, r6
 800ab98:	10a4      	asrs	r4, r4, #2
 800ab9a:	2500      	movs	r5, #0
 800ab9c:	42a5      	cmp	r5, r4
 800ab9e:	d109      	bne.n	800abb4 <__libc_init_array+0x24>
 800aba0:	4e0b      	ldr	r6, [pc, #44]	; (800abd0 <__libc_init_array+0x40>)
 800aba2:	4c0c      	ldr	r4, [pc, #48]	; (800abd4 <__libc_init_array+0x44>)
 800aba4:	f000 f882 	bl	800acac <_init>
 800aba8:	1ba4      	subs	r4, r4, r6
 800abaa:	10a4      	asrs	r4, r4, #2
 800abac:	2500      	movs	r5, #0
 800abae:	42a5      	cmp	r5, r4
 800abb0:	d105      	bne.n	800abbe <__libc_init_array+0x2e>
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abb8:	4798      	blx	r3
 800abba:	3501      	adds	r5, #1
 800abbc:	e7ee      	b.n	800ab9c <__libc_init_array+0xc>
 800abbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abc2:	4798      	blx	r3
 800abc4:	3501      	adds	r5, #1
 800abc6:	e7f2      	b.n	800abae <__libc_init_array+0x1e>
 800abc8:	0800af14 	.word	0x0800af14
 800abcc:	0800af14 	.word	0x0800af14
 800abd0:	0800af14 	.word	0x0800af14
 800abd4:	0800af18 	.word	0x0800af18

0800abd8 <memcpy>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	1e43      	subs	r3, r0, #1
 800abdc:	440a      	add	r2, r1
 800abde:	4291      	cmp	r1, r2
 800abe0:	d100      	bne.n	800abe4 <memcpy+0xc>
 800abe2:	bd10      	pop	{r4, pc}
 800abe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abec:	e7f7      	b.n	800abde <memcpy+0x6>

0800abee <memset>:
 800abee:	4402      	add	r2, r0
 800abf0:	4603      	mov	r3, r0
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d100      	bne.n	800abf8 <memset+0xa>
 800abf6:	4770      	bx	lr
 800abf8:	f803 1b01 	strb.w	r1, [r3], #1
 800abfc:	e7f9      	b.n	800abf2 <memset+0x4>
	...

0800ac00 <sqrtf>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	ed2d 8b02 	vpush	{d8}
 800ac06:	b08a      	sub	sp, #40	; 0x28
 800ac08:	eeb0 8a40 	vmov.f32	s16, s0
 800ac0c:	f000 f848 	bl	800aca0 <__ieee754_sqrtf>
 800ac10:	4b21      	ldr	r3, [pc, #132]	; (800ac98 <sqrtf+0x98>)
 800ac12:	f993 4000 	ldrsb.w	r4, [r3]
 800ac16:	1c63      	adds	r3, r4, #1
 800ac18:	d02c      	beq.n	800ac74 <sqrtf+0x74>
 800ac1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac22:	d627      	bvs.n	800ac74 <sqrtf+0x74>
 800ac24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2c:	d522      	bpl.n	800ac74 <sqrtf+0x74>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	4b1a      	ldr	r3, [pc, #104]	; (800ac9c <sqrtf+0x9c>)
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	ee18 0a10 	vmov	r0, s16
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9308      	str	r3, [sp, #32]
 800ac3e:	f7f5 fc4f 	bl	80004e0 <__aeabi_f2d>
 800ac42:	2200      	movs	r2, #0
 800ac44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	b9ac      	cbnz	r4, 800ac7c <sqrtf+0x7c>
 800ac50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac54:	4668      	mov	r0, sp
 800ac56:	f000 f826 	bl	800aca6 <matherr>
 800ac5a:	b1b8      	cbz	r0, 800ac8c <sqrtf+0x8c>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	b11b      	cbz	r3, 800ac68 <sqrtf+0x68>
 800ac60:	f7ff ff90 	bl	800ab84 <__errno>
 800ac64:	9b08      	ldr	r3, [sp, #32]
 800ac66:	6003      	str	r3, [r0, #0]
 800ac68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac6c:	f7f5 fea2 	bl	80009b4 <__aeabi_d2f>
 800ac70:	ee00 0a10 	vmov	s0, r0
 800ac74:	b00a      	add	sp, #40	; 0x28
 800ac76:	ecbd 8b02 	vpop	{d8}
 800ac7a:	bd10      	pop	{r4, pc}
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4619      	mov	r1, r3
 800ac80:	f7f5 fdb0 	bl	80007e4 <__aeabi_ddiv>
 800ac84:	2c02      	cmp	r4, #2
 800ac86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac8a:	d1e3      	bne.n	800ac54 <sqrtf+0x54>
 800ac8c:	f7ff ff7a 	bl	800ab84 <__errno>
 800ac90:	2321      	movs	r3, #33	; 0x21
 800ac92:	6003      	str	r3, [r0, #0]
 800ac94:	e7e2      	b.n	800ac5c <sqrtf+0x5c>
 800ac96:	bf00      	nop
 800ac98:	20000098 	.word	0x20000098
 800ac9c:	0800af04 	.word	0x0800af04

0800aca0 <__ieee754_sqrtf>:
 800aca0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aca4:	4770      	bx	lr

0800aca6 <matherr>:
 800aca6:	2000      	movs	r0, #0
 800aca8:	4770      	bx	lr
	...

0800acac <_init>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr

0800acb8 <_fini>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	bf00      	nop
 800acbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acbe:	bc08      	pop	{r3}
 800acc0:	469e      	mov	lr, r3
 800acc2:	4770      	bx	lr
